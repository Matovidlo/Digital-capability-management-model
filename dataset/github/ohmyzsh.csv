Issue id,Status,Summary,Issue Type,Created,Author,Resolution,Resolved,Description,Creator,Labels,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary,Comment author,Commentary
9806,OPEN,profile unmatched,Bug,2021-04-10 13:53:53 +0000 UTC,ewelinaewela,Opened,,"Hi,

I see the following message when I open my Terminal (Mac, Big Sur):

/Users/.../.zprofile:6: unmatched '

could not find the solution for zprofile:6: unmatched ' anywhere

Does anybody know what is the reason of this problem?
",,,,,,,,,,,,,,
9796,OPEN,"Getting ""zsh: exec format error:"" after installation of ohmyzsh on mac",Support,2021-04-09 19:54:06 +0000 UTC,laxmikantbpandhare,Opened,,"1. Install Operator-sdk on mac (https://sdk.operatorframework.io/docs/installation/)
2. Try ""operator-sdk version"" command then it will work
3. Now, install ohmyzsh
4. Now try same command ""operator-sdk version"" then it will throw error ""zsh: exec format error: operator-sdk"" 

**Expected behavior**
operator-sdk command should work after installation of ohmyzsh command

**Screenshots and/or Recordings**
If applicable, add screenshots to help explain your  #problem.
You can also record an asciinema session: https://asciinema.org/

Working without ohmyzsh -

<img width=""1446"" alt=""Screen Shot 2021-04-07 at 8 23 24 PM"" src=""https://user-images.githubusercontent.com/47066536/113964193-d8754f80-97df-11eb-8864-260d725a83eb.png"">

Error after installtion of ohmyzsh -

<img width=""563"" alt=""Screen Shot 2021-04-07 at 8 23 04 PM"" src=""https://user-images.githubusercontent.com/47066536/113964156-c5627f80-97df-11eb-83c6-4f93b0fc53ed.png"">


**Self Check**

- Have you tried reaching out on the [Discord server](https://discord.gg/ohmyzsh)? 
  This can help cut down on filling up issues. We always have a few people
  online that are in a variety of timezones that are willing to help you!

- Also searching existing [GitHub Issues](https://github.com/ohmyzsh/ohmyzsh/issues?q=) might help you get quicker support

**Desktop (please complete the following information):**

 - OS / Distro: macOS
 - Latest ohmyzsh update?: [e.g. Yes]
 - ZSH Version: 5.7.1
 - Terminal emulator: xterm-256color

**Additional context**
Add any other context about the problem here. This can be themes, plugins, custom configs.
",,,mcornella,"
--
Does this happen when starting zsh with `zsh -f`?
--

--
Also what does `file $(command -v operator-sdk)` show?
--
",,,,,,,,,,
9783,OPEN,Prompt's text color no longer matches command line text color anymore,,2021-04-05 00:30:46 +0000 UTC,jmarcoscosta,Opened,,"The colors should match, but no matter the colorscheme I choose, the prompt color is always black.

**Desktop (please complete the following information):**

 - OS / Distro: Ubuntu LTS 20.04
 - Latest ohmyzsh update?: Yes
 - ZSH Version: 5.8
 - Terminal emulator: Terminator

**Screenshot**
![Screenshot from 2021-04-04 21-29-15](https://user-images.githubusercontent.com/21131685/113525715-ea12e900-958c-11eb-8eab-df16e6c69674.png)",,,,,,,,,,,,,,
9778,OPEN,Tab Completion Menu Causes Incorrect Command Coloring,Area: theme; Bug,2021-04-05 11:28:58 +0000 UTC,jrphill5,Opened,,"1. Use gentoo theme and git plugin (may or may not actually matter)
2. Start typing a command like `ls ` (assuming more than one entry will be available) and hit tab
3. When one of the autocomplete menu items is a directory, the entire command turns blue

**Expected behavior**
In previous versions of ohmyzsh, this should result in a colored PS1, but a white command regardless of autocomplete menu selection

**Screenshots and/or Recordings**
Screenshot available here: https://snipboard.io/iOVh8Z.jpg
First command was `ls test` and then hit tab (which worked correctly because there was only one option)
Second command was `ls te` and then hit tab (which failed because there were multiple options with a directory)

**Self Check**

- Have you tried reaching out on the [Discord server](https://discord.gg/ohmyzsh)?
  This can help cut down on filling up issues. We always have a few people
  online that are in a variety of timezones that are willing to help you!

No, this was working fine until a recent update.

- Also searching existing [GitHub Issues](https://github.com/ohmyzsh/ohmyzsh/issues?q=) might help you get quicker support

Searched, but did not see similar issue reported.

**Desktop (please complete the following information):**

 - OS / Distro: Ubuntu
 - If on Windows what version of WSL: N/A
 - Latest ohmyzsh update?: Yes
 - ZSH Version: commit 2d40b562e5da4c885babc1f7f09aa33a8a891eb2
 - Terminal emulator: GNOME Terminal (TERM=xterm-256color)

**Additional context**
Add any other context about the problem here. This can be themes, plugins, custom configs.

Using gentoo theme and git plugin.",,,tjakobsen90,"
--
I have the same issue.
--
",,,,,,,,,,
9767,OPEN,_ (sudo alias) autocomplete doesn't work,Support,2021-04-03 23:09:09 +0000 UTC,Crazy-Ginger,Opened,,"Autocomplete for `sudo` operates as expected listing options for commands (e.g. lists options for `netctl` then autocomplete to files in `/etc/netctl/`). 

However, this isn't true for `_` despite it just being aliased to ""sudo "" in `$HOME/.oh-my-zsh/lib/misc.zsh`
",,,mcornella,"
--
I can't reproduce this. Can you run `which -a _` and post the output?
--

--
Can you provide a trace of the completion function? You can do that by writing the command you want to complete, then pressing <kbd>CTRL+X</kbd> followed by <kbd>?</kbd>. Afterwards please post the generated file.
--
",Crazy,"
--
`_: aliased to sudo`

![image](https://user-images.githubusercontent.com/26458241/113297318-5f16c200-92f2-11eb-9ada-ed93b2ce95db.png)

--

--
I tried `_ net` which will show a variety of auotcomplete options when using `sudo`
This was the result of `CTRL+X` `?`


[zsh74281_1.txt](https://github.com/ohmyzsh/ohmyzsh/files/6253712/zsh74281_1.txt)

--
",,,,,,,,
9742,OPEN,Tmux Autostart does not propagate environment variables,,2021-03-17 10:02:55 +0000 UTC,lovromazgon,In progress,,"**Describe the bug**
When configuring `ZSH_TMUX_AUTOSTART=true` some applications don't see all environment variables (in my case GoLand is not able to read `GOPATH`).

**To Reproduce**
1. Add this to `.zshrc`:
```
plugins=(tmux)
ZSH_TMUX_AUTOSTART=true
export GOPATH=""$HOME/go/1.16.0""
```
2. Run GoLand (make sure it's configured to read `GOPATH` from system environment)
3. Check [`GOPATH`](https://www.jetbrains.com/help/go/configuring-goroot-and-gopath.html#gopath) settings and see that it's using the default value instead of system var.

**Expected behavior**
If we run the same scenario but set `ZSH_TMUX_AUTOSTART=false` then `GOPATH` in GoLand is set correctly. I expect to see the same behavior if autostart is enabled.

**Desktop (please complete the following information):**

 - OS / Distro: macOS Big Sur 11.2.3
 - Latest ohmyzsh update?: Yes
 - ZSH Version: 5.8 (x86_64-apple-darwin20.1.0)
 - Terminal emulator: iTerm2
",,,lovromazgon,"
--
Sidenote for anyone stumbling across this issue looking for a solution - I fixed it by adding this to `.zshrc`:
```
if [[ $(ps -o command= $$) != ""-zsh"" ]]; then
    ZSH_TMUX_AUTOSTART=false
else
    ZSH_TMUX_AUTOSTART=true
fi
```
--
",,,,,,,,,,
9730,OPEN,Case Insensitivity in history-substring-search,Feature,2021-03-13 11:05:51 +0000 UTC,rharish101,Opened,,"
**Describe the solution you'd like**
history-substring-search should give me case insensitive suggestions if `CASE_SENSITIVE=""true""` is commented.

**Describe alternatives you've considered**
I'm not aware of any. I'm just paying attention to the case of what I type if I'm relying on history-substring-search.
",,,,,,,,,,,,,,
9728,OPEN,How to change zsh-autocomplete color or make text item list under like zsh-autosuggestions,Support,2021-03-12 18:19:01 +0000 UTC,scila1996,Opened,,"Hi. Current when i press '[TAB]' and it will be show the list under command like this. But color of them is alternative to command 

![image](https://user-images.githubusercontent.com/17109300/110980806-d531a400-8398-11eb-940e-f03b4f3b0ddf.png)

I like all item of under list will colored like zsh-autosuggestions

![image](https://user-images.githubusercontent.com/17109300/110980934-fb574400-8398-11eb-8fd1-47751abaf194.png)

How can i do that , thank all !",,,,,,,,,,,,,,
9726,OPEN,Install via homebrew,Feature,2021-03-11 22:04:54 +0000 UTC,reggi,Opened,,I'd love it if were possible to install ohmyzsh via homebrew.,,,arthurduarte1,"
--
+1
--
",,,,,,,,,,
9724,OPEN,"vi-mode ""xp"" to transpose doesn't work properly",,2021-03-15 05:08:26 +0000 UTC,revdandom,In progress,,"Recently (past week or two) whenever I have the vi-mode plugin enabled on my mac or linux desktop, the vi ""xp"" command combination deletes the character but then pastes what I have in my buffer instead of the recently deleted character.

With the vi-mode plugin enabled do the following:
- copy some long text in your linux/mac clipboard
- move to zsh
- type ""egrp this fromthat""
- press ESC to enter vi mode after realizing you typed egrp for the 5 thousandth time
- press 3b then xp
You will get something like ""gLONGSTRINGOFCOPIEDTEXTrp this fromthat""

I would expect ""grep this fromthat""

Ubuntu 21.04 i3-gaps  (gnome-terminal, st, alacritty)  
OSX 10.15.7 (iterm2) 
ZSH 5.8
plugins=(git
    │   ┊fzf
    │   ┊zsh-syntax-highlighting
    │   ┊zsh-autosuggestions
    │   ┊vi-mode
    │   ┊common-aliases
    │   ┊insync-headless)


",,,revdandom,"
--
I found I can work around this by using ""dlp"".
--

--
I found I can get xp working again if I place ""vi-delete-char"" at the ended of line 118 to look like:

wrap_clipboard_widgets copy vi-yank vi-yank-eol vi-backward-kill-word vi-change-whole-line vi-delete vi-delete-char

Now I just need to figure out a way to stop it from writing to my clipboard besides ""ssh localhost""
--
",,,,,,,,,,
9721,OPEN,cheat or Podman completion do not work,,2021-03-11 02:28:47 +0000 UTC,ChangheeOh,Opened,,"**To Reproduce**
1. Install formulae as bellow
```
  $ brew install cheat
  $ brew install podman
```
2. Check whether auto completion work and do not work properly (Display not command options but the file list or current directory)
```
  $ cheat <TAB>
  Applications/       Documents/          Library/            Music/              Public/              ... (omitted) ...
  Desktop/            Downloads/          Movies/             Pictures/             ... (omitted) ...
  $ podman <TAB>
  Applications/       Documents/          Library/            Music/              Public/              ... (omitted) ...
  Desktop/            Downloads/          Movies/             Pictures/             ... (omitted) ...
```
**Expected behavior**
After I switch back to  original `.zshrc `, completion work perfectly as bellow

1. Switch to old `.zshrc.pre-oh-my-zsh`
```
  $ cp .zshrc.pre-oh-my-zsh .zshrc
```
2.  Check auto completion again and work perfectly
```
  $ cheat <TAB>
  zsh: do you wish to see all 215 possibilities (17 lines)?
  
  $ podman <TAB>
  attach       -- Attach to a running container
  build        -- Build an image using instructions from Containerfiles
  commit       -- Create new image based on the changed container
  container    -- Manage containers
  ... (omitted) ...
```
**Screenshots and/or Recordings**
If applicable, add screenshots to help explain your problem.
You can also record an asciinema session: https://asciinema.org/

1) For completion error: https://asciinema.org/a/398039
2) For completion success: https://asciinema.org/a/398040

**Self Check**

- Have you tried reaching out on the [Discord server](https://discord.gg/ohmyzsh)? No

- Also searching existing [GitHub Issues](https://github.com/ohmyzsh/ohmyzsh/issues?q=) might help you get quicker support

**Desktop (please complete the following information):**

 - OS / Distro: `MacOS`/`Big Sur 11.2.2` (M1 Mac)
 - Latest ohmyzsh update?: Yes
 - ZSH Version: `zsh 5.8` (x86_64-apple-darwin20.0)
 - Terminal emulator: `iTerm2`, `Terminal` (Apple)

**Additional context**

If I add the following script line in `.zshrc`, I could successfully get things done on oh-my-zsh, too.
But I'm not sure this is proper way. Because the similar script line already executed in 'oh-my-zsh.sh'.

`autoload -U +X compinit; compinit`",,,,,,,,,,,,,,
9719,OPEN,add a golang alias to recursively test directory,Feature,2021-03-10 14:36:29 +0000 UTC,ENG618,Opened,,"**Is your feature request related to a particular plugin or theme? If so, specify it.**
The name of the plugin, theme or alias that you would like us to improve. [...]

golang plugin

**Is your feature request related to a problem? Please describe.**
A description of what the problem is. Ex. I'm always frustrated when [...]

No problem, just enhanced functionality

**Describe the solution you'd like**
A description of what you want to happen. [...]

add an alias for `gota` (go test all) `go test ./...`. 

Similar to how `fmt` has a base `gof` (`go fmt`) and `gofa` (`go fmt ./...`)

**Describe alternatives you've considered**
A description of any alternative solutions or features you've considered. This can also include other plugins or themes.

Simply add the alias local to my environment.

**Additional context**
Add any other context, screenshots or discord conversations about the feature request here. Also if you have any PRs related to this issue that are already open that you would like us to look at.

Opened PR: https://github.com/ohmyzsh/ohmyzsh/pull/9720


",,,,,,,,,,,,,,
9712,OPEN,Update on Transfer Plugin,Feature,2021-03-16 05:10:50 +0000 UTC,luizfelipevbll,In progress,,"Hello devs, encryptation auth on files could be implemented on the [transfer plugin](https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/transfer).

The encrypted upload is already enabled on the transfer.sh project
https://github.com/dutchcoders/transfer.sh/#encrypt--upload

### Encrypt & upload:
```bash
$ cat /tmp/hello.txt|gpg -ac -o-|curl -X PUT --upload-file ""-"" https://transfer.sh/test.txt
````

Thanks for your attention ;) ",,,mcornella,"
--
Can you make a PR for it? 
--
",luizfelipevbll,"
--
> Can you make a PR for it?

Shure, I just did it,
https://github.com/ohmyzsh/ohmyzsh/pull/9739
--
",,,,,,,,
9710,OPEN,add command for pruning local branches that have been merged,Feature,2021-03-05 09:29:59 +0000 UTC,BigMichi1,Opened,,"
**Describe the solution you'd like**
i would like to propose a ""gbp"" command which removes all already merged branches

**Describe alternatives you've considered**
currently, I'm using this inside my global `.gitconfig`
```
[alias]
	branch-prune = ""!git fetch -p && for b in $(git for-each-ref --format='%(if:equals=[gone])%(upstream:track)%(then)%(refname:short)%(end)' refs/heads); do git branch -d $b; done""
```

**Additional context**
the command removes all branches that are merged and do not contain additional changes locally

**Related Issues**
None
",,,,,,,,,,,,,,
9704,OPEN,Agnoster theme does not play well with breezy,,2021-03-03 08:59:27 +0000 UTC,mok0,Opened,,"Steps to reproduce the behavior, for example:
1. Install breezy 
2. Activate Agnoster theme
3. `cd` into a directory under git control

**Screenshots and/or Recordings**
![Screenshot 2021-03-03 at 09 50 02](https://user-images.githubusercontent.com/878168/109779174-f90d2100-7c05-11eb-8087-f1feaa9cb4f3.png)

**Desktop**

 - OS / Distro: Ubuntu 20.04
 - Latest ohmyzsh update?: Yes
 - ZSH Version: 5.8
 - Terminal emulator:  iTerm2


**To fix (temporarily)**
Comment out the `prompt_bzr` function call near the bottom of `agnoster.zsh-theme`:

>   `# prompt_bzr`",,,,,,,,,,,,,,
9699,OPEN,OMZ has broken my look-ahead-typing,,2021-03-01 17:13:37 +0000 UTC,msimerson,Opened,,"**Describe the bug**
When opening a new Terminal, there's sometimes a pause while some background tasks are happening, including I presume a network request by ohmyzsh to see if a new version is available. Prior to ohmyzsh, I would begin typing during this pause knowing that my keystrokes would get queued and then applied properly when the command prompt appeared. Now, because I've been conditioned by ohmyzsh often swallowing my keystrokes with a [Y/n] prompt, I sit pitifully and wait until I see a command prompt before typing. I hate the wait.

**To Reproduce**
Steps to reproduce the behavior, for example:
1. Enable ohmyzsh
2. Use regularly
3. Become conditioned to seeing your keystrokes swallowed

**Expected behavior**
- taste STDIN. If a burst of keystrokes is pending before the [Y/n] prompt is presented, replace the [Y/n] prompt with a ""an update is available"" notice.
- If the keystrokes aren't a [Y/n], then dismiss the prompt and display a notice that an update is available.

**Desktop (please complete the following information):**

 - OS / Distro: macOS
 - Latest ohmyzsh update?: Yes
 - ZSH Version: 5.8
 - Terminal emulator: Terminal",,,,,,,,,,,,,,
9686,OPEN,Fix History with omz tool,Feature,2021-02-27 15:04:27 +0000 UTC,leoheck,In progress,,"Is it possible to have something on omz tool that fixes the history?

I frequently see this kind of issue.
```
zsh: corrupt history file /home/pi/.zsh_history
```",,,mcornella,"
--
I can't see a reason to add such a functionality. You should instead find the culprit so that this doesn't happen anymore. If you're using WSL I believe there was a tracking issue about this.
--

--
There are already scripts documented to fix this automatically, I find it hard to justify why it should be in the omz CLI. 
--

--
The omz CLI is only to manage Oh My Zsh, it doesn't make sense to add it there. A function in `lib/functions.zsh` would make more sense.
--
",leoheck,"
--
I have no idea why it happens... it mostly happens when I use oh-my-zsh on my raspberry pies, probably with a shared user. But having this thing built-in on this command would be really nice.
--

--
So, you have a tool that can finally help to make these little things easier. And you don't see a good reason to add a function that fixes so something that annoyes users since forever in it because there are  scripts for this? These are 3 lines scripts, that users always need to search and find and install things to make them work. But it is interesting your way to see that it is not such a thing that can help users.
--

--
It seems to be happening periodically when you have a shared user... for instance pi on Raspberry Pies. 
In this case, you have a board that has a generic user, and multiples people log in to do stuff. If this is the case, the issue cannot be prevented. It has to be fixed. And if the omz tool could incorporate this it would be a great addition since there are a lot of scripts circulation to do the same thing. It is just a good thing to have on omz for sure. It does not require tons of lines. And it can be available for everyone without any extra effort. 
--

--
Maybe I was not clear. I mean. **A single user is being accessed by multiple persons at the same time.** Why? I don't know. People are lazy at my company. I cannot fix how these people use Linux boxes. But it would be nice to have tools to fix common issues when they appear. 
--

--
This is what I am asking dude. To add this thing inside this command, that is already available for users. So no need to create, copy, search for any other.
--

--
Sure, you know better what you have to do. I am just asking for an easy way
to fix a common issue, period. Is it possible. If not close this issue and
that is it. Users will still be copying scripts from the internet every
time.

--
Leandro Heck


On Sat, Feb 27, 2021 at 10:46 AM Marc Cornellà <notifications@github.com>
wrote:

> The omz CLI is only to manage Oh My Zsh, it doesn't make sense to add it
> there. A function in lib/functions.zsh would make more sense.
>
> —
> You are receiving this because you authored the thread.
> Reply to this email directly, view it on GitHub
> <https://github.com/ohmyzsh/ohmyzsh/issues/9686#issuecomment-787075152>,
> or unsubscribe
> <https://github.com/notifications/unsubscribe-auth/AAJX7YALHOYH5MW2F6SW3ILTBDZSJANCNFSM4YFZO5UA>
> .
>

--
",rwmitchell,"
--
Used to have this problem with tcsh, IIRC, came from logging out from multiple terminals at the same time. Haven’t seen it with zsh even though I have it set to update more often (more chance for collision)

Need to figure out why it is happening and can it be fixed directly instead of patching it by repairing it afterwards. Is this a widespread problem?
--

--
Why do you have shared users?  Is this just your family and kids playing on it?

Multiple shared users is no different than a single user with multiple terminals, something I do all the time and haven't seen  this issue with zsh.  I'm not denying you're having it, but suspect there is a particular plugin causing the problem.

OMZ is all about providing easy access to a wide variety of tools that people can enable or not - so I do agree there.
(I say that as an observer and user of OMZ only)
--
",doctormemes,"
--
https://shapeshed.com/zsh-corrupt-history-file/
Check out that link, it not only tells you how to fix this issue, it shows you how you can create a script and place it in /bin so you can easily run the script any time the issue occurs.

This doesn't seem to be that much of an issue to warrant a built in oh-my-zsh command for it or anything like that. If you really wanted to, you could always create a simple oh-my-zsh plugin for this and put it up on GitHub for others to use if you'd like.
--
",,,,
9682,OPEN,Organize themes by features,Feature,2021-02-24 08:29:27 +0000 UTC,andreasabel,Opened,,"Catalogue themes by features, e.g. by using tags one can select.  

For instance, I want to see just the themes that give me (at least) the following components in the prompt:

- time
- last exit code
- current directory
- git branch

Currently I have to go through all the themes and have to infer from the pictures what features they might have.  (There isn't even a textual description I can grep.)

Lightweight implementation of this feature:
- organize the themes in a github issue tracker, one issue per theme
- define one label per feature

This would allow me to choose some labels and only see the themes that implement the feature corresponding to that label.",,,,,,,,,,,,,,
9672,OPEN,Add 'omz plugin load xxx' to omz cli,Feature,2021-02-17 19:36:16 +0000 UTC,kheraud,Opened,,"It could be useful to be able to dynamically load a plugin in a running shell : `omz plugin load kubectl`, `omz plugin load git docker`

**Context**
My omz setup includes many plugins. This setup requires a significant amount of time when I start a new shell.
Some of these plugins are very useful but I only use them once or twice a day.

This feature would permit to keep a short `plugins` list (= small startup time) and add other plugins when I really need them. 

**Is your feature request related to a particular plugin or theme? If so, specify it.**
No

**Is your feature request related to a problem? Please describe.**
No

**Describe the solution you'd like**
NA

**Describe alternatives you've considered**
NA

**Additional context**
Expected behaviour :
```shell
# quick startup time
omz plugin load git
gst
gaa
gc -m ""test: trying git omz plugin""
gp
omz plugin load kubectl
kcuc remote-cluster
kgp
...
```

**Related Issues**
I am not aware of any
",,,,,,,,,,,,,,
9671,OPEN,Terminal hangs when doing `java --ver` then hitting TAB twice.,,2021-02-26 01:43:19 +0000 UTC,obtusedev,Opened,,"**Describe the bug**
Doing `java --ver` and hitting TAB twice hangs the terminal on macOS and Linux Mint.

**To Reproduce**
1. type `java --ver` into terminal and hit TAB twice for autocomplete.
2. Terminal hangs.

**Expected behavior**
Terminal should attempt to autocomplete and not hang terminal.

**Desktop (please complete the following information):**

 - OS / Distro: macOS Big Sur 11.2.1, Linux Mint (latest)
 - Latest ohmyzsh update?: Yes
 - ZSH Version: 5.8
 - Terminal emulator: None",,,,,,,,,,,,,,
9663,OPEN,theme-bobthefish,Feature,2021-02-13 20:22:55 +0000 UTC,SCCOBN,Opened,,"There is this nice theme on fish that kind of looks like the agnoster, but not quite. Could you please port this theme to zsh? https://github.com/oh-my-fish/theme-bobthefish",,,,,,,,,,,,,,
9658,OPEN,FAQ: include note about what happens to configs you had before installing OMZ,Area: installer; Area: uninstaller; Type: documentation,2021-03-15 21:24:46 +0000 UTC,rrabinovitch,In progress,,"Suggested text to be included in `readme` as a footnote in the installation section, or as an FAQ (""What happened to the configurations I had set up before installing Oh My Zsh?"":
```
Note: If you had configurations saved in `.zshrc` prior to installing Oh My Zsh, those configurations are automatically  archived in a `.pre-oh-my-zsh` file and the new Oh My Zsh configurations will replace those previous configurations in `.zshrc`. You can import those archived configurations by adding `source ~/.pre-oh-my-zsh` at the end of your `.zshrc` file.
```

Context and research I've done related to this suggestion:
The only reference to the `.pre-oh-my-zsh` file I found in the OMZ documentation is in the context of uninstalling the framework, and none of the obvious google searches addressed resulted in answers to ""what happened to my previous configs?"" - having this noted in the context of the installation instructions or FAQs would have saved me a bit of confusion and surprise thinking I'd lost those configs.

I'm down to submit a PR for this as a `readme` edit, but wasn't sure if it's preferable for this note to live in the wiki docs.",,,mcornella,"
--
> You can import those archived configurations by adding `source ~/.pre-oh-my-zsh` at the end of your `.zshrc` file.

This is wrong. All settings in the previous zshrc file should be ported to the new one. There are two issues here:

- We shouldn't move existing zshrc files but provide a snippet which the user should add on the existing zshrc file.
- When we uninstall we should take that into account and only delete OMZ related lines in the zshrc file instead of renaming it altogether.
--

--
Yeah sorry, I meant that the user should copy them instead of sourcing the `.pre-oh-my-zsh` file.
--
",rrabinovitch,"
--
When I installed omz, it did not port or copy any of my previous configs into the updated zshrc. They were simply replaced by the new omz configs with the previous configs appearing _only_ in the pre-oh-my-zsh file.
--
",,,,,,,,
9652,OPEN,Allow tmux binary name to be changed,Feature,2021-02-09 19:12:21 +0000 UTC,wac-,Opened,,"
**Describe the solution you'd like**
Make the name of the `tmux` binary configurable.

**Describe alternatives you've considered**
I could have an alias that masks a system provided `tmux`, but this winds up confusing other things.

**Additional context**
PR is inbound momentarily.

**Related Issues**
None.",,,,,,,,,,,,,,
9647,OPEN,Vi-mode custom key macros?,Support,2021-02-08 04:25:06 +0000 UTC,mcondren,Opened,,"Hello,

I am trying to set some custom key remaps in ZSH vi-mode that would be useful on the command line. Like binding ‘bb’ to ‘0ciw’ basically a shortcut to go to beginning of line, remove the first word and go into insert mode. This would allow me to sub out cat for ls, for example, quickly. That key string works fine manually but is 4 keystrokes. Can you nnoremap similar to in a .vimrc file?

Thanks",,,,,,,,,,,,,,
9641,OPEN,Better UX when zsh specific parsing breaks,Feature,2021-02-21 20:16:13 +0000 UTC,eugene-kulak,Opened,,"**Is your feature request related to a problem? Please describe.**
```bash
(.venv) ➜  service git:(develop) ✗ pip install fastapi[all]
zsh: no matches found: fastapi[all]
```
Nevertheless, in a regular `bash` it will work.
Taking into account that most snippets on the internet are for bash-like CLI it is very frustrating.

**Describe the solution you'd like**
I see two directions to fix this:

1. better error message, advice to enclose `fastapi[all]` in double quotes, etc
2. smarter approach, try to guess expected behaviour

**Describe alternatives you've considered**
fix it manually
",,,mahmoudhossam,"
--
I think this is a problem in zsh itself, not in ohmyzsh.
--
",eugene,"
--
@mahmoudhossam I agree. I'm sorry I was under impression that two projects are connected and didn't notice that I choose the wrong one.
--
",,,,,,,,
9632,OPEN,Gift time > Katacoda course for Oh My Zsh!,,2021-02-03 01:39:58 +0000 UTC,adriens,Opened,,":point_right: For this ticket, you have nothing to do, just enjoy.

:gift: Details

I use `Oh My Zsh!` since a long time now, but I recently had to explain to a new developer how and why to install it. I found useful to create a dedicated Katacoda Scenario : https://www.katacoda.com/rastadidi/courses/devtips/ohmyzsh

Hoefully you'll like it, just let me know. ANy feedback is of course always welcome to improve the experience :open_hands:",,,,,,,,,,,,,,
9622,OPEN,kubectl completion not working,Support,2021-01-30 14:12:57 +0000 UTC,cannfoddr,Opened,,"I have installed on a MacBook Air M1 running big-sur and am trying to get kubectl completion working.  I have enabled the plugin and can see that 'git' completion is running fine.

'kubectl' or 'kc' attempts at completion just result in a list of files and directories.  I found a closed issue around a very similar problem and have tried all the steps mentioned there including deleting my completions file and restarting item.

Not sure where to go next with this

kubectl version:
Client Version: version.Info{Major:""1"", Minor:""20+"", GitVersion:""v1.20.2-dirty"", GitCommit:""faecb196815e248d3ecfb03c680a4507229c2a56"", GitTreeState:""dirty"", BuildDate:""2021-01-30T13:00:28Z"", GoVersion:""go1.16rc1"", Compiler:""gc"", Platform:""darwin/arm64""}
Server Version: version.Info{Major:""1"", Minor:""20"", GitVersion:""v1.20.2"", GitCommit:""faecb196815e248d3ecfb03c680a4507229c2a56"", GitTreeState:""clean"", BuildDate:""2021-01-13T13:20:00Z"", GoVersion:""go1.15.5"", Compiler:""gc"", Platform:""linux/arm64""}

MacOS: BigSur 11.1

zsh version: zsh 5.8 (x86_64-apple-darwin20.0)
",,,,,,,,,,,,,,
9621,OPEN,Activate completion features without adding any aliases,Feature,2021-01-26 21:18:43 +0000 UTC,tremby,Opened,,"**Is your feature request related to a particular plugin or theme? If so, specify it.**
Sort of. Right now specifically the npm plugin, but it applies to others too.

**Is your feature request related to a problem? Please describe.**
Often I want the completion that a plugin provides but I never want any of the aliases. I have no interest in learning them, and if my shell is littered with aliases it massively increases the possibility that when I make a typo in a short command something totally unexpected happens.

**Describe the solution you'd like**
Some way to specify whether or not I want each plugin's aliases. Perhaps it would be simplest to split completion and aliases to separate plugins?

**Describe alternatives you've considered**
I could edit the source to comment out all the aliases but that's not maintainable.
I could unalias everything after the fact but that's a mess and not maintainable.
I could install the completion separately but then why am I using ohmyzsh.",,,,,,,,,,,,,,
9608,OPEN,deactivate or hide changelog overview post on ssh login,Feature,2021-01-29 13:19:33 +0000 UTC,cbaczynski,In progress,,request to hide (quiet) the changelog overview post as i login into ssh session. Is this possible via config or variable? I only managed to see this in the update.sh which would be to hardcoded for my interests.,,,mcornella,"
--
Can you explain specifically what part of displaying the changelog you're having trouble with? You said previously `i login into ssh session via variable`, what does that mean?
--

--
It looks like you still have the old version that used `less`, in the next update you'll just see the whole changelog without having to quit `less`. Are you ok with that or do you still need to hide the changelog? If so, would you prefer only seeing breaking changes or seeing nothing at all?
--

--
You'd just see the regular update screen, pre-changelog times:
![image](https://user-images.githubusercontent.com/1441704/106137265-c2596c00-616a-11eb-8d93-4288102c1aae.png)

--

--
You can disable updating with `DISABLE_AUTO_UPDATE=true` in your zshrc file, before OMZ is sourced. That would prevent any messages at all. Your use case is a bit weird, why do you want to do that?
--
",cbaczynski,"
--
We work with multiple server connections. Sometimes a new window appears and ""logs"" the update process. I attached a screenshot, i think this would make things clear.
![zshupdate](https://user-images.githubusercontent.com/77619863/106103592-7c3be280-6141-11eb-9e76-8b2273cf3c20.png)

--

--
Ah ok, how would the hiding all option look like?
--

--
Would it be possible to hide this as well? Dont get me wrong, the first idea would be nice though but now im curious.

--

--
Thank You for your help. We are looking forward to do so. Yeah, i know it's kinda weird question. We were brainstorming and troubleshooting some ideas to our projects and this came up. Possibly it isnt really a technical interest therefore more on the comfort side when youre working on multiple instances.
--
",,,,,,,,
9603,OPEN,Battery plugin shows incorrect values when you have two batteries in Linux,Area: plugin; Bug,2021-01-18 16:19:41 +0000 UTC,simcop2387,In progress,,"```

**To Reproduce**
Have a laptop with two or more batteries running linux, such as my ThinkPad T580.  Or emulate it with the following output from the acpi program.

```
-> % acpi
Battery 0: Full, 100%
Battery 1: Discharging, 97%, 03:28:57 remaining
ryan@magellan [07:49:34] [~]  10097%
```

**Expected behavior**
Something sane, but not reporting 10,000% battery level :)

**Desktop (please complete the following information):**

 - Debian Bullseye/Testing
 - ZSH Version: 5.8
 - Terminal emulator: Konsole (KDE), but it's obviously present in every other console including xterm",,,simcop2387,"
--
I think the naive thing to do would be to just average the two values, even though it wouldn't give a true capacity since the batteries are of different capacities.  But that would then have it continually drop in % through the whole process since the laptop will discharge battery 1 until it's at 5% and then start discharging battery 0.
--

--
From the looks of things, it might be better to use ```acpitool``` over ```acpi```, it's got a better output section for me at least

```
ryan@magellan [08:18:27] [~]  49%
-> % acpitool
  Battery #1     : Unknown, 99.55%
  Battery #2     : Discharging, 49.58%, 01:12:05
  All batteries  : 62.60%, 02:03:03
  AC adapter     : off-line 
  Thermal info   : <not available>
ryan@magellan [08:18:29] [~]  49%
-> % acpi 
Battery 0: Unknown, 99%
Battery 1: Discharging, 49%, 01:12:07 remaining
ryan@magellan [08:18:31] [~]  49%
-> % 
```

the All batteries: section gives a total capacity percentage (along with a combined expected time) so that no fancy math has to be done inside of zsh.
--
",,,,,,,,,,
9596,OPEN,aliasing package-management for quick updates/refresh/search and or install,Feature,2021-01-14 20:56:13 +0000 UTC,oldkingcone,Opened,,"#a typical goto for my distros is i alias all of my apt/dnf/yum/emerge commands
alias install='clear; dnf -y -b install'
alias search='clear; dnf search'
alias whoP='clear; dnf provides'
alias up='clear;echo ""Unlocking /etc/passwd"";chattr -i /etc/passwd;dnf -y -b upgrade;echo ""Re-locking /etc/passwd"";chattr +i /etc/passwd'
```
**Additional context**
Not sure if this is something you would want, I can assist in writing a few of the scripts to detect OS if needed, and apply the aliases as needed.
",,,,,,,,,,,,,,
9592,OPEN,Insecure completion-dependent directories detected,Status: not our issue,2021-04-09 20:19:29 +0000 UTC,diogoeichert,In progress,,"Just install ohmyzsh on a standard macOS system and open the Terminal.

**Expected behavior**
It should not complain about admin group permissions, i.e. the system might have more than one admin account.

**Screenshots and/or Recordings**
```
[oh-my-zsh] For safety, we will not load completions from these directories until
[oh-my-zsh] you fix their permissions and ownership and restart zsh.
[oh-my-zsh] See the above list for directories with group or other writability.

[oh-my-zsh] To fix your permissions you can do so by disabling
[oh-my-zsh] the write permission of ""group"" and ""others"" and making sure that the
[oh-my-zsh] owner of these directories is either root or your current user.
[oh-my-zsh] The following command may help:
[oh-my-zsh]     compaudit | xargs chmod g-w,o-w

[oh-my-zsh] If the above didn't help or you want to skip the verification of
[oh-my-zsh] insecure directories you can set the variable ZSH_DISABLE_COMPFIX to
[oh-my-zsh] ""true"" before oh-my-zsh is sourced in your zshrc file.
```

**Self Check**

- Have you tried reaching out on the [Discord server](https://discord.gg/ohmyzsh)? 
  No.

- Also searching existing [GitHub Issues](https://github.com/ohmyzsh/ohmyzsh/issues?q=) might help you get quicker support
  Yes, none found.

**Desktop (please complete the following information):**

 - OS / Distro: macOS
 - Latest ohmyzsh update?: Yes
 - ZSH Version: zsh 5.8 (x86_64-apple-darwin20.0)
 - Terminal emulator: Terminal (native)
",,,tachun,"
--
Have you tried this https://github.com/ohmyzsh/ohmyzsh/issues/9262#issuecomment-695199196?
--
",diogoeichert,"
--
But that's not a solution, is it? I mean, please look at this:

```
➜  ~ compaudit | xargs ls -ld
There are insecure directories:
drwxrwxr-x  3 diogoeichert  admin   96 Jan 12 17:45 /usr/local/share/zsh
drwxrwxr-x  4 diogoeichert  admin  128 Jan 12 18:19 /usr/local/share/zsh/site-functions
```

Which should be fine, because I need group writing permissions for other `admin` users in a `shared` directory. And if I simply suppress the message with `ZSH_DISABLE_COMPFIX=true`, I won't get warnings if `others` get write access, which then would be a legit system exposure.

My suggestion is that `group` writing privileges in those directories should not be considered insecure, instead.
--
",mcornella,"
--
> My suggestion is that `group` writing privileges in those directories should not be considered insecure, instead.

Well that would be the same hole, wouldn't it? If the group is changed then the group-writability would be ignored. I think the right approach is that the admin group is considered secure in Darwin systems. This would need to be changed in Zsh itself, since compaudit is bundled with zsh.

[They already have some exceptions per system](https://github.com/zsh-users/zsh/blob/62e86515e79e57e791bc9f5ed815e8020d1dcf6b/Completion/compaudit#L128-L146), so it shouldn't be hard to convince maintainers once a working solution is submitted.
--
",,,,,,
9590,OPEN,globalias enhancement,Feature,2021-01-12 11:15:37 +0000 UTC,webberpuma,Opened,,"
**Is your feature request related to a particular plugin or theme? If so, specify it.**
globalias

**Is your feature request related to a problem? Please describe.**
i would like to have
1. more control on the expansion trigger. 
2. easier mechanism to toggle the expansion functionality

**Describe the solution you'd like**
1. i would like to use `tab` (or better yet, use a customized key) instead of `space` to expand the alias.
2. i would like to press `ctrl+shift+alt+g` (or better yet, use a customized key combo) to enable the expansionality, then press the same key combo again to disable the expansion functionality

**Additional context**
i have the above request because during my daily usage with the plugin, most of times it functions great. but in some cases, i just don't want it to expand.",,,,,,,,,,,,,,
9588,OPEN,vi-mode: `vv` doesn't open editor with low `$KEYTIMEOUT` value,Area: plugin; Bug; Topic: bindkey,2021-04-06 12:46:05 +0000 UTC,pentago,In progress,,"**Describe the bug**
After the latest update where new sequence to open editor as line editor (double vv) is introduced, editor doesn't open. 

**To Reproduce**
Input command, enter vi-mode, press **vv**.

**Expected behavior**
$EDITOR opens to edit the line instead of editing inline.

**Desktop (please complete the following information):**

 - OS / Distro: macOS
 - Latest ohmyzsh update?: Yes
 - ZSH Version: 5.8
 - Terminal emulator: Alacritty + iTerm2
",,,mcornella,"
--
What does this show: `bindkey -M vicmd vv`?
--

--
Is `$VISUAL` or `$EDITOR` set?
--

--
Are you sure you're in `vicmd`? It's possible you entered visual-mode if you pressed `v` once at some point. Check for example that you can move the cursor with `h`/`l`, and if so, `vv` should in theory open the editor.
--

--
I can reliably trigger it on `KEYTIMEOUT=15`, and less so with `KEYTIMEOUT=10`. There are other double-char key bindings so I think raising the value to a working state would be the best solution here.

Other solutions:
- Use another lowercase, single-char key binding: this would mean overriding a preexisting key binding, since all the lowercase letter key bindings are taken (see `bindkey -M vicmd`).
- Use an uppercase, single-char key binding: there are a few undefined ones, like `H` or `U` (again, see output of `bindkey -M vicmd`).

--

--
`V` is being used by `visual-line-mode`:
```console
$ bindkey -M vicmd V
""V"" visual-line-mode
```

These are the default uppercase key bindings for `vicmd`:
```
""A"" vi-add-eol
""B"" vi-backward-blank-word
""C"" vi-change-eol
""D"" vi-kill-eol
""E"" vi-forward-blank-word-end
""F"" vi-find-prev-char
""G"" vi-fetch-history
""I"" vi-insert-bol
""J"" vi-join
""N"" vi-rev-repeat-search
""O"" vi-open-line-above
""P"" vi-put-before
""R"" vi-replace
""S"" vi-change-whole-line
""T"" vi-find-prev-char-skip
""V"" visual-line-mode
""W"" vi-forward-blank-word
""X"" vi-backward-delete-char
""Y"" vi-yank-whole-line
```

In the Home row, you've got <kbd>H</kbd>, <kbd>K</kbd> and <kbd>L</kbd> free.
--

--
We already had to backtrack an overriding key binding, this would be more of the same.
--

--
That has been established already. You can't trigger the key binding because the `v` key binding gets triggered too soon. Try raising the `$KEYTIMEOUT` value like is said in https://github.com/ohmyzsh/ohmyzsh/issues/9588#issuecomment-758133386 and https://github.com/ohmyzsh/ohmyzsh/issues/9588#issuecomment-758150445 and you'll see that it works.

We're now debating what alternative to choose.
--

--
We can also use a CTRL or ALT sequence. It's not vim-like but we already have other key bindings that use them.
--

--
> Even with `KEYTIMEOUT` set to `40` or `100` this does not work for me :( I'm really missing this feature.

What's `echo $KEYTIMEOUT; bindkey -M vicmd vv` show? Are you sure you're on vicmd mode?
--

--
What should we do here?
--
",pentago,"
--
I get `""vv"" edit-command-line`.
What gives?
--

--
Yes, all to `vim`:
https://i.imgur.com/y41n4kO.png
--

--
@mcornella absolutely in vicmd. I think the issue comes from the fact that line edit is bound to **vv** where first **v** triggers the visual mode. What I think happens on **vv** is just visual mode toggle, nothing more.

Thoughts?
--

--
While not ideal, **V** would be decent workaround for me.
--

--
Hmm, I'm not big on visual-line-mode and I expect that vast majority of people isn't.
Would sacrificing V for sake of working Visual mode be a decent tradeoff until there's more complete solution available?
--
",stevebarreira,"
--
I'm seeing similar behavior to @pentago and seems like it's related to the `KEYTIMEOUT` value.

My default is `5`, which I'm unable to trigger the command. However if I set it to `50`, `vv` will trigger edit mode. Not sure the broader implications of making an adjustment like that.
--
",japrogramer,"
--
I have this but also ..

but i can do `:execute: edit-command-line_` in vi mode and it works ... so it is the key binding that isn't working
--
",michaeltintiuc,"
--
It should at least be mentioned that `KEYTIMEOUT` should be adjusted in the `vi-mode` README if an alternative is not agreed upon, my value was of `1`
--

--
No you don't https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/vi-mode/vi-mode.plugin.zsh#L67
--
",AckslD,"
--
Even with `KEYTIMEOUT` set to `40` or `100` this does not work for me :( I'm really missing this feature.
--

--
Hmm, `bindkey -M vicmd vv` returns `""vv"" undefined-key`. Do I need to set this manually?
--

--
This was my bad! I didn't realise that I actually had `zsh-vim-mode` loaded and not `vi-mode`. Sorry for the confusion!
--
"
9571,OPEN,Enhance autocorrect prompt to add to CORRECT_IGNORE or CORRECT_IGNORE_FILE variable,Feature,2021-01-13 04:29:08 +0000 UTC,BrianCanFixIT,In progress,,"**Issue**
Autocorrect is awesome, but often users of zsh will end up turning it off because they get a correction that annoys them and they do not have an easy way to tell the system to ignore that correction.
```
user@computer ~$ killall ssh
zsh: correct 'ssh' to '.ssh' [nyae]? n
```
One such example:
https://stackoverflow.com/questions/3437454/zsh-wants-to-autocorrect-a-command-with-an-before-it

**Solution**
When prompted for an autocorrect, have an option to ""**I**gnore"" this particular correction.
```
user@computer ~$ killall ssh
zsh: correct 'ssh' to '.ssh' [nyaei]? n
```
Choosing the ""i"" option will add the particular correction to the CORRECT_IGNORE or CORRECT_IGNORE_FILE variable in the ~/.zshrc file.

In the particular example above the following would be set in the ~/.zshrc file:
```
CORRECT_IGNORE_FILE="".ssh""
```

If there was a value for CORRECT_IGNORE_FILE already, the code would attempt a simple regex pipe followed by the pattern to be added to the ignore list in the ~/.zshrc file:
```
CORRECT_IGNORE_FILE="".somefile|.ssh""
```
",,,mcornella,"
--
If you have `ENABLE_CORRECTION=true` enabled, you can unset it and use `setopt correct` instead, which will only correct command names and not parameters. What you're asking for would be a zsh feature.
--

--
Right. As I said though, this would be zsh territory. I don't have the bandwidth to code such a feature, [ask in the mailing list](https://www.zsh.org/mla).
--
",BrianCanFixIT,"
--
The point is to NOT disable corrections for parameters. 
The point is to enhance the user experience so that the correction function is enhanced rather than disabled for parameters and commands alike.
--
",CantoroMC,"
--
alias ssh='nocorrect ssh'
Also I think it would be very easy to implement such feature since it is restricted to lib/correction.zsh, which contains an if statement on the user variable for correction and a bunch of alias like the one that I wrote for sensible commands. It can be done by using an array
--
",,,,,,
9567,OPEN,Crash ; when I input Chinese text ; sometimes.,,2021-01-16 21:13:27 +0000 UTC,finscn,In progress,,"
the terminal will crash sometimes.

**To Reproduce**
when I input chinese in  git's commit string, like this: 
`git commit -m '输入了很多中文中文中文中文....'`

the terminal will crash sometimes.

**Desktop (please complete the following information):**

 - OS / Distro:  macOS 11
 - Latest ohmyzsh update?: Yes
 - ZSH Version: zsh 5.8 (x86_64-apple-darwin20.1.0)
 - Terminal emulator: macOS's builtin
",,,mcornella,"
--
What's the output of `locale` and `locale -a`?
--

--
Does this happen in `bash` or in another terminal app (like iTerm2)?
--

--
> I don't know is this issue cased by zsh or oh-my-zsh .

Try running `zsh -f` to bypass OMZ.
--

--
Try also a different terminal app, maybe it doesn't happen in iTerm2.
--
",finscn,"
--
```
➜  ~ locale   
LANG=""zh_CN.UTF-8""
LC_COLLATE=""zh_CN.UTF-8""
LC_CTYPE=""zh_CN.UTF-8""
LC_MESSAGES=""zh_CN.UTF-8""
LC_MONETARY=""zh_CN.UTF-8""
LC_NUMERIC=""zh_CN.UTF-8""
LC_TIME=""zh_CN.UTF-8""
LC_ALL=
```
--

--
no. it's just in zsh. 
but , in fact , I don't know  is this issue cased by zsh or oh-my-zsh .
--
",,,,,,,,
9556,OPEN,Use ohmyz.sh domain to deliver installer script,Area: installer; Feature,2020-12-31 14:04:54 +0000 UTC,RakeshChowdhury,In progress,,"**Is your feature request related to a particular plugin or theme? If so, specify it.**
No. It's about the installation and regarding a faster installation technique.

**Is your feature request related to a problem? Please describe.**
It's not a huge problem, yet just a feature id like the team to add. Running the installer script after running `curl https://ohmyz.sh | grep ""sh -c""` involves using the mouse and a bit of copy paste.

**Describe the solution you'd like**
I would like if the team would redirect ohmyz.sh curl http connections to a static text. The text can include comments and echo commands to help the user and the installer command itself too. So the user would just run `sh -c $(curl ohmyz.sh)` to install ohmyzsh. Just like hashbang.sh community does.

**Describe alternatives you've considered**
Another alternative would be to redirect curl users to the script itself instead of the websites http server.

**Additional context**


**Related Issues**
",,,mcornella,"
--
This exists at `install.ohmyz.sh`, though it's served over HTTP so we discouraged its use. We'll discuss this on the next meeting.
--
",RakeshChowdhury,"
--
Sure Thanks for the reply. Also, Have a Great New Year :)

_Stay Safe_
--
",,,,,,,,
9543,OPEN,XDG Base Directory Specification is not being followed,,2021-01-10 19:35:59 +0000 UTC,Avamander,In progress,,"**Describe the bug**

OMZ does not follow the [XDG-BD specification](https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html). Zsh's own behaviour is a separate issue.

This was previously instantly closed here: https://github.com/ohmyzsh/ohmyzsh/issues/7759

**To Reproduce**
Steps to reproduce the behavior, for example:
1. Install OMZ
2. Oh My Zsh places all its stuff under `$HOME/.oh-my-zsh/`

**Expected behavior**
OMZ's folder should be under `$XDG_DATA_HOME/oh-my-zsh/` and some parts in `$XDG_CACHE_HOME/oh-my-zsh`

**Desktop (please complete the following information):**

 - OS / Distro: Ubuntu 20.04
 - Latest ohmyzsh update?: Yes
 - ZSH Version: 5.8
 - Terminal emulator: Konsole
",,,CantoroMC,"
--
Zsh expected behaviour is to place the file in $ZDOTDIR or in $HOME, if the previous is not defined.
Additionally, they allow you to specify a $ZSH variable before launching the installation script.
ZSH=""$XDG_DATA_HOME/oh-my-zsh"" sh install.sh

I will not call this a bug
--

--
I also care about not have my home folder full of configuration file.
But as I explain before the only file not respectful of xdg  specification is .zshenv where you could specify ZDOTDIR.
The issue is not related to Omz but rather to the shell itself.
--

--
Ok, good luck
--
",Avamander,"
--
@CantoroMC 
The defaults should follow the agreed and widespread specifications, not in the reverse. It is a bug.
--

--
@CantoroMC 

> But as I explain before the only file not respectful of xdg specification is .zshenv where you could specify ZDOTDIR.

Actually no, my current install has an `~/.oh-my-zsh` folder that is vital for the functioning of it. The defaults aren't correct.
--
",,,,,,,,
9540,OPEN,Highlight current theme in use with omz tool,Area: core; Feature,2021-02-25 22:58:55 +0000 UTC,leoheck,In progress,,"`omz theme list` could mark the current theme in use, so it is easier to set it back to the previous one while experimenting with new themes. Or at least one command to do that would be nice, lets say `omz theme current`",,,SukkaW,"
--
`echo $ZSH_THEME` will show the current theme you are using. But it might be a good idea to add `omz theme current`.
--
",leoheck,"
--
For instance, if you do the `omz theme list` the default theme could be in another color or with a small mark at the end like this

Here, for instance, I am indicating that `3den*` is the theme in use.

```
Custom themes:
example

Built-in themes:
3den*			gallois			nicoulaj
adben			garyblessington		norm
af-magic		gentoo			obraun
afowler			geoffgarside		peepcode
agnoster		gianu			philips
alanpeabody		gnzh			pmcgee
amuse			gozilla			pygmalion
apple			half-life		pygmalion-virtualenv
arrow			humza			random
aussiegeek		imajes			re5et
avit			intheloop		refined
awesomepanda		itchy			rgm
bira			jaischeema		risto
blinks			jbergantine		rixius
bureau			jispwoso		rkj
candy			jnrowe			rkj-repos
candy-kingdom		jonathan		robbyrussell
clean			josh			sammy
cloud			jreese			simonoff
crcandy			jtriley			simple
crunch			juanghurtado		skaro
cypher			junkfood		smt
dallas			kafeitu			Soliah
darkblood		kardan			sonicradish
daveverwer		kennethreitz		sorin
dieter			kiwi			sporty_256
dogenpunk		kolo			steeef
dpoggi			kphoen			strug
dst			lambda			sunaku
dstufft			linuxonly		sunrise
duellj			lukerandall		superjarin
eastwood		macovsky		suvash
edvardm			maran			takashiyoshida
emotty			mgutz			terminalparty
essembeh		mh			theunraveler
evan			michelebologna		tjkirch
fino			mikeh			tjkirch_mod
fino-time		miloshadzic		tonotdo
fishy			minimal			trapd00r
flazz			mira			wedisagree
fletcherm		mlh			wezm
fox			mortalscumbag		wezm+
frisk			mrtazz			wuffers
frontcube		murilasso		xiong-chiamiov
funky			muse			xiong-chiamiov-plus
fwalch			nanotech		ys
gallifrey		nebirhos		zhann
```
--

--
Actually, I am using something else. But this is not even listed there.

```
➜ echo $ZSH_THEME 
spaceship
```

So, is it possible to have these 3rdparty themes integrated into this command as well?

By the way, I installed this by following the instructions here.
https://github.com/denysdovhan/spaceship-prompt

Maybe the instructions are not in compliance with the current OMZ.
--

--
Now my `spaceship` theme is being shown there, but it looks like something is not right there. 
There is this `example`, and the text on the right is not for the example I guess.
![image](https://user-images.githubusercontent.com/1277920/107822729-562b5a80-6d5d-11eb-99b1-6a3114815fcf.png)

--

--
Ah, so this is the meaning! Got it, thanks.
--
",mcornella,"
--
> So, is it possible to have these 3rdparty themes integrated into this command as well?

We can only check for themes installed inside `$ZSH_CUSTOM`, doing otherwise is impossible. If you followed [the oh-my-zsh instructions](https://github.com/denysdovhan/spaceship-prompt#oh-my-zsh) it should appear in `omz theme list`, under the `Custom themes` section.

----

I like the subtle way to indicate used theme. This shouldn't be that hard to implement, I'll give it a shot soon.
--

--
The random theme should display the chosen theme on startup, unless you set the [`ZSH_THEME_RANDOM_QUIET`](https://github.com/ohmyzsh/ohmyzsh/wiki/Settings#zsh_theme_random_quiet) setting. You can `echo $RANDOM_THEME` any other time to check.

This should be checked by the CLI tool as well though. Mental note.
--

--
Looks like one is a symlink to the other. `example` is a theme file that has nothing in it.
--
",ttrezren,"
--
Is there a way to display which theme is currently displayed when the $ZSH_THEME value is ""random""? I'm using random to audition a few themes.
--
",,,,
9531,OPEN,[macOS] lib/theme-and-appearance.zsh#L24 breaks GNU ls,,2021-01-04 14:39:27 +0000 UTC,yurikoles,In progress,,"**Describe the bug**
I have a GNU coreutils installed and added unprefixed binaries to a `PATH` variable. There is a following line:
https://github.com/ohmyzsh/ohmyzsh/blob/b28665aebb4c1b07a57890eb59551bc51d0acf37/lib/theme-and-appearance.zsh#L23-L24

But the `-G` option has another behavior in [GNU `ls`](https://github.com/coreutils/coreutils/blob/08b59f31a582ec7bc8eabab9cfc508bf1d5e5288/src/ls.c#L5389): 

```
  -G, --no-group  in a long listing, don't print group names\n\
```

And there is no check is `ls` stock or GNU one:

**To Reproduce**
Steps to reproduce the behavior:
1. Install coreutils via `brew install coreutils`.
2. Follow `brew` [caveat](https://github.com/Homebrew/homebrew-core/blob/171c7c8bb350b272d534f39241704f4bafd81d8d/Formula/coreutils.rb#L75) and add them to a `PATH` by putting line `PATH=""/usr/local/opt/coreutils/libexec/gnubin:$PATH""` to a zsh config.
3. Open a new shell session.
4. Invoke `ls -l`.
5. See that there is no group column.

**Expected behavior**
I suggest adding some sanity check is `ls` a stock or GNU one, so `-G` option shouldn't be added to a GNU `ls`.

**Desktop (please complete the following information):**

 - OS / Distro: macOS 11.1 (20C69)
 - Latest ohmyzsh update?: Yes
 - ZSH Version: 5.8
 - Terminal emulator: macOS stock 

**Additional context**
I don't see this issue with official `gnu-utils` plugin which is an alternative to aforementioned `brew` caveat.
Another workaround is to generate colors config by `dircolors -b > ""${HOME}/.dircolors""` to pass the following check:
https://github.com/ohmyzsh/ohmyzsh/blob/b28665aebb4c1b07a57890eb59551bc51d0acf37/lib/theme-and-appearance.zsh#L28",,,mcornella,"
--
I don't have a macOS system to check. Can you look for a reliable check to detect whether `ls` is from `coreutils` or not?
--
",yurikoles,"
--
Sorry, I forgot to mention, that there is a comment above:
https://github.com/ohmyzsh/ohmyzsh/blob/b28665aebb4c1b07a57890eb59551bc51d0acf37/lib/theme-and-appearance.zsh#L26-L28

So developers (git blame shows that this was you :)) are forcing users to use stock `ls` on macOS, which may be against user intention.

About your question: stock macOS `ls` comes from some old BSD code, [here](https://www.unix.com/man-page/osx/1/ls/) is a man. `/bin/ls --version` exits with code `1`, `gls --version` works fine and shows standard GNU coreutils staff. So here is a script that I had developed and checked:

```
ls_version_output=$(ls --version 2>&1)
ls_version_code=$?
ls_gnu_string=""GNU coreutils""
if [[ ""${ls_version_code}"" -eq 1 ]];
then
	echo ""BSD"";
elif [[ ""${ls_version_output}"" == *""${ls_gnu_string}""* ]]; then
  	echo ""GNU""
else
	echo ""Dunno""
fi
```
--
",,,,,,,,
9512,OPEN,[Feature Request] Auto update plugins under $ZSH_CUSTOM folder,Feature,2021-04-02 20:37:46 +0000 UTC,SukkaW,In progress,,"**Is your feature request related to a problem? Please describe.**

oh-my-zsh built-in plugins will be updated during `omz update` (and auto-update as well) since those plugins are hosted in the `ohmyzsh` repo. However, there might be many users' plugins that are located under the `$ZSH_CUSTOM` folders. oh-my-zsh should update them as well when `omz update`.

**Describe the solution you'd like**

First, there should be an option (maybe `$UPDATE_ZSH_CUSTOM`). When enabled, `omz update` (or during the auto update) should look through every directory under the `$ZSH_CUSTOM` folder. If there is a `.git`, execute `git pull --rebase`.

**Describe alternatives you've considered**

There are many existed oh-my-zsh plugins that accomplish the same thing. But they heavily rely on overrides oh-my-zsh internal function. oh-my-zsh could provide an `after_update_hook` for them.

**Additional context**

- https://github.com/TamCore/autoupdate-oh-my-zsh-plugins
- https://github.com/tautomer/update-ohmyzsh-custom-plugins

Two oh-my-zsh plugins pop up in Google search result when I type in ""oh my zsh custom plugin update"".
",,,SukkaW,"
--
Another alternative: `omz plugin update`.
--

--
> I used the below snippet from [this solution](https://unix.stackexchange.com/questions/477258/how-to-auto-update-custom-plugins-in-oh-my-zsh) before.
> The problem with this hack is now I'm getting git merge errors. So I have to git stash & then update. So an official feature would be great.

I don't need any ""third-party"" solution bacause I already got one (even better than the one your have found):

```bash
update_ohmyzsh_custom_plugins() {
    red=$(tput setaf 1)
    blue=$(tput setaf 4)
    green=$(tput setaf 2)
    reset=$(tput sgr0)

    echo """"
    printf ""${blue}%s${reset}\n"" ""Upgrading custom plugins""

    find ""${ZSH_CUSTOM:-~/.oh-my-zsh/custom}"" -type d -name "".git"" | while read LINE; do
        p=${LINE:h}
        pushd -q ""${p}""

        if git pull --rebase; then
            printf ""${green}%s${reset}\n"" ""${p:t} has been updated and/or is at the current version.""
        else
            printf ""${red}%s${reset}\n"" ""There was an error updating ${p:t}. Try again later?""
        fi
        popd -q
    done
}
```

The code snippet above will ignore any git merge errors since it uses `git pull --rebase`.
--
",K,"
--
I used the below snippet from [this solution](https://unix.stackexchange.com/questions/477258/how-to-auto-update-custom-plugins-in-oh-my-zsh) before.

```
# Custom Plugin update custom function
printf ""\n${BLUE}%s${RESET}\n"" ""Updating custom plugins and themes""
cd custom/
for plugin in plugins/*/ themes/*/; do
  if [ -d ""$plugin/.git"" ]; then
     printf ""${YELLOW}%s${RESET}\n"" ""${plugin%/}""
     git -C ""$plugin"" pull
  fi
done
```

The problem with this hack is now I'm getting git merge errors. So I have to git stash & then update. So an official feature would be great.


--

--
@SukkaW I see that looks great. I mean official feature would be great. anyway, thank you for the snippet :)
--
",mr,"
--
yeah, my upgrade.sh is always in a modified state and I'd like that not to be the case.

I'd vote for just incorporating the above logic into `tools/upgrade.sh` but we could also do what I'm doing; provide a hook and leave it up to the user:

```
local custom_upgrade=${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/upgrade.sh
if [[ $ret -eq 0 && -x $custom_upgrade ]]; then
  $custom_upgrade
  ret=$?
fi
```

Previously I had hand-crafted `custom/upgrade.sh` but I like @SukkaW 's version better so I'm using that now.  One note:  your expansion doesn't work if `$ZSH_CUSTOM` is unset - the `~` is interpreted literally and not expanded to `$HOME`; removing the double quotes fixes that although there may be a better fix.

[edit: OMZ automatically sources `.zsh` files in `custom`, so I renamed my second stage script to `.sh`]
--
",,,,,,
9483,OPEN,Allow customize agnoster prompt,Feature,2020-12-02 13:12:32 +0000 UTC,strowk,Opened,,"**Theme: agnoster**

**Problem**
Normally prompt prints complete dir path `%~`, substituting home to `~`. I like to have only last part of dir (`'%1d'`). So I'd like prompt to be configurable. 

**Possible Solution**
There's an example how it could look like in alternative agnoster impl here - https://github.com/agnoster/agnoster-zsh-theme . See AGNOSTER_PROMPT_SEGMENTS. 

**Alternatives**
I can just change that thing myself in the zsh-theme flie. This is what I did currently, but it would probably be overwritten by update. 
There could be different implementation, which does not work the same as in another impl(AGNOSTER_PROMPT_SEGMENTS). Because build_prompt refers to prompt_dir, it could be possible to somehow inject in between and override function. For example prompt_dir might look if there's already function like custom_agnoster_prompt_dir and delegate there instead. ",,,okasang99,"
--
[Null](www.jokerslot.net) 

> ``Mumumay88
--

--
 #@Mumumay88 
Duplicate of  #9416   #9482 jma98905
--
",,,,,,,,,,
9480,OPEN,Vendor completions for docker broken,Area: plugin; Status: not our issue; Topic: completion,2021-04-06 18:19:25 +0000 UTC,kwielo,Opened,,"```

Full output:

```bash
[oh-my-zsh] Would you like to update? [Y/n]
Updating Oh My Zsh
remote: Enumerating objects: 59, done.
remote: Counting objects: 100% (59/59), done.
remote: Compressing objects: 100% (22/22), done.
remote: Total 39 (delta 23), reused 33 (delta 17), pack-reused 0
Unpacking objects: 100% (39/39), done.
From https://github.com/ohmyzsh/ohmyzsh
 * branch            master     -> FETCH_HEAD
   9b11986..05e2956  master     -> origin/master
 plugins/ansible/ansible.plugin.zsh               |   4 +--
 plugins/aws/aws.plugin.zsh                       |  25 +++++++++++------
 plugins/git-auto-fetch/README.md                 |  43 +++++++++++++++++++++--------
 plugins/git-auto-fetch/git-auto-fetch.plugin.zsh |  81 +++++++++++++++++++++++++++++++++++-------------------
 plugins/gitfast/_git                             | 129 +++++++++++++++++++++++++++++++++++++++++++-------------------------------------------
 plugins/gitfast/git-completion.bash              |  73 +++++++++++++++++++++++++++++--------------------
 plugins/gitfast/update                           |   2 +-
 plugins/magic-enter/magic-enter.plugin.zsh       |  53 ++++++++++++++++++++++--------------
 plugins/shell-proxy/proxy.py                     |   2 +-
 plugins/shell-proxy/ssh-agent.py                 |   2 +-
 plugins/terraform/_terraform                     | 228 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-----------------------------------------------------------
 11 files changed, 384 insertions(+), 258 deletions(-)
First, rewinding head to replay your work on top of it...
Fast-forwarded master to 05e2956dc61198d4767b96d97c5d10c93cedd6e3.
         __                                     __
  ____  / /_     ____ ___  __  __   ____  _____/ /_
 / __ \/ __ \   / __ `__ \/ / / /  /_  / / ___/ __ \
/ /_/ / / / /  / / / / / / /_/ /    / /_(__  ) / / /
\____/_/ /_/  /_/ /_/ /_/\__, /    /___/____/_/ /_/
                        /____/
Hooray! Oh My Zsh has been updated and/or is at the current version.
To keep up on the latest news and updates, follow us on Twitter: https://twitter.com/ohmyzsh
Want to get involved in the community? Join our Discord: https://discord.gg/ohmyzsh
Get your Oh My Zsh swag at: https://shop.planetargon.com/collections/oh-my-zsh
compinit:501: no such file or directory: /usr/share/zsh/vendor-completions/_docker
```

**To Reproduce**
This is happening during update, not sure how to reproduce automatic update procedure:

**Expected behavior**
No error messages at the end of the update.

**Screenshots and/or Recordings**
n/a

**Self Check**
Done.

**Desktop (please complete the following information):**

 - OS / Distro: Ubuntu 18.04
 - If on Windows what version of WSL: WSL2
 - Latest ohmyzsh update?: Yes
 - ZSH Version: 5.4.2
 - Terminal emulator: Windows Terminal

**Additional context**

```
ZSH_THEME=""gallois""
plugins=(git composer zsh-autosuggestions zsh-completions)
```",,,mrbagpipe,"
--
I found the reason for this error here: https://github.com/docker/for-win/issues/8336

Looks like there is no solution yet though but at least it explains the error
--
",mcornella,"
--
Workaround: https://github.com/docker/for-win/issues/8336#issuecomment-718369597
--

--
> This is happening during update, not sure how to reproduce automatic update procedure:

Does this *only* happen during update? If so it might be because `compinit` is run afterwards without cache.
--
",,,,,,,,
9472,OPEN,Git autocompletion seems to be broken.,,2020-11-27 21:54:58 +0000 UTC,sobiodarlington,In progress,,"Steps to reproduce the behavior, for example:
1. Run git checkout /<tab>
2. Press [tab] to get suggestions
3. My root dir is suggested instead of branches/tags

**Expected behavior**
A list of branches/tags should be suggested


**Desktop (please complete the following information):**

 - OS / Distro: macOS Catalina
 - Latest ohmyzsh update?: Yes
 - ZSH Version: 5.8
 - Terminal emulator: iTerm2
",,,mcornella,"
--
After trying to tab-complete, please run this and post the output: `which _git`.
--

--
Can you run `whence -v _git` (after tab-completing git), as well as post your zshrc file?
--
",sobiodarlington,"
--
This is the output from `which _git` command

```
$ which _git

_git () {
	local _ret=1
	local cur cword prev
	cur=${words[CURRENT]}
	prev=${words[CURRENT-1]}
	let cword=CURRENT-1
	if (( $+functions[__${service}_zsh_main] ))
	then
		__${service}_zsh_main
	else
		emulate ksh -c __${service}_main
	fi
	let _ret && _default && _ret=0
	return _ret
}
```
--
",,,,,,,,
9471,OPEN,oh-my-zsh may be setting `sharehistory`,Area: core; Feature,2020-12-11 15:00:35 +0000 UTC,PEConn,Opened,,"**Describe the bug**
oh-my-zsh updated itself recently - I don't know how to find the version, but if I do `cd ~/.oh-my-zsh; git log` it shows `7a76afd61` as the most recent commit.

I noticed that history was getting shared between my terminals, and found that if I ran `setopt`, the output included `sharehistory`.

I added `unsetopt sharehistory` to my `.zshrc` and continued happily, but I'm unsure what caused it to be set in the first place. Could it be something to do with the `oh-my-zsh` update?

 - OS / Distro: Linux
 - Latest ohmyzsh update?: Yes
 - ZSH Version: zsh 5.8 (x86_64-debian-linux-gnu)
 - Terminal emulator: Gnome terminal 3.36.2
",,,mcornella,"
--
The removal was reverted in 28ed2880 due to user complaints. It'll probably be replaced with `inc_append_history` after the ""breaking change"" notification via the changelog is more widely spread in users' local setups.
--
",,,,,,,,,,
9461,OPEN,plugin pyenv does not work or I don't know How use it ?,Support,2020-12-02 07:28:33 +0000 UTC,mnekkach,In progress,,"Hi,

I just install a fresh version of ohmyzsh and I want to use pyenv plugin.

so I have add the plugin in my .zshrc 

`plugin=(git pyenv)`

I have restart my shell, but when I am in a directory with a pyenv local python version (I have .python-version in my folder) they are nothing in my prompt.

Normaly the version of python should be write in my prompt ?

thanks for your help
 ",,,mcornella,"
--
I assume `pyenv` is installed? Does `pyenv` automatically add the version to the prompt? If not, then you'd have to manually add the `pyenv_prompt_info` function to `$PROMPT` or `$RPROMPT` so that it is shown.
--
",mnekkach,"
--
I don't know what I do but now I have the python version in the right prompt. I have just install virtualenv in the pyenv/plugins folder. I'm going to make an over test in a new virtual machine to understand what's happened. Thanks for your answer.
--
",CmdQ,"
--
Isn't the pyenv plugin mainly about finding pyenv and setting up its completion?

If you want the prompt you'll also have to look for a theme that supports it. Or try [starship](starship.rs/).
--
",,,,,,
9438,OPEN,"Git plugin: ""gl"" should be short for ""git log""; not ""git push""",Feature; Plugin: git; Topic: alias,2020-12-10 13:26:28 +0000 UTC,ivanjonas,Opened,,"It seems more intuitive for ""gl"" to mean ""git log"", and perhaps that was the intent. In the line below, a grouping of ""git log""-related aliases can be seen. ""git push"" seems out of place.

https://github.com/ohmyzsh/ohmyzsh/blob/51772732f54f01522ad5720e8ed0ba16ca3147ae/plugins/git/git.plugin.zsh#L186-L202

@robbyrussell I tried to find a list of the plugin maintainers but could not find one. Perhaps it could be linked from the contributing guidelines?",,,tryfinally,"
--
While its seems logical to do the change, it will go against a lot of muscle memory.
Note that `git pull` is used in higher frequency that `git log` and it make sense to give it a shorter alias.
2 chars for the frequently used: `gp` and `gl` (`git push` and `git pull` respectively)
3 or more chars for the less frequently used `git log` variants.
Maybe some one can come with a creative short alias  for the duo `git push` `git pull` in order or enable the transition.
--
",KANGOD,"
--
While for me `git log` is much more frequently used.
Normally using `git fetch` `git rebase` instead of `git pull`.
--
",R0LA1mRifcF8yAkk,"
--
```sh
unalias gl
alias gl=""git log""
```

there, everyone can be happy
--
",,,,,,
9414,OPEN,Add option to disable ohmyzsh's aliases,Feature,2020-11-29 19:54:50 +0000 UTC,,Opened,,"
**Is your feature request related to a problem? Please describe.**
Yes. I don't want aliases i never asked for. When I do `alias` i see that there are aliases like `egrep='egrep --color=auto --exclude-dir={.bzr,CVS,.git,.hg,.svn,.idea,.tox}'`, which I have no idea about.

**Describe the solution you'd like**
It would be nice if I could set a variable like OMZ_ALIASES=false, so that i can disable aliases, or a even better solution would be to maintain the list of aliases in a separate file, so that I can comment out the ones if don't want//

**Describe alternatives you've considered**
I have tried to manually comment out the aliases i don't want by grep-ing, but that is tiresome

**Additional context**
I am not talking about the git aliases, which are rather helpful. I am talking about the aliases that are sourced even when `plugins=()`

**Related Issues**
Unwanted aliases can lead to people wondering what they are doing wrong when they aren't doing anything wrong, and its the alias they never knew they had causing the problem.
",,,MrAureliusR,"
--
Are you sure these are from oh-my-zsh, and not from your distributions /etc/profile or similar?
--
author:	
association:	none
edited:	false
status:	none
--
@MrAureliusR yes i am sure these are from oh-my-zsh, try it yourself
Run alias and you will see ""_"" aliases as sudo
--
",jose,"
--
@MrAureliusR yes i am sure these are from oh-my-zsh, try it yourself
Run alias and you will see ""_"" aliases as sudo
--
author:	jose-bonilla
association:	none
edited:	false
status:	none
--
> @MrAureliusR yes i am sure these are from oh-my-zsh, try it yourself
> Run alias and you will see ""_"" aliases as sudo

Can you show your list of aliases? Mine isn't showing this.
--
",cascadingstyletrees,"
--
> @MrAureliusR yes i am sure these are from oh-my-zsh, try it yourself
> Run alias and you will see ""_"" aliases as sudo

Can you show your list of aliases? Mine isn't showing this.
--
author:	cascadingstyletrees
association:	contributor
edited:	false
status:	none
--
You can add an unset at the end of your `.zshrc`, I was having the same issue with `fd` being overwritten by the `common-aliases` plugins. So I added:

`unset fd` to the end of my .zshrc 
--

--
You can add an unset at the end of your `.zshrc`, I was having the same issue with `fd` being overwritten by the `common-aliases` plugins. So I added:

`unset fd` to the end of my .zshrc 
--
author:	cascadingstyletrees
association:	contributor
edited:	false
status:	none
--
This is a slightly similar situation as this PR for fd, https://github.com/ohmyzsh/ohmyzsh/pull/9162

--
",,,,,,
9395,OPEN,git-prompt plugin doesn't display properly,,2020-10-28 17:03:59 +0000 UTC,tywmick,Opened,,"
### To Reproduce

1. Add `git-plugin` to the `plugins` array in `.zshrc`.
2. `exec zsh`
3. `cd` into any git repository.

### Expected behavior

I should see a git prompt matching [`git-prompt`'s examples](https://github.com/ohmyzsh/ohmyzsh/tree/d05544562532fdf4d5f4a4d4eba01f4263e17cc7/plugins/git-prompt#examples) in the correct location for my theme.

### Screenshots and/or Recordings

<img width=""570"" alt=""Screen Shot 2020-10-28 at 11 02 11 AM"" src=""https://user-images.githubusercontent.com/5317080/97470385-77cf1600-1915-11eb-85a6-20726b6fee95.png"">
<img width=""570"" alt=""Screen Shot 2020-10-28 at 11 14 22 AM"" src=""https://user-images.githubusercontent.com/5317080/97470397-7998d980-1915-11eb-8421-fbad6d55750a.png"">

### Desktop (please complete the following information):

- OS / Distro: macOS 10.15.7 (19H2)
- Latest ohmyzsh update?: Yes
- ZSH Version: 5.7.1 (x86_64-apple-darwin19.0)
- Terminal emulator: Mac Terminal, VSCodium

### Additional context

Here's my `.zshrc` (excluding comments):

```sh
export ZSH=""/Users/tymick/.oh-my-zsh""
ZSH_THEME=""robbyrussell""
plugins=(
    alias-finder brew colored-man-pages command-not-found common-aliases
    copybuffer copydir copyfile git git-auto-fetch git-prompt safe-paste sudo
    vscode web-search
)
source $ZSH/oh-my-zsh.sh
```

And here's my `.oh-my-zsh/custom`: [https://github.com/tywmick/ohmyzsh-custom](https://github.com/tywmick/ohmyzsh-custom/tree/b755d24aae5b81cbb5d127ff132edf38da766373)",,,,,,,,,,,,,,
9380,OPEN,Installing system-wide,,2020-12-15 09:53:28 +0000 UTC,TriMoon,In progress,,"What is needed to install this as an system-wide extension to Zsh?
This would allow distro's to make a package that install's it system-wide.

When installed system-wide the update to the local git-clone would require root ofcourse.
But the per user customization could be left in the `~/.zshrc` in the users homedir.",,,TriMoon,"
--
For my current ongoing attempt(s) see [here](https://forum.manjaro.org/t/zsh-with-oh-my-zsh/33735).
--

--
@ybrhue i am still using what i wrote there, and have not had a chance to create a poll about it (which was suggested in that forum thread)

Edit: Sorry i forgot to post the link to the poll i created after i made this reply, so here it is anyhow:
https://forum.manjaro.org/t/poll-zsh-with-oh-my-zsh-as-default/39662

--
",ybrhue,"
--
@TriMoon Any Updates?
--
",,,,,,,,
9368,OPEN,shrink-path option for truncation of directory names based on a given percentage,,2020-10-22 02:34:33 +0000 UTC,SandWoodJones,Opened,,"
**Describe the solution you'd like**
An option for the shrink-path function that truncates the directory's name based on percentage with a minimum number of characters. For example, say truncate 40% of the original name while keeping at least 3 characters, the `text` directory, would stay as `tex` and the `textures` directory, rounded up, as `textu`
",,,,,,,,,,,,,,
9322,OPEN,ohmyzsh is terribly slow on chromium folder,Performance,2021-01-21 15:22:38 +0000 UTC,asurkov,In progress,,"
**Describe the bug**
Each and every operation in chromium sources folder seems to be terribly slow, it may take a sec or two on macpro.

**To Reproduce**
Steps to reproduce the behavior, for example:
1. Download chromium source code https://www.chromium.org/developers/how-tos/get-the-code
2. enter sources folder and press ctrl+c
3. it takes a sec or two+ to complete

**Expected behavior**
It should take no time

**Desktop (please complete the following information):**

 - OS / Distro: macOS
 - Latest ohmyzsh update?: Yes
 - ZSH Version: [e.g. 5.7.1]
 - Terminal emulator: [e.g. Terminal]

**Additional context**
I suspect chromium sources are just huge which makes certain zsh operations a bottleneck.
",,,mcornella,"
--
Which theme are you using? Can you also post the commit you're using on OMZ? (`git -C $ZSH rev-parse HEAD`)
--

--
Yeah, it looks like what you mean is that the prompt takes a long time to print. Can you check if checking out 297238b7 works better? (restart zsh with `exec zsh`)
--
",asurkov,"
--
git -C $ZSH rev-parse HEAD
fc6c9ca4b40ee1c9ba7fb4b1c8862fb54a8cb1f6

theme has to be default one, how do I check this?
--

--
just to clarify: ctrl+c is specifically slow, command substitution and search seems working ok, perhaps it's worth to reword the bug. bash btw seems works just fine, ctrl+c takes no time.
--

--
> Although I'm not sure this is the issue, this is worth a shot
> 
> @asurkov Could you tell which theme you are using?

I think I have robbyrussell

```
> cat ~/.zshrc | grep ZSH_THEME
ZSH_THEME=""robbyrussell""
# Setting this variable when ZSH_THEME=random will cause zsh to load
# ZSH_THEME_RANDOM_CANDIDATES=( ""robbyrussell"" ""agnoster"" )
```

> There is a git dirty parsing which is done before printing the prompt every time.
> 
> Try this and let us know if it improves performance
> 
> ```
> $ cd /path/to/chromium/source
> $ git config oh-my-zsh.hide-dirty 1
> ```

It definitely helps, it's fast now!
--
",sylvestre,"
--
Same issue with Firefox on hg: https://github.com/ohmyzsh/ohmyzsh/issues/4116
--
",jatin,"
--
Although I'm not sure this is the issue, this is worth a shot

@asurkov Could you tell which theme you are using? 
There is a git dirty parsing which is done before printing the prompt every time.

Try this and let us know if it improves performance

```
$ cd /path/to/chromium/source
$ git config oh-my-zsh.hide-dirty 1
```
--

--
@asurkov Glad it helped :)
@mcornella I guess this can be closed now then. It would be nice to mention this somewhere visibly in the documentation for new users. This issue occurs on a lot of big repos, like tensorflow, LLVM, Chromium, to name a few
--
",,,,
9304,OPEN,debian plugin shadows ar archiver,,2020-10-02 15:40:43 +0000 UTC,matsievskiysv,Opened,,"**To Reproduce**
Steps to reproduce the behavior, for example:
1. Enable `debian` plugin
2. Run command `which ar`
3. See `ar: aliased to sudo apt remove`

**Expected behavior**
`ar` must not be shadowed

**Desktop:**

 - OS / Distro: Gnu/Linux Debian bullseye
 - Latest ohmyzsh update?: Yes
 - ZSH Version: 5.8
 - Terminal emulator: [`st`](https://st.suckless.org/)
",,,,,,,,,,,,,,
9296,OPEN,Support for dvtm; similarly to tmux,Feature,2020-09-29 08:12:57 +0000 UTC,robcsi,Opened,,"**Plugin for dvtm**
I'd like to have a plugin, which enables the use of dvtm (dynamic virtual terminal manager) the same way one exists for tmux.

dvtm: https://github.com/martanne/dvtm

**Additional context**
It's very easy to enable tmux integration at the moment, just by setting some variables (ZSH_TMUX_AUTOSTART, ZSH_TMUX_AUTOCONNECT, etc.), so I'd like to have a similar approach to dvtm as well. Even if it's just enabling it, in the first step. I see tmux plugin defines some aliases as well, which is also nice to have for dvtm as well, but I could live without those.

Thanks,
Robert


",,,,,,,,,,,,,,
9294,OPEN,Docker plugin autocompletion 'bad math expression: empty string',Area: plugin; Bug; Topic: completion,2021-01-01 12:43:35 +0000 UTC,glebsam,In progress,,"__docker_plugins:27: bad math expression: empty string
__docker_plugins:27: bad math expression: empty string
__docker_plugins:27: bad math expression: empty string
__docker_plugins:27: bad math expression: empty string
__docker_plugins:27: bad math expression: empty string
__docker_plugins:27: bad math expression: empty string
```

**To Reproduce**
Steps to reproduce the behavior, for example:
1. Enable plugin `docker`
2. Run command 'docker inspect' and try to complete it with pressing `TAB`
3. See error

**Expected behavior**
No errors, completion results, if any

**Screenshots and/or Recordings**
![image](https://user-images.githubusercontent.com/10254791/94444933-8956be00-01af-11eb-9830-839a115ae56a.png)

**Self Check**

- Have you tried reaching out on the [Discord server](https://discord.gg/ohmyzsh)? 
  _asked, no response at `#tech-support` channel_

- Also searching existing [GitHub Issues](https://github.com/ohmyzsh/ohmyzsh/issues?q=) might help you get quicker support
  _did not found any related issues_

**Desktop (please complete the following information):**

 - OS / Distro: macOS
 - Latest ohmyzsh update?: Yes
 - ZSH Version: 5.7.1
 - Terminal emulator: iTerm2

**Aditional info**
`rm ~/.zcompdump*` did not help. ",,,mcornella,"
--
Run `typeset -f -t __docker_plugins` after trying to complete the command, try to complete it again and post the shell output.
--

--
This seems to be an issue with the output of `docker plugin ls` not showing a `TAG` column, which makes the `__docker_plugins` function trip up. There doesn't seem to be a fix upstream for this bug.

I believe the function needs to look for the `ID` column, this change would fix it:
```diff
diff --git a/plugins/docker/_docker b/plugins/docker/_docker
index 10c19e23..b9d52748 100644
--- a/plugins/docker/_docker
+++ b/plugins/docker/_docker
@@ -1579,7 +1579,7 @@ __docker_plugins() {
     # Name
     for line in $lines; do
         s=""${line[${begin[NAME]},${end[NAME]}]%% ##}""
-        s=""$s:${(l:7:: :::)${${line[${begin[TAG]},${end[TAG]}]}%% ##}}""
+        s=""$s:${(l:7:: :::)${${line[${begin[ID]},${end[ID]}]}%% ##}}""
         plugins=($plugins $s)
     done
```

I'll post a bug report on the docker repository and update with the details.
--

--
Here's the upstream issue if you want to track it: https://github.com/docker/cli/issues/2761
--

--
Submitted https://github.com/docker/cli/pull/2903 to fix it.
--
",glebsam,"
--
This is the requested output:

```
~/Shootingrange
❯ docker inspect ++++++++++ _docker:1556 @__docker_plugins:1> [[ '' = -* ]]
++++++++++ _docker:1557 @__docker_plugins:2> integer ret=1
++++++++++ _docker:1558 @__docker_plugins:3> local line s
++++++++++ _docker:1559 @__docker_plugins:4> declare -a lines plugins args
++++++++++ _docker:1561 @__docker_plugins:6> filter=none
++++++++++ _docker:1561 @__docker_plugins:6> shift
++++++++++ _docker:1562 @__docker_plugins:7> [[ none != none ]]
++++++++++ _docker:1564 @__docker_plugins:9> lines=++++++++++ _docker:1564 @__docker_plugins:9> _call_program commands docker ' ' plugin ls
+++++++++++ _call_program:3 @_call_program:3> local curcontext=:complete:docker-inspect: tmp err_fd=-1 clocale='_comp_locale;'
+++++++++++ _call_program:4 @_call_program:4> local -a prefix
+++++++++++ _call_program:6 @_call_program:6> [[ commands = -p ]]
+++++++++++ _call_program:13 @_call_program:13> [[ commands = -l ]]
+++++++++++ _call_program:18 @_call_program:18> ((  -1 > 2  ))
+++++++++++ _call_program:18 @_call_program:18> [[ ! -t 2 ]]
++++++++++ _docker:1564 @__docker_plugins:9> lines=( 'ID                  NAME                DESCRIPTION           ENABLED' 'c2fed0b839d6        loki:latest         Loki Logging Driver   true' )
++++++++++ _docker:1567 @__docker_plugins:12> local i=1 j=1 k header='ID                  NAME                DESCRIPTION           ENABLED'
++++++++++ _docker:1568 @__docker_plugins:13> declare -A begin end
++++++++++ _docker:1569 @__docker_plugins:14> ((  j < 69 - 1  ))
++++++++++ _docker:1570 @__docker_plugins:15> i=1
++++++++++ _docker:1571 @__docker_plugins:16> j=3
++++++++++ _docker:1572 @__docker_plugins:17> k=20
++++++++++ _docker:1573 @__docker_plugins:18> begin[${header[$i,$((j-1))]}]=1
++++++++++ _docker:1574 @__docker_plugins:19> end[${header[$i,$((j-1))]}]=20
++++++++++ _docker:1569 @__docker_plugins:14> ((  j < 69 - 1  ))
++++++++++ _docker:1570 @__docker_plugins:15> i=21
++++++++++ _docker:1571 @__docker_plugins:16> j=25
++++++++++ _docker:1572 @__docker_plugins:17> k=40
++++++++++ _docker:1573 @__docker_plugins:18> begin[${header[$i,$((j-1))]}]=21
++++++++++ _docker:1574 @__docker_plugins:19> end[${header[$i,$((j-1))]}]=40
++++++++++ _docker:1569 @__docker_plugins:14> ((  j < 69 - 1  ))
++++++++++ _docker:1570 @__docker_plugins:15> i=41
++++++++++ _docker:1571 @__docker_plugins:16> j=52
++++++++++ _docker:1572 @__docker_plugins:17> k=62
++++++++++ _docker:1573 @__docker_plugins:18> begin[${header[$i,$((j-1))]}]=41
++++++++++ _docker:1574 @__docker_plugins:19> end[${header[$i,$((j-1))]}]=62
++++++++++ _docker:1569 @__docker_plugins:14> ((  j < 69 - 1  ))
++++++++++ _docker:1570 @__docker_plugins:15> i=63
++++++++++ _docker:1571 @__docker_plugins:16> j=70
++++++++++ _docker:1572 @__docker_plugins:17> k=68
++++++++++ _docker:1573 @__docker_plugins:18> begin[${header[$i,$((j-1))]}]=63
++++++++++ _docker:1574 @__docker_plugins:19> end[${header[$i,$((j-1))]}]=68
++++++++++ _docker:1569 @__docker_plugins:14> ((  j < 69 - 1  ))
++++++++++ _docker:1576 @__docker_plugins:21> end[${header[$i,$((j-1))]}]=-1
++++++++++ _docker:1577 @__docker_plugins:22> lines=( 'c2fed0b839d6        loki:latest         Loki Logging Driver   true' )
++++++++++ _docker:1580 @__docker_plugins:25> line=c2fed0b839d6        loki:latest         Loki Logging Driver   true
++++++++++ _docker:1581 @__docker_plugins:26> s=loki:latest

++++++++++ _docker:1582 @__docker_plugins:27> s=__docker_plugins:27: bad math expression: empty string
__docker_plugins:27: bad math expression: empty string

++++++++++ _docker:1556 @__docker_plugins:1> [[ '' = -* ]]
++++++++++ _docker:1557 @__docker_plugins:2> integer ret=1
++++++++++ _docker:1558 @__docker_plugins:3> local line s
++++++++++ _docker:1559 @__docker_plugins:4> declare -a lines plugins args
++++++++++ _docker:1561 @__docker_plugins:6> filter=none
++++++++++ _docker:1561 @__docker_plugins:6> shift
++++++++++ _docker:1562 @__docker_plugins:7> [[ none != none ]]
++++++++++ _docker:1564 @__docker_plugins:9> lines=++++++++++ _docker:1564 @__docker_plugins:9> _call_program commands docker ' ' plugin ls
+++++++++++ _call_program:3 @_call_program:3> local curcontext=:complete:docker-inspect: tmp err_fd=-1 clocale='_comp_locale;'
+++++++++++ _call_program:4 @_call_program:4> local -a prefix
+++++++++++ _call_program:6 @_call_program:6> [[ commands = -p ]]
+++++++++++ _call_program:13 @_call_program:13> [[ commands = -l ]]
+++++++++++ _call_program:18 @_call_program:18> ((  -1 > 2  ))
+++++++++++ _call_program:18 @_call_program:18> [[ ! -t 2 ]]
++++++++++ _docker:1564 @__docker_plugins:9> lines=( 'ID                  NAME                DESCRIPTION           ENABLED' 'c2fed0b839d6        loki:latest         Loki Logging Driver   true' )
++++++++++ _docker:1567 @__docker_plugins:12> local i=1 j=1 k header='ID                  NAME                DESCRIPTION           ENABLED'
++++++++++ _docker:1568 @__docker_plugins:13> declare -A begin end
++++++++++ _docker:1569 @__docker_plugins:14> ((  j < 69 - 1  ))
++++++++++ _docker:1570 @__docker_plugins:15> i=1
++++++++++ _docker:1571 @__docker_plugins:16> j=3
++++++++++ _docker:1572 @__docker_plugins:17> k=20
++++++++++ _docker:1573 @__docker_plugins:18> begin[${header[$i,$((j-1))]}]=1
++++++++++ _docker:1574 @__docker_plugins:19> end[${header[$i,$((j-1))]}]=20
++++++++++ _docker:1569 @__docker_plugins:14> ((  j < 69 - 1  ))
++++++++++ _docker:1570 @__docker_plugins:15> i=21
++++++++++ _docker:1571 @__docker_plugins:16> j=25
++++++++++ _docker:1572 @__docker_plugins:17> k=40
++++++++++ _docker:1573 @__docker_plugins:18> begin[${header[$i,$((j-1))]}]=21
++++++++++ _docker:1574 @__docker_plugins:19> end[${header[$i,$((j-1))]}]=40
++++++++++ _docker:1569 @__docker_plugins:14> ((  j < 69 - 1  ))
++++++++++ _docker:1570 @__docker_plugins:15> i=41
++++++++++ _docker:1571 @__docker_plugins:16> j=52
++++++++++ _docker:1572 @__docker_plugins:17> k=62
++++++++++ _docker:1573 @__docker_plugins:18> begin[${header[$i,$((j-1))]}]=41
++++++++++ _docker:1574 @__docker_plugins:19> end[${header[$i,$((j-1))]}]=62
++++++++++ _docker:1569 @__docker_plugins:14> ((  j < 69 - 1  ))
++++++++++ _docker:1570 @__docker_plugins:15> i=63
++++++++++ _docker:1571 @__docker_plugins:16> j=70
++++++++++ _docker:1572 @__docker_plugins:17> k=68
++++++++++ _docker:1573 @__docker_plugins:18> begin[${header[$i,$((j-1))]}]=63
++++++++++ _docker:1574 @__docker_plugins:19> end[${header[$i,$((j-1))]}]=68
++++++++++ _docker:1569 @__docker_plugins:14> ((  j < 69 - 1  ))
++++++++++ _docker:1576 @__docker_plugins:21> end[${header[$i,$((j-1))]}]=-1
++++++++++ _docker:1577 @__docker_plugins:22> lines=( 'c2fed0b839d6        loki:latest         Loki Logging Driver   true' )
++++++++++ _docker:1580 @__docker_plugins:25> line=c2fed0b839d6        loki:latest         Loki Logging Driver   true
++++++++++ _docker:1581 @__docker_plugins:26> s=loki:latest
++++++++++ _docker:1582 @__docker_plugins:27> s=__docker_plugins:27: bad math expression: empty string
__docker_plugins:27: bad math expression: empty string

++++++++++ _docker:1556 @__docker_plugins:1> [[ '' = -* ]]
++++++++++ _docker:1557 @__docker_plugins:2> integer ret=1
++++++++++ _docker:1558 @__docker_plugins:3> local line s
++++++++++ _docker:1559 @__docker_plugins:4> declare -a lines plugins args
++++++++++ _docker:1561 @__docker_plugins:6> filter=none
++++++++++ _docker:1561 @__docker_plugins:6> shift
++++++++++ _docker:1562 @__docker_plugins:7> [[ none != none ]]
++++++++++ _docker:1564 @__docker_plugins:9> lines=++++++++++ _docker:1564 @__docker_plugins:9> _call_program commands docker ' ' plugin ls
+++++++++++ _call_program:3 @_call_program:3> local curcontext=:complete:docker-inspect: tmp err_fd=-1 clocale='_comp_locale;'
+++++++++++ _call_program:4 @_call_program:4> local -a prefix
+++++++++++ _call_program:6 @_call_program:6> [[ commands = -p ]]
+++++++++++ _call_program:13 @_call_program:13> [[ commands = -l ]]
+++++++++++ _call_program:18 @_call_program:18> ((  -1 > 2  ))
+++++++++++ _call_program:18 @_call_program:18> [[ ! -t 2 ]]
++++++++++ _docker:1564 @__docker_plugins:9> lines=( 'ID                  NAME                DESCRIPTION           ENABLED' 'c2fed0b839d6        loki:latest         Loki Logging Driver   true' )
++++++++++ _docker:1567 @__docker_plugins:12> local i=1 j=1 k header='ID                  NAME                DESCRIPTION           ENABLED'
++++++++++ _docker:1568 @__docker_plugins:13> declare -A begin end
++++++++++ _docker:1569 @__docker_plugins:14> ((  j < 69 - 1  ))
++++++++++ _docker:1570 @__docker_plugins:15> i=1
++++++++++ _docker:1571 @__docker_plugins:16> j=3
++++++++++ _docker:1572 @__docker_plugins:17> k=20
++++++++++ _docker:1573 @__docker_plugins:18> begin[${header[$i,$((j-1))]}]=1
++++++++++ _docker:1574 @__docker_plugins:19> end[${header[$i,$((j-1))]}]=20
++++++++++ _docker:1569 @__docker_plugins:14> ((  j < 69 - 1  ))
++++++++++ _docker:1570 @__docker_plugins:15> i=21
++++++++++ _docker:1571 @__docker_plugins:16> j=25
++++++++++ _docker:1572 @__docker_plugins:17> k=40
++++++++++ _docker:1573 @__docker_plugins:18> begin[${header[$i,$((j-1))]}]=21
++++++++++ _docker:1574 @__docker_plugins:19> end[${header[$i,$((j-1))]}]=40
++++++++++ _docker:1569 @__docker_plugins:14> ((  j < 69 - 1  ))
++++++++++ _docker:1570 @__docker_plugins:15> i=41
++++++++++ _docker:1571 @__docker_plugins:16> j=52
++++++++++ _docker:1572 @__docker_plugins:17> k=62
++++++++++ _docker:1573 @__docker_plugins:18> begin[${header[$i,$((j-1))]}]=41
++++++++++ _docker:1574 @__docker_plugins:19> end[${header[$i,$((j-1))]}]=62
++++++++++ _docker:1569 @__docker_plugins:14> ((  j < 69 - 1  ))
++++++++++ _docker:1570 @__docker_plugins:15> i=63
++++++++++ _docker:1571 @__docker_plugins:16> j=70
++++++++++ _docker:1572 @__docker_plugins:17> k=68
++++++++++ _docker:1573 @__docker_plugins:18> begin[${header[$i,$((j-1))]}]=63
++++++++++ _docker:1574 @__docker_plugins:19> end[${header[$i,$((j-1))]}]=68
++++++++++ _docker:1569 @__docker_plugins:14> ((  j < 69 - 1  ))
++++++++++ _docker:1576 @__docker_plugins:21> end[${header[$i,$((j-1))]}]=-1
++++++++++ _docker:1577 @__docker_plugins:22> lines=( 'c2fed0b839d6        loki:latest         Loki Logging Driver   true' )
++++++++++ _docker:1580 @__docker_plugins:25> line=c2fed0b839d6        loki:latest         Loki Logging Driver   true
++++++++++ _docker:1581 @__docker_plugins:26> s=loki:latest
++++++++++ _docker:1582 @__docker_plugins:27> s=__docker_plugins:27: bad math expression: empty string
__docker_plugins:27: bad math expression: empty string

~/Shootingrange
❯ docker inspect
```
--

--
Forgot to mention OMZ & Docker versions, here they are:

```
~/Shootingrange
❯ docker -v
Docker version 19.03.12, build 48a66213fe

~/Shootingrange
❯ git -C ~/.oh-my-zsh show HEAD --no-patch | cat
commit 53259f628b81040051afbec13313769d24c96410
Author: Marc Cornellà <marc.cornella@live.com>
Date:   Mon Sep 28 12:09:20 2020 +0200

    bgnotify: use $2 in preexec hook if $1 is empty

    Fixes #5803
```
--
",,,,,,,,
9293,OPEN,kubectl plugin add set context namespace aliases,Feature,2020-09-28 13:19:42 +0000 UTC,gutorc92,Opened,,"Is your feature request related to a particular plugin or theme? If so, specify it.
kubectl

Describe the solution you'd like
Use alias like kgp, kgs most of the time need the flag ```-n```, who works as support in companies it became a tedious task. To avoid it a default namespace can be set using ```kubectl config set-context --current --namespace=teste```.  This command also could be an alias.

Describe alternatives you've considered
alias kcsn - kubectl config set-context --current --namespace=teste
",,,,,,,,,,,,,,
9258,OPEN,Completion initialization (compinit) logic should be overridable / customizable,Feature,2020-12-24 00:56:54 +0000 UTC,mattmc3,In progress,,"
By moving compinit logic into the lib folder, advanced users can then use $ZSH_CUSTOM to override compinit logic with their own. It also simplifies oh-my-zsh.sh into a simple core set of logic that is only responsible for handling OMZ environment settings and lib/plugin/theme sourcing and nothing else.

**Describe the solution you'd like**
Completion logic should be moved out of oh-my-zsh.sh and into the lib folder. To ensure it is loaded first, the file could be named with a numeric prefix or an underscore.  The compinit file could also be combined with the compfix.zsh file.

**Describe alternatives you've considered**
Instead of a numeric prefix, the new lib/01-compinit.zsh file could just be called lib/compinit.zsh or placed someplace other than /lib, but would then need special logic in oh-my-zsh.sh. The way I'm proposing implementing this solution requires no additional logic in oh-my-zsh.sh, and in fact only moves code from that file.  

**Additional context**
See PR https://github.com/ohmyzsh/ohmyzsh/pull/9257

**Related Issues**
N/A
",,,jannes,"
--
totally agree that this is necessary, with this implemented we can reduce startup times like this:  
https://gist.github.com/ctechols/ca1035271ad134841284
--
",mattmc3,"
--
One other option if this change is too drastic - the compinit call could be wrapped in a function in oh-my-zsh.sh, and only declare it if you haven't already done so somewhere prior to sourcing OMZ in your own .zshrc. The advantage of this method would be that it's much less impactful to the overall structure of this project and would only require a few lines to change. The disadvantage is that it introduces an additional customization method beyond simply making a file in your $ZSH_CUSTOM. I'm willing to submit an alternative PR for this if that's a more acceptable avenue, but I think it's imperative for this customization to be possible for those of us who love OMZ, but are performance conscious of our ZSH environment.
--

--
I implemented the simpler change as described above. It's now in this PR: https://github.com/ohmyzsh/ohmyzsh/pull/9537

Essentially, the compint logic is now wrapped in an existence checking function wrapper:

```zsh
(( $+functions[run_compinit] )) ||
function run_compinit() {
    ...
    ... same compint logic as before
    ...
}
run_compinit
```

If this PR gets merged, you could override the OMZ compinit logic by defining your own run_compint function in .zshrc before sourcing oh-my-zsh.sh. This should help people who are interested in better performing compinit logic than OMZ provides currently.
--
",,,,,,,,
9227,OPEN,shrink-path change view using shortcut,Feature,2021-04-07 20:18:10 +0000 UTC,debek,Opened,,"Hi!
My path uses not the full path of my current directory.
For example: ~/Dow/test/test-124-12424-fsfs-232442-fsf-/forum/something

Like you can see instead ""Download"" is ""Dow"".
I would like to use keyboard shortcut which will show me the original path and undo this using the same shortcut.

How can I achieve that?",,,mcornella,"
--
Fixed in https://github.com/ohmyzsh/ohmyzsh/pull/9794. Please try it out with `omz pr test 9764` and then following the instructions for setting up the keyboard shortcut documented in the README.
--
",,,,,,,,,,
9216,OPEN,Proper versioning to release oh-my-zsh on Linux distributions,Area: meta; Feature,2021-01-06 16:57:20 +0000 UTC,ljmf00,In progress,,"It would be really awesome to have proper versioning and tags around `oh-my-zsh` to make it able to be an official package on some Linux distributions.

Please look to Semantic Versioning 2.0.0 standard at [semver.org](https://semver.org/), as an example.",,,ljmf00,"
--
Any attention on this @robbyrussell ?
--
",lennard0711,"
--
+1

It would also help with security concerns someone might have. `curl | bash` isn't a really nice way to install things, even more if it starts pulling stuff from git.

Signed releases would be even better, since you can verify the content of the package before installing it.

Here is a demo how that would look like:  [lennard0711/ohmyzsh/releases/tag/release-1.0.0](https://github.com/lennard0711/ohmyzsh/releases/tag/release-1.0.0)
--
",,,,,,,,
9198,OPEN,"Add copy button to ""Install oh-my-zsh now"" section on website",Feature,2020-08-22 13:28:28 +0000 UTC,AleksandrSl,Opened,,"I think it can be useful to add copy button to installation instructions. 
![Screenshot from 2020-08-22 16-18-29](https://user-images.githubusercontent.com/15820496/90956967-b79bfc00-e493-11ea-9292-b512a9ef6adf.png)


Like the one on github for example 
![Screenshot from 2020-08-22 16-23-36](https://user-images.githubusercontent.com/15820496/90957012-f03bd580-e493-11ea-87bb-7a3ab6698277.png)

There is one thing against - copying instructions directly to terminal is bad sometimes. However I doubt that there are many people typing this url (https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh) manually.

",,,,,,,,,,,,,,
9177,OPEN,[yarn plugin] Add yarn to PATH,Feature,2020-08-14 08:34:05 +0000 UTC,briandipalma,Opened,,"Could the yarn plugin add yarn to PATH on load?

nvm does something similar: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/nvm/nvm.plugin.zsh

It would save users having to configure PATH:

```bash
export PATH=""$HOME/.yarn/bin:$HOME/.config/yarn/global/node_modules/.bin:$PATH""
```


",,,,,,,,,,,,,,
9165,OPEN,add deno plugins,Feature,2020-10-19 20:45:01 +0000 UTC,kalwabed,Opened,,"i have been using <a href='https://deno.land'> Deno</a> for a long time, to make it easier for users like me in the present or future, it is better to bring support to Deno.",,,kapilpau,"
--
Created PR for plugin: https://github.com/ohmyzsh/ohmyzsh/pull/9363
--
",,,,,,,,,,
9154,OPEN,The gmt alias clashes with the gmt application,Feature,2021-01-02 21:01:05 +0000 UTC,PaulWessel,Opened,,We are receiving notices from people using [gmt](https://www.generic-mapping-tools.org) that your alias gmt trips them up.  Since gmt is available on most distros and have been around since the late 1980s we recommend you modify you alias so that more can benefit from your aliases.,,,seisman,"
--
Just provide more information here.

1. The `gmt` alias is provided by the [git](https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/git) plugin. 
2. The [git](https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/git) plugin also provides another alias **gm**, which is conflicting with the **gm** command from GraphicsMagick.

--
",joa,"
--
A good option would be to prefix all the aliases with *z_*. Short and and still close to current names, because these name clashes are not nice.
--
",mcornella,"
--
Could be renamed to `gmtl`.
--
",,,,,,
9137,OPEN,gpg-agent is not taking the config,Support,2020-11-16 08:10:53 +0000 UTC,marcofranssen,In progress,,"I'm using the gpg-agent plugin. It reads a config file, but somehow it doesn't work when I specify a config.

```bash
$ cat /Users/marco/.gnupg/gpg-agent.conf
default-cache-ttl 3600

$ gpg-agent --gpgconf-list
gpgconf-gpg-agent.conf:16:""/Users/marco/.gnupg/gpg-agent.conf
verbose:8:
quiet:8:
debug-level:24:""none:
log-file:8:
default-cache-ttl:24:600:
default-cache-ttl-ssh:24:1800:
max-cache-ttl:24:7200:
max-cache-ttl-ssh:24:7200:
enforce-passphrase-constraints:8:
min-passphrase-len:24:8:
min-passphrase-nonalpha:24:1:
check-passphrase-pattern:24:
max-passphrase-days:24:0:
enable-passphrase-history:8:
no-grab:8:
ignore-cache-for-signing:8:
no-allow-external-cache:8:
no-allow-mark-trusted:8:
disable-scdaemon:8:
enable-ssh-support:0:
ssh-fingerprint-digest:24:""md5:
no-allow-loopback-pinentry:8:
allow-emacs-pinentry:8:
pinentry-timeout:24:0:
enable-extended-key-format:8:
grab:8:
```

In my ~/.zshrc I have following

```bash
plugins=(git osx dotenv kubectl helm npm npx docker docker-compose terraform golang zsh_reload keychain gpg-agent)
zstyle :omz:plugins:keychain agents ssh,gpg
zstyle :omz:plugins:keychain identities id_rsa 63A1B4B53E26CEDB
```

Please note I did modify my identity above.",,,paulrberg,"
--
I don't think this is related to zsh. I'm using bash and I have the exact same issue - default cache ttl is defined in `.gnupg/gpg-agent.conf` but it is not picked up by `gpg-agent`.
--
",marcofranssen,"
--
I have updated my answer with a solution you can try in `~/.bashrc`
--
",,,,,,,,
9127,OPEN,ubuntu-image plugin,Feature,2020-07-21 08:36:17 +0000 UTC,fkromer,In progress,,"**Describe the solution you'd like**

A plugin ""ubuntu-image"".

**Describe alternatives you've considered**

**Additional context**

**Related Issues**

Nothing found.",,,TriMoon,"
--
I'm not sure but i think auto completion of options for a command is the responsibility of that command's package, so i suggest to file an issue with the ubuntu team that's responsible for that package.
Or mail the author directly barry@ubuntu.com
--

--
Well most plugins enhance the functionality already provided by the tool/command 's author, and auto-completion for most used shells (bash,zsh,etc) is normally done by the author of it.
I never used that command so i don't know if they include auto-completion (yet)...
That's why i suggested to contact the author of that command :wink: 

--
",fkromer,"
--
@TriMoon I don't know the mechanism/integration of ohmyzsh for auto-completion not well enough. When I was looking into some plugins, e.g. the [fabric plugin](https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/fabric/_fab) it seemed like the auto-completion part is implemented in the plugin itself, not the command line tool. However in case you are a plugin author please prove me wrong :slightly_smiling_face: 
--
",,,,,,,,
9125,OPEN,snapd plugin,Feature,2020-10-18 10:39:22 +0000 UTC,fkromer,Opened,,"
I'd like to have autocompletion and aliases for the snapd command line tool `snap`.

**Describe the solution you'd like**

A plugin for the snapd daemon CLI `snap`.

**Describe alternatives you've considered**

Shell aliases and functions. I am interested in contributing my aliases and functions.

**Additional context**
- [snapd command line intro](https://snapcraft.io/docs/getting-started)

**Related Issues**

Nothing related found.",,,kapilpau,"
--
Added plugin, in PR #9357 
--
",,,,,,,,,,
9124,OPEN,Multipass plugin,Feature,2020-07-20 10:41:29 +0000 UTC,fkromer,Opened,,"
I'd like to have autocompletion and aliases for the multipass command line tool.

**Describe the solution you'd like**

A plugin for multipass.

**Describe alternatives you've considered**

Shell aliases and functions. I am interested  in  contributing the aliases and functions.

**Additional context**
- [Multipass website](https://multipass.run/)

**Related Issues**

Nothing related found.",,,,,,,,,,,,,,
9087,OPEN,Improve CLI,Area: core; Feature,2020-11-24 17:29:52 +0000 UTC,bartekpacia,Opened,,"**Is your feature request related to a particular plugin or theme?**
No. This feature would be implemented in [`lib/cli.zsh`](https://github.com/ohmyzsh/ohmyzsh/blob/master/lib/cli.zsh) file.

**Is your feature request related to a problem? Please describe.**
The problem is that e.g changing themes and adding/removing plugins is kind of a time-consuming activity.

**Describe the solution you'd like**
I suggest adding more functionality to the `omz` CLI tool.

Examples:
`omz plugin add <name>` - Adds a new plugin to the `plugins` array in `~/.zshrc` __*__

`omz plugin remove <name>` - Removes a plugin from the `plugins` array in `~/.zshrc` __*__

`omz theme set <name>` - changes the value of the `ZSH_THEME` variable in `~/.zshrc` __*__

__*__ - the CLI might also ask whether to reload the shell `[Y/n]` or use a default option from somewhere (probably `~/.zshrc`)

That's what I can think of right now.

**Describe alternatives you've considered**
Not doing anything?

**Additional context**
idea by @larson-carter

**Related Issues**
I'm not aware of them, but please let me know if there are any so I can list them here

--- Pinging you to hear your opinion on this
cc @larson-carter  @mcornella ",,,larson,"
--
This is going to be a massive change. However it is much welcomed and can make omz seem a lot more inclusive.

Don't quote me. However, I believe that there is already an API or tool somewhere that does this functionality. However if I remember correctly it has a few dependencies/device specific requirements that breaks on certain machines. 

So the main implementation would be to make sure that this is a universal tool and not one that requires a specific operating system, build utility, etc.

> The problem is that e.g changing themes and adding/removing plugins is kind of a time-consuming activity.

I think this is a true statement in some situations. After a little bit of tweaking it can become repetitive/annoying so this is a great idea to improve/fix in omz.

> I suggest adding more functionality to the omz CLI tool.
> No. This feature would be implemented in lib/cli.zsh file.

I think that including it in the `lib/cli.zsh` file is the proper call. Since that is the CLI that we use to test PRs and such. I think that it would be unnecessary to add this functionality in another file. I'd like @mcornella's opinion on that too.

> the CLI might also ask whether to reload the shell [Y/n] or use a default option from somewhere (probably ~/.zshrc)

I think that would be necessary. We could have it run another zsh session to reload the shell. So at the end of each execution it would reload the shell.

I can't think of any other issues/problems that would result from some of these changes. I'd like to hear others input.

--

--
> These are both awesome ideas but it's not an easy feat

I agree it's an awesome idea. However it is going to be a pain to implement.

>  the plugins array might span multiple lines

That is something that I was afraid of. Maybe we could implement something like `\n`? To break the line and go down to the next line?

> But it is in the making, you won't have to wait much more for a testable prototype.

Can you link to where this is being done? I can't remember if I've seen it yet.
--

--
I currently don't have an official update on this @mcornella will be the person to ask.

I've been messing around with ways to get it to append the `zshrc` file however I have been having weird issues/bugs.

Please let me know @R0LA1mRifcF8yAkk if you have any ideas that would possibly work!
--

--
@carlocab Great find!

Can you possibly simlink the folder?
--

--
@carlocab Sorry, I should have made myself more clear, however your screenshot helped out.

Can you run `sudo tree -a` in your custom plugins directory then attach a screenshot? I might have a theory of why It's not working.
--

--
@carlocab 

This screenshot is perfect! I wonder if you can symlink a folder? For example `custom/plugins/z.lua/z.lua.plugin/`

Does that make sense?? I think it's trying to read inside of a folder instead of just the plugin itself.

So basically lets say I download `test.plugin` and it is in my downloads folder at `/home/larsoncarter/Downloads/test.plugin/` I would symlink it to `~/.oh-my-zsh/custom/plugins/test/test.plugin` hence the name I would add to my .zshrc config would be `test`

`plugins(test)`

and hopefully it would also show up when running `omz plugin list`

This is just a theory and I do not know if it will work since I have not yet tested it myself.
--

--
@carlocab Yep @mcornella's commit that he pushed fixed the problem. Basically making it smarter when reading in the directories.
--
",mcornella,"
--
These are both awesome ideas but it's not an easy feat. The `ZSH_THEME` line is easier to change, but the `plugins` array might span multiple lines. But it is in the making, you won't have to wait much more for a testable prototype.
--

--
> Can you link to where this is being done? I can't remember if I've seen it yet.

https://github.com/mcornella/ohmyzsh/tree/feat/ohmyzsh-cli-full

--

--
I pushed 1bb402190d53c118f47a0851f5714dd4faa52809 which adds a way to list plugins and themes, and optionally change the theme of the current zsh session (it doesn't persist it into the zshrc file).

The other stuff (changing the zshrc file) will take time to get right.
--

--
I assume this
```zsh
print -P ""%U%BCustom plugins%b%u: ""
```
also looks broken? If so, can you post the output of `echo $TERM` and `setopt`?
--

--
Hmm can you run `typeset -f -t _omz::plugin::list` and run `omz plugin list`, and post the output?
--

--
Looks like `fmt` is doing something weird. Which `fmt --version` are you using?
--

--
Ok and `print -P ""%U%BCustom plugins%b%u: "" | fmt` definitely breaks right?
--

--
What about `printf ""\e[4m\e[1mCustom themes\e[0m: "" | fmt`?
--

--
What about `omz theme list | sed 's/\x1b?\(\[[0-9]*m\)/\x1b\1/g'`?
--

--
Ok one last time: `omz theme list | sed -E 's/\x1b?(\[[0-9]*m)/\x1b\1/g'`. Sorry I don't have a Mac so I can't test it any other way.
--

--
Nvm, this should work (tested on GitHub Actions macOS runner): `omz theme list | sed -E 's/'$'\x1b''?(\[[0-9]*m)/'$'\x1b''\1/g'`. It's ugly, but it should work.
--

--
If you mean enabled, that's just running `echo $plugins`.
--

--
> Yup, that works, thank you!

Fixed in 982d010be5fdb1cff471978634f8ff374deba9ba.

--

--
Fixed, thanks!

--

--
This is fixable in the glob by adding `-` to the modifiers, which makes zsh follow the symlink target. I pushed f9f45ca2 which hopefully fixes it.
--
",R0LA1mRifcF8yAkk,"
--
Any update on this? Would really love to use the plugin list feature already!
--

--
@larson-carter I'm sorry, I have little to no experience with shell scripting.

I'm just interested in seeing a list of currently installed zsh plugins because I have a script that lists all development software (and brew casks) that I have installed.
--

--
@mcornella  The output of `omz plugin list` is broken for me:
```
[4m[1m[4mCustom plugins[0m[4m[24m: autoupdate example fz you-should-use zsh-autosuggestions zsh-syntax-highlighting

[4m[1m[4mBuilt-in plugins[0m[4m[24m: ...
```
--

--
`print -P ""%U%BCustom plugins%b%u: ""` looks fine. Bold and underlined.

#### `echo $TERM`:
`screen-256color`

#### `setopt`:

- alwaystoend
- autocd
- autopushd
- combiningchars
- completeinword
- correctall
- extendedhistory
- noflowcontrol
- histexpiredupsfirst
- histignoredups
- histignorespace
- histverify
- interactive
- interactivecomments
- longlistjobs
- monitor
- promptsubst
- pushdignoredups
- pushdminus
- sharehistory
- shinstdin
- zle
--

--
```
+_omz::plugin::list:1> local -a custom_plugins builtin_plugins
+_omz::plugin::list:2> custom_plugins=( autoupdate example fz you-should-use zsh-autosuggestions zsh-syntax-highlighting )
+_omz::plugin::list:3> builtin_plugins=( adb alias-finder ansible ant apache2-macports arcanist archlinux asdf autoenv autojump autopep8 aws battery bazel bbedit bgnotify boot2docker bower branch brew bundler cabal cake cakephp3 capistrano cargo cask catimg celery chruby chucknorris cloudapp cloudfoundry codeclimate coffee colemak colored-man-pages colorize command-not-found common-aliases compleat composer copybuffer copydir copyfile cp cpanm dash debian dircycle direnv dirhistory dirpersist django dnf dnote docker docker-compose docker-machine doctl dotenv dotnet droplr drush eecms emacs ember-cli emoji emoji-clock emotty encode64 extract fabric fancy-ctrl-z fasd fastfile fbterm fd fedora firewalld flutter forklift fossil frontend-search fzf gas gatsby gb gcloud geeknote gem git git-auto-fetch git-escape-magic git-extras git-flow git-flow-avh git-hubflow git-lfs git-prompt gitfast github gitignore glassfish globalias gnu-utils go golang gpg-agent gradle grails grunt gulp hanami helm heroku history history-substring-search hitokoto homestead httpie ionic ipfs iterm2 jake-node jenv jfrog jhbuild jira jruby jsontools jump kate keychain kitchen knife knife_ssh kops kube-ps1 kubectl laravel laravel4 laravel5 last-working-dir lein lighthouse lol lxd macports magic-enter man marked2 mercurial meteor microk8s minikube mix mix-fast mosh mvn mysql-macports n98-magerun nanoc ng nmap node nomad npm npx nvm oc osx otp pass paver pep8 per-directory-history percol perl perms phing pip pipenv pj please pod postgres pow powder powify profiles pyenv pylint python rails rake rake-fast rand-quote rbenv rbfu react-native rebar redis-cli repo ripgrep ros rsync ruby rust rustup rvm safe-paste salt sbt scala scd screen scw sdk sfdx sfffe shell-proxy shrink-path singlechar spring sprunge ssh-agent stack sublime sublime-merge sudo supervisor suse svcat svn svn-fast-info swiftpm symfony symfony2 systemadmin systemd taskwarrior terminitor terraform textastic textmate thefuck themes thor tig timer tmux tmux-cssh tmuxinator torrent transfer tugboat ubuntu ufw urltools vagrant vagrant-prompt vault vi-mode vim-interaction virtualenv virtualenvwrapper vscode vundle wakeonlan wd web-search wp-cli xcode yarn yii yii2 yum z zeus zsh-interactive-cd zsh-navigation-tools zsh_reload )
+_omz::plugin::list:5> ((  6  ))
+_omz::plugin::list:6> print -Pn '%U%BCustom plugins%b%u: '
+_omz::plugin::list:7> print -l autoupdate example fz you-should-use zsh-autosuggestions zsh-syntax-highlighting
+_omz::plugin::list:8> fmt -w 238
[4m[1m[4mCustom plugins[0m[4m[24m: autoupdate example fz you-should-use zsh-autosuggestions zsh-syntax-highlighting
+_omz::plugin::list:10> ((  283  ))
+_omz::plugin::list:12> ((  6  ))
+_omz::plugin::list:12> echo
+_omz::plugin::list:14> print -Pn '%U%BBuilt-in plugins%b%u: '
+_omz::plugin::list:16> fmt -w 238
+_omz::plugin::list:15> print -l adb alias-finder ansible ant apache2-macports arcanist archlinux asdf autoenv autojump autopep8 aws battery bazel bbedit bgnotify boot2docker bower branch brew bundler cabal cake cakephp3 capistrano cargo cask catimg celery chruby chucknorris cloudapp cloudfoundry codeclimate coffee colemak colored-man-pages colorize command-not-found common-aliases compleat composer copybuffer copydir copyfile cp cpanm dash debian dircycle direnv dirhistory dirpersist django dnf dnote docker docker-compose docker-machine doctl dotenv dotnet droplr drush eecms emacs ember-cli emoji emoji-clock emotty encode64 extract fabric fancy-ctrl-z fasd fastfile fbterm fd fedora firewalld flutter forklift fossil frontend-search fzf gas gatsby gb gcloud geeknote gem git git-auto-fetch git-escape-magic git-extras git-flow git-flow-avh git-hubflow git-lfs git-prompt gitfast github gitignore glassfish globalias gnu-utils go golang gpg-agent gradle grails grunt gulp hanami helm heroku history history-substring-search hitokoto homestead httpie ionic ipfs iterm2 jake-node jenv jfrog jhbuild jira jruby jsontools jump kate keychain kitchen knife knife_ssh kops kube-ps1 kubectl laravel laravel4 laravel5 last-working-dir lein lighthouse lol lxd macports magic-enter man marked2 mercurial meteor microk8s minikube mix mix-fast mosh mvn mysql-macports n98-magerun nanoc ng nmap node nomad npm npx nvm oc osx otp pass paver pep8 per-directory-history percol perl perms phing pip pipenv pj please pod postgres pow powder powify profiles pyenv pylint python rails rake rake-fast rand-quote rbenv rbfu react-native rebar redis-cli repo ripgrep ros rsync ruby rust rustup rvm safe-paste salt sbt scala scd screen scw sdk sfdx sfffe shell-proxy shrink-path singlechar spring sprunge ssh-agent stack sublime sublime-merge sudo supervisor suse svcat svn svn-fast-info swiftpm symfony symfony2 systemadmin systemd taskwarrior terminitor terraform textastic textmate thefuck themes thor tig timer tmux tmux-cssh tmuxinator torrent transfer tugboat ubuntu ufw urltools vagrant vagrant-prompt vault vi-mode vim-interaction virtualenv virtualenvwrapper vscode vundle wakeonlan wd web-search wp-cli xcode yarn yii yii2 yum z zeus zsh-interactive-cd zsh-navigation-tools zsh_reload

[4m[1m[4mBuilt-in plugins[0m[4m[24m: adb alias-finder ansible ant apache2-macports arcanist archlinux asdf autoenv autojump autopep8 aws battery bazel bbedit bgnotify boot2docker bower branch brew bundler cabal cake cakephp3 capistrano
cargo cask catimg celery chruby chucknorris cloudapp cloudfoundry codeclimate coffee colemak colored-man-pages colorize command-not-found common-aliases compleat composer copybuffer copydir copyfile cp cpanm dash debian dircycle direnv
dirhistory dirpersist django dnf dnote docker docker-compose docker-machine doctl dotenv dotnet droplr drush eecms emacs ember-cli emoji emoji-clock emotty encode64 extract fabric fancy-ctrl-z fasd fastfile fbterm fd fedora firewalld
flutter forklift fossil frontend-search fzf gas gatsby gb gcloud geeknote gem git git-auto-fetch git-escape-magic git-extras git-flow git-flow-avh git-hubflow git-lfs git-prompt gitfast github gitignore glassfish globalias gnu-utils go
golang gpg-agent gradle grails grunt gulp hanami helm heroku history history-substring-search hitokoto homestead httpie ionic ipfs iterm2 jake-node jenv jfrog jhbuild jira jruby jsontools jump kate keychain kitchen knife knife_ssh kops
kube-ps1 kubectl laravel laravel4 laravel5 last-working-dir lein lighthouse lol lxd macports magic-enter man marked2 mercurial meteor microk8s minikube mix mix-fast mosh mvn mysql-macports n98-magerun nanoc ng nmap node nomad npm npx nvm
oc osx otp pass paver pep8 per-directory-history percol perl perms phing pip pipenv pj please pod postgres pow powder powify profiles pyenv pylint python rails rake rake-fast rand-quote rbenv rbfu react-native rebar redis-cli repo ripgrep
ros rsync ruby rust rustup rvm safe-paste salt sbt scala scd screen scw sdk sfdx sfffe shell-proxy shrink-path singlechar spring sprunge ssh-agent stack sublime sublime-merge sudo supervisor suse svcat svn svn-fast-info swiftpm symfony
symfony2 systemadmin systemd taskwarrior terminitor terraform textastic textmate thefuck themes thor tig timer tmux tmux-cssh tmuxinator torrent transfer tugboat ubuntu ufw urltools vagrant vagrant-prompt vault vi-mode vim-interaction
virtualenv virtualenvwrapper vscode vundle wakeonlan wd web-search wp-cli xcode yarn yii yii2 yum z zeus zsh-interactive-cd zsh-navigation-tools zsh_reload
```
--

--
i am not familiar with fmt, output is as follows, even after `brew install fmt`:
```
$ fmt --version

fmt: illegal option -- -
usage:   fmt [-cmps] [-d chars] [-l num] [-t num]
             [-w width | -width | goal [maximum]] [file ...]
Options: -c     center each line instead of formatting
         -d <chars> double-space after <chars> at line end
         -l <n> turn each <n> spaces at start of line into a tab
         -m     try to make sure mail header lines stay separate
         -n     format lines beginning with a dot
         -p     allow indented paragraphs
         -s     coalesce whitespace inside lines
         -t <n> have tabs every <n> columns
         -w <n> set maximum width to <n>
         goal   set target width to goal

```
--

--
Yeap: `[4m[1m[4mCustom plugins[0m[4m[24m:`
--

--
`[4m[1mCustom themes[0m:`
--

--
```
[4m[1m[4mCustom themes[0m[4m[24m: example powerlevel10k/powerlevel10k powerlevel10k/powerlevel9k

[4m[1m[4mBuilt-in themes[0m[4m[24m: 3den Soliah adben af-magic afowler agnoster alanpeabody amuse apple arrow aussiegeek avit awesomepanda bira blinks bureau candy candy-kingdom clean cloud crcandy crunch cypher dallas darkblood
daveverwer dieter dogenpunk dpoggi dst dstufft duellj eastwood edvardm emotty essembeh evan fino fino-time fishy flazz fletcherm fox frisk frontcube funky fwalch gallifrey gallois garyblessington gentoo geoffgarside gianu gnzh gozilla
half-life humza imajes intheloop itchy jaischeema jbergantine jispwoso jnrowe jonathan josh jreese jtriley juanghurtado junkfood kafeitu kardan kennethreitz kiwi kolo kphoen lambda linuxonly lukerandall macovsky maran mgutz mh
michelebologna mikeh miloshadzic minimal mira mlh mortalscumbag mrtazz murilasso muse nanotech nebirhos nicoulaj norm obraun peepcode philips pmcgee pygmalion pygmalion-virtualenv random re5et refined rgm risto rixius rkj rkj-repos
robbyrussell sammy simonoff simple skaro smt sonicradish sorin sporty_256 steeef strug sunaku sunrise superjarin suvash takashiyoshida terminalparty theunraveler tjkirch tjkirch_mod tonotdo trapd00r wedisagree wezm wezm+ wuffers
xiong-chiamiov xiong-chiamiov-plus ys zhann
```

this will soon start to feel like trolling
--

--
Yup, that works, thank you! Any way to only output every _installed_ plugin?
--

--
Now it works as intended, thanks. Although I noticed `omz help` doesn't list `plugin` as an option.
--
",carlocab,"
--
Hi @mcornella (and other maintainers), thanks for the work you put into omz.

I wanted to mention, just in case, that `omz plugin list` in the master branch will not list plugins that are included in `$ZSH_CUSTOM/plugins` as symlinks.

One instance where you might want to do this is if you have a package installed by your package manager that ships with a zsh plugin but is installed elsewhere. For example, with a standard Homebrew installation, one can find the zsh plugin for z.lua in `/usr/local/opt/z.lua/share/z.lua`. I've put a symlink to this directory in `$ZSH_CUSTOM/plugins`, but `omz plugin list` checks `$ZSH_CUSTOM/plugins` only for directories.

Not sure if you want to fix this, but I thought it might be useful to point this out here if you do.
--

--
Hey @larson-carter, I'm afraid I don't understand the question. I did symlink the folder containing the plugin to `$ZSH_CUSTOM/plugins`, and added the appropriate plugin to the `plugins` array.

The plugin works perfectly fine (no surprises there), but it is not listed by `omz plugin list`. This is because `omz plugin list` checks `$ZSH_CUSTOM/plugins` for directories but ignores symlinks (perhaps because they look just like regular files according to `test -d`).
--

--
Perhaps a screenshot would be more informative. `z.lua` is in a slightly different shade because it's a symlink to somewhere else, so `omz plugin list` does not include it as an available plugin.
<img width=""1029"" alt=""Screenshot 2020-10-20 at 01 22 08"" src=""https://user-images.githubusercontent.com/30379873/96525467-e9062d80-1272-11eb-8b01-a0a61a95a48e.png"">

--

--
@larson-carter no worries; I think I was also rather unclear the first two times too.

I did `sudo exa -a --tree` (I don't have `tree` installed, so I hope this suffices. I can install the version on Homebrew if necessary), and it just shows the contents of each of the plugin directories. There are a lot of files and subdirectories in there, but here's a screenshot of what I suspect you are looking for:

<img width=""1029"" alt=""Screenshot 2020-10-20 at 01 36 41"" src=""https://user-images.githubusercontent.com/30379873/96526295-105dfa00-1275-11eb-81ee-3a0fbd65329c.png"">

Let me know if you need the rest of the output of `sudo exa -a --tree`, or if you actually need the output from `tree` specifically.

--

--
So I'm a little confused by your explanation (sorry!), but I think you're suggesting the (obvious in retrospect) workaround of just creating a `z.lua` folder in `$ZSH_CUSTOM/plugins`, and then symlinking `z.lua.plugin.zsh` into the`$ZSH_CUSTOM/plugins/z.lua` folder that I created. Did I understand you correctly?

I guess the way that glob qualifiers work in zsh is that it doesn't think symlinks to directories are directories. From what I can tell from the code, `omz plugin list` finds the custom plugins using

    custom_plugins=(""$ZSH_CUSTOM""/plugins/*(/N:t))

The glob qualifier `/` tells zsh to expand `*` to include only directories, and it, unfortunately, does not consider symlinks to directories as directories. I tested this by running the command I show above in the shell:

<img width=""795"" alt=""Screenshot 2020-10-20 at 01 51 26"" src=""https://user-images.githubusercontent.com/30379873/96526956-e0175b00-1276-11eb-8815-39869836c4af.png"">

However, I guess the solution is to not symlink the folder, but just create a folder that contains a symlink.

By the way, I've now tried what you suggested above, which is to create a `z.lua` directory in `$ZSH_CUSTOM/plugins` and then symlink `z.lua.plugin.zsh` into that, and `omz plugin list` now finds the `z.lua` plugin just fine. Thanks for your help!

--

--
@mcornella Working now! Had to restart my terminal first though. Thanks for looking into this.
--
",,,,
9075,OPEN,Trap in check_for_upgrade doesn't work for zsh < 5.0.8,Area: updater; Bug,2020-07-02 15:30:05 +0000 UTC,mcornella,Opened,,"**Describe the bug**

Zsh versions older than 5.0.8 don't implement signals other than `ZERR`, so the trap setup fails with the error
```
(anon):trap: undefined signal: INT
```

**To Reproduce**

Steps to reproduce the behavior:

1. Use a zsh version older than 5.0.8. You can use docker for this:
   ```zsh
   docker run -it zshusers/zsh:5.0.7
   ```
2. Print the available signals with `kill -l`
3. Run a mock trap to test this, for example:
   ```zsh
   (){ setopt localtraps; trap 'echo trap called; return 1' INT; read }
   ```
   and press `CTRL`+`C` to trigger the trap function.
4. The error above is shown, and the `read` isn't cancelled.

**Expected behavior**

The `check_for_upgrade` script should exhibit a similar behavior than in newer zsh versions. For example, if the upgrade script is cancelled on an old zsh version, the `update.lock` isn't removed because the `check_for_upgrade.sh` script is skipped:
```
+(anon):45> [[ '' != (     <--- in the update prompt of check_for_upgrade.sh
|) ]]
+(anon):47> echo -n '[oh-my-zsh] Would you like to update? [Y/n] '
[oh-my-zsh] Would you like to update? [Y/n] +(anon):48> read -r -k 1 option
^C
# Initializes Oh My Zsh    <--- back to the init script
```

**Desktop (please complete the following information):**
 - OS / Distro: any
 - Latest ohmyzsh update?: Yes
 - ZSH Version: older than 5.0.8
 - Terminal emulator: any

**Additional context**

Script to check implemented signals of all zsh versions:
```zsh
vers=(${(@f)$(wget -qO- https://registry.hub.docker.com/v1/repositories/zshusers/zsh/tags | sed -e 's/[][]//g' -e 's/""//g' -e 's/ //g' | tr '}' '\n' | awk -F: '{print $3}')})
for ver in $vers; do echo -n ""$ver: ""; docker run zshusers/zsh:$ver zsh -c 'kill -l'; done

# output
latest: HUP INT QUIT ILL TRAP ABRT BUS FPE KILL USR1 SEGV USR2 PIPE ALRM TERM STKFLT CHLD CONT STOP TSTP TTIN TTOU URG XCPU XFSZ VTALRM PROF WINCH POLL PWR SYS
4.3.11: ZERR
4.3.12: ZERR
4.3.13: ZERR
4.3.14: ZERR
4.3.15: ZERR
4.3.16: ZERR
4.3.17: ZERR
5.0.0: ZERR
5.0.1: ZERR
5.0.2: ZERR
5.0.3: ZERR
5.0.4: ZERR
5.0.5: ZERR
5.0.6: ZERR
5.0.7: ZERR
5.0.8: HUP INT QUIT ILL TRAP ABRT BUS FPE KILL USR1 SEGV USR2 PIPE ALRM TERM STKFLT CHLD CONT STOP TSTP TTIN TTOU URG XCPU XFSZ VTALRM PROF WINCH POLL PWR SYS
5.1: HUP INT QUIT ILL TRAP ABRT BUS FPE KILL USR1 SEGV USR2 PIPE ALRM TERM STKFLT CHLD CONT STOP TSTP TTIN TTOU URG XCPU XFSZ VTALRM PROF WINCH POLL PWR SYS
5.1.1: HUP INT QUIT ILL TRAP ABRT BUS FPE KILL USR1 SEGV USR2 PIPE ALRM TERM STKFLT CHLD CONT STOP TSTP TTIN TTOU URG XCPU XFSZ VTALRM PROF WINCH POLL PWR SYS
5.2: HUP INT QUIT ILL TRAP ABRT BUS FPE KILL USR1 SEGV USR2 PIPE ALRM TERM STKFLT CHLD CONT STOP TSTP TTIN TTOU URG XCPU XFSZ VTALRM PROF WINCH POLL PWR SYS
5.3: HUP INT QUIT ILL TRAP ABRT BUS FPE KILL USR1 SEGV USR2 PIPE ALRM TERM STKFLT CHLD CONT STOP TSTP TTIN TTOU URG XCPU XFSZ VTALRM PROF WINCH POLL PWR SYS
5.3.1: HUP INT QUIT ILL TRAP ABRT BUS FPE KILL USR1 SEGV USR2 PIPE ALRM TERM STKFLT CHLD CONT STOP TSTP TTIN TTOU URG XCPU XFSZ VTALRM PROF WINCH POLL PWR SYS
5.4: HUP INT QUIT ILL TRAP ABRT BUS FPE KILL USR1 SEGV USR2 PIPE ALRM TERM STKFLT CHLD CONT STOP TSTP TTIN TTOU URG XCPU XFSZ VTALRM PROF WINCH POLL PWR SYS
5.4.1: HUP INT QUIT ILL TRAP ABRT BUS FPE KILL USR1 SEGV USR2 PIPE ALRM TERM STKFLT CHLD CONT STOP TSTP TTIN TTOU URG XCPU XFSZ VTALRM PROF WINCH POLL PWR SYS
5.4.2: HUP INT QUIT ILL TRAP ABRT BUS FPE KILL USR1 SEGV USR2 PIPE ALRM TERM STKFLT CHLD CONT STOP TSTP TTIN TTOU URG XCPU XFSZ VTALRM PROF WINCH POLL PWR SYS
5.5: HUP INT QUIT ILL TRAP ABRT BUS FPE KILL USR1 SEGV USR2 PIPE ALRM TERM STKFLT CHLD CONT STOP TSTP TTIN TTOU URG XCPU XFSZ VTALRM PROF WINCH POLL PWR SYS
5.5.1: HUP INT QUIT ILL TRAP ABRT BUS FPE KILL USR1 SEGV USR2 PIPE ALRM TERM STKFLT CHLD CONT STOP TSTP TTIN TTOU URG XCPU XFSZ VTALRM PROF WINCH POLL PWR SYS
5.6: HUP INT QUIT ILL TRAP ABRT BUS FPE KILL USR1 SEGV USR2 PIPE ALRM TERM STKFLT CHLD CONT STOP TSTP TTIN TTOU URG XCPU XFSZ VTALRM PROF WINCH POLL PWR SYS
5.6.1: HUP INT QUIT ILL TRAP ABRT BUS FPE KILL USR1 SEGV USR2 PIPE ALRM TERM STKFLT CHLD CONT STOP TSTP TTIN TTOU URG XCPU XFSZ VTALRM PROF WINCH POLL PWR SYS
5.6.2: HUP INT QUIT ILL TRAP ABRT BUS FPE KILL USR1 SEGV USR2 PIPE ALRM TERM STKFLT CHLD CONT STOP TSTP TTIN TTOU URG XCPU XFSZ VTALRM PROF WINCH POLL PWR SYS
5.7: HUP INT QUIT ILL TRAP ABRT BUS FPE KILL USR1 SEGV USR2 PIPE ALRM TERM STKFLT CHLD CONT STOP TSTP TTIN TTOU URG XCPU XFSZ VTALRM PROF WINCH POLL PWR SYS
5.7.1: HUP INT QUIT ILL TRAP ABRT BUS FPE KILL USR1 SEGV USR2 PIPE ALRM TERM STKFLT CHLD CONT STOP TSTP TTIN TTOU URG XCPU XFSZ VTALRM PROF WINCH POLL PWR SYS
5.8: HUP INT QUIT ILL TRAP ABRT BUS FPE KILL USR1 SEGV USR2 PIPE ALRM TERM STKFLT CHLD CONT STOP TSTP TTIN TTOU URG XCPU XFSZ VTALRM PROF WINCH POLL PWR SYS
master: HUP INT QUIT ILL TRAP ABRT BUS FPE KILL USR1 SEGV USR2 PIPE ALRM TERM STKFLT CHLD CONT STOP TSTP TTIN TTOU URG XCPU XFSZ VTALRM PROF WINCH POLL PWR SYS
```",,,,,,,,,,,,,,
9055,OPEN,Zsh shell taking abnormally long time during initial startup,Support,2021-01-19 14:10:21 +0000 UTC,xd003,Opened,,"As i have already stated in question , zsh shell is taking abnormally long time to start up. I would like to clear it again that delay in zsh only happens when opening terminal at start , not during general usage. I have disabled all plugins and using powerlevel10k theme , although i can definitely say it has nothing to do with theme. I noticed this slowdown immediately after i had changed to zsh shell from bash which got worsened even further after installing oh my zsh .To put things in perspective , raw zsh is almost 6 times slower as compared to raw bash in starting up and zsh + ohmyzsh is almost 14 times slower as comapared to raw bash .Posted timings below for each case. 
[Heres's](https://del.dog/cebidexymy.txt) my .zshrc file if that helps

I also checked what functions are being run during initial startup using zsh profiling
Here's the whole list - https://del.dog/cytahuving.txt
handle_completion_insecurities , anon and compinit are the ones taking the top 3 most time , I don't know anything about it , just a normal user 
Hopefully this much info would be enough to debug the cause of problem

Using Raw Bash
```
for i in $(seq 1 10); do /usr/bin/time bash -i -c exit; done
exit
0.02user 0.07system 0:00.19elapsed 45%CPU (0avgtext+0avgdata 1816maxresident)k
136inputs+0outputs (3major+1737minor)pagefaults 0swaps
exit
0.05user 0.04system 0:00.17elapsed 52%CPU (0avgtext+0avgdata 1820maxresident)k
0inputs+0outputs (0major+1737minor)pagefaults 0swaps
exit
0.02user 0.06system 0:00.18elapsed 42%CPU (0avgtext+0avgdata 1824maxresident)k
0inputs+0outputs (0major+1745minor)pagefaults 0swaps
exit
0.08user 0.03system 0:00.21elapsed 51%CPU (0avgtext+0avgdata 1828maxresident)k
0inputs+0outputs (0major+1743minor)pagefaults 0swaps
exit
0.00user 0.06system 0:00.14elapsed 40%CPU (0avgtext+0avgdata 1816maxresident)k
0inputs+0outputs (0major+1736minor)pagefaults 0swaps
exit
0.02user 0.05system 0:00.14elapsed 50%CPU (0avgtext+0avgdata 1820maxresident)k
0inputs+0outputs (0major+1738minor)pagefaults 0swaps
exit
0.00user 0.06system 0:00.13elapsed 46%CPU (0avgtext+0avgdata 1820maxresident)k
0inputs+0outputs (0major+1741minor)pagefaults 0swaps
exit
0.01user 0.05system 0:00.14elapsed 40%CPU (0avgtext+0avgdata 1816maxresident)k
0inputs+0outputs (0major+1738minor)pagefaults 0swaps
exit
0.00user 0.07system 0:00.14elapsed 48%CPU (0avgtext+0avgdata 1816maxresident)k
0inputs+0outputs (0major+1738minor)pagefaults 0swaps
exit
0.01user 0.06system 0:00.13elapsed 50%CPU (0avgtext+0avgdata 1816maxresident)k
0inputs+0outputs (0major+1737minor)pagefaults 0swaps
```
 Using raw zsh ( without oh my zsh )
```
0.27user 0.35system 0:01.05elapsed 58%CPU (0avgtext+0avgdata 3256maxresident)k
0inputs+0outputs (0major+1823minor)pagefaults 0swaps
0.25user 0.41system 0:01.17elapsed 56%CPU (0avgtext+0avgdata 3252maxresident)k
0inputs+0outputs (0major+1824minor)pagefaults 0swaps
0.41user 0.27system 0:01.06elapsed 63%CPU (0avgtext+0avgdata 3256maxresident)k
0inputs+0outputs (0major+1824minor)pagefaults 0swaps
0.52user 0.20system 0:01.20elapsed 59%CPU (0avgtext+0avgdata 3252maxresident)k
0inputs+0outputs (0major+1823minor)pagefaults 0swaps
0.32user 0.36system 0:01.19elapsed 57%CPU (0avgtext+0avgdata 3256maxresident)k
0inputs+0outputs (0major+1824minor)pagefaults 0swaps
0.21user 0.48system 0:01.22elapsed 56%CPU (0avgtext+0avgdata 3256maxresident)k
0inputs+0outputs (0major+1825minor)pagefaults 0swaps
0.27user 0.36system 0:01.12elapsed 56%CPU (0avgtext+0avgdata 3256maxresident)k
0inputs+0outputs (0major+1823minor)pagefaults 0swaps
0.24user 0.45system 0:01.18elapsed 58%CPU (0avgtext+0avgdata 3252maxresident)k
0inputs+0outputs (0major+1823minor)pagefaults 0swaps
0.24user 0.47system 0:01.22elapsed 58%CPU (0avgtext+0avgdata 3256maxresident)k
0inputs+0outputs (0major+1825minor)pagefaults 0swaps
0.38user 0.32system 0:01.16elapsed 60%CPU (0avgtext+0avgdata 3256maxresident)k
0inputs+0outputs (0major+1825minor)pagefaults 0swaps
```

Using Zsh + Ohmyzsh
```
for i in $(seq 1 10); do /usr/bin/time zsh -i -c exit; done
0.67user 0.82system 0:02.54elapsed 58%CPU (0avgtext+0avgdata 4676maxresident)k
0inputs+0outputs (0major+8337minor)pagefaults 0swaps
0.66user 1.01system 0:02.88elapsed 57%CPU (0avgtext+0avgdata 4676maxresident)k
0inputs+0outputs (0major+8329minor)pagefaults 0swaps
0.51user 1.11system 0:03.17elapsed 50%CPU (0avgtext+0avgdata 4676maxresident)k
0inputs+0outputs (0major+8345minor)pagefaults 0swaps
0.74user 0.76system 0:02.78elapsed 53%CPU (0avgtext+0avgdata 4676maxresident)k
0inputs+0outputs (0major+8339minor)pagefaults 0swaps
0.59user 0.99system 0:02.74elapsed 57%CPU (0avgtext+0avgdata 4676maxresident)k
0inputs+0outputs (0major+8326minor)pagefaults 0swaps
0.80user 0.86system 0:02.88elapsed 57%CPU (0avgtext+0avgdata 4676maxresident)k
0inputs+0outputs (0major+8339minor)pagefaults 0swaps
0.63user 1.02system 0:02.78elapsed 59%CPU (0avgtext+0avgdata 4676maxresident)k
0inputs+0outputs (0major+8330minor)pagefaults 0swaps
0.87user 0.89system 0:03.08elapsed 57%CPU (0avgtext+0avgdata 4676maxresident)k
0inputs+0outputs (0major+8325minor)pagefaults 0swaps
0.68user 0.98system 0:02.89elapsed 57%CPU (0avgtext+0avgdata 4676maxresident)k
0inputs+0outputs (0major+8323minor)pagefaults 0swaps
0.71user 0.88system 0:02.81elapsed 56%CPU (0avgtext+0avgdata 4676maxresident)k
0inputs+0outputs (0major+8338minor)pagefaults 0swaps
```

**Desktop (please complete the following information):**
 - OS / Distro: Ubuntu 20
 - Latest ohmyzsh Update?: Yes
 - ZSH Version: 5.8

",,,rootlinux2,"
--
I have the same problem, the same Ubuntu 20.04 version, I use the same powerlevel10k.
The only difference is in my case ZSH was working well for a while, at the last 2 weeks I receive a notification about ZSH updates available, I accept to install the updates then when I open a terminal  there is a delay before show the prompt. 
--
",romkatv,"
--
@xd003 Powerlevel10k can remove zsh startup lag even when it's not caused by Powerlevel10k itself. This feature is called *Instant Prompt* and it needs to be explicitly enabled. Run `p10k configure` and when it asks you whether you want to enable instant prompt, choose ""quiet"" or ""verbose"" (choose the latter if you don't know the difference). See for details: https://github.com/romkatv/powerlevel10k#instant-prompt

Edit: I should add that enabling instant prompt will not affect your benchmark. This is the fault of this specific benchmark as it doesn't measure zsh startup time. It provides neither the lower nor the upper bound on zsh startup time.
--
",Arnie97,"
--
Remove everything in `handle_completion_insecurities()` in`$ZSH/lib/compfix.zsh` does improve the zsh startup time. It took half of my zsh startup time according to `zprof`. 
--
",,,,,,
9043,OPEN,Create `git merge --squash` command alias,Feature,2020-06-18 11:08:30 +0000 UTC,gabrielmoncea,Opened,,"**Describe the solution you'd like**
A description of what you want to happen.

Writing `gms` would be the alias for `git merge --squash`
",,,,,,,,,,,,,,
9032,OPEN,pipenv plugin causing terminals to crash for no apparent reason,Support,2020-06-16 08:26:46 +0000 UTC,dspacejs,Opened,,"**Describe the bug**
Whenever I `cd` into certain directories or do certain things with the `pipenv` zsh plugin enabled, it crashes those terminal windows. It seems to do it randomly, but it's always for certain commands and directories. I don't know why.

See this issue for some more info on the behaviour: https://github.com/tmuxinator/tmuxinator/issues/777

**To Reproduce**
I'm not sure how to exactly reproduce this, or what's even causing it.

In some cases, certain commands won't run, like in the link to the issue above. In other cases, I can't even `cd` into certain directories (even if those directories don't have a `Pipfile` or `.venv` in them). 

**Expected behavior**
It shouldn't be causing things to crash. And if it does, it should say why so it can be debugged.

**Desktop (please complete the following information):**
 - OS / Distro: Ubuntu 20.04 LTS
 - Latest ohmyzsh Update?: yes
 - ZSH Version: zsh 5.8 (x86_64-ubuntu-linux-gnu)
 - Terminal emulator: Gnome Terminal
",,,,,,,,,,,,,,
9015,OPEN,Rename OMZ's master branch,Area: meta; Feature,2020-10-28 16:50:36 +0000 UTC,robbyrussell,In progress,,"We are going rename our primary/main branch and discontinue using `master`.

Proposal to move from `main` (or `stable` as we're also exploring a `beta` branch naming convention for community-driven testing).  @mcornella can help make a call there.

Given that our install and update process is reliant on branch names, this will not be a quick nor simple change. ...but it will (and needs to) happen. Thanks in advance for your contributions and patience as we figure out a strategy.",,,robbyrussell,"
--
@mcornella Apologies for the lack of clarity. My goal here was to discontinue naming any branch in the project 'master'. 

i.e., https://www.hanselman.com/blog/EasilyRenameYourGitDefaultBranchFromMasterToMain.aspx
--

--
@drizzt Cool. Feel free to rename your project branches teacher. We are moving in a different direction.
--
",mcornella,"
--
Oh sorry, I got confused because we were also talking about versioning. This looks reasonable and a step in the right direction. I'll have a look at needed migration steps.
--

--
@askpatrickw does this PR solve your needs? https://github.com/ohmyzsh/ohmyzsh/pull/9049
--

--
As Robby said previously, this is happening without a doubt. The issue remains open to sort out the technical issues to be aware. It _is_ possible to implement the rename without problems, it has been done in other projects and it will be done in this one as well, and no user will even notice.
--

--
> There's no other reference rather than `refs/heads/master` at the moment and as long as you run `oh-my-zsh` for years on your system with this [https://github.com/ohmyzsh/ohmyzsh/blob/master/tools/upgrade.sh#L58](https://github.com/ohmyzsh/ohmyzsh/blob/master/tools/upgrade.sh?rgh-link-date=2020-09-21T11%3A18%3A50Z#L58) piece of code, you will end up breaking the users environment, because guess what, the only official way to use `oh-my-zsh` is by depending on `git` to fetch updates from this repository.

This is entirely changeable. The current thinking is to maintain both branches side by side and pointing both to the same commit, then fix the upgrade script to use the main branch instead. A similar algo was written to update the remote URL when migrating from @robbyrussell's user to the ohmyzsh organization.

After that is in place, we will update the default branch to main via the GitHub settings UI, and progressively move all the software that uses Oh My Zsh to use `main`. This includes zsh package managers like antigen, zplug, zinit and others.

Also, we will start tagging commits that have been tested enough with version numbers so that maintainers that package ohmyzsh will have an better experience.

All of these changes contribute to improving the overall Oh My Zsh experience and we'd do them even if we didn't think about renaming the default branch.

> Why don't you just care more about other existing problems in the project instead of creating new ones?

You're welcome to chip in with the existing problems of the project. We're already doing it.
--

--
> I'm not aware of that change, but it seems that @robbyrussell remote was deleted, but fortunately, Github does have an alias for you to safely redirect to this repo, otherwise, it would be a breaking change, for sure.

This is the [algorithm which made the remote change](https://github.com/ohmyzsh/ohmyzsh/blob/93c837fec8e9fe61509b9dff9e909e84f7ebe32d/tools/upgrade.sh#L51-L55). We can apply a similar solution to change user's ohmyzsh folders to checkout main instead of master.

My point is that the potential technical issues that might arise from the change are being discussed, and we won't proceed to remove the master branch until we're 100% sure that everybody switched over to main, for example by tracking recent fetches of the master branch.

Removing the master branch is the last of the things to do and something we don't need to do until it doesn't cause any problems, as I said. We can already start implementing the other stuff as soon as we have a roadmap set in stone.
--

--
It also seems like [GitHub is working on a tool](https://github.com/github/renaming#later-this-year-seamless-move-for-existing-repositories-) to make the renaming easier so we won't have to wait too much.
--

--
The installation script won't stop working.
--

--
Hey @flexbox, the `gcm` alias was already changed to prefer `main` if the branch exists, otherwise use `master`.
--
",drizzt,"
--
I think it's ""slave"" the problematic word. The origin of word master is ""magister"" that means teacher.
--
",adam2k,"
--
@robbyrussell does this also include changing the `git` plugin's command `gcm` to be an alias for `git checkout main`?  If not, I can create a new issue and PR for that.
--
",askpatrickw,"
--
> @robbyrussell does this also include changing the `git` plugin's command `gcm` to be an alias for `git checkout main`? If not, I can create a new issue and PR for that.

I came here looking for this exact thing. 

I do believe gcm should be main. Unless GitHub picks some other default of course.
Maybe having a GCM variable to set it to your preference would be good as well as not all repos can change or will change to the same thing.
--

--
@mcornella I believe it will, thank you !
--
",ljmf00,"
--
Hi @robbyrussell ,

I want to clarify some things about this topic:

1. See the definition of `master` branch as ['master copy'][1] and understand why it's named that way. In `git`, other branches rather than `master` branch, usually share the same history with `master` and that's why `master` is called that way. Please understand and accept that `master` branch is nothing to do with `master`/`slave` principle and no one feel offended except you and who think that changing the name of `master` branch on git and other huge protocols that has `master` on it will solve racism/inequality/discrimination in this world.

2. This will cause a huge breaking change. Other repositories that depends on this one will rely on `master` branch, because, unfortunately, there's no tagging on OMZ repository, see #9216 . Even if you say, no one depends on this repository, the update script that is used by `oh-my-zsh` itself, is relying on the current user's default branch, which is `master`. Remember, this script is present on EVERY single `/home/` directory of whatever user is using OMZ and surely it will break the users environment.

3. OMZ has 200+ active issues and growing, can we do better? There's a lot more important stuff to discuss and deal with...

In conclusion: don't break software and the user's environment. A lot of people who reacted negatively to your issue description, may understand the point described here.

Also:
> @drizzt Cool. Feel free to rename your project branches teacher. We are moving in a different direction.

IMHO, your comment on this is just unnecessary.


[1]: https://www.collinsdictionary.com/dictionary/english/master-copy
--

--
> Git branches have been qualified as topic branches, integration branches,
development branches, feature branches, release branches and so on.
Git has a branch that is the master *for* development, but it is not
the master *of* any ""slave branch"": Git does not have slave branches,
and has never had, except for a single testcase that claims otherwise. :)

Source: https://github.com/git/git/commit/08dc26061f3ff9ee79e6cfda88f0c825b8730e54

---

Searching the ""slave"" term on the default branch, you will find [this](https://github.com/git/git/search?q=slave&unscoped_q=slave), and if you do a simple `git blame` on https://github.com/git/git/blob/53f9a3e157dbbc901a02ac2c73346d375e24978c/t/test-terminal.perl, you see that it's a simple testcase and was not introduced by the major active developers of `git`.

> This is incorrect. The term master in git is almost certainly based on the master/slave meaning from BitKeeper.

So, even if git was based on BitKeeper and the word `master` is there because of that, doesn't necessarily mean that they went or are going in that direction.

My major point is not being against the word, is more about the side effects of changing the name of the default branch. Honestly, `main` could be a better word to describe the purpose, but `git` just named that way.
--

--
> As Robby said previously, this is happening without a doubt.

This is just sad. You guys literally state that OMZ is a ""community-driven"" project and you make decisions without caring about who uses your software and the stability of it for the community around, even if a more than half of the people that reacts to this issue are completely upset with the decision.

> It is possible to implement the rename without problems, it has been done in other projects and it will be done in this one as well

No it's not. I'm sorry, but you will always have a problem here. There's no other reference rather than `refs/heads/master` at the moment and as long as you run `oh-my-zsh` for years on your system with this https://github.com/ohmyzsh/ohmyzsh/blob/master/tools/upgrade.sh#L58 piece of code, you will end up breaking the users environment, because guess what, the only official way to use `oh-my-zsh` is by depending on `git` to fetch updates from this repository.

Why don't you just care more about other existing problems in the project instead of creating new ones?
--

--
> This is entirely changeable. The current thinking is to maintain both branches side by side and pointing both to the same commit, then fix the upgrade script to use the main branch instead.

I'm fine if you don't delete `refs/heads/master` branch, but if you do it afterwards, you will break users environment anyway.

> A similar algo was written to update the remote URL when migrating from @robbyrussell's user to the ohmyzsh organization.

I'm not aware of that change, but it seems that @robbyrussell remote was deleted, but fortunately, Github does have an alias for you to safely redirect to this repo, otherwise, it would be a breaking change, for sure.

> Also, we will start tagging commits that have been tested enough with version numbers so that maintainers that package ohmyzsh will have an better experience.

So, please, track the progress on the issue I created about version tagging. I suggested using https://semver.org/ .

> You're welcome to chip in with the existing problems of the project. We're already doing it.

You didn't get my point... Instead of potentially create a breaking change because of a naming convention and wasting a lot of time on this, why not focus on the existing **real** problems?

Anyway, my time is not unlimited and I see no reason to continue discussing pointless issues, especially when you don't care about the opinion of people and say: ""this is happening without a doubt"".
--

--
> The installation script won't stop working.

**cof** *cof* 

---
Some people don't really understand the ratio between useful and proactive tasks and breaking changes.
--
"
9007,OPEN,per-directory-history plugin incorrectly uses global history in newly created shell,Support,2020-06-07 19:56:13 +0000 UTC,smarsching,In progress,,"**Describe the bug**
The per-directory-history plugin does not use the per-directory history immediately after creating a new shell. The per-directory history is only used when changing to global and back to per-directory mode (by pressing Ctrl+G twice) or when changing directories (e.g. `cd .`).

**To Reproduce**
Steps to reproduce the behavior, for example:
1. Enable the per-directory-history plugin.
2. Create a new directory for the experiments (`/tmp/test` in this example).
3. Change to the test directory (`cd /tmp/test`).
4. Run several commands in the test directory in order to create a history:
  `echo 1`
  `echo 2`
  `echo 3`
5. Close the shell and open a new one in a different directory.
6. In that directory, run a few other commands:
  `echo 4`
  `echo 5`
7. Open a new shell in the test directory.
  **Caution:** The bug will only appear when the new shell is opened while already in that directory. It will not appear when changing to the directory *after* creating the shell.
8. Browse through the history using the Arrow Up key. The commands that were run in the other directory will be visible in the history.

**Expected behavior**
Instead of using the global history, the newly created shell should use the history of the directory in which it was created.

**Desktop**
 - OS / Distro: macOS 10.15.5
 - Latest ohmyzsh Update?: Yes
 - ZSH Version: zsh 5.7.1 (x86_64-apple-darwin19.0)
 - Terminal emulator: iTerm2

**Additional context**
Theme: powerlevel10k
Other active plugins: bgnotify command-not-found copydir dirhistory git safe-paste z
",,,smarsching,"
--
I just wanted to add that this problem also appears when using the ""robbyrussell"" theme, so it isn’t related to the theme.

The cause of the problem seems to be that zsh reads the history from `$HISTFILE` after the plugin is initialized. Unsetting `$HISTFILE` during plugin initialization resolves the problem, but then the global history is not written any longer, which isn’t good either.
--

--
Yes, that’s exactly what I meant.
--
",mcornella,"
--
I'm assuming when you say in the first step ""enable the plugin"", you add it to the plugins array and then apply the changes, i.e. rerun zsh (`exec zsh`), before doing the next steps? 
--
",,,,,,,,
9001,OPEN,Installer does not respect $ZDOTDIR,Feature,2021-04-06 20:37:40 +0000 UTC,marlonrichert,Opened,,"1. `cd ""$(mktemp -d)""`
2. `ZDOTDIR=$PWD zsh -d`
3. `sh -c ""$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)""`

**Expected behavior**
OMZ installs into `$ZDOTDIR`.

**Actual behavior**
OMZ installs into `~`.

**Desktop (please complete the following information):**
 - OS / Distro: macOS
 - Latest ohmyzsh Update?: Yes
 - ZSH Version: 5.8
 - Terminal emulator: Apple Terminal
",,,,,,,,,,,,,,
9000,OPEN,Remove extra whitespace after kubectl folder autocompletion,Support; Topic: completion,2021-04-06 20:38:16 +0000 UTC,datenzar,Opened,,"When using autocompletion in kubectl and try to specify a file in a folder, the autocompletion allways adds a whitespace after completing a folder.

E.g. I want to apply a yml file located at `test/deployment.yml`. After entering `kubectl apply -f tes` and hitting `TAB` the autocompletion gives me `kubectl apply -f test/ ` instead of `kubectl apply -f test/`. Hence in order to continue, I always need to remove the whitespace first. In all other cases I have observed so far, the autocomplete doesn't add the whitespace character. I'm not sure if this is a bug or intentionally built that way. If so, is there a way to configure the extra whitespace-creation for this plugin?

Thx",,,,,,,,,,,,,,
8999,OPEN,kubectl autocompletion doesn't apply namespace context,Support; Topic: completion,2020-10-11 17:32:36 +0000 UTC,datenzar,In progress,,"**Describe the bug**
When I want to use autocompletion in kubectl, the suggested results are taken from the current context instead of the namespace. E.g. when current namespace is set to `default` and I type `kubectl get pods -n development `, after hitting tab I only get the results of `default` but not `development`.  

**To Reproduce**
Steps to reproduce the behavior, for example:
1. Enable this plugin 'kubectl'
2. Run command try the autocomplete command 'kubectl get pods -n development'
3. See results from `default` namespace

**Expected behavior**
Suggested result should be the pods in `development` namespace

**Screenshots and/or Recordings**
n/a

**Desktop (please complete the following information):**
 - OS / Distro: Manjaro Linux
 - Latest ohmyzsh Update?: Yes
 - ZSH Version: zsh 5.8 (x86_64-pc-linux-gnu)
 - Terminal emulator Terminator

**Additional context**
n/a",,,naveen,"
--
I tried reproducing the issue without luck. Setting current context to `default` and able to view pods from other namespace `kube-system`. Can you please add additional details or try clearing completion cache.

![Screenshot from 2020-09-26 21-13-59](https://user-images.githubusercontent.com/28789859/94345132-74f4b300-0041-11eb-9793-55f6af2b7493.png)

--
",mcornella,"
--
Can you provide a trace of the completion function? You can do that by writing the command you want to complete, then pressing <kbd>CTRL</kbd>+<kbd>X</kbd> followed by <kbd>?</kbd>. Afterwards please post the generated file.
--
",datenzar,"
--
Thx for the suggestion @mcornella, here's the file
[zsh18969kubectl5.zip](https://github.com/ohmyzsh/ohmyzsh/files/5361533/zsh18969kubectl5.zip)


--
",,,,,,
8995,OPEN,Intuitive alias related to 'git pull',Feature,2020-06-30 18:55:47 +0000 UTC,HwangTaehyun,Opened,,"
It would be nice to have uniformity for alias related to 'git pull'

alias gl='git pull'
alias glum='git pull upstream master'

alias gup='git pull --rebase'
alias gupv='git pull --rebase -v'
alias gupa='git pull --rebase --autostash'
alias gupav='git pull --rebase --autostash -v'

ex) change 'gl' to 'gu' (pull -> u) or 'gup' to 'glr' (pull -> l)

Thank you for reading my issue!",,,bartekpacia,"
--
@larson-carter This looks quite simple, I think I could do this. 
PS I think this might break something for existing users.
--

--
No, I still haven't. Feel free to work on this.
--
",jose,"
--
@bartekpacia Hi, have you began work on this issue? If not I'd gladly take a stab at it. :)
--

--
@bartekpacia Heya, Just curious, how does one gain the ability to merge things here? How can I get more involved to help review some of these PRs and changes?
--
",larson,"
--
@jose-bonilla Simply just do more GitHub PR reviews. Test new plugins/themes. Comment on issues. Also join our discord server https://discord.gg/ohmyzsh and start conversations.
--
",,,,,,
8977,OPEN,pip plugin does't work for pip3 from Homebrew,Area: plugin; Bug; Topic: completion,2021-04-06 20:36:00 +0000 UTC,rarylson,Opened,,"**Describe the bug**
Let's suppose that you are using `pip3` and that there is no `pip` command:

```
$ which pip3
/usr/local/bin/pip3
$ pip
zsh: command not found: pip
```

In this case, the `pip` Oh-My-ZSH plugin will:

- Add a new alias that doesn't make sense here:
    - `alias pip=""noglob pip""`
- Add a new PIP autocomplete to `pip3`:
    - `#compdef pip pip2 pip-2.7 pip3 pip-3.2 pip-3.3 pip-3.4`
- But the autocomplete will try to get the package list from `pip` instead of `pip3`:
    - ``installed_pkgs=(`pip freeze | cut -d '=' -f 1`)``
- And will try to get the subcommand list from `pip` instead of `pip3`:
    - `_describe -t commands ""pip subcommand"" _1st_arguments`

Because of this, you the autocomplete for `pip3` will not work.

There is another edge case which is when the user has both `pip` (symlink to `pip2`) and `pip3` installed, and they share the same cached list of installed packages, which is wrong (both of them have different installed packages).

**To Reproduce**

Bug 1:

1. Install python3 from Homebrew: `brew install python`
    - The `pip3` command will be installed at `/usr/local/bin/pip3` at this time
2. Put `/usr/local/bin` in your PATH
3. Enable the `pip` plugin
4. Run `pip3 ins<TAB><TAB>`
5. The autocomplete will work here
6. Run `pip3 uninstall <TAB><TAB>`
7. The autocomplete will not work and show the error: `""zsh: command not found: pip""`

Bug 2: (Didn't test, but this will very likely happen) 

1. Install python3 from Homebrew: `brew install python`
    - The `pip3` command will be installed at `/usr/local/bin/pip3` at this time
2. Install python2 and pip (for Python 2) from somewhere else: `/usr/bin/pip` or `/usr/bin/local/pip` will exist now
2. Put `/usr/local/bin` in your PATH
3. Enable the `pip` plugin
4. Run `pip install boto3`
5. Run `pip uninstall <TAB><TAB>`
6. Run `pip3 uninstall <TAB><TAB>`
7. The autocomplete will work, but it will show the packages for `pip` (not for `pip3`), including `boto3`.
8. Run `pip3 uninstall boto<TAB><TAB>` (will expand to `pip3 uninstall boto3`)
9. An error will occur: `WARNING: Skipping boto3 as it is not installed.`

**Expected behavior**

The autocomplete should work and provide the correct list of installed packages.

**Desktop (please complete the following information):**
 - OS / Distro: macOS
 - Latest ohmyzsh Update?: Yes
 - ZSH Version: zsh 5.3 (x86_64-apple-darwin18.0)
 - Terminal emulator: iTerm2

**Additional context**

Maybe a possible solution could be:

- Depending on the called command (`pip` vs `pip2` vs `pip3` vs. `pip2.6` etc), change the lines to `installed_pkgs=(`$PIP_CMD freeze | cut -d '=' -f 1`)` and `_describe -t commands ""$PIP_CMD subcommand"" _1st_arguments`
    - `PIP_CMD` here means, the correct command that I'm trying to autocomplete
    - If I call pip2 or pip and if this is a symlink to pip2.6, the command pip2.6 should be used here
    - `$ZSH_PIP_CACHE_FILE` should change depending on the pip command used (each pip has a different list of installed packages)

But I have no idea how to do something like this.

Another solution could be: define `ZSH_PIP3_CACHE_FILE`, move as much of code to `pip.plugin.zsh` as possible, and define both `_pip` (autocomplete to pip2 family of commands) and `_pip3` (autocomplete to pip2 family of commands).

In both cases, I suspect that there would still be the edge case of the client loading a virtual env and running `pip uninstall <TAB><TAB>` (that would use the wrong cache file). A possible workaround would be ignoring the cache file when running the autocomplete inside a virtualenv.",,,,,,,,,,,,,,
8968,OPEN,Eject all mounted disks for osx plugin,Area: plugin; Feature,2020-06-13 18:33:08 +0000 UTC,akarsh1995,Opened,,"
alias ejectall=""osascript -e 'tell application \""Finder\"" to eject (every disk whose ejectable is true)'""
```

Thanks!",,,mcornella,"
--
I've fixed the app quoting, check that the alias still works and submit a PR to the osx plugin (remember to also update the plugin README).
--
",,,,,,,,,,
8963,OPEN,jira branch does not take into account duplicated JIRA_PREFIX,Support,2020-05-25 10:27:22 +0000 UTC,JoannaFalkowska,Opened,,"**Describe the bug**
When on branch `ABC-2137__my-feature`, if `$JIRA_PREFIX` is set to `ABC-`, running `jira branch` opens `{my-jira-url}/ABC-ABC-2137` instead of `{my-jira-url}/ABC-2137`.

That makes it impossible to make use of `$JIRA_PREFIX=""ABC-""` for other commands, if you want to be able to run `jira branch` and have the correct page open.

(Note that `ABC-2137__my-feature` branch name format is the one recognized by GitHub/Jira integration.)

**To Reproduce**
1. Enable `jira` plugin
2. Set `$JIRA_PREFIX=""ABC-""`
3. Check out to branch starting with `ABC-`, e.g. `ABC-2137__my-feature`
4. Run `jira branch`
5. `{my-jira-url}/ABC-ABC-2137` url is opened

**Expected behavior**
`{my-jira-url}/ABC-2137` url is opened (duplicated prefix is recognized and removed)

**Desktop (please complete the following information):**
 - ZSH Version: zsh 5.3 (x86_64-apple-darwin18.0)",,,,,,,,,,,,,,
8946,OPEN,Can't pass lexer option to colorize plugin (using chroma),Area: plugin; Feature,2020-06-09 17:50:11 +0000 UTC,apolopena,In progress,,"
**Describe the bug**
I am using **chroma** with the Colorize plugin and I want to use the aliases that the Colorize plugin provides: `ccat` (for `colorize_cat`) and `cless` (for `colorize_less`) to display syntax highlighting for files with no extension, based on the content of the file. 

**To Reproduce**
contents of file 'zman' is:
```
errcode=0
if [ $# -eq 0 ]
then
    >&2 echo ""Not enough arguments"";
    errcode=2
fi
if [ $# -eq 1 ]
then
    PAGER=""less -g -s '+/^       ""$1""'"" command man zshall
fi
if [ $# -eq 2 ]
then
    PAGER=""less -g -s '+/^       ""$1""'"" command man ""$2""
fi
if [ $# -gt 2 ]
then
    >&2 echo ""Too many arguments""
    errcode=2
fi
if [ $errcode -gt 0 ]
then
    $(exit $errcode)
fi
# vim:ft=zsh:et
```
run the command:
`ccat zman`

**Result**
Output is not colorized

**Expected behavior**
Output should be colorized using the ""Bash"" lexer

**Desktop**
 - OS / Distro: Microsoft Windows 10 Pro (64-bit), Version 10.0.18362
 - Latest ohmyzsh Update?: Yes
 - ZSH Version: zsh 5.8 (x86_64-ubuntu-linux-gnu)
 - Terminal emulator: Windows Terminal

**Additional context**
I assume what I am asking should be possible since I found this in the `colorize_cat` function `colorize.plugin.zsh` :
```
    # Guess lexer from file extension, or guess it from file contents if unsuccessful.
    local FNAME lexer
    for FNAME in ""$@""; do
        if [[ ""$ZSH_COLORIZE_TOOL"" == ""pygmentize"" ]]; then
            lexer=$(pygmentize -N ""$FNAME"")
            if [[ $lexer != text ]]; then
                pygmentize -O style=""$ZSH_COLORIZE_STYLE"" -l ""$lexer"" ""$FNAME""
            else
                pygmentize -O style=""$ZSH_COLORIZE_STYLE"" -g ""$FNAME""
            fi
        else
            chroma --style=""$ZSH_COLORIZE_STYLE"" ""$FNAME""
        fi
    done
```
I can get the example file `zman` to have colorized output by using chroma manually like this:
`chroma zman --lexer=""Bash"" --style=""swapoff"" --formatter=""terminal256""`",,,mcornella,"
--
The `colorize_cat` plugin iterates over the arguments passed as if they are files (because `pygmentize` only supports one file at a time). This means that even if you pass `--lexer=bash`, it'll interpret that as a filename. `chroma` does support multiple files at once, so we could fix the plugin for this case.

In the meantime, you can instead pass the file as redirected input and call `ccat --lexer=bash < filename`.
--
",apolopena,"
--
Ah thank you @mcornella 
--
",,,,,,,,
8936,OPEN,robbyrussel: Possible clash of git and git-prompt plugin,Support,2020-05-16 23:21:14 +0000 UTC,realdadfish,Opened,,"The current version of the git-prompt plugin defines these - amongst many other - environment variables:

```zsh
ZSH_THEME_GIT_PROMPT_PREFIX=""(""
ZSH_THEME_GIT_PROMPT_SUFFIX="")""
ZSH_THEME_GIT_PROMPT_CLEAN=""%{$fg_bold[green]%}%{✔%G%}""
...
```

while in the `robbyrussel` default theme (and many others) define these

```zsh
ZSH_THEME_GIT_PROMPT_PREFIX=""%{$fg_bold[blue]%}git:(%{$fg[red]%}""
ZSH_THEME_GIT_PROMPT_SUFFIX=""%{$reset_color%} ""
ZSH_THEME_GIT_PROMPT_DIRTY=""%{$fg[blue]%}) %{$fg[yellow]%}✗""
ZSH_THEME_GIT_PROMPT_CLEAN=""%{$fg[blue]%})""
```

I suspect the environment variables from the theme stem from the default `git` plugin and sadly conflict with the namespace of the `git-prompt` plugin, insofar that the closing bracket is removed from the suffix if there are local changes in the workspace and also in case the workspace is clean, a single blue `)` is printed out, instead of the green checkmark as defined by the plugin.",,,,,,,,,,,,,,
8922,OPEN,Improve GitHub actions,Feature,2021-01-02 21:25:52 +0000 UTC,larson-carter,Opened,,"
**Describe the solution you'd like**
Better GitHub actions, currently it just installs OhMyZsh. We need it to test themes for building, plugins, etc.

**Additional context**
- Actions
  - Optimize main action:
    * install only when changes made to install script
    * cache zsh installation
    * check only changed files
We don't need to install it every time. Only when there is a modification to the install script. Therefore we could only install it 1 time then have the install in cache then utilize the update tool to pull it forward. Then it would detect what themes have been modified and test them. Same for plugins detect what plugins have been modified then test the plugins aliases.

Overall we need our GitHub actions to me thorough
",,,magdapoppins,"
--
@larson-carter I could take a stab at this and maybe also add [CodeQL](https://securitylab.github.com/tools/codeql) as a part of actions if that seems useful?

Also, could you elaborate on what ""cache zsh installation"" means and why this would be a good idea?
--

--
Some thoughts after some initial stab:
- seeing as the current install process only takes about 2s, I don't see that there is a big need for optimization
- however, the current installation test only tests that master can be installed
  - this should be changed to test the branch from which the PR is made (relatively straightforward)
  - maybe the CI process could ""install"" OhMyZsh by symlinking the working copy into place and overwriting `.zshrc`
- perhaps some smoke tests could also be added: what do you think would be a good smoke test for ohmyzsh?
--
",larson,"
--
@magdapoppins 

Sure, go ahead and try whatever part that you want.

> Also, could you elaborate on what ""cache zsh installation"" means and why this would be a good idea?

This might be impossible with GitHub actions I honestly don't know. The ""cache zsh installation"" was meaning save the zsh installation so that way it won't have to install it every time we run a workflow.
--
",mcornella,"
--
> however, the current installation test only tests that master can be installed
> * this should be changed to test the branch from which the PR is made (relatively straightforward)

This is not true, the `install.sh` file used is the one from the PR head. What's true is that the *cloned* repository is the main repo, but that has no effect on whether the install script works or not.

> * seeing as the current install process only takes about 2s, I don't see that there is a big need for optimization

This however would be nice for the relatively few times when the [`apt install` process fails](https://github.com/ohmyzsh/ohmyzsh/pull/8961#issuecomment-654280533) for reasons beyond our control. We could use an external Docker image ([`zshusers/zsh`](https://hub.docker.com/r/zshusers/zsh), for example, but it doesn't have git installed).

> * maybe the CI process could ""install"" OhMyZsh by symlinking the working copy into place and overwriting `.zshrc`

This would be the best way to do it if we had tests to run and the PR didn't modify the install script.

> * perhaps some smoke tests could also be added: what do you think would be a good smoke test for ohmyzsh?

🤷🏻 
--
",,,,,,
8890,OPEN,gcasm alias for 'git commit -a -s -m',Feature,2020-05-06 08:40:20 +0000 UTC,lorthirk,Opened,,"**Is your feature request related to a particular plugin or theme? If so, specify it.**
git

**Is your feature request related to a problem? Please describe.**
I see that there's already `gcam` and `gcsm`, but I often find myself doing `git commit -a -s -m <message>`

**Describe the solution you'd like**
I would love a `gcasm` function that does `git commit -a -s -m <message>`

**Describe alternatives you've considered**
I already have a `git casm` configured in git, but it's the last one remaining after switching to oh my zsh git plugin

EDIT: I didn't notice https://github.com/ohmyzsh/ohmyzsh/pull/8881 already covers this. It can be linked to this issue.",,,,,,,,,,,,,,
8889,OPEN,Perform environment reset between themes in theme-chooser,Area: core; Area: theme; Feature,2020-05-23 18:08:02 +0000 UTC,hugodahl,Opened,,"## Problem

When running the `/tools/theme-chooser.sh` script to evaluate and look at different themes, there are many occasions when some configuration elements from one theme will ""bleed"" over to the next one or more until a theme overrides said configuration element. For example, the `clean-theme.zsh` configures an `$RPROMPT` value, however, the next theme to be displayed, `cloud-theme.zsh`, does not set a value for `$RPROMPT`, so previous value of `$RPROMPT` remains. The theme after `could-theme.zsh` is `crcandy-theme.zsh`, which also does not set a value for `$RPROMPT`, so the previous value from `clean-theme.zsh` still carries over.

This can (and does) provide a very skewed and potentially incorrect sampling of the theme from the quick preview we get through `theme-chooser.sh`.

## Desired Outcome

Optimally, the proverbial slate would be wiped clean of all configuration elements between the sampling of themes. A significant level of difficulty comes in when plugins are involved which add their own theming variable(s). 

## Possible steps to remediation

1. Reset a small and pre-defined subset of variables most common among themes. Those would include:
* `$PROMPT`
* `$RPROMPT`
* `$ZSH_THEME_GIT_PROMPT_(PREFIX|SUFFIX|CLEAN|DIRTY)`
* Possibly other `$ZSH_THEME_GIT_*` values, from the core *git* plugin

2. After loading and displaying a theme, extract any environment variables that might have been set, such as a grep for `ZSH_THEME_[^=]`, extract the variable name, and unset it.

3. Get the currently defined environment variables that begin with `ZSH_` (or `ZSH_THEME`), and unset any which are not part of the core ZSH/OMZ functionality, such as `ZSH_NAME`, `ZSH_VERSION`, etc.

4. Have all themes included in the base deployment follow the `prompt_cleanup` pattern from the ZSH Docs' [""Writing Themes""](http://zsh.sourceforge.net/Doc/Release/User-Contributions.html#Writing-Themes) section

5. Invoking a new instance of the shell, using only the specified theme file. This would be the ""most thorough"" solution, but also the most time and resource-intensive due to the need of starting and exiting a new shell instance for every single theme.

6. Do nothing, leave it as is and close this issue as ""Won't fix"". Not ideal (from my position and opinion), but still an option none-the-less.

## What I've tried

I've already gone down the path of option 1 above, however, as I was looking for the more common ""core' variables within the themes, I saw a few RVM and VENV among others. My list quickly grew large, somewhere around 20, which is why I mention having only a few in that option.

## Conclusion

Given that depending on the path representing the most favourable option, I would be willing to take on this issue, or perhaps put together a POC of the top 2-3 options which would require a code change.",,,mcornella,"
--
This was fixed in https://github.com/ohmyzsh/ohmyzsh/pull/3743, but it needs to be merged still.
--
",,,,,,,,,,
8871,OPEN,Additional aliases for brew plugin,Feature,2020-06-11 12:53:28 +0000 UTC,gvelasq,In progress,,"
alias bc=""brew cleanup""
alias bci=""brew cask info""
alias bcl=""brew cask list""
alias bco=""brew cask outdated""
alias bcu=""brew cask upgrade""
alias bl=""brew list""
alias bo=""brew outdated""
alias bu=""brew update""
alias bubco=""brew update && brew cask outdated""
alias bubobco=""brew update && brew outdated && brew cask outdated""

**Update 2020-05-02:** Added aliases bcl and bl to list above.",,,aleagnelli,"
--
`brew update && brew cask outdated` is already defined as `bcubo`
--

--
@gvelasq I understand the harmony of the commands you are thinking of. But that would mean having two alias for the same command or change the current one. It's also not easy to change an alias and I don't think it's getting considered atm (@mcornella will confirm).
Meanwhile I have implemented the other aliases.
--

--
@gvelasq Hello, what about instead of `bcr` use `bcrin` so that keep the logic and doesn't get confused with brew cask remove?
--
",gvelasq,"
--
Thank you, @alessandroagnelli. I noted the default definition of `bcubo` as you mentioned. I decided to propose `bubco` as a potentially redundant alternative because:

1. It may decrease [surprise](https://en.wikipedia.org/wiki/Principle_of_least_astonishment) for those who might surmise that the order of homebrew commands matches the order of letters in the alias, as it does for most other aliases; and

2. `bubco` would harmonize with `bubobco` if the latter were also to be accepted.

Thanks again for considering.
--

--
@giovanepadawan thank you for crafting a pull request. If it's not too late to consider, here are a few more I have found useful (the first and last also try to solve disambiguation issues between info/install and update/upgrade):

alias bcin=""brew cask install""
alias bcr=""brew cask reinstall""
alias bup=""brew upgrade""
--

--
@giovanepadawan that sounds great, I agree. Thank you. In that case we might consider harmonizing the upgrade commands as well by changing the proposed `bcu` to `bcup`:

info/install/reinstall/remove disambiguation:
alias bci=""brew cask info""
alias bcin=""brew cask install""
alias bcrin=""brew cask reinstall""
alias bcr=""brew cask remove""

update/upgrade disambiguation:
alias bu=""brew update""
alias bup=""brew upgrade""
alias bcup=""brew cask upgrade""
--
",,,,,,,,
8847,OPEN,Support for Azure cli,Feature,2020-04-21 06:42:52 +0000 UTC,jrottenberg,Opened,,"
**Is your feature request related to a problem? Please describe.**
ohmyzsh is missing support for the tool azure-cli
https://docs.microsoft.com/en-us/cli/azure/

**Describe the solution you'd like**
A plugin like the one in https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/aws with similar utilities (profiles --> subscriptions)

**Describe alternatives you've considered**
It looks like people have been living without a plugin for azure for a while, but is that fun ?


",,,,,,,,,,,,,,
8839,OPEN,Strange completion suggestion (mismatched upper and lowercase),Support; Topic: completion,2020-10-09 13:15:32 +0000 UTC,manfredlotz,In progress,,"I have a strange phenomenon regarding completion.

The system is Fedora 32, zsh is 5.8 and oh-my-zsh is newest.

I have a directory with the following content

```
drwxr-xr-x. 1 root root     4884 Apr 17 16:29 backups
drwxr-xr-x. 1 root root      128 Apr 10 11:25 gpg
drwxr-xr-x. 1 root root      340 Apr 17 16:29 installer
-rw-r--r--. 1 root root     1201 Apr 17  2014 README
drwxr-xr-x. 1 root root      274 Apr 10 11:25 TeXLive
-rw-r--r--. 1 root root      945 Apr 10 11:37 texlive.profile
-rw-r--r--. 1 root root 15603801 Apr 17 16:29 texlive.tlpdb
-rw-r--r--. 1 root root 16308930 Apr 17 16:28 texlive.tlpdb.3fa7fda404e9c1926412f4d43d381cc7
-rw-r--r--. 1 root root 16286175 Apr 13 08:38 texlive.tlpdb.e3a260d598eed31bbd62f419747d9e4a
-rw-r--r--. 1 root root 16260012 Apr 11 10:05 texlive.tlpdb.e838e10992a52b715be9e99422af8a05
drwxr-xr-x. 1 root root   145106 Apr 17 16:29 tlpobj
drwxr-xr-x. 1 root root      112 Apr 10 11:36 tlpostcode
drwxr-xr-x. 1 root root       36 Apr 10 11:34 tltcl
drwxr-xr-x. 1 root root      246 Apr 10 11:34 translations
```
When I now type `ls -l te` and TAB I get the following suggestion:

`ls -l teXLive`  

This is totally confusing. Watch the mixture of lower and upper case. 

Any idea?
",,,mcornella,"
--
Can you try running this and seeing if completion is fixed?
```zsh
zstyle ':completion:*' matcher-list 'r:[[:ascii:]]||[[:ascii:]]=** r:|=* m:{a-z\-}={A-Z\_}'
```
--

--
Yeah, I can reproduce your issue.
--
",manfredlotz,"
--
I went to the same directory and yes if I ran your suggested `zstyle...` statement then things are fixed. Thank you.
--

--
But in the same shell where I issued your proposed zstyle command completion is broken in general when doing a `cd` command and trying completion. 
--
",,,,,,,,
8827,OPEN,detect-clipboard is slow on startup,Area: core; Performance,2020-05-23 18:29:30 +0000 UTC,blayz3r,Opened,,"**Describe the bug**
A clear description of what the bug is.
_**detect-clipboard is slow on startup**_

**To Reproduce**
Steps to reproduce the behavior, for example:
**_start zsh with profiler on_**

**Expected behavior**
A brief description of what should happen.
**_Start normally_**
**Screenshots and/or Recordings**

If applicable, add screenshots to help explain your problem.
![image](https://user-images.githubusercontent.com/12205650/79074339-cee30580-7cb9-11ea-844c-b4512938c061.png)

**Desktop (please complete the following information):**
 - OS / Distro: [Ubunutu 20.04/wsl2]
 - Latest ohmyzsh Update?: [e.g. Yes]
 - ZSH Version: [5.8]
 - WSL2

**Additional context**
Add any other context about the problem here. This can be themes, plugins, custom configs.
num  calls                time                       self            name
-----------------------------------------------------------------------------------
 **_1)    1         196.85   196.85   85.97%    196.85   196.85   85.97%  detect-clipboard_**
 2)    1          11.32    11.32    4.94%     11.32    11.32    4.94%  compinit
 3)    1           9.18     9.18    4.01%      9.18     9.18    4.01%  handle_completion_insecurities
 4)    1           4.79     4.79    2.09%      4.71     4.71    2.06%  _zsh_highlight_load_highlighters
 5)    1           4.09     4.09    1.78%      4.09     4.09    1.78%  _zsh_highlight_bind_widgets
 6)    8           0.75     0.09    0.33%      0.75     0.09    0.33%  add-zsh-hook
 7)    1           0.66     0.66    0.29%      0.66     0.66    0.29%  colors
 8)    9           0.52     0.06    0.23%      0.52     0.06    0.23%  compdef
 9)    3           0.48     0.16    0.21%      0.48     0.16    0.21%  is-at-least
10)    1           0.13     0.13    0.06%      0.13     0.13    0.06%  (anon)
11)    5           0.09     0.02    0.04%      0.09     0.02    0.04%  spaceship::deprecated
12)    6           0.09     0.01    0.04%      0.09     0.01    0.04%  is_plugin
13)    1           0.27     0.27    0.12%      0.06     0.06    0.03%  prompt_spaceship_setup
14)    2           0.04     0.02    0.02%      0.04     0.02    0.02%  env_default
15)    1           0.01     0.01    0.01%      0.01     0.01    0.01%  bashcompinit",,,mcornella,"
--
@rwe can we do anything to make it faster?
--
",rwe,"
--
Relevant function is located here: https://github.com/ohmyzsh/ohmyzsh/blob/3f245edf1be1592e70d6deca6b3ecb8abf8e1356/lib/clipboard.zsh#L51-L107

The report shows a single call (ie it's not doing anything crazy like re-running detection).

`detect-clipboard` basically does two things: it checks env/paths and defines (but doesn't run) functions. The only external command it will possibly run (`uname -r`) does not show up in the profiler list (and should be extremely fast anyway).

I can't easily repro this locally, but my guess is: when `detect-clipboard` checks `${+commands[…]}` to see which clipboard is available, it is _possible_ this is the first time the [`command` hash table special parameter gets filled in](https://github.com/zsh-users/zsh/blob/zsh-5.8/Src/Modules/parameter.c#L210-L277).

To verify this, @blayz3r could try temporarily modifying `lib/clipboard.zsh` like so and see if it gives similar timing results.
```diff
+# Still slow?
+function detect-clipboard() {
+  emulate -L zsh
+  (( ${+commands[wl-copy]} )) || true
+}
 
-function detect-clipboard() {
+function _disabled_detect-clipboard() {
   emulate -L zsh
 
   if [[ ""${OSTYPE}"" == darwin* ]] && (( ${+commands[pbcopy]} )) && (( ${+commands[pbpaste]} )); then
```

If the timing looks roughly similar, then it's just zsh instantiating that parameter for the first time, which would happen normally anyway. (If the timing is *not* similar, at least this shows how to narrow down the hotspot!).

Alternatively, my open PR #8000 (_Enhanced clipboard detection and management_) permits users to set `ZSH_CLIPBOARD` to skip detection altogether.
--
",,,,,,,,
8779,OPEN,Support completions from external tools in the ZSH fpath/compinit lifecycle,Feature,2020-03-30 05:37:10 +0000 UTC,jthegedus,In progress,,"
Currently, the `asdf` plugin sources the tool's Bash completions. We (maintainer here) recently added [native ZSH completions to the tools codebase](https://github.com/asdf-vm/asdf/tree/master/completions). It would be great to be able to simply symlink the existing ZSH completions to the `plugins/asdf` dir in place of sourcing the Bash completions. However, given all additions to `fpath` and the call to `compinit` are performed before the `*.plugin.zsh` scripts are executed it means any symlink or copy of the actual ZSH files within the plugin's script will not take affect until https://github.com/ohmyzsh/ohmyzsh/issues/7642 is performed.

**Describe the solution you'd like**

1st party support for 3rd party tools to have their completions added to fpath within the oh-my-zsh lifecycle. 

I don't want each `asdf` user to have to learn about `fpath` if this could be automated (as it currently is but with bash completions). Now macOS ships with ZSH as it's default shell we will have many users migrated from Bash to ZSH and so I see this becoming an increasingly large problem. 

**Describe alternatives you've considered**

Manually sourcing the completions from `asdf` before sourcing `oh-my-zsh` so I do not have to rerun compinit.

Relevant parts of my `.zshrc`: 

```shell
fpath=(${HOME}/.asdf/completions $fpath)
plugins=(
  asdf
)
. ""$ZSH/oh-my-zsh.sh""
```

**Additional context**

Notably, https://github.com/ohmyzsh/ohmyzsh/pull/8777 will not resolve this issue.

Past work on the asdf plugin:
- https://github.com/ohmyzsh/ohmyzsh/pull/4956
- https://github.com/ohmyzsh/ohmyzsh/pull/6046
- https://github.com/ohmyzsh/ohmyzsh/pull/6456
- https://github.com/ohmyzsh/ohmyzsh/pull/6749
- https://github.com/ohmyzsh/ohmyzsh/pull/7582

Tagging listed Maintainer of OMZ asdf plugin: @RobLoach

Externally relevant:
- https://github.com/zsh-users/zsh-completions/issues/603",,,RobLoach,"
--
You're correct, it looks like it uses the bash:
https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/asdf/asdf.plugin.zsh

To adapt this, would it instead reference _asdf?
--
",jthegedus,"
--
Yes, the asdf completions are under `asdf/completions/_asdf`. I am unsure there's a better way to do it than the Bash completions given the lifecycle of oh-my-zsh.
--

--
A short term solution to the `asdf` specific problem is welcome, thanks for the suggestion @mcornella 

>Changing the lifecycle to allow fpath modifications is hard given the current system, but there are a few plugins that would make use of it.

Food for thought during future development of the tool.
--
",mcornella,"
--
In the plugin, we could add to fpath, force-load with autoload, then compdef to add it as a completion function. Changing the lifecycle to allow fpath modifications is hard given the current system, but there are a few plugins that would make use of it. 
--
",,,,,,
8726,OPEN,django plugin: _values:compvalues:11: not enough arguments,Support; Topic: completion,2020-03-10 15:45:08 +0000 UTC,ikhomutov,In progress,,"1. Enable this plugin 'django'
2. Install django and generate simple project with `django-admin startproject`
3. From the folder contains manage.py file try the autocomplete commands like `manage.py dumpdata` or `manage.py test`
4. See error

**Expected behavior**
It must display list of applications specified in INSTALLED_APPS section in settings.

**Desktop (please complete the following information):**
 - OS / Distro: Ubuntu 19.10
 - Latest ohmyzsh Update?: Yes
 - ZSH Version: 5.7.1
 - Terminal emulator GNOME Terminal

**Additional context**
- The autocompletion for 'celery' plugin that also evaluates `_values` command works just fine.
- I already removed ~/.zcompdump* files
",,,mcornella,"
--
What do you get when running this (part of the completion functions of the django plugin):
```zsh
python -c ""import sys; del sys.path[0]; import os.path as op, re, django.conf; bn=op.basename(op.abspath(op.curdir));[sys.stdout.write(str(re.sub(r'^%s\.(.*?)$' % bn, r'\1', i)) + '\n') for i in django.conf.settings.INSTALLED_APPS if re.match(r'^%s' % bn, i)]""
```
--

--
> I assume this is because of this line `del sys.path[0]` as I'm working inside virtualenv. If I delete it, the error has gone, but I have nothing in output. Can you tell me what the purpose of this line is?

This was added because of https://github.com/ohmyzsh/ohmyzsh/issues/8400.

> If I delete it, the error has gone, but I have nothing in output

What should be the output?
--
",ikhomutov,"
--
Yep, I get an error:

> django.core.exceptions.ImproperlyConfigured: Requested setting INSTALLED_APPS, but settings are not configured. You must either define the environment variable DJANGO_SETTINGS_MODULE or call settings.configure() before accessing settings.

Specifically, I get this error when I try to access django.conf.settings.INSTALLED_APPS from python cli.
If I export DJANGO_SETTINGS_MODULE as an environment variable, I have no error from python cli, but from zsh I get ModuleNotFoundError. I assume this is because of this line `del sys.path[0]` as I'm working inside virtualenv. If I delete it, the error has gone, but I have nothing in output. Can you tell me what the purpose of this line is?
--

--
Also, accessing the INSTALLED_APPS parameter is not exactly correct in this case, as it contains list of modules but the management commands expect app name.
More info: https://docs.djangoproject.com/en/3.0/ref/django-admin/#app-names
--

--
Ideally, the output should be a list of app labels, in my case: `[admin, auth, contenttypes, sessions, messages, staticfiles, example]` as it will be used in the completion later.
This list can be displayed by calling `django.apps.apps.get_app_configs()` inside `manage.py shell`
--

--
From my perspective, the plugin should operate `manage.py --help` output for better experience, as there is a difference in the output for different versions of django. For instance, `syncdb` is no longer used as a management command.
I'm not very strong in zsh and sh itself, but I can try to rewrite this plugin in this way.
--
",,,,,,,,
8702,OPEN,Add a homebrew recipe to install ohmyzsh,Feature,2020-03-11 19:47:02 +0000 UTC,zabicki-stripe,Opened,,"**Describe the solution you'd like**
It would be nice to be able to install ohmyzsh via homebrew. The alternative is to tell people to curl a shell script and execute it. (I know that installing via homebrew still poses risks, but at least homebrew provides an inventory of installed software)

",,,mcornella,"
--
For that to happen OMZ would have to use some kind of version scheme. This was asked for some time in the past and rejected for this very same reason. Might happen in the near future though.
--
",Cyberbeni,"
--
Can't you just `def install` and paste the proper usage of the install script there?
--
",,,,,,,,
8680,OPEN,Suggesting ZSH_TMUX_AUTOCONNECT behavior change,Feature,2020-02-26 04:16:54 +0000 UTC,btolsch,Opened,,"**Is your feature request related to a particular plugin or theme? If so, specify it.**
Yes, the `tmux` plugin.

**Is your feature request related to a problem? Please describe.**
I like to leave tmux sessions that I may use later open (e.g. closing a terminal window with actually exiting the shell, disconnecting from an ssh-hosted tmux session).  Then, simply opening a new window re-attaches to the unattached session.  If there are no unattached sessions, I probably want a new session.  `ZSH_TMUX_AUTOCONNECT` doesn't serve this purpose because it _always_ autoconnects, so every new window will connect to the exact same session.

**Describe the solution you'd like**
I prefer the behavior described above, and I don't see a simple way to implement this outside the plugin (e.g. only specifying args to the alias).  I think it's reasonable for `ZSH_TMUX_AUTOCONNECT` to use this behavior instead of its current behavior.  Its current behavior seems limited since it also just auto-attaches to the _first_ open session.  If you meant to attach multiple times to a specific session, the default `s` bind is more flexible.

**Describe alternatives you've considered**
I currently use my fork that implements this, but I also considered with the `tmux` alias' argument override was a possible solution.  I didn't find a way to implement this in that way though, at least not without duplicating the plugin's startup logic.

**Additional context**
A commit implementing this is here: https://github.com/btolsch/oh-my-zsh/commit/c64f70130bb5449e8f5e0fde0c04be9060cc7de4
",,,,,,,,,,,,,,
8589,OPEN,kubectl plugin add daemonset aliases,Feature,2020-02-02 13:27:02 +0000 UTC,Zaitsev,Opened,,"**Is your feature request related to a particular plugin or theme? If so, specify it.**
kubectl


**Describe the solution you'd like**
daemonsets are quite popular, so it would be nice to have them aliased

**Describe alternatives you've considered**
alias kg - kubectl get 

",,,,,,,,,,,,,,
8587,OPEN,Show current git tag in prompts (if there is one on the currently checked out commit),Feature,2020-03-11 21:05:11 +0000 UTC,fridtjof,Opened,,"**Is your feature request related to a particular plugin or theme? If so, specify it.**
Not really, but it seems that acquiring VCS information is implemented in themes, not centrally :/ I'm using agnoster.

**Describe the solution you'd like**
I'd love if there was a config flag to display a tag instead of a commit hash, if the current commit is exactly on a tag.

**What I tried so far**
I searched a bit for how I would get the current tag conveniently, but there does not seem to be a ""stable"" git command that only outputs the current tag's name. So there would be some string parsing involved.

**Additional context**
My use case for this is for quickly seeing which version of projects I'm only building/using (not developing) I checked out. I like using tags if they're available to stay on marked releases instead of whatever HEAD is.",,,dan1994,"
--
I also ran across this issue. You can use `tag=$(git describe --tags --exact-match 2> /dev/null)`. The return value will indicate if there is a tag pointing to the current commit, and the content of `tag` will be the tag name if it exists.

Apparently the `zsh` `vcs_info` can also extract the tag as is being done in the official `agnoster` repo, and if you have a branch and a tag pointing to the same commit, it will choose smartly based on how you checked out the commit. I see it is used in `ohmyzsh`'s version of `agnoster` as well, but for some reason it doesn't work the same.

Anyways, I intend to submit a patch for `ohmyzsh`'s `agnoster` specifically.

--

--
I found this [PR](https://github.com/ohmyzsh/ohmyzsh/pull/8417) that patches this for `agnoster`.
--
",,,,,,,,,,
8570,OPEN,Autocomplete for `gem` command is slow and ignores locally built gems,Area: plugin; Topic: completion,2020-02-13 18:01:48 +0000 UTC,HarlemSquirrel,Opened,,"- Begin typing `gem filename`
- Press tab and wait for suggestions

**Expected behavior**
Autocomplete should suggest matching files with the `.gem` extension in the current directory or when providing a file path.

**Screenshots or recordings**
```
➤  ls                                   
Appraisals               awesome_print.gemspec  CONTRIBUTING.md  Gemfile.lock  init.rb  LICENSE  Rakefile   spec
awesome_print-1.8.0.gem  CHANGELOG.md           Gemfile          gemfiles      lib      rails    README.md

➤  gem install awesome_print
awesome_print                        awesome_print_carrier_wave_uploader  awesome_print_json                   awesome_print_motion               
awesome_print-carrierwave            awesome_print_colors                 awesome_print_lite
```

**System:**
 - OS: Arch Linux
 - Zsh version 5.7.1
 - Terminal emulator gnome-terminal

",,,,,,,,,,,,,,
8557,OPEN,Look for mvnw up the file system,Feature,2020-01-21 13:37:57 +0000 UTC,sazzer,Opened,,"**Is your feature request related to a particular plugin or theme? If so, specify it.**
mvn

**Is your feature request related to a problem? Please describe.**
When I run `mvn`, this uses the alias `mvn-or-mvnw`. If I do this in a directory that contains `./mvnw` then this works exactly as needed. If I do this in a subdirectory - e.g. for a multi-module project - then this does *not* work.

**Describe the solution you'd like**
I'd really like it if the `mvn-or-mvnw` alias could walk up the tree to find `mvnw` and run that if it's found.

For example: If running in /Users/sazzer/source/project/submodule/subsubmodule
* Look for /Users/sazzer/source/project/submodule/subsubmodule/mvnw
* Failing that, look for /Users/sazzer/source/project/submodule/mvnw
* Failing that, look for /Users/sazzer/source/project/mvnw
* Finding that, run that script to execute Maven

The script already works correctly if I run it manually - e.g.:
```
$ ../../mvnw
```

but the alias doesn't go looking for it.",,,,,,,,,,,,,,
8541,OPEN,Oh my zsh update broke sshfs folder,Area: theme; Support,2021-04-06 09:14:13 +0000 UTC,NofelYaseen,In progress,,"I am using macOS Catalina.

Everything worked fine until the latest update.
zsh version: zsh 5.7.1 (x86_64-apple-darwin19.0.0)

Everything looks okay for normal folder. However, for remote file systems, it is stuck, until I press Ctrl +C and then type`cd ..`

I am attaching the screenshot below:

<img width=""1440"" alt=""Screen Shot 2020-01-15 at 10 40 01 AM"" src=""https://user-images.githubusercontent.com/14984329/72447577-977cbf80-3783-11ea-81d4-c2855f0a88fd.png"">


",,,mcornella,"
--
Can you post your zshrc file?
--

--
Does `setopt promptsubst` solve it?
--

--
So this is just `git` breaking in sshfs directories, if I understand correctly? If that is the case, this should be fixed by async-ing the git calls in git prompts (work in progress).
--
",NofelYaseen,"
--
```
export ZSH=""/Users/nofelyaseen/.oh-my-zsh""
ZSH_THEME=""af-magic""

plugins=(git)

source $ZSH/oh-my-zsh.sh
```

All other lines are commented out.
I only changed the theme from default.
--

--
It does not resolve the underlying issue with ohmyzsh.
I don't want to rename .ssh as it could disrupt other things.
There has to be an alternative.
--

--
There is a way to do, but we will have to run it in each subdirectory:

`git config oh-my-zsh.hide-status 1`

Ideally, I want to do it for all subdirectories. 
--
",ronnieissa,"
--
Not sure if you have the same issue, but I had this as well.
I troubleshot the issue by setting LogLevel DEBUG3 in the sshd_config file and monitoring the /var/log/auth.log file

In my situation, Im running debian 10, kernel 4.19.0-6

The error I was getting was that the /root/ssh/authorized_keys file could not be found, but as we all know that is NOT the correct path. It should be /root/.ssh/authorized_keys

Im not sure how or why this changed, but to confirm the validity, I ran mv .ssh ssh and everything started working again. Im thinking of setting up tripwire on a clean image and installing ohmyzsh again to see how this got changed. 
--
",jcatala,"
--
Suffering the same issue, `zsh hangs` on `cd ing` into `sshfs mounted dir` :+1: 
`bash/sh` works fine on navigation .

![image](https://user-images.githubusercontent.com/23392306/81348077-65bd9a80-908b-11ea-9d97-e7359e49baa8.png)

cheers, :smile: !



--
",marcoiai,"
--
I think I have found the origin of the problem, so I'm posting here. For some reason, when you do a git command on a sshfs directory, it takes forever, so is more of a GIT -> sshfs problem than zsh or ohmyszh. Since ohmyszh automatically git status and some other commands for git directories, if you have this setup like mine, this is the problem, there's any config to ohmyszh avoid read GIT info on certain directories?
--

--
Yes that is exactly what it happens. For now I'm just. not using it because
i have to use a SSHFS drive all day, just thought to give you a warning,
thanks for the response.

atenciosamente,
Marco Aurélio Simão


On Sat, Jan 2, 2021 at 6:37 PM Marc Cornellà <notifications@github.com>
wrote:

> So this is just git breaking in sshfs directories, if I understand
> correctly? If that is the case, this should be fixed by async-ing the git
> calls in git prompts (work in progress).
>
> —
> You are receiving this because you commented.
> Reply to this email directly, view it on GitHub
> <https://github.com/ohmyzsh/ohmyzsh/issues/8541#issuecomment-753532823>,
> or unsubscribe
> <https://github.com/notifications/unsubscribe-auth/AASTOEWUEGDDNQU4E2M643LSX6GYLANCNFSM4KHFR6TA>
> .
>

--
",adrienauriol,"
--
> So this is just `git` breaking in sshfs directories, if I understand correctly? If that is the case, this should be fixed by async-ing the git calls in git prompts (work in progress).

Hi, 
I'm having the same issue. Did you manage to fix the problem ? :)
Cheers, 
Adrien 
--
"
8534,OPEN,Consider adding pip aliases to the Python plugin,Feature,2020-01-12 10:41:31 +0000 UTC,NeilGirdhar,Opened,,"Something like this would be useful:
```
alias pipi='noglob pip install'
alias pipu='noglob pip install --upgrade'
```
and if it's possible to add the following Python script, it upgrades everything:
```
#!/usr/bin/env python
import pkg_resources
from subprocess import call


packages = [dist.project_name for dist in pkg_resources.working_set]
call([""pip"", ""install"", ""--upgrade""] + [str(p) for p in packages])
```
It could be aliased to pipua.",,,,,,,,,,,,,,
8533,OPEN,Cannot Install Oh-My-Zsh on centos 6 x64,Area: installer; Platform: Linux,2020-07-04 09:18:51 +0000 UTC,,Opened,,"  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100  8074  100  8074    0     0   121k      0 --:--:-- --:--:-- --:--:-- 7884k
[root@openvpn ~]# sh install.sh
Cloning Oh My Zsh...
error: unknown switch `c'
usage: git clone [options] [--] <repo> [<dir>]

    -v, --verbose         be more verbose
    -q, --quiet           be more quiet
    --progress            force progress reporting
    -n, --no-checkout     don't create a checkout
    --bare                create a bare repository
    --mirror              create a mirror repository (implies bare)
    -l, --local           to clone from a local repository
    --no-hardlinks        don't use local hardlinks, always copy
    -s, --shared          setup as shared repository
    --recursive           initialize submodules in the clone
    --template <path>     path the template repository
    --reference <repo>    reference repository
    -o, --origin <branch>
                          use <branch> instead of 'origin' to track upstream
    -b, --branch <branch>
                          checkout <branch> instead of the remote's HEAD
    -u, --upload-pack <path>
                          path to git-upload-pack on the remote
    --depth <depth>       create a shallow clone of that depth

Error: git clone of oh-my-zsh repo failed
[root@openvpn ~]# ^C
```

**System:**
 - OS: CentOS 6 x64
 - Zsh version: zsh 4.3.11 (x86_64-redhat-linux-gnu)
 - Terminal emulator: xterm-256color
",,,mcornella,"
--
What git version do you have installed?

--

--
`-c` in git clone was introduced in 1.7.7, 8 years ago. I'll see if I can code it some other way that still doesn't cause a regression for the fsckobjects errors. In the meantime, is there a possibility of using a newer git version? 
--
",paradiseduo,"
--
i have the same issue with:
```
[root@host upload]# git --version
git version 1.7.1
```
--

--
```
[root@host upload]# bash install.sh
Cloning Oh My Zsh...
error: unknown switch `c'
usage: git clone [options] [--] <repo> [<dir>]

    -v, --verbose         be more verbose
    -q, --quiet           be more quiet
    --progress            force progress reporting
    -n, --no-checkout     don't create a checkout
    --bare                create a bare repository
    --mirror              create a mirror repository (implies bare)
    -l, --local           to clone from a local repository
    --no-hardlinks        don't use local hardlinks, always copy
    -s, --shared          setup as shared repository
    --recursive           initialize submodules in the clone
    --template <path>     path the template repository
    --reference <repo>    reference repository
    -o, --origin <branch>
                          use <branch> instead of 'origin' to track upstream
    -b, --branch <branch>
                          checkout <branch> instead of the remote's HEAD
    -u, --upload-pack <path>
                          path to git-upload-pack on the remote
    --depth <depth>       create a shallow clone of that depth

Error: git clone of oh-my-zsh repo failed
```
--

--
> `-c` in git clone was introduced in 1.7.7, 8 years ago. I'll see if I can code it some other way that still doesn't cause a regression for the fsckobjects errors. In the meantime, is there a possibility of using a newer git version?

After update git, this issue has gone
--
",TriMoon,"
--
@20191229somesysadmin , @paradiseduo 
If the default Cent OS 6 has git version <=1.7.7 in its distribution i would suggest to contact them about it :wink: 
The latest version via Kubuntu 19.10 (my system) has `git version 2.20.1`...

@mcornella 
I think it will be easily fixed by cloning without the `-c ...` and right after issuing a `git config --local ...` inside that cloned repo right? :wink: 
Or you might have to resort to creating an empty repo, issuing the configs needed inclusive the remote to fetch from, and only after that setup do the actual cloning/pull...
```console
git-clone(1):
--config <key>=<value>, -c <key>=<value>
           Set a configuration variable in the newly-created repository; this takes effect immediately after the repository is initialized, but before the remote history is fetched or any files checked
           out. The key is in the same format as expected by git-config(1) (e.g., core.eol=true). If multiple values are given for the same key, each value will be written to the config file. This makes it
           safe, for example, to add additional fetch refspecs to the origin remote.
```

Anyhow, IMHO, it would be better to check for git version and bail out completely after instructing the user to update their installed git version :smile_cat: 
--
",larson,"
--
I figured out a work around! It is an issue with the version of git that you have installed!

Here is a guide on how to install ohmyzsh from a fresh centos install!

1. `sudo yum install zsh`
2. `sudo yum install wget git`
3. `sudo yum remove git*`
4. This next step depends on your CentOS version - pay atention to the URL
* CentOS 6.x `sudo yum install http://opensource.wandisco.com/centos/6/git/x86_64/wandisco-git-release-6-1.noarch.rpm`
* CentOS 7.x `sudo yum install http://opensource.wandisco.com/centos/7/git/x86_64/wandisco-git-release-7-1.noarch.rpm`
* CentOS 8.x `sudo yum install http://opensource.wandisco.com/centos/7/git/x86_64/wandisco-git-release-7-2.noarch.rpm`
5. `sudo yum install git`
6. `git --version`
* This should show `git version 2.22.0` or higher
7. `sudo curl -Lo install.sh https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh`
8. `sh install.sh`
* Then follow the prompts to change your default shell, etc
9. Configure ohmyzsh
--
",,,,
8529,OPEN,Weird behaviour with auto_complete plugin,Support,2020-07-15 03:31:24 +0000 UTC,kalpaj12,Opened,,"**Version**: zsh 5.7.1 (x86_64-ubuntu-linux-gnu)


For some reason, this started to happen after a recent update.
![Screenshot_20200110_214628](https://user-images.githubusercontent.com/41864755/72168260-c812d100-33f2-11ea-9bd6-c3a3448df413.png)

",,,,,,,,,,,,,,
8527,OPEN,Problem with plugin debian: 'ai; adg; adu' if aptitude not installed,Area: plugin; Topic: alias,2020-03-12 15:23:20 +0000 UTC,Mundball,Opened,,"**Describe the bug**
alias ai not work when aptitude not installed

**To Reproduce**
Steps to reproduce the behavior:
 Enable plugin 'debian'
2. Run command 'ai.'
3. See error 
 su -lc 'aptitude -P install ' root
 zsh:1: command not found: aptitude


**Expected behavior**
apt-get what in apt_pref is defined

**Screenshots or recordings**
Nope only my solution.

```
diff --git a/plugins/debian/debian.plugin.zsh b/plugins/debian/debian.plugin.zsh
index 68c6df1..a05b347 100644
--- a/plugins/debian/debian.plugin.zsh
+++ b/plugins/debian/debian.plugin.zsh
@@ -79,12 +79,12 @@ else
     }
     alias ac=""su -ls '$apt_pref clean' root""
     alias ad=""su -lc '$apt_pref update' root""
-    alias adg=""su -lc '$apt_pref update && aptitude $apt_upgr' root""
-    alias adu=""su -lc '$apt_pref update && aptitude dist-upgrade' root""
+    alias adg=""su -lc '$apt_pref update && $apt_pref $apt_upgr' root""
+    alias adu=""su -lc '$apt_pref update && $apt_pref dist-upgrade' root""
     alias afu=""su -lc '$apt-file update'""
     alias au=""su -lc '$apt_pref $apt_upgr' root""
     function ai() {
-        cmd=""su -lc 'aptitude -P install $@' root""
+        cmd=""su -lc '$apt_pref  install $@' root""
         print ""$cmd""
         eval ""$cmd""
     }
-- 
2.20.1
```



**System:**
 - OS: debian 10
 - Zsh version [zsh 5.7.1 (x86_64-debian-linux-gnu)]
 - Terminal emulator [gnome-terminal 3.30.2]

**Additional context**
Nope, only many thanks to all helping people.
",,,,,,,,,,,,,,
8509,OPEN,Django auto-complete plugins not working for custom commands,Area: plugin; Topic: completion,2020-02-13 18:01:46 +0000 UTC,mhyousefi,In progress,,"**Describe the bug**
I have added `django` to the plugins list in `~/.zshrc` (`plugins=(git django)`). But my custom commands do not auto-load on pressing `Tab`. I have tried this with my Python `virtualenv` sourced.

**System:**
 - OS: macOS
 - Zsh version 5.7.1 (x86_64-apple-darwin19.0)
 - Terminal emulator [e.g. iTerm2]

**Additional context**
https://docs.djangoproject.com/en/3.0/howto/custom-management-commands/
",,,mhyousefi,"
--
Anyone?
--

--
I just did `mv ~/.zcompdump* ~/Desktop` and re-launched my terminal, but still no luck.
Don't get me wrong, the auto-completion works perfectly fine for all built-in Django commands. It's just that the custom commands I add to my Django app, are NOT included in the auto-completion. This was NOT the case with my previous Mac.

ps. I am currently employing [this plugin](https://github.com/zsh-users/zsh-autosuggestions) to get me going.
--
",hegelocampus,"
--
Have you already tried deleting the `.zcompdump` file as is suggested in the pinned issue  #7642?  
--
",,,,,,,,
8505,OPEN,FEEDBACK: Windows Subsystem for Linux,Discussion; Platform: Windows,2020-12-05 13:56:28 +0000 UTC,larson-carter,Opened,,"Can I have a few people give me the latest status on WSL?

EDIT: Can I have some people let me know if it is still slow, laggy, or if it is causing weird bugs. I just want to see if we are going to need to make some patches.",,,gcoakes,"
--
There's approximately a 3 second delay between the end of a process and when the prompt appears for me when using 'agnoster' theme. This is running the VS Codium terminal.
--
",mcornella,"
--
Do you have perhaps enabled automatic rehash of commands from `$path`? These options would do it:
```
zstyle ':completion:*' rehash true
setopt hashexecutablesonly
```
I disabled them after upgrading to WSL 2 and have been much better off. 
--

--
You probably need to use a font that supports the character. Also check that you have a UTF-8 locale (see the FAQ section in the wiki).
--
",larson,"
--
@gcoakes Interesting. I've been doing research trying to determine if it is because Microsoft made the subsystem so High level. Compared to it being native. Very similar to a virtual machine. I'll continue to do some more digging to see if there is anything software wise that we can do to improve the performance out of the box.
--
",nickdesaulniers,"
--
I noticed that the symbol used for the return status isn't rendered correctly.  Looks like a question mark in a box. Like some kind of unicode error, or missing font.  The color is correct based on the return code.  I think it's normally a right arrow?  Default theme, fresh install of oh-my-zsh on WSL1 Debian.
--
",AlefCS,"
--
> I noticed that the symbol used for the return status isn't rendered correctly. Looks like a question mark in a box. Like some kind of unicode error, or missing font. The color is correct based on the return code. I think it's normally a right arrow? Default theme, fresh install of oh-my-zsh on WSL1 Debian.

I was fixing the same problem today and what worked for me was to use WSL through Windows Terminal instead of the default terminal. Now all my themes icons are rendered as expected.
--
",,
8482,OPEN,Gather stats about `git` aliases usage,Feature,2020-07-05 14:04:09 +0000 UTC,abitrolly,Opened,,"**Is your feature request related to a particular plugin or theme? If so, specify it.**
Indirectly to `git`.

**Is your feature request related to a problem? Please describe.**
I'm always frustrated when aliases are not intuitive, e.g. `gl` is not `git log`.

**Describe the solution you'd like**
Rename `gl` to `git log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)' --all`.

**Describe alternatives you've considered**
Alternative is to add it to my config only. On the other way this can degrade the experience for new users if it is proven that `gl` is what most new people expect.

**To figure out if people use bare `gl` more often than `git log` aliases**, a counter with regexp should be run over users `.zsh_history` for each alias. The regexp for `gl` is `^gl( .*)?$`. The counter needs to check if the alias is not rebound (`which gl`), and if binding took place, mark it as well,

The users who opt-in to gathering the stats could be asked to review and commit them when `ohmyzsh` updates.

**Additional context**
#4914

![Screenshot from 2019-12-18 11-50-12](https://user-images.githubusercontent.com/8781107/71070831-9b212480-218c-11ea-8e94-0bb8cb231fed.png)
",,,bartekpacia,"
--
I agree that `gl` should be `git log`.
`ohmyzsh` team plans to clean up the `git` plugin, because it has way too many plugins now, so your suggestion might be implemented when the cleanup will take place.

I think that with scanning the history with regex is overkill.

PS Personally, I also have my `gl` remapped to `git log`. Your alias looks super cool, it's now my `glo` :)
--
",,,,,,,,,,
8472,OPEN,AWS plugin doesn't read profiles from credentials file,Area: plugin; Feature,2019-12-13 19:17:51 +0000 UTC,mcornella,Opened,,"> The discussion above is incorrect because profiles are valid both defined in `~/.aws/config` and `~/.aws/credentials` files. In the credentials file they do not have a `[profile ]` prefix. The word ""profile"" is something AWS has been trying to get away from as it was too restrictive. Profile just means a set of credentials now and AWS CLI and SDK honour it. All the saml and mfa login tools don't bother maintaining a config file but just credentials file. The ""improvement"" that was done to check if profiles exist definitely broke the tool for many people. I had to reinstall machineand was surprised that it doesn't work any more for me. I guess I'm back to simple env variable setting...

_Originally posted by @StoyanIvanovI in https://github.com/ohmyzsh/ohmyzsh/issues/7890#issuecomment-559553829_",,,,,,,,,,,,,,
8467,OPEN,`pyenv-virtualenv-init` not available on PATH,Area: plugin; Bug,2021-04-06 10:34:13 +0000 UTC,agoose77,In progress,,"In my version of pyenv (1.2.14), there is no executable named `pyenv-virtualenv-init` on the search `$PATH`, and hence there is no entry in `$commands`. It follows that the virtualenv machinery is not initialised here: https://github.com/ohmyzsh/ohmyzsh/blob/664664f6cd8a1c02a38063c8f2104f0515a19399/plugins/pyenv/pyenv.plugin.zsh#L28

I don't know about the best way to solve this. Several approaches include
- Running `pyenv virtualenv --version` and catching an error code
- Running `pyenv commands` and grepping for virtualenv.
",,,mcornella,"
--
Have you checked that after running the previous line (`eval ""$(pyenv init - zsh)""`)?
--

--
Also, I assume you have installed the [pyenv-virtualenv plugin](https://github.com/pyenv/pyenv-virtualenv)?
--
",agoose77,"
--
Hi @mcornella,
I've removed the explicit initialisation and replaced it with the oh-my-zsh plugin, which is when I noticed the problem. I have the plugin available (it's visible from `pyenv commands`), but it seems that (in my version at least) the actual binaries of the plugin are never placed on the path. This seems like a design decision to me, as it means that plugins are all unified under the pyenv namespace.

Additionally, yes I've tested after explicitly running the previous line.
--
",,,,,,,,
8387,OPEN,Update offer without any available update,Area: updater; Feature,2019-11-14 17:35:10 +0000 UTC,ackbyte,Opened,,"**Describe the bug**
<!-- A clear and concise description of what the bug is. -->

**To Reproduce**
1. Open iTerm app or your terminal app of your choice 
2. You will receive sporadically the offer to update
3. Accept the update by **Y** or running **upgrade_oh_my_zsh**

**Expected behavior**
Only show the update reminder if any updates are really available.

**Screenshots or recordings**
![Screenshot 2019-11-12 at 11 45 31](https://user-images.githubusercontent.com/683434/68873309-b917e700-06ff-11ea-8f73-4c73fcc8082c.png)


**System:**
 - OS: macOS
 - Zsh version 5.7.1 (x86_64-apple-darwin19.0)
 - Terminal: iTerm2

",,,mcornella,"
--
We can use the [GitHub API](https://developer.github.com/v3/repos/commits/#get-a-single-commit) to get the latest master commit SHA. Something like
```zsh
curl -fsSL -H 'Accept: application/vnd.github.v3.sha' https://api.github.com/repos/robbyrussell/oh-my-zsh/commits/master
```
--
",,,,,,,,,,
8385,OPEN,Pass autocompletion broken,Area: plugin; Topic: completion,2020-02-13 18:01:46 +0000 UTC,MatthiasKohler,In progress,,"Autocompletion for the pass password manager is broken. It works on one computer but not on the other. Autocompletion for other programs (git ...) works.

I have no idea how to reproduce the bug.  Please advise me how to debug this.

System (both computers):
 - OS: Ubuntu 18.04.3
 - Zsh version: 5.4.2
 - Terminal emulator: gnome-terminal
",,,MatthiasKohler,"
--
Deleting the .zcompdump file restores autocompletion. See #7642.
Nonetheless this is not expected behavior. 
--
",,,,,,,,,,
8344,OPEN,"cannot change to a directory named ""...""",Area: core; Enhancement,2020-03-12 15:18:06 +0000 UTC,sanskar11,In progress,,"If there is a folder named as ""..."" , I cannot change into the folder using cd .../ , rather it would convert ... to ../../ and will execute cd ../../

**To Reproduce type the following commands**
bash(Going to bash for creating a folder)
mkdir ...(making a folder named ""..."" as zsh will be unable to make such a folder as it will convert ... to ../../)
exit(moving to zsh again from bash)
cd ...(it will change ""..."" to ../../ and will execute cd ../../ instead of moving to ""..."" directory)

**Expected behavior**
It should search for the ""..."" folder and if it does not exit then it should convert ""..."" to ""../../"" else it should execute ...

**System:**
 - x86_64-ubuntu-linux-gnu
 - zsh 5.5.1

**Additional context**
I know zsh has auto feature to convert ... to ../../ but it should first search for that file and if the file is not found then it should convert it making it much more convenient to use.",,,natemaia,"
--
It's not zsh doing this, omz has `...` defined as an alias https://github.com/robbyrussell/oh-my-zsh/blob/687c50bdf999f8efd45f3c8f578a62329b0633da/lib/directories.zsh#L6
--
",sanskar11,"
--
But we can make it as a feature of zsh my coding it somewhat like this https://github.com/sanskar11/cd/blob/master/cd
--
",mcornella,"
--
As a temporary shortcut you can quote the dots: `cd ""...""`, that should bypass the alias expansion.
--
",,,,,,
8329,OPEN,Reverse search breaks with vi-mode,Area: plugin; Topic: bindkey,2020-05-19 08:57:57 +0000 UTC,flaviosakakibara,In progress,,"**Describe the bug**
<!-- A clear and concise description of what the bug is. -->
After upgrade my workstation to fedora 31, when I use reverse-search with ^r, after the first search, apparently a buffer error occurs and the characters appears all messed up (like the following image).

![image](https://user-images.githubusercontent.com/35695404/67725336-c4110e80-f9c0-11e9-8714-613dc0e4f199.png)


**To Reproduce**

Steps to reproduce the behavior:
1. Enabled plugins:
```
plugins=(
  dnf
  docker
  extract
  git
  git-extras
  kubectl
  sudo
  tmux
  tmuxinator
  vi-mode
  zsh-autosuggestions
  zsh-navigation-tools
  zsh-syntax-highlighting
)
```

2. Run command '...', _or_ try to complete command '...', _etc._
```
^r
```
3. Search some command that returns some lines;
4. Erase the searched command.
5. See error from the image above.


**Expected behavior**
I expect that when a searched command gets erased, all the results should be erased as well. 

**System:**
 - OS: 
Fedora 31
```
[~]: uname -r
5.3.7-301.fc31.x86_64
[~]: cat /etc/fedora-release
Fedora release 31 (Thirty One)
```
 - Zsh version: 5.7.1
 - Terminal emulator: gnome-terminal (GNOME Terminal 3.34.2 using VTE 0.58.1 +BIDI +GNUTLS)

**Additional context**
oh-my-zsh version:
```
[~/.oh-my-zsh, master]: git rev-parse HEAD
e363109a6d3367d8be1dd66f05a38eb38b4257d7
```
",,,mcornella,"
--
Did you ever solve this?
--
",flaviosakakibara,"
--
Nope =/. End up I’m not using the reverse search feature anymore.

> On 16 May 2020, at 15:56, Marc Cornellà <notifications@github.com> wrote:
> 
> —


--
",,,,,,,,
8306,OPEN,Alias gl in conflict with gitless; change request: gl to gpl,Area: plugin; Plugin: git; Topic: alias,2020-03-12 15:23:08 +0000 UTC,mikebranderhorst,Opened,,"
**System:**
 - OS: macOS
 - Zsh version 5.7.1
 - Terminal emulator iTerm2

**Additional context**
gpl for git pull makes more sense because l is reserved for log and not pull
",,,,,,,,,,,,,,
8216,OPEN,Add a git alias to clone and change directory,Area: plugin; Feature; Plugin: git; Topic: alias,2020-03-04 10:06:29 +0000 UTC,cueo,In progress,,"
**Describe the solution you'd like**
Add an alias which clones a repo and then `cd`s into it.

**Describe alternatives you've considered**
<!-- A clear and concise description of any alternative solutions or features you've considered. -->
Manually `cd` into the directory after `git clone` or `gcl`.

**Additional context**
<!-- Add any other context or screenshots about the feature request here. -->
",,,cueo,"
--
I can take this up if it looks like something worth doing.
--
",mcornella,"
--
There's a proposal in #8220.
--

--
Still interested in this?
--
",,,,,,,,
8178,OPEN,Would you consider adding tipz plugin?,Feature,2019-09-27 04:45:17 +0000 UTC,jesseleite,Opened,,"**Is your feature request related to a particular plugin or theme? If so, specify it.**

Would you consider adding [tipz](https://github.com/molovo/tipz) as a bundled plugin?  It's a very handy zsh plugin that automatically suggests aliases when available.

![Screen Shot on 2019-09-27 at 00-44-27](https://user-images.githubusercontent.com/5187394/65742860-009ad300-e0c0-11e9-9e17-7e86ba6255e1.png)",,,,,,,,,,,,,,
8159,OPEN,add an editorconfig for the project,Feature,2019-09-20 06:52:45 +0000 UTC,927589452,In progress,,"There seems to be a style guide for the project, Which should be followed


**Describe the solution you'd like**
<!-- A clear and concise description of what you want to happen. -->
Add an [editorconfig](https://editorconfig.org/) to the project to help people keep the correct style
**Describe alternatives you've considered**
<!-- A clear and concise description of any alternative solutions or features you've considered. -->
Add modelines, but they are risky and bot many editors support them

**Additional context**
<!-- Add any other context or screenshots about the feature request here. -->
",,,927589452,"
--
I just saw there was no issue for this but @mcornella already added it but it does not match the style guide
--
",,,,,,,,,,
8107,OPEN,tmux attach autocomplete shows window information when it should not,Bug,2019-08-25 02:25:38 +0000 UTC,alichtman,Opened,,"**Describe the bug**
<!-- A clear and concise description of what the bug is. -->

```bash
$ tl
tmux-session1: 1 windows (created Sat Aug 24 06:01:51 2019)
tmux-session2: 1 windows (created Sat Aug 24 06:01:51 2019)

$ ta <TAB>
tmux-session1  tmux-session2  -- 1 windows (created Sat Aug 24 06:01:51 2019)  
```

Tab completing the session name shows the window information of the last session, when it should not.

**To Reproduce**

Steps to reproduce the behavior:
1. Enable plugin `tmux`
2. Create one, or multiple tmux sessions
3. Detach from session
4. Attach to session: `$ ta <TAB>`
5. See error


**Expected behavior**

```bash
$ ta <TAB> 
tmux-session1  tmux-session2
```

**System:**
 - OS: macOS 10.14.5
 - Zsh version: zsh 5.7.1 (x86_64-apple-darwin18.2.0)
 - Terminal emulator: Terminal.app
",,,,,,,,,,,,,,
8052,OPEN,Git prompt not showing |merging in the muse theme,Feature,2020-06-10 11:06:34 +0000 UTC,friedrich-brunzema,Opened,,"**Describe the bug**
In a git merge state, the prompt is not displaying | MERGING

**To Reproduce**
1. Create a new git branch 'testbranch'
2. Make a one line change in one of the files & commit
3. Checkout master, change the same file with different text & commit
4. `git merge testbranch`
```
~/git/training/dotnet/friedrich (master ✔) ᐅ git merge testbranch
CONFLICT (add/add): Merge conflict in dotnet/friedrich/foo
Auto-merging dotnet/friedrich/foo
Automatic merge failed; fix conflicts and then commit the result.
~/git/training/dotnet/friedrich (master ✘) ᐅ    [[ NO INDICATION WE ARE IN MERGING STATE]]
```

**Expected behavior**
Prompt shows that I'm in the merge state
~/git/training/dotnet/friedrich (master ✘)|MERGING ᐅ  


**System:**
 - OS: ubuntu 18
 - Zsh version [5.4.2]
 - Terminal

**Additional context**
Note: Rebasing, Bisecting also does not work by default.  I have a hack that allows this all to work
```
__git_ps1 ()
{
	local g=""$(git rev-parse --git-dir 2>/dev/null)""
	if [ -n ""$g"" ]; then
		local r
		local b
		if [ -d ""$g/rebase-apply"" ]
		then
			if test -f ""$g/rebase-apply/rebasing""
			then
				r=""|REBASE""
			elif test -f ""$g/rebase-apply/applying""
			then
				r=""|AM""
			else
				r=""|AM/REBASE""
			fi
			b=""$(git symbolic-ref HEAD 2>/dev/null)""
		elif [ -f ""$g/rebase-merge/interactive"" ]
		then
			r=""|REBASE-i""
			b=""$(cat ""$g/rebase-merge/head-name"")""
		elif [ -d ""$g/rebase-merge"" ]
		then
			r=""|REBASE-m""
			b=""$(cat ""$g/rebase-merge/head-name"")""
		elif [ -f ""$g/MERGE_HEAD"" ]
		then
			r=""|MERGING""
			b=""$(git symbolic-ref HEAD 2>/dev/null)""
		else
			if [ -f ""$g/BISECT_LOG"" ]
			then
				r=""|BISECTING""
			fi
			if ! b=""$(git symbolic-ref HEAD 2>/dev/null)""
			then
				if ! b=""$(git describe --exact-match HEAD 2>/dev/null)""
				then
					b=""$(cut -c1-7 ""$g/HEAD"")...""
				fi
			fi
		fi

        printf ""$r""
		
	fi
}

PROMPT='%{$PROMPT_SUCCESS_COLOR%}%~%{$reset_color%}%{$GIT_PROMPT_INFO%}$(git_prompt_info)`__git_ps1`$(virtualenv_prompt_info)%{$GIT_DIRTY_COLOR%}$(git_prompt_status) %{$reset_color%}%{$PROMPT_PROMPT%}ᐅ%{$reset_color%} '
```
I think this belongs not to the theme, but to somewhere else in oh-my-zsh responsible for git prompt.  Don't know enough to submit a PR.",,,mcornella,"
--
This is not really a bug but a feature request. The muse theme doesn't use the git prompt, which is the code you posted. 
--
",,,,,,,,,,
8049,OPEN,Tmux Started with a smaller client,Bug,2019-07-30 09:02:47 +0000 UTC,budimanjojo,Opened,,"**Describe the bug**
Tmux started with smaller client.

**To Reproduce**
<!--
Steps to reproduce the behavior:
1. Enable plugin '...'
2. Run command '...', _or_ try to complete command '...', _etc._
3. See error
-->
1. Enable plugins=(... tmux)
2. Set `ZSH_TMUX_AUTOSTART=true`
3. SSH into remote machine (that also have tmux plugin enabled)
4. Turn off computer, turn on again and open up terminal and it looks like this
![Screenshot from 2019-07-30 15-54-33](https://user-images.githubusercontent.com/13085918/62115608-e53f6180-b2e2-11e9-9562-b4f812a6f100.png)

Detaching doesn't do anything unless I do `pkill tmux:\ client`


**Expected behavior**
<!-- A clear and concise description of what you expected to happen. -->

**Screenshots or recordings**
<!--
If applicable, add screenshots or record an asciinema session (https://asciinema.org/)
to help explain your problem.
-->

**System:**
 - OS: Ubuntu 18.04
 - Zsh version: 5.4.2
 - Terminal emulator: gnome-terminal",,,,,,,,,,,,,,
7993,OPEN,Tmux Control Mode,Feature,2019-07-12 18:00:16 +0000 UTC,dvd42,Opened,,"**Is your feature request related to a particular plugin or theme? If so, specify it.**
Tmux plugin

**Is your feature request related to a problem? Please describe.**
I usually work with images through ssh and sometimes I need to see a plot or something and I have XForwarding enabled so I can use the display over SSH, this works fine in ZSH, however tmux cannot display images unless its ran in control mode e.g: Tmux -CC. So It would be very nice if this feature was added. Is something related to this in the works? Thanks in advance!! :) ",,,,,,,,,,,,,,
7976,OPEN,vi-mode / and ? override to search within current line,Support; Topic: bindkey,2020-10-10 18:46:38 +0000 UTC,jessebett,In progress,,"The primary reason I use the vi-mode plugin is to easily navigate and edit long commands. However, the default search behaviour for `/` and `?` is to search through the command history, which I already have through `FZF`. I'd like to override this current history search to instead search through the current command, moving the cursor to the result.

Further, can you provide what I need to include in the zshrc to override the default `/`, `?` , `n` and `N` to have vim-mode search achieve this behaviour.",,,cognifloyd,"
--
when I want to do this, I use `v` from normal mode to enter visual mode. That opens a vi editor where I can use all of the power of vi to edit my more complex command.
--

--
I'm on linux. I use Konsole and the linux console. In vi-editing-mode, in both zsh and bash, and in both Konsole terminal emulator and in the raw linux console, pressing `v` in normal (esc) mode has opened vim for as long as I can remember.
It does that when I'm connected to my local Gentoo linux machine, and to remote CentOS linux machines. If that doesn't work elsewhere, that's a surprise to me. :) I'll have to make sure to stay on linux so my finger muscle memory continues to serve me here.
--
",jessebett,"
--
Hi @cognifloyd 

Is that default behaviour? If I escape to normal mode and press `v` it italicizes the character I'm currently over (iterm). If I open another terminal client `v` has no effect. 
--

--
@cognifloyd I just checked and `v` has no effect on any of my other terminal clients including Alacritty or Kitty, so I do not suspect this is an issue with the emulator. 
--
",mcornella,"
--
> I'd like to override this current history search to instead search through the current command, moving the cursor to the result.

I don't know if a zle widget exists to search the current command and move the cursor to the result. Changing a key binding is just as easy as using `bindkey`, so the commands would be
```zsh
bindkey -M vicmd '/' name-of-the-widget
bindkey -M vicmd '?' name-of-the-widget
```

The thing to figure out is if the zle widget exist, or how to program one. You'll have a better experience if you ask in the [Zsh mailing list](https://www.zsh.org/mla/).

> Is that default behaviour? If I escape to normal mode and press v it italicizes the character I'm currently over (iterm). If I open another terminal client v has no effect.

That's the Zsh default, so unless there's something overriding the v key in vicmd you should be able to do it. Check if there's something overriding it by running `bindkey -M vicmd v`. The widget should be `visual-mode`.
--
",,,,,,
7958,OPEN,Symfony plugin not working with zsh-syntax-highlighting,Area: plugin; Enhancement,2019-06-27 14:09:27 +0000 UTC,lukepass,Opened,,"**To Reproduce**
Steps to reproduce the behavior:
1. Enable plugin sf
2. Enable plugin zsh-syntax-highlighting
3. Write `sf [...]` in the root of a Symfony project

**Expected behavior**
When using `sf` in a symfony project the alias is highlighted in green.

**Screenshots or recordings**
![image](https://user-images.githubusercontent.com/6429961/60159603-df41f680-97f3-11e9-972a-3d6b1e8a1981.png)

In this post, the user @phy1729 suggested to rewrite the alias:

[https://github.com/zsh-users/zsh-syntax-highlighting/issues/617#issuecomment-505267091](https://github.com/zsh-users/zsh-syntax-highlighting/issues/617#issuecomment-505267091)

Thanks.",,,,,,,,,,,,,,
7939,OPEN,Mercurial Plugin could use some more supported commands,Feature,2019-06-19 18:46:45 +0000 UTC,yarian,Opened,,"This is something I'm happy to help out with just want to make sure maintainers are on board:

**Is your feature request related to a particular plugin or theme? If so, specify it.
mercurial

**Describe the solution you'd like**
More aliases to do more things.

**Describe alternatives you've considered**
I have my own aliases in `.zshrc` but this is something others would probably find helpful.

**Additional context**

## Mercurial module aliases

![Screen Shot 2019-06-19 at 11 35 36 AM](https://user-images.githubusercontent.com/596223/59791186-650af280-9286-11e9-903b-1d5e5003eec7.png)

![image](https://user-images.githubusercontent.com/596223/59791205-6dfbc400-9286-11e9-90eb-c6353a413b35.png)


## Git module aliases:

![Screen Shot 2019-06-19 at 11 35 26 AM](https://user-images.githubusercontent.com/596223/59791208-70f6b480-9286-11e9-9130-99ffe75602ea.png)

![image](https://user-images.githubusercontent.com/596223/59791226-7c49e000-9286-11e9-8481-2a51452b64da.png)

## In particular

I wish we had the following:

Alias|Command
-|-
hgcam|hg amend
hgcame|hg amend -e
hgn|hg next
hgpr|hg prev
hgrst|hg restack
hgres|hg resolve
hgrev|hg revert
hgunc|hg uncommit
hgh|hg hide
hgmsg|hg commit -m
hgmsgi| hg commit -i -m


In addition, I wish there were two functions for `hg rebase` and `hg diff` that only took one parameter and made a reasonable assumption of what the second one was.

Instead of doing:
`hg rebase -r . -d foo`
You should be able to:
`hgmove foo` or something similar.

Instead of having to do:
`hg diff -r foo^ -r foo`
You should be able to:
`hgd foo`",,,,,,,,,,,,,,
7893,OPEN,rsync ~/.ssh/config autocompletion doesn't work,Support; Topic: completion,2020-03-18 22:34:41 +0000 UTC,zepx,In progress,,"Hi,

I am currently running on ArchLinux as well as on Ubuntu 16.06. For commands `scp` and `ssh`. For both of these distros, oh-my-zsh's autocomplete works fine and I could easily pull custom host names configured in `~/.ssh/config` and '~/.ssh/config.d/home.config` (on ArchLinux).

However, specifically for `rsync` I could not get this to work. To use host names configured in `~/.ssh/config`, I'm required to switch to `scp` or `ssh` first to utilize the autocomplete feature.

**Use Case**

`~/.ssh/config`:
```
Include config.d/*
```

`~/.ssh/config/home.config`:
```
Host home_server_vpn*
    Hostname 10.7.0.6
    DynamicForward 3310
    Host home_server_vpn_choong

Host home_*_choong
    User choong

Host *
    ServerAliveInterval 30
    ServerAliveCountMax 3
    ForwardAgent yes
    IdentityFile ~/.ssh/id_rsa.sec
```

1. To copy a file from a remote server to local server using `rsync`,
`$ rsync home<tab>`
does not give any autocompletion

2. However,
`$ scp home<tab>` works perfectly fine and would result  in
`$ scp home_server_vpn_choong`",,,brandonStell,"
--
@zepx have you found a solution yet? This is not working for me either. 
--
",zepx,"
--
Unfortunately no. I did not invest much time figuring this out. I sometimes use `ssh` or `scp` for completion then change the command to `rsync`. It's relatively inconvenient.
--
",stefabat,"
--
I believe this is unrelated to oh-my-zsh because I experience the same on my machine as well (Arch Linux), but I am not using oh-my-zsh; I use plain zsh and antigen (without loading oh-my-zsh plugins).
So far, I have not found a solution yet.
--
",polaroidkidd,"
--
this is afflicting me aswell unfortunately. completion of path on remotes work when using `rsync -raP my-host:` but the hostname in the `~/.ssh/config` file is not autocompleted as it is with `ssh` or `scp`

Unfortunately I haven't the foggiest where the hick up is :/


for what it's worth, here's my config

```

# Add wisely, as too many plugins slow down shell startup.
plugins=(
  git
  ssh-agent
  zsh-syntax-highlighting
  zsh-autosuggestions
 )
zstyle ':completion:*:(rsync|ssh|scp|ftp|sftp):*' users $users

zstyle :omz:plugins:ssh-agent agent-forwarding on
zstyle :omz:plugins:ssh-agent identities me@my-host
zstyle :omz:plugins:ssh-agent lifetime

source $ZSH/oh-my-zsh.sh

fpath=(~/.zsh/completion $fpath)
autoload -Uz compinit && compinit -i

...
```
--
",,,,
7854,OPEN,Provide standardized options to control common elements in themes,Area: theme; Feature,2019-05-17 12:51:44 +0000 UTC,khughitt,Opened,,"Many themes include some common elements such as including the current ruby version when rvm is installed (e.g. [bira](https://github.com/robbyrussell/oh-my-zsh/blob/master/themes/bira.zsh-theme)).

Currently, there is no way to customize the appearance of such common elements, short of editing the theme files or manually overriding components used in the themes.

It could be useful to provide a few global theme settings to give users control over such shared elements, when they appear are used in themes.

For example, something along the lines of `theme_include_rvm` could be checked by each theme that includes ruby version and used to determine whether or not to include that component in PS1.",,,,,,,,,,,,,,
7809,OPEN,Different history search behavior when vi-mode is active,Area: plugin; Enhancement; Topic: bindkey,2020-07-30 16:22:19 +0000 UTC,S1ngS1ng,In progress,,"Here is how it works when `vi-mode` is NOT active:
![2019-04-28_11-46-29 (1)](https://user-images.githubusercontent.com/13592559/56868794-379f7800-69ac-11e9-872f-fe7bd2df1cee.gif)
This is my expected behavior where completion is performed based on the input (a.k.a. ""expand"" completion result)

While `vi-mode` is active:
![2019-04-28_11-49-06 (1)](https://user-images.githubusercontent.com/13592559/56868814-6e758e00-69ac-11e9-9b2f-99803a4f0867.gif)
The completion does not take the input. Instead, the completion works as if nothing was typed in.

Little bit more details if anyone is interested:
1. I am using the arrow key `up` for completion
2. The only difference in my `.zshrc` is under `plugins`:
```diff
plugins=(
  git
  zsh-syntax-highlighting
  zsh-autosuggestions
+ vi-mode
)
```",,,mcornella,"
--
Try putting `vi-mode` first on the list of plugins. This is an issue with the order in which bindkey modes are activated.
--

--
Closing since this is in essence a duplicate of #3435.
--

--
Ok, then this is the effect of switching to viins keymap while those key bindings are put on the emacs keymap—from `lib/key-bindings.zsh` file: https://github.com/robbyrussell/oh-my-zsh/blob/4eae0549fd7e8a6d35c5627356098380b6b9ef82/lib/key-bindings.zsh#L31-L41

#5113 should be able to solve this, but in the meantime, add the correct bindkey commands to your zshrc file, after OMZ is sourced.
--
",S1ngS1ng,"
--
@mcornella Hey Marc, thanks for your reply.
I've tried as you suggested, still it doesn't fix the issue.
Also, just F.Y.I., I am not using the `history-substring-search` plugin.

Here is some information that might help:
1. The partial output of `bindkey` when `vi-mode` **IS NOT** in `plugins`:
![image](https://user-images.githubusercontent.com/13592559/56994909-3e1d2380-6b55-11e9-8bf7-079116d80f54.png)
2. The partial output of `bindkey` when `vi-mode` **IS** in `plugins`, **no matter where it is**:
![image](https://user-images.githubusercontent.com/13592559/56995004-73c20c80-6b55-11e9-87d1-b0df68fb8bb7.png)
3. Here is the output of `up` after `control + shift + v`
![image](https://user-images.githubusercontent.com/13592559/56995070-8e948100-6b55-11e9-9245-f8e8834d5a79.png)
4. I am on macOS. The terminal emulator that I use is iTerm2

So, I am wondering if the behavior I mentioned above was due to the different method being called? If so, how may I override that?
If you need any other info such as debug output, please let me know.
--
",vald,"
--
I was interested in the same thing and solution to this. I added to the end of my `.zshrc` the following lines and it did a trick for me but it may be absolutely wrong way of doing this but still, it works but in `insert` mode, `normal` one keeps the old behaviour, so for me, it's even better to combine the best of two worlds:
```sh
$ cat >> ~/.zshrc <<EOF
bindkey ""^P"" up-line-or-history
bindkey ""^[OA"" up-line-or-beginning-search
bindkey ""^[[5~"" up-line-or-history
bindkey ""^[[A"" up-line-or-history
bindkey ""^N"" down-line-or-history
bindkey ""^[OB"" down-line-or-beginning-search
bindkey ""^[[6~"" down-line-or-history
bindkey ""^[[B"" down-line-or-history
EOF
```
--
",vtronko,"
--
@vald-phoenix you are the MVP, sir, thank you.
--
",,,,
7766,OPEN,Prefixing name of the currently activated virtualenv to amuse theme.,Area: theme; Feature,2020-04-14 09:05:06 +0000 UTC,dkaushik94,In progress,,"I have a suggestion for a minute change. In the amuse theme, which is pretty minimal, it doesn't show my current virtual environment name of if I have an environment activated. I  edited the theme file and it shows it now. This is my first attempt to contribute and I was wondering if I should go ahead and get a PR. Any hint and help would be great as to if and how I should proceed. Thanks! @robbyrussell 
<img width=""342"" alt=""Screen Shot 2019-04-13 at 6 45 06 PM"" src=""https://user-images.githubusercontent.com/9155142/56086412-6cdc8f80-5e1c-11e9-8f1c-8a8661371a7a.png"">
",,,mcornella,"
--
It the modifications don't change the look when there is no virtualenv environment activated then go ahead and submit a PR; otherwise that would make it not backwards-compatible and therefore warrant a new theme.
--

--
You can edit the amuse theme yourself and submit a PR, @dkaushik94 isn't responding.

You'll want to edit [the PROMPT variable or RPROMPT](https://github.com/ohmyzsh/ohmyzsh/blob/01bfb57446fdc77e8b4ae696729688284392c0e6/themes/amuse.zsh-theme#L13-L17) if you want the virtualenv information to appear on the right side. To show the virtualenv, you can use `virtualenv_prompt_info` function that [the virtualenv plugin](https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/virtualenv/virtualenv.plugin.zsh) provides, or you can make a specific function inside the amuse theme yourself. 

To understand what all these `%*` characters mean inside the PROMPT variable, see [Prompt Expansion](zsh.sourceforge.net/Doc/Release/Prompt-Expansion.html). Let me know if I can be of further help.
--
",Ricocotam,"
--
Hi, any news on this ?
I'm new here and I'd like to have my venv properly printed too. I can fix it but I don't even know where to begin
--

--
You can add an updated clock to the PR if you want. I coded it [here](https://gist.github.com/Ricocotam/7a102106f5ed4bcb663809fcb569ee52). If you know a better way of coding it feel free to adapt, I did it fast and crappy. 
--
",snugglej,"
--
@mcornella is someone going to do this? If not, I would be happy to work on it.
--

--
@dkaushik94 I made a pull request for my version which should be a match to what you have in the opening comment. I tested it on my system and it seems to work fine with no problems and doesn't change the rendered text when not being used.

Without:
![image](https://user-images.githubusercontent.com/17776110/78746524-b7f48a00-792c-11ea-88c4-be366d8799ea.png)

With:
![image](https://user-images.githubusercontent.com/17776110/78746546-c8a50000-792c-11ea-994e-d5d41243e3e4.png)

--
",dkaushik94,"
--
I am going to do a PR this week. If you are done before that please go-ahead and close this thread when you do. Thanks. :)
 
--

--
@snugglej If your PR gets approved, then please go ahead close this issue out!
--
",,,,
7745,OPEN,"isn't plugin ""ubuntu"" poorly named?",Area: plugin; Discussion,2019-05-04 16:31:08 +0000 UTC,jjangga0214,In progress,,"Currently, most features of plugin **ubuntu** are in fact not for ubuntu itself but for ""apt"".

Apt is not ubuntu-specific. It's used on debian-based distro, and even other distro not based on debian.  

In my opinion, name of plugin ought to imply what it actually does and serves.

So, i think, first, it should be renamed, and second, I'd like to suggest renaming it to **apt**. Though not 100% of this plugin is direct concern of apt (e.g. `kerndeb`, but even it is also indirectly related with apt), its almost entire purpose is for using apt with ease. So this rename might make sense. (Or, we can separate ubuntu-related things and apt-related things each for different plugins, and organize them in future.)

And yes, this change forces users to edit .zshrc. However, this inconvenience might be resolved in a soft and adaptive ways, such as notification after update or fall back to renamed plugin with warning(guide message to change) for a while.",,,mcornella,"
--
I don't think it's a bad name. The two apt-based main distributions are debian and ubuntu, and it makes sense keeping them separate for the time being. And as you said, `apt` is not the only program being used in the plugin, there is also `apt-get` and others, so `apt` is not really a suitable name.
--

--
Reopening for the moment, will discuss later.
--
",jjangga0214,"
--
OK @mcornella, you definitely have a different opinion.
So, why don't we have a little discussion about several points?

First, I'd like to suggest a failing scenario with name ""ubuntu"". It's highly expected most of users won't read READMEs of all plugins. Rather, they would 1) look over the list of plugin names, 2) and then read README of ONLY interesting plugin. Users of debian-based, but not ubuntu-based disto like Kali Linux might think plugin ""ubuntu"" is not for them. Of course, they can read README so they understand the plugin could be useful on their os as well, but they simply wouldn't, just because of its name. What's more, even some users of ubuntu-based disto like Linux Mint also think the same, which results their not using the plugin. 

Then what would happen with name ""apt""? While looking though the plugin list, users find name ""apt"", and they probably think they should read README to know if they can use it. As users read it, they will find the plugin useful. So, naming as ""apt"" is not an obstacle to user influx, unlike ""ubuntu"".

The most important virtue of plugin (or opensource software in general) is to be used as widely and properly as possible. In this perspective, ""apt"" is better than ""ubuntu"". 

Second, I hereby make sure that the plugin name ""apt"" actually doesn't mean command `apt`, but packaging tool 'apt'. They are different. Debian uses 'apt' (advanced packaging tools) to manage its packaging system. There are various tools that interact with 'apt' and allow users to install, remove and manage packages in debian-based distro. `apt-get` is one such command tool popular. Another popular tool is `aptitude` with both GUI and command-line options. So are `apt-cache` and etc. As the most commonly used package management commands are scattered (especially across `apt-get` and `apt-cache`), command `apt` is introduced to provide consistent command interface. 

> there is also apt-get and others, so apt is not really a suitable name.

So, we don't have to worry if plugin name ""apt"" is suitable for command `apt-get`. Regardless of differences between commands used in the plugin such as `apt`, `apt-get`, `apt-cache`, `apt-file`, `apt-add-repository`, `ppa-purge`, `aptitude`, `dpkg`, `dpkg-buildpackage`, and `dpkg-query`, they are all for managing 'apt' with ease, so plugin name ""apt"" would make sense. 

One thing I'm not sure of is whether `kerndeb` interacts with 'apt' (but at least it would be somehow indirectly related with 'apt'?).
--

--
@mcornella ping?
--
",,,,,,,,
7610,OPEN,Vi mode breaks special characters ( Home; End; Delete; Backspace),Bug; Topic: bindkey,2019-07-04 04:10:44 +0000 UTC,gudrutis,Opened,,"Experienced on: MacOs and Fedora26.
Zsh works fine untill I turn on Vi mode ( either by `set -o vi` or `bindkey -v`).

No `bindkey` solutions worked for me.",,,aymanbagabas,"
--
try using `-M vicmd` in your `bindkey`
I have the following in my config
```
# allow delete, home and end keys to work in normal mode
if [[ ""${terminfo[khome]}"" != """" ]]; then
  bindkey -M vicmd ""${terminfo[khome]}"" beginning-of-line      # [Home] - Go to beginning of line
fi
if [[ ""${terminfo[kend]}"" != """" ]]; then
  bindkey -M vicmd ""${terminfo[kend]}""  end-of-line            # [End] - Go to end of line
fi
if [[ ""${terminfo[kdch1]}"" != """" ]]; then
  bindkey -M vicmd ""${terminfo[kdch1]}"" delete-char            # [Delete] - delete forward
fi
```

Backspace works fine for me
--
",,,,,,,,,,
7587,OPEN,Oh-my-zsh rpmostree plug-ins,New: plugin,2021-03-15 19:03:37 +0000 UTC,hhlp,Opened,,"What is it about?

rpm-ostree is a hybrid image/package system.  It supports ""composing"" packages on a build server into an OSTree repository, which can then be replicated by client systems with atomic upgrades.
Additionally, unlike many ""pure"" image systems, with rpm-ostree each client system can layer on additional packages, providing a ""best of both worlds"" approach.

Distro like Fedora, with SilverBlue has it.

https://ostree.readthedocs.io/en/latest/
https://www.mankier.com/package/rpm-ostree

Principal command :

# rpm-ostree status

Will show you your deployments in the order in which they will appear in the bootloader, the first deployment in the list being the current default one. The ● shows the currently booted deployment.

# rpm-ostree upgrade

Will perform a system upgrade, creating a new deployment (root filesystem) and set it as the default for the next boot. You should use systemctl reboot shortly afterwards.

# rpm-ostree rollback

This rolls back to the previous state, i.e. the default deployment changes places with the non-default one. By default, the rpm-ostree upgrade will keep at most two bootable ""deployments"", though the underlying technology supports more.

# rpm-ostree rebase

You can use the rebase command to switch between these; this can represent a major version upgrade, or logically switching between different ""testing"" streams within the same release.

# rpm-ostree install <pkg>

Will download the target package, its dependencies, and create a new deployment with those packages installed. It is also possible to specify a local package which is not part of a repository.

# rpm-ostree uninstall <pkg>

To remove layered packages installed from a repository, use . To remove layered packages installed from a local package, you must specify the full NEVRA of the package.

# rpm-ostree override replace

replace base packages

# rpm-ostree override remove

remove Remove a package from the base tree. Note that this is similar to layering in that the original base is retained.",,,mcornella,"
--
What exactly are you suggesting here? It's not clear what you'd like the plugin to do.
--
",,,,,,,,,,
7580,OPEN,Prompted to enter SSH RSA key password twice when using ssh-agent plugin,Area: plugin; Bug,2019-09-08 16:02:03 +0000 UTC,motevets,In progress,,"Hello everyone. Thank you all for maintaining oh-my-zsh. It has made me more productive for over half a decade.

Commit 2a603856 started checking for SSH keys that had already been loaded by checking if a key with their signature had already been added to the ssh-agent. See [this line](https://github.com/robbyrussell/oh-my-zsh/commit/2a603856598eafc3c8a0bde80f8a885d2a81dfee#diff-8238d0b5e0b5769ff4f562b971760784R29) for the relevant line in the commit.

This has had the unintended consequence that now, if your SSH key is encrypted, you are prompted twice for your SSH key decryption passphrase.  The first time is to decode your passphrase to get the signature, and the second is to decrypt your key to add it the the ssh-agent.  [Here](https://gist.github.com/motevets/1917c70013af86e5c037c87e606e9f5c) is a debug log of the ssh-agent plugin being loaded.

This was very confusing for me when it started happening. I was even concerned that something malicious was going on to phish my password. I get the reason why this was added, but I wonder if there's a way to get around being prompted twice. Perhaps we could skip checking the signature if the key's filename already matches a filename loaded into the ssh-agent.",,,mcornella,"
--
> Perhaps we could skip checking the signature if the key's filename already matches a filename loaded into the ssh-agent.

That's what the current code does: https://github.com/robbyrussell/oh-my-zsh/blob/86ea319536a8012b9e8f508d3d257029014bdafe/plugins/ssh-agent/ssh-agent.plugin.zsh#L42-L43

Try upgrading OMZ. Still, when the key is not loaded the double prompt will still happen... I don't really know how to solve that. Maybe there's a better way to get the signature, I'll have to read the ssh-keygen docs.

I also see that there's a bug in how we parse the output of `ssh-add -l`, that should be fixed:
```
+_add_identities:22> ssh-add -l
+_add_identities:22> line=The agent has no identities.
+_add_identities:23> loaded_sigs+=agent 
+_add_identities:24> loaded_ids+=has 
```
--

--
Returning to this, how did you create the id_rsa key, so I can reproduce it in my machine?
--

--
Sadly I can't reproduce this, it just prints the fingerprint for me. What version of openssl do you have installed?
--

--
> I also see that there's a bug in how we parse the output of `ssh-add -l`, that should be fixed:
> 
> ```
> +_add_identities:22> ssh-add -l
> +_add_identities:22> line=The agent has no identities.
> +_add_identities:23> loaded_sigs+=agent 
> +_add_identities:24> loaded_ids+=has 
> ```

This was fixed in 101ea872.

I can't say anything new about the main issue though.
--

--
@motevets can you try if the following command still prompts for a password and what it outputs?
```zsh
ssh-keygen -lf /home/motevets/.ssh/id_rsa < /dev/null
```
--
",motevets,"
--
I followed [GitHub's instructions for generating an SSH key](https://help.github.com/en/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent). Namely in the terminal I ran:
```
ssh-keygen -t rsa -b 4096 -C ""your_email@example.com""
```
When prompted I:
1. Saved the key to the default location, `~/.ssh/id_rsa`
1. Specified an encryption password
--

--
I'm running Ubuntu Xenial, and my openssl version is OpenSSL 1.0.2g.
--
",masaeedu,"
--
idk if this is relevant to what you're doing at all, but I started debugging this zsh thing only to realize I was getting prompted for my password twice because I was going through a jumpbox.
--
",,,,,,
7561,OPEN,New NordVPN Plugin,New: plugin,2019-04-09 17:02:58 +0000 UTC,alaeschaik,In progress,,"This plugin should allow the user to easily connect to a VPN server through more concise aliases.

@robbyrussell let me know if you would be interested",,,alaeschaik,"
--
here is a quick overview of the aliases:

## nordvpn plugin

The nordvpn plugin provides many useful aliases for faster usage.

To use it, add nordvpn to the plugins array of your zshrc file:
```
plugins=(... nordvpn)
```

## Aliases

| Alias      | Command              | Descripton                                                                   |
| :--------- | :------------------- | :--------------------------------------------------------------------------- |
| `nvpnl`    | `nordvpn login`      | Login with your NordVPN credentials                                          |
| `nvpnlo`   | `nordvpn logout`     | Logout from your NordVPN account                                             |
| `nvpnc`    | `nordvpn connect`    | Connect to a VPN server by providing futher information e.g. `nvpnc germany` |
| `nvpnd`    | `nordvpn disconnect` | Disconnect from the current VPN connection                                   |
| `nvpnwh`   | `nordvpn whitelist`  | Adds or removes option from whitelis                                         |
| `nvpnst`   | `nordvpn status`     | Shows the connection status                                                  |
| `nvpnset`  | `nordvpn settings`   | Shows current settings                                                       |
| `nvpnh`    | `nordvpn help`       | Shows a list of commands or help for one command                             |
| `nvpncout` | `nordvpn countries`  | Shows the country list                                                       |
| `nvpncit`  | `nordvpn cities`     | Shows the city list                                                          |
--
",,,,,,,,,,
7502,OPEN,Hard to separate `ahead` or `behind` from `git_remote_status`,Area: theme; Enhancement,2019-05-12 14:52:54 +0000 UTC,weiguoz,Opened,,"git_remote_status => origin/develop2
we can't tell if there is a branch named `develop2` in remote
or local branch `develop` ahead 2 commits to `remote/develop`",,,,,,,,,,,,,,
7495,OPEN,docker-machine plugin should tell you which docker-machine environment you're in,Area: plugin; Feature,2020-03-12 15:25:30 +0000 UTC,alexlenail,Opened,,"Similarly to the way you know which git branch you're on, or which python virtualenv, knowing which docker-machine env I'm currently in would be very helpful! 

@jakubsacha, @robbyrussell ",,,,,,,,,,,,,,
7489,OPEN,Oh-my-zsh containers plug-ins (podman & buildah),New: plugin,2021-04-06 18:21:36 +0000 UTC,hhlp,Opened,,"Could you please include the following plug-ins to your project:

1. Podman -> https://podman.io/
2. Buildah -> https://buildah.io/

Regards.,",,,doblak,"
--
Podman completion was added to [containers/libpod](https://github.com/containers/libpod/blob/master/completions/zsh/_podman)

Thanks @edsantiago

Should we add a copy in a similar manner as it's done for [docker](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/docker)? Not sure how to properly include license info though.
--
",Houuse,"
--
any update here?
--
",sidahmed,"
--
I would love to see this in oh-my-zsh too.

Edit : I just tried that completion, and it's working just fine. So what's blocking the merge ?
--
",agilob,"
--
I added PR with support for podman https://github.com/ohmyzsh/ohmyzsh/pull/9275
--
",mrcomoraes,"
--
Workaround for podman:

```bash
mkdir -p $ZSH_CUSTOM/plugins/podman/
podman completion zsh -f $ZSH_CUSTOM/plugins/podman/_podman
```

--
",,
7484,OPEN,Ctrl Left/Right on different Terminals,Topic: bindkey,2019-04-09 11:48:14 +0000 UTC,HyP3r-,Opened,,"I like to use `ctrl+left/right` for jumping between the words in the current command line.

Here is a list of different key codes `ctrl+left` and `ctrl+right` can look like in some of my enviroments:

- Native (just the Linux Kernel booted with `init=/bin/bash`): `^[[D` (ctrl+left), `^[[C` (ctrl-right)
- KDE Terminal: `^[[1;5D` (crtl-left), `^[[1;5C` (ctrl-right)
- Connected with PuTTy from Windows to a Linux Machine: `^[OD` (crtl-left), `^[OC` (ctrl-right)
- Connected with PuTTy from Windows to a Linux Machine running tmux: `^[[D` (crtl-left), `^[[C` (ctrl-right)

I don't know why those different terminals have such different key codes for the same thing. And more importantly: I often can not fix it (not my server, only connected once, ...).

The contributors of the ZIM - Zsh IMproved FrameWork have solved this problem by just binding all those key codes to the same method (backward-word/forward-word): https://github.com/zimfw/zimfw/blob/master/modules/input/init.zsh#L49

So can you please add those key codes to this project: https://github.com/robbyrussell/oh-my-zsh/blob/master/lib/key-bindings.zsh#L52

Update: to solve this problem @apjanke has implemented a function `omz_bindkey` which tries to set the correct keycode depending on the plattform (https://github.com/robbyrussell/oh-my-zsh/pull/5113/commits/a4fbf19a9eb1f3b9de3813c7dd4e5617347bae3e#diff-c546ebbd64ee74cd521ae613d82123a3R94). So please merge this pull request or copy those lines of the ZIM - Zsh IMproved FrameWork project.",,,,,,,,,,,,,,
7477,OPEN,[Suggestion] Cache the ssh passphrase upon first use,Feature; Status: not our issue,2019-04-04 20:04:51 +0000 UTC,brainplot,Opened,,"Hi, I'm using `zsh` and `oh-my-zsh`, with the `ssh-agent` plugin.
I've noticed that every time I start my computer and open my terminal for the first time, it asks me for my ssh passphrase and then caches it until the next reboot.

There are some times where I don't need to use my ssh keys and I just want to quickly open a new terminal session after I booted up my computer; it's kind of frustrating having to type my passphrase when I know I won't be using it.
It would be great if the plugin were able to detect when some app is trying to use your ssh keys (e.g. on `git pull` or `git fetch`) and launch the agent the first time one of my keys is used basically.

I'm sorry if this has been asked before. I spent some time searching the GitHub issues to find something similar but nothing came up.",,,mcornella,"
--
I have not a clue how we would do that. My guess is that, if implemented, it should be done by ssh-agent.
--

--
Reopening because this seems it should be possible if [`AddKeysToAgent`](https://unix.stackexchange.com/a/269132) is enabled, on OpenSSH 7.2 and newer. That should work in combination with #6309.
--
",,,,,,,,,,
7461,OPEN,shrink-path chops folders with spaces,Area: plugin; Bug,2019-03-27 16:12:04 +0000 UTC,Snugug,Opened,,"When using `shrink-path` with `-l` enabled (both standalone and as part of `-f`), if the last folder name has spaces in it, only the first word is displayed instead of the full folder name. For instance, `~/foo/bar/Baz Qux` becomes `~/foo/bar/Baz`. My expectation is that fold names with spaces show their full name, not just the first word.",,,mjklemm,"
--
A related thing that I have noticed: paths with special characters (e.g., white space) is not properly escaped, so that tab-completion does not work when pasting the shortened path:

` ~/t/bla bla/a/b/c`  should be `~/t/bla\ bla/a/b/c`

It might be useful to have an option to control this behavior.

--
",,,,,,,,,,
7458,OPEN,Pip plugin doesn't use current python version,Area: plugin,2020-03-12 15:25:39 +0000 UTC,andreamoro,In progress,,"Have been trying to read as many post as possible (not issues, which apparently haven't this covered), but couldn't find a real solution.

My Mac over time got multiple versions of python and pip installed, but only recently with brew.

When attempting to pip a module, the package looks for pip in the system default python directory, which as a result installs all the libraries in the ""wrong"" place (and later reference the wrong python in the virtualenv).

That said, as far as I can see, it seems the pip in the cellar to have the wrong path reference, but leave this here to raise the attention and perhaps work out on a solution?",,,msafadieh,"
--
Are you talking about Python 3 vs Python 2 differences? In other words, do you want to install modules to use with Python 3 but instead download the Python 2 ones?

You should be able to use `pip3` for that, no?
--
",andreamoro,"
--
Well, that was the issue, there were even no pip3 installed. So ended up cleaning every installation and starting from scratch.
This solved my problem for sure, but I'm still considering the fact the script sound be more generic and try to get the latest version rather than hardcode the reference
--
",,,,,,,,
7328,OPEN,Load plugin completions without aliases,Area: init; Area: plugin; Feature; Topic: completion,2019-04-09 10:32:11 +0000 UTC,remcohaszing,Opened,,"Oh-my-zsh is great! It makes configuring zsh very easy.

However, it does a bit too much for my taste. Many plugins tend to add autocompletion for a command and a bunch of aliases. Personally I love to have that autocompletion, but I don’t like most of the aliases.

Is there a nice way to load only plugin completions, but not the aliases?",,,dimensi0n,"
--
Many plugins have only aliases.
--
",mcornella,"
--
You could just add the path to the plugin folder in `$fpath` before OMZ is sourced, and take the plugin out of the plugins array. For example, if you want swiftpm completion, add
```
fpath+=($ZSH/plugins/swiftpm)
plugins=(....) # make sure swiftpm is not in here
source $ZSH/oh-my-zsh.sh
```
It's a temporary hack, but this requires much thought to implement in a lean fashion.
--
",,,,,,,,
7099,OPEN,Arch linux plugin function paclist is conflict with pacman-contrib,Area: plugin; Topic: alias,2019-11-06 20:31:51 +0000 UTC,Kurobac,Opened,,pacman-contrib has a script also named paclist.,,,,,,,,,,,,,,
7082,OPEN,gpg-agent plugin overwrites $SSH_AUTH_SOCK,Area: plugin; Bug,2019-04-08 21:17:51 +0000 UTC,grawlinson,Opened,,"https://github.com/robbyrussell/oh-my-zsh/blob/abca62add1a6d0ac34e697beac8682076d5c1dd7/plugins/gpg-agent/gpg-agent.plugin.zsh#L13
The above line doesn't check if `enable-ssh-agent` is actually enabled. It merely checks for the existence of the phrase.

The problem is if the phrase is present and commented out, it will trigger, e.g. `# enable-ssh-support allows gpg to act as a ssh agent`

Changing the grep command to `grep -qe '^enable-ssh-support' ""$GNUPGCONFIG""` should eliminate this.

EDIT: I'd fork and open a PR, but the rate at which PRs are merged is a bit of a worry.",,,mcornella,"
--
Can you submit a PR? I'm going through issues faster now. There's also #7059 that could use a tester.
Thanks!
--
",,,,,,,,,,
6989,OPEN,Propose to show `git log -p` before the upgrade,Area: updater; Feature,2019-04-08 20:36:17 +0000 UTC,techtonik,Opened,,"It is similar to #2971 but doesn't require any manual log housekeeping. Basically, modify:
```
[Oh My Zsh] Would you like to update? [Y/n]: 
```
to
```
[Oh My Zsh] Would you like to update? [Yng?]: ?
Yy - yes
Nn - no
Gg - show git log with patches
```",,,,,,,,,,,,,,
6971,OPEN,gcl name confliction with GNU Common Lisp,Plugin: git; Topic: alias,2019-04-08 20:30:15 +0000 UTC,DougBeney,Opened,,"Was learning a bit of Lisp and found out ""gcl"" is also an alias in OhMyZsh's git plugin.

Saw a pull request here but it doesn't look like it was accepted: https://github.com/robbyrussell/oh-my-zsh/pull/4160",,,,,,,,,,,,,,
6968,OPEN,vi-mode: how to custom the hotkey to enter normal mode?,Topic: bindkey,2020-05-28 07:16:41 +0000 UTC,roachsinai,In progress,,"As the `README.md` metioned,

Use `ESC` or `CTRL-[` to enter Normal mode.

But for me `CTRL-Alt-T`, `CTRL-Alt-O`, `CTRL-Alt-N`, all change to `Normal` mode.

And I use `Manjaro + Gnome terminal`.

What happened? Thanks.",,,manasjoshi14,"
--
Were you able to solve this? 
Any key pressed with Alt would change to normal mode 
--
",roachsinai,"
--
No, but I find it's OK to leave it alone.
--
",,,,,,,,
6843,OPEN,Loading kubectl plugin is slow,Area: plugin; Performance,2020-09-29 09:59:09 +0000 UTC,lbolla,In progress,,"The main reason is that it regenerates the completion script over and over, with `kubectl completion zsh`.",,,alirezaDavid,"
--
I'm using kubectl plugin and every morning start terminal it's been hang up about 5 minute.
After remove the plugin from `.zshrc` everything working smoothly. 
I used `set -xv` bash flag in `.zshrc` it hangs right here:

```
_complete kubectl 2>/dev/null
+/proc/self/fd/17:8793> _bash_comp kubectl
```
--
",gowtham,"
--
@lbolla I don't think, it is completely fixed or something else is wrong with my setup? 
In my machine, it still takes a lot of time to load. Here is the profiling screenshot. 

<img width=""1680"" alt=""screen shot 2018-08-20 at 8 02 21 am"" src=""https://user-images.githubusercontent.com/8710113/44317562-a6a4f400-a44f-11e8-86ff-a9502ad5e040.png"">

That is on every new tab in Iterm. But on existing tab, it's not taking much. 
<img width=""1680"" alt=""screen shot 2018-08-20 at 8 07 04 am"" src=""https://user-images.githubusercontent.com/8710113/44317756-6b56f500-a450-11e8-9d02-7f11af72ee1f.png"">


--

--
Avoid it by doing lazy load. 
```bash
function kubectl() {
    if ! type __start_kubectl >/dev/null 2>&1; then
        source <(command kubectl completion zsh)
    fi

    command kubectl ""$@""
}
```
as mentioned [here](https://github.com/kubernetes/kubernetes/issues/59078#issuecomment-363384825)
--

--
@lbolla I don't have any custom zsh cache settings. yes I do have the cached file in $ZSH_CACHE_DIR
--
",lbolla,"
--
Do you have custom zsh cache settings? kubectl speedup works by caching a file in $ZSH_CACHE_DIR and skipping `kubectl completion zsh` which is the slowest bit.
--
",mati865,"
--
Experienced the same on Fedora, the cache doesn't help because the slow part here is execution of function `__kubectl_bash_source()` from `${ZSH_CACHE_DIR}/kubectl_completion`.

Upstream issue: https://github.com/kubernetes/kubernetes/issues/59078
--
",akaihola,"
--
...and if I understand correctly, the lazy loading trick doesn't help either because sourcing the cached `kubectl_completion` triggers loading anyway.
--
",wmcnamee,"
--
any news on improvements here?

```
num  calls                time                       self            name
-----------------------------------------------------------------------------------
 1)    1         190.03   190.03   65.52%    189.83   189.83   65.45%  __kubectl_bash_source
```
--
"
6685,OPEN,laravel: file autocomplete,Area: plugin; Feature; Topic: completion,2019-04-10 09:50:13 +0000 UTC,mdurao,In progress,,"Having this:

```
# Laravel5 basic command completion
_laravel5_get_command_list () {
	php artisan --raw --no-ansi list | sed ""s/[[:space:]].*//g""
}

_laravel5 () {
  if [ -f artisan ]; then
    compadd `_laravel5_get_command_list`
  fi
}

compdef _laravel5 artisan

#Alias
alias art='php artisan'
```

How can I have FILE autocompletion after the laravel commands?

`art<TAB>_laravel5<TAB>_FILES`

Can someone help me or lead me to the right direction? Thank you.",,,mcornella,"
--
You need to run `compdef _laravel5 art` to enable completion with the `art` alias.
--
",mdurao,"
--
Hi, @mcornella 

I have completion with the command and the alias, what I'm not able to do is having filesystem autocompletion after a laravel command.

Example:

`php artisan import:csv ~/` <-- after writing this, if you press `<TAB>` it will cycle again through artisan commands instead of cycling through the files in the current dir!
--
",,,,,,,,
6630,OPEN,need contributor / plug-in guidelines on aliases and disabling setting of aliases,Discussion,2021-02-12 00:00:13 +0000 UTC,ncolton,In progress,,"Some good discussion has already happened in #5721 but this is an issue not just limited to the plugin for git.

Some examples:
#4780
#5214
#5288
#5313
#5766
#5774
#5783
#6062
#6601

There needs to be some form of guidance on how to add aliases while being a good citizen, especially since some aliases can be very dangerous and destructive. It would be nice to adopt the added functionality that many plugins provide, but have the option to use, or not use the aliases provided by the plugin.

Similarly, the libraries also exhibit some of this. `lib/directories.zsh` creates 23 aliases on it's own, `lib/misc.zsh` creates 2 different aliases for `sudo`. In comparison, `lib/correction.zsh` also creates a number of aliases, but they are gated behind an option so I can easily enable or disable them.

I've avoided some plugins because of the sheer number of aliases I'd be ""forced"" to have from them. For the 23 aliases from `lib/directories.zsh` I resorted to creating an empty `custom/lib/directories.zsh` to disable them. I don't consider it to be realistic to have each user have to check every update to see if any new aliases were created, then add an `unalias yet_another_alias` for every new unwanted alias.",,,ncolton,"
--
As an additional note, the aliases should probably be opt-in so they don't just overwhelm new users and you are given a chance to explore them and ideally understand them a little before turning them on.
--
",Shea690901,"
--
Not only the aliases should be optin but also (un)setopt's...
e.g.: I have ```alias l=less``` (added as different alias by lib/directories.zsh) and I don't like ```setopt autopushd``` (set by lib/directories.zsh)...
--
",hoylemd,"
--
The directories aliases are getting in my way a lot. It'd really be nice if I could disable them.
--
",lonelykid,"
--
This is really needed. I don't want aliases that I don't know where it is defined and how to enable/disable.
--
",damien,"
--
Ran into this today with aliases defined in `lib/directories.zsh`. Had to run a ZSH process in debug mode to figure out where aliases were coming from. I have some thoughts on how opt-in aliases could be managed. Here are some thoughts:

### Current problems

1. ZSH itself and ZSH plugins define aliases in a global context.
2. Unless specifically coded into ZSH or ZSH plugins, there is no way to opt-out or configure alias definitions
3. A user has no straightforward way of knowing where an alias comes from
4. For aliases offered by plugins that are opt-in, a user has no way of knowing what aliases are available

### Proposal

Provide a mechanism within ZSH for registration of aliases. This mechanism would keep track of a mapping of aliases, their recommended labels, and the shell snippets they contain. ZSH could them provide further mechanisms to allow interaction with this alias store to do things like enable, disable, or rename an alias.

In abstract, I think it'd look something like this:

Alias Source      | Alias Label | Alias Value      | Active    | User Label
----------------- | ----------- | ---------------- | --------- | ----------
`directories.zsh` | `lsa`       | `ls -lah`        | `TRUE`    | `NULL`
`directories.zsh` | `l`         | `ls -lah`        | `FALSE`   | `NULL`
`custom/exa.zsh`  | `l`         | `exa -FG`        | `TRUE`    | `NULL`
`custom/exa.zsh`  | `ll`        | `exa --extended` | `TRUE`    | `el`

This would ideally result in the following behavior:

1. `lsa` executes `ls -lah`; the user didn't modify anything and has that alias enabled from `directories.zsh`
2. `l` would execute `exa -FG`; this conflicts with `l` defined in `directories.zsh`, but is resolved by the latter alias being inactive/disabled
3. `el` executes `exa --extended` ; `custom/exa.zsh` originally defines the command under the alias `ll`, but the user has remapped the alias with to a new name, `el`

Does this sound like overkill? I'd be happy to contribute something like this, but there'd still be open questions about interface and migration paths. Open questions off the top of my head:

1. For any new approach, how do we get existing plugins moved over with a minimum of fuss and work?
2. What would a UI/TUI for this look like?
3. How big a problem is this, really? I know it's hit me and a few other people on this thread. Is this a big enough problem/concern to justify additional complexity this would add to an already large project like oh-my-zsh?

Cheers! 🍻 
--
",rwmitchell,"
--
i'm not a fan of OMZ providing aliases for commands that have been around forever without the user opting in.  Having an alias for 'ls' really annoys me, for example.

I've used someone's Extended-LS (els) for a long time, modified it to support colors, commas in the size field, glyphs for file types and hg status; written in C and doesn't require ruby or any other silly add-ons.  I have 'ls' defined as a function and apparently zsh using a function or an alias with the same name differs between OS X and linux...linux calls aliases first.  Like posters above, spent a long time chasing down why I suddenly had a broken ls on linux and where the alias was getting created.

I love that OMZ brings a lot of zsh tools together from everywhere, but I also like being able to select what I want to use and don't like stuff being forced on me.
--
"
6606,OPEN,multi line (long command on narrow terminal window) editing troubles (ITerm2?),Platform: macOS; Support,2021-04-09 17:49:48 +0000 UTC,hvisage,Opened,,"Hi there,

 Using oh-my-zsh in iTerm2, I can't reliably edit long lines on the prompt line, especially in narrow terminals (typically with multiple windows on several servers, but with extra long line same issue).

 With oh-my-zsh, the cursor position is a blind guess after I've up-arrowed to the line line, not to mention the line not properly shown either.

 When I disable oh-my-zsh, those same lines I can reliably see the cursor position on the various lines of the long line.

 How to fix, where to start showing pictures to explain the issues seen?
Anybody else (especially MacOS(X) users) seen these troubles with long, multiline commands, to edit",,,hevisko,"
--
Okay, this isse seems to be related to an Iterm2 setting. 
After defaults delete com.googlecode.iterm2, the problem disappeared.
Still trying to find the culprit setting though.
--
",haf,"
--
This also seems to happen when **typing out a long line**; has it go something to do with the theme's escape codes? Seems to happen after #7544 in my case, but I can't see what error that change might introduce. Has it got something to do with the measured length of characters in zsh/iterm, seeing that I introduced emojis in that PR which can be of hard-to-guess display-lengths?
--
",ivanovv,"
--
Happens to me all the time after certain command length, I have to switch to bash. Really annoying and no clue how to fix. Standard MacOS Terminal app

--

--
for me it was the opposite – non color code input surrounded by `%{%}`

This is the original file https://gist.github.com/BaylorRae/1499367

I changed 

```
  colored_time+=""%{$minutes_since_last_commit%}m""
```

to 

```
  colored_time+=""$minutes_since_last_commit%1{m%}""
```

and my prompt is healthy now.
--
",agillbraun,"
--
Also having this issue with typing out any command longer than the window width. It's funny, because it's only after having switched to a new mac and setting up iTerm and oh-my-zsh am I experiencing this for this first time. I never had a problem before with the same setup on my old laptop...
--
",mcornella,"
--
OK, everybody please provide a screenshot as well as this info:
- zsh version (`echo $ZSH_VERSION`)
- `echo $TERM`
- terminal emulator
- Oh My Zsh theme

Also, try to reproduce it without OMZ, only sourcing the theme: `source $ZSH/theme/$theme.zsh-theme`, being `$theme` your theme used.
--

--
Can you say if you have `$COMPLETION_WAITING_DOTS` enabled? 
--

--
Can you post your zshrc file?
--

--
Is it possibly the Powerline prompt? Or maybe that you source the agnoster theme as well, there may be a conflict there?
--
",jonastr,"
--
I've noticed the same problem. I'm seeing it on two machines, where I supposedly have the same setup (manual replication).

Here's my debug info:

* `$ZSH_VERSION`: 5.3
* `$TERM`: xterm-256color
* terminal emulator: iTerm v3.2.9
* Oh My Zsh theme: `arrow`

I can also reproduce this problem with the default theme (`robbyrussell`). 

I **cannot** reproduce it in the following scenarios:
* Using `agnoster` theme. Didn't try any others, but should be enough to rule out that all themes are affected.
* Sourcing only the affected theme (e.g. `source $ZSH/themes/arrow.zsh-theme`) and leaving OMZ out of the game
* Using Mac's default `Terminal` app with the affected combination (OMZ + theme)

Looking at the above, it looks to me like it's a combination terminal + OMZ + theme (aka prompt?) that makes it break.

Edit: I also notice that commands/characters are ""less likely"" to be messed up when I clear the screen before (`clear`). 'Less likely' is not to say the mess up happens completely at random, but rather that in some situations I may succeed in editing the command properly when I clear the screen before. I haven't investigated that in much detail, yet, so I can't really say in which situations editing will succeed. It still breaks often enough that I oftentimes resorted to c+p the command into a text editor, editing it there and pasting it into the terminal. :) 
Still, this could hint at some issue related to character/cursor offset.

Here are some two screenshots that I hope illustrate the issue at least to some degree:

1. Moving the cursor back virtually makes it move to the previous command, which makes no sense:
![image](https://user-images.githubusercontent.com/1243894/58379535-1333bd00-7fa5-11e9-8079-3287048a99c9.png)
2. Removing some characters (backspace) messes up the current command:
![image](https://user-images.githubusercontent.com/1243894/58379534-0b741880-7fa5-11e9-8cb9-daa02e072bcf.png)

--

--
> Can you say if you have `$COMPLETION_WAITING_DOTS` enabled?

I don't think so:

```
[~] echo $COMPLETION_WAITING_DOTS

[~]
```
--
"
6581,OPEN,Uninstalling ohmyzsh: must abort on invalid password,Area: uninstaller; Enhancement,2021-03-15 18:52:25 +0000 UTC,sushlala,Opened,,"When I try to uninstall zch, I entered the wrong password by mistake. Because of this, the uninstall was only partially successful, however the switch back to original shell failed. I think it's better to have an option to abort the uninstall on this failure.

```
➜  ~ uninstall_oh_my_zsh
Are you sure you want to remove Oh My Zsh? [y/N] y
Removing ~/.oh-my-zsh
Looking for original zsh config...
Switching back to bash
Changing shell for $$USER$$.
Password for $$USER$$: 
chsh: Credentials could not be verified, username or password is invalid.  Credentials could not be verified, username or password is invalid.
Thanks for trying out Oh My Zsh. It's been uninstalled.
➜  ~ uninstall_oh_my_zsh
sh: /Users/sush/.oh-my-zsh/tools/uninstall.sh: No such file or directory
```",,,,,,,,,,,,,,
6523,OPEN,ZDOTDIR,Area: core; Area: plugin; Enhancement,2019-05-09 19:05:14 +0000 UTC,Shea690901,In progress,,"I´ve noticed that **every** plugin referencing any zsh startup file assumes, that those are located in the users home directory, disregarding the possibility of setting ```ZDOTDIR``` to something else within ```/etc/zshenv```...
In fact there are only 3 files (lib/compfix.zsh, lib/diagnostics.zsh and oh-my-zsh.sh) that use ```ZDOTDIR```, while there are 45(!!!) files (not counting any readme's) referencing ```.zshrc```",,,natemaia,"
--
I would also like to see this addressed.

I've forked my own and patched a number of plugins for just this reason
--
",fox91,"
--
Similar to #7052
--
",Shea690901,"
--
Not really, that's only 1 out of those 45 modules....
--
",,,,,,
6444,OPEN,Apply LS_COLORS to completion for mac,Enhancement; Topic: completion,2019-04-08 16:18:54 +0000 UTC,yangg,Opened,,"in `lib/theme-and-appearance.zsh`, I think the following code should also apply for `darwin*` if `LS_COLORS` is not empty

```
# Take advantage of $LS_COLORS for completion as well.
zstyle ':completion:*' list-colors ""${(s.:.)LS_COLORS}""
```",,,mcornella,"
--
I agree, can you submit a PR?
--
",,,,,,,,,,
6357,OPEN,Arrow keys don't work properly in emacs mode,Topic: bindkey,2019-04-08 15:13:45 +0000 UTC,ax487,Opened,,"When using a vanilla oh-my-zsh installation, pushing left / right arrow move words forward / backward rather than characters. If I switch to vim keybindings using `bindkey -v` the issue disappears.

I added also bound the up/down keys using
```

bindkey ""^[[A"" history-beginning-search-backward # Up
bindkey ""^[[B"" history-beginning-search-forward # Down
```

This binding works in emacs mode but not in vim mode.",,,,,,,,,,,,,,
6346,OPEN,RPROMPT evaluation plugin vs. theme,Area: theme; Enhancement,2019-04-08 20:24:03 +0000 UTC,deathjest3r,Opened,,"This is more of a question then an issue. I have developed a very simple plugin that shows you on the right side ${RPROMT} whether you are in a chroot environment or not. However when I load a theme that also uses RPROMPT then my status does not show up. Is a plugin that messes with ""themeing"" even wanted? Or should this strictly be separated?

For testing I used the theme 'alanpeabody'. When I modify the RPROMPT from 
`RPROMPT=""${return_code} ${git_branch} ${rvm}""` to
`RPROMPT=""${RPROMPT} ${return_code} ${git_branch} ${rvm}""` both informations are shown.

But what's the common style guidelines for such a case? Is it ok to have a plugin that maybe does not work if a theme already uses RPROMPT?",,,mcornella,"
--
The problem here is that themes load after plugins, so any prompt modification done in a plugin is probably bound to be overriden by a theme if the theme doesn't have code like yours. You can add your RPROMPT modification after the theme has loaded, in the zshrc file, but we should probably fix themes to only append modifications to RPROMPT instead.
--
",,,,,,,,,,
6300,OPEN,[Suggestion] Plugin repo,Discussion,2019-04-07 21:23:08 +0000 UTC,mdeboer,Opened,,"With over 800 pull requests and 400 issues, this thing is growing out of hand I suppose. I think it might be better to stop pulling in all plugins and let them live in their own repository, managed by the plugin author.

Take a look at [Hyper](https://hyper.is/#extensions) for example. They maintain a simple opt-in list of plugins but reference them by [NodeJS package name](https://npmjs.com). Oh-my-zsh could do the same by simply referencing by <github username>/<repo name> or by https git url.

This takes a major strain off the team that has to check/test/merge plugins and handle issues for plugins they haven't written.",,,,,,,,,,,,,,
6292,OPEN,Plugins: can I load them asynchronously; or on-demand?,Area: init; Feature,2019-04-07 21:25:26 +0000 UTC,sohocoke,In progress,,"oh-my-zsh plugins like `pyenv` or `rbenv` are great, but many times I am forced not to use a plugin because it can bring my shell launch time to a crawl. It's why we get issues like #6017 . 

Is it possible to load some plugins asynchronously, so my shell prompt is not blocked until all the plugins launch? Failing this, can I load plugins on-demand? ",,,folixg,"
--
I can't answer the part about asynchronously loading, but for manual loading you could add a function to your .zshrc that does that.

A basic example (only able to handle one plugin, no error checking)
```
function load-plugin() {
  source $ZSH/plugins/""$1""/""$1"".plugin.zsh
}
```

Then run ```load-plugin pyenv```, whenever you need it.
--
",awinecki,"
--
Just wanted to chime in that there's a very similar issue going on with NVM (Node.js version manager) right now: https://github.com/creationix/nvm/issues/1277.

@crenwick came up with a great way to load NVM on-demand:
```
alias load_nvm='export NVM_DIR=""$HOME/.nvm"" && [ -s ""$NVM_DIR/nvm.sh"" ] && . ""$NVM_DIR/nvm.sh""'
alias node='unalias node npm && load_nvm && node'
alias npm='unalias node npm && load_nvm && npm'
```

I'm hoping the same could be done with pyenv:
```
alias load_pyenv='eval ""$(pyenv init -)""'
alias pyenv='unalias pyenv && load_pyenv && pyenv'
```
--
",sohocoke,"
--
@awinecki thanks for that info.

It makes me wonder whether we can have another shell variable `lazy_plugins` which can be used to either automatically define aliases like the above, or perhaps use zsh `autoload` so the cost of actually loading the plugin is incurred when the user attempts to use the plugin, rather than at shell startup time.

Would love to hear what the scripting experts think about this idea. 
--
",,,,,,
6261,OPEN,Up-Arrow behavior different depending on if previous program has finished or not,Enhancement; Topic: bindkey,2019-04-09 15:47:06 +0000 UTC,greggman,In progress,,"I've noticed that if I press up arrow at a prompt then I get the previous command and up again gets me the command before that.

Whereas if I press up arrow *before the previous program has completed* then instead I get the previous command displayed, the cursor is at the end of the line, but oh-my-zsh is now in ""search for lines that start with ... "" mode meaning I can't press up to get the previous command.

I'm sure this behavior is well known and expected but just in case you can test like this. 

1. Type `ls` <kbd>return</kbd>  
2. Type `sleep 3` <kbd>return</kbd>
3. wait 3 seconds for prompt to appear
4. press <kbd>up</kbd> (should show `sleep 3`)
5. press <kbd>up</kbd> again (should show `ls`)
6. press <kbd>return</kbd> (to run `ls`)
7. Type `sleep 3` <kbd>return</kbd> <kbd>up</kbd> (press the up arrow before the 3 seconds elapses)
8. It should now be showing `sleep 3`
9. Press <kbd>up</kbd> 
   it will still be showing `sleep 3` but it want it to be showing `ls`. Instead it is in ""search for commands that start with `sleep 3` mode instead of just `go to previous command` mode.

To make try to clear in both cases these are the steps

1. `ls`<kbd>return</kbd> 
2. `sleep 3`<kbd>return</kbd> 
3. <kbd>up</kbd> 
4. <kbd>up</kbd> 

But they end up with different results depending on if step3 happens before step2 finished or after.

How do I get oh-my-zsh to be consistent here so that a premature up arrow behaves the same as a normal up arrow? Thank you",,,greggman,"
--
Does this really not affect anyone but me? I'm really surprised.
--

--
Not, I really don't understand how I can be the only person on the planet this issue seems to effect. It's really annoying. How are others avoiding the issue?

A good example for me. My intent is to make 3 separate commits so this is what I'm trying to do

```
git status
git commit changedfile1 -m ""stuff about changedfile1""
git status
git commit changedfile2 -m ""stuff about changedfile2""
git status
git commit changedfile3 -m ""stuff about changedfile3""
```

What I type to do this

1. `git status` <kbd>return</kbd>
2. `git commit changedfile1 -m ""stuff about changedfile1""` <kbd>return</kbd> 
3. <kbd>⬆</kbd>  <kbd>⬆</kbd> <kbd>return</kbd>
4. <kbd>⬆</kbd>  <kbd>⬆</kbd> ...edit llne <kbd>return</kbd> 
5. <kbd>⬆</kbd>  <kbd>⬆</kbd> <kbd>return</kbd>
6. <kbd>⬆</kbd>  <kbd>⬆</kbd> ...edit llne <kbd>return</kbd> 

What happens, steps 3, 4, 5, and 6 are completely unpredictable. There's a 20-30% change they will fail because of the issue reported above.

How am I the only person that runs into this issue? Given how often I run into and how frustrating it is I'd expect this to be the most starred issue on here. That makes me wonder if I somehow have things configured differently than everyone else some how although I have nothing special configured in relation to oh-my-zsh.

In any case this seems to fix it

https://github.com/robbyrussell/oh-my-zsh/pull/7574

Would love to know more if anyone with more expertise has the time to explain and why the default is the inconsistent behavior vs the consistent behavior with this fix.
--

--
In any case those looking for a fix you can add this to your .zshrc file sometime after including oh-my-zsh.sh

```
bindkey ""^[[A"" up-line-or-beginning-search # Up
bindkey ""^[[B"" down-line-or-beginning-search # Down
```
--
",mcornella,"
--
I can confirm this happens to me too. The reason is that when a command is running, zle is not active and as such the terminal is not in application mode:
https://github.com/robbyrussell/oh-my-zsh/blob/4aa545abedb430df2fa1ae2cc7cc502a5be1a80b/lib/key-bindings.zsh#L5-L16

This means that `$terminfo` sequences don't apply anymore, so the up arrow key runs it's default bindkey widget, which in my case was `up-line-or-history` or `down-line-or-history`. This widget fills the `$BUFFER` (i.e. the command line input) instead of signaling a history search, so when you press the up arrow again, the real widget is run (which in my case was `history-substring-search-up`, in yours, `up-line-or-beginning-search` probably). The widget thinks the command line is written and therefore searches for commands beginning (in your case) or containing (in mine) the command written by `up-line-or-history`.

One possible fix is using the sequence you get when running `cat -v`, which are the ones you wrote in the comment above. #5113 was supposed to fix this but we haven't had a wide enough group of testers to push it forward.
--
",,,,,,,,
6242,OPEN,Add mechanism for auto-update of custom folder,Area: updater; Feature,2020-07-31 00:56:48 +0000 UTC,mscalora,Opened,,"A way is needed to tie custom folder contents updating to the OMZ update mechanism.

See: https://github.com/robbyrussell/oh-my-zsh/pull/5093

It's been a year since this PR was closed, I'm beginning to despair.",,,archteck,"
--
I think the idea is good but it feels like very complex approach the one done is that PR.
I do something very simple that was adding this lines in the end of upgrade.sh

`cd custom/plugins`
`printf ""\n${BLUE}%s${RESET}\n"" ""Updating Custom Plugins""`
`for plugin in */; do`
`  if [ -d ""$plugin/.git"" ]; then`
`     printf ""${YELLOW}%s${RESET}\n"" ""Updating ${plugin%/}""`
`     git -C ""${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/plugins/$plugin"" pull`
`  fi`
`done`
`printf ""\n${BLUE}%s${RESET}\n"" ""Updating Custom Themes""`
`cd ../themes`
`for theme in */; do`
  `if [ -d ""$theme/.git"" ]; then`
      `printf ""${YELLOW}%s${RESET}\n"" ""Updating ${theme%/}""`
      `git -C ""${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/themes/$theme"" pull`
  `fi`
`done`


That works fast and i believe it works very good, and its simple.

Note: I could do it in only 1 For Loop, but in my case took almost double the time, in my machine (custom plugins: zsh-syntax-highlighting and zsh-autosuggestions, custom theme: powerlevel10k)  this approach run the upgrade in 25 sec. With a single For Loop it took 47 sec.
--
",,,,,,,,,,
6060,OPEN,Tab completion colors,Support; Topic: completion,2020-03-21 21:40:42 +0000 UTC,chuckdries,Opened,,"Problem: tab completion is colored, but colors do not match other colors throughout the terminal.


1. How to reproduce the problem  
run `ls` then type `vim <tab>` with default color scheme/theme  
2. What the correct behavior should be
Colors displayed should match colors of output of `ls`
3. What the actual behavior is
Color of output is different than color of `ls` output  
(In my case I'm using the Smyck color scheme for iTerm, though that should not matter here)  
<img width=""922"" alt=""screen shot 2017-05-01 at 6 08 19 pm"" src=""https://cloud.githubusercontent.com/assets/1351436/25600562/ccef3076-2e99-11e7-97b3-247dea8c8dbe.png"">  

As you can see, all the colors are different and the `Adobe` entry is downright illegible.

I came across #1563 but I am new to this and don't know enough about zsh theming to know what dir_colors is or really understand what's going on in that thread. I tried the workaround listed in the thread: `zstyle ':completion:*:default' list-colors ${(s.:.)LS_COLORS}`, but it removes color from tab completion output completely. As I understand it, this behavior is to be expected as I am on a mac and macs use LSCOLORS, but when I use LSCOLORS in that line, I get the same broken result as I do omitting the line in question.

This seems like it should be a simple thing. Yes there are iTerm themes that make it legible, but they make my vim scheme illegible and I'd really rather solve this the right way.

As a workaround, can I manually override the tab completion colors? Where can I look to look up the LS output colors? `echo LSCOLORS` give me this insane string: `Gxfxcxdxbxegedabagacad`",,,lsnch,"
--
[This](https://superuser.com/questions/290500/zsh-completion-colors-and-os-x?rq=1) helped me a lot.

Basically zsh doesn't recognize `LSCOLORS` and can't understand its format. Zsh is responsible for printing  and painting completion strings. It does understand `LS_COLORS` though.

When you call `ls` it, being a standard native program of MacOS, uses `LSCOLORS`.

One thing you can do is use tool from the link to convert your `LSCOLORS` setup and define `LS_COLORS` with the same colors as `LSCOLORS`.
--
",cdonovick,"
--
Edit: ordering issues in my configuration, no bug.
--
",rarylson,"
--
## ohmyzsh behabior on MacOS X

ohmyzsh defines `LSCOLORS` here:

https://github.com/ohmyzsh/ohmyzsh/blob/78b07e92fd4a3a5e1f92ee4e3d680c39b72c2245/lib/theme-and-appearance.zsh#L4-L5

- The `LSCOLORS` variable is always defined: for every OS, for every `ls` case (BSD `ls` or GNU `ls`)

Ohmyzsh, in the same file, also handles `ls` color using this logic:

https://github.com/ohmyzsh/ohmyzsh/blob/78b07e92fd4a3a5e1f92ee4e3d680c39b72c2245/lib/theme-and-appearance.zsh#L22-L28

- Define `alias ls='ls -G'`, which uses `LSCOLORS`
- Or define `alias ls='gls --color=tty'`, which uses `LS_COLORS`
    - It does this if both GNU `ls` is installed and `LS_COLORS`/`.dircolors` are set

In the MaxOS X case, ohmyzsh does *NOT* set autocomplete to use `LS_COLORS` in this case, even if it's using the `gls` alias. It only does this (set autocomplete to use `LS_COLORS`) in the Linux case.
--

--
## ohmyzsh behabior on Ubuntu

On Ubuntu, ohmyzsh sets the `LSCOLORS` var:

https://github.com/ohmyzsh/ohmyzsh/blob/78b07e92fd4a3a5e1f92ee4e3d680c39b72c2245/lib/theme-and-appearance.zsh#L4-L5

And this is the logic to generate the `ls` alias:

https://github.com/ohmyzsh/ohmyzsh/blob/78b07e92fd4a3a5e1f92ee4e3d680c39b72c2245/lib/theme-and-appearance.zsh#L30-L35

In the Linux case, ohmyzsh DOES also set autocomplete to use LS_COLORS:

https://github.com/ohmyzsh/ohmyzsh/blob/78b07e92fd4a3a5e1f92ee4e3d680c39b72c2245/lib/theme-and-appearance.zsh#L37-L38

At the end, we have:

```plaintext
➜  / echo $LSCOLORS
Gxfxcxdxbxegedabagacad
➜  / echo $LS_COLORS
rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:
➜  / alias ls
ls='ls --color=tty'
```

Notice that, although ohmyzsh defines `LSCOLORS`, it is just ignored afterwards.
--

--
## Possible workaround

If you're using MacOS X AND using the default `ls` command (BSD variation), OhMyZSH will automatically set the `LSCOLORS` variable to `""Gxfxcxdxbxegedabagacad""`.

If you do NOT override it after, you can put this on your `.zshrc`:

```bash
# Autocomplete colors
#
# Based on OhMyZSH default `LSCOLORS`. Converted with the help of the Geoff
# Greer's lscolors project.
# See: https://geoff.greer.fm/lscolors/
zstyle ':completion:*:default' list-colors \
  ""di=1;36"" ""ln=35"" ""so=32"" ""pi=33"" ""ex=31"" ""bd=34;46"" ""cd=34;43"" \
  ""su=30;41"" ""sg=30;46"" ""tw=30;42"" ""ow=30;43""
```

Or:

```
# Autocomplete colors
#
# Based on the oh-my-zsh default `LSCOLORS`. Converted with the help of the
# Geoff Greer's lscolors project.
# See: https://geoff.greer.fm/lscolors/
_ls_colors=""di=1;36:ln=35:so=32:pi=33:ex=31:bd=34;46:cd=34;43:su=30;41:sg=30;46:tw=30;42:ow=30;43""
zstyle ':completion:*:default' list-colors ""${(s.:.)_ls_colors}""
```

**Note:** `_ls_colors` is defined here as the equivalent of the default value for `LSCOLORS` (`""Gxfxcxdxbxegedabagacad""`), but manually converted to the `LS_COLORS` format.

This will set autocomplete to use colors equivalent of the default `LSCOLORS`.

## Possible code improvements

Since `LSCOLORS` will ALWAYS be set by OhMyZSH, and keeping this as is, maybe we could use this logic:

- Set `LSCOLORS` to OhMyZSH default value
- If `LS_COLORS` is NOT set, set is using the equivalent of `LSCOLORS`
- Move the ZSH autocomplete using `LS_COLORS` to just after the `if` blockcode, so it'll be applied to all of the OSes.

So, ZSH will be able to use `gls` and ZSH autocomplete with compatible colors even in MacOS X.

Note that we'll be unnecessarily setting `LS_COLORS` when not using `gls`. But today we DO unnecessarily set `LSCOLORS` when using `gls`, so this shouldn't be a problem.
--

--
I wasn't able to provide a full implementation of my previous idea, but I was able to implement an improvement/workaround that handles only the MacOS X case (there are some duplicated code - very similar to the one that handles the Linux case - sorry for that):

```diff
diff --git a/lib/theme-and-appearance.zsh b/lib/theme-and-appearance.zsh
index 5016d86c..89382a97 100644
--- a/lib/theme-and-appearance.zsh
+++ b/lib/theme-and-appearance.zsh
@@ -3,6 +3,8 @@ autoload -U colors && colors

 # Enable ls colors
 export LSCOLORS=""Gxfxcxdxbxegedabagacad""
+# Same colors than BSD $LSCOLORS, but converted to GNU $LS_COLORS format
+g_lscolors=""di=1;36:ln=35:so=32:pi=33:ex=31:bd=34;46:cd=34;43:su=30;41:sg=30;46:tw=30;42:ow=30;43""

 # TODO organise this chaotic logic

@@ -20,12 +22,28 @@ if [[ ""$DISABLE_LS_COLORS"" != ""true"" ]]; then
     gls --color -d . &>/dev/null && alias ls='gls --color=tty'
     colorls -G -d . &>/dev/null && alias ls='colorls -G'
   elif [[ ""$OSTYPE"" == (darwin|freebsd)* ]]; then
-    # this is a good alias, it works by default just using $LSCOLORS
-    ls -G . &>/dev/null && alias ls='ls -G'
+    # On MacOS X, ""gls"" (ls from GNU coreutils) is available from ports and
+    # brew. We use the default BSD ""ls"" or GNU ""gls"", depending on the case.

-    # only use coreutils ls if there is a dircolors customization present ($LS_COLORS or .dircolors file)
-    # otherwise, gls will use the default color scheme which is ugly af
-    [[ -n ""$LS_COLORS"" || -f ""$HOME/.dircolors"" ]] && gls --color -d . &>/dev/null && alias ls='gls --color=tty'
+    # This is a good alias. It works by default just using $LSCOLORS.
+    ls -G . &>/dev/null
+    if [[ ""$?"" -eq 0 ]]; then
+      alias ls='ls -G'
+      # Set completion using $g_lscolors (same colors than $LSCOLORS)
+      zstyle ':completion:*' list-colors ""${(s.:.)g_colors}""
+    fi
+
+    # Only use coreutils ls if there is a dircolors customization present ($LS_COLORS or .dircolors file)
+    # Otherwise, gls will use the default color scheme which is ugly af.
+    [[ -n ""$LS_COLORS"" || -f ""$HOME/.dircolors"" ]] && gls --color -d . &>/dev/null
+    if [[ ""$?"" -eq 0 ]]; then
+      alias ls='gls --color=tty'
+      if [[ -z ""$LS_COLORS"" ]]; then
+        (( $+commands[gdircolors] )) && eval ""$(gdircolors -b ""$HOME/.dircolors"")"" || eval ""$(gdircolors -b)""
+      fi
+      # Take advantage of $LS_COLORS for completion as well.
+      zstyle ':completion:*' list-colors ""${(s.:.)LS_COLORS}""
+    fi
   else
     # For GNU ls, we use the default ls color theme. They can later be overwritten by themes.
     if [[ -z ""$LS_COLORS"" ]]; then
@@ -52,3 +70,5 @@ ZSH_THEME_GIT_PROMPT_DIRTY=""*""              # Text to display if the branch is d
 ZSH_THEME_GIT_PROMPT_CLEAN=""""               # Text to display if the branch is clean
 ZSH_THEME_RUBY_PROMPT_PREFIX=""(""
 ZSH_THEME_RUBY_PROMPT_SUFFIX="")""
+
+unset g_lscolors
```

[theme-and-appearance.zsh.diff.zip](https://github.com/ohmyzsh/ohmyzsh/files/4044101/theme-and-appearance.zsh.diff.zip)

I think it's better to refactor the whole logic.

Anyway, I'm sharing my code here because if may help when someone try to refactor the whole code.
--
",,,,,,
6057,OPEN,extending HYPHEN_INSENSITIVE setting to cover more use cases,Area: core; Topic: completion,2019-04-07 18:11:02 +0000 UTC,gasparch,Opened,,"While changing from tcsh I found file completion configured by oh-my-zsh unfamiliar and inflexible.
Turns out that zsh provides huge flexibility in matching and expanding, but it requires digging into murky parts of documentation and lot's of experiments.

Should we make it easier with some predefined completion levels with increasing levels of flexility/greediness? If yes - I'll file PR with following changes. 

cc @mcornella @Gravemind @forivall 

Also tell me test cases which you would like to work on each level, so I'll test how it can be expressed in zsh completion logic.

FUZZY_COMPLETION=0 - to behave like HYPHEN_INSENSITIVE=false
FUZZY_COMPLETION=1 - to behave like HYPHEN_INSENSITIVE=true (big-file can be completed by big_file, but no fuziness)

For next levels imagine there is a directory with those files
```
another_file
any-big_file.sh
attributes.sh
```

FUZZY_COMPLETION=20 - to allow pattern matching 
- `a-b-f` or `a_b_f` competed by `any_big-file`
- `a-f` matched by `another_file`, but not the `any_big-file.sh`
- `a.sh` completed by `attributes.sh` and on next tab - by `any-big_file.sh`
FUZZY_COMPLETION=30 - to allow greedy pattern matching
- `a-b-f` competed by `any_big-file.sh`
- `a-f` matched by `another_file` and `any_big-file.sh`
- `a.sh` completed by `attributes.sh` and on next tab - by `any-big_file.sh`

Level 2 feels mostly like tcsh behavior with `set complete = enhance` options set.

FUZZY_COMPELTION=100 - to allow fully fuzzy completion as sugessested in [here](http://stackoverflow.com/a/25556544/6465543)


",,,,,,,,,,,,,,
5971,OPEN,Please declare global variables as such,Enhancement,2019-04-07 13:33:10 +0000 UTC,madduck,Opened,,"Please use `declare -g` on variables that you want to be global, so that users of `setopt warn_create_global` can use omz without countless warnings like

    /home/madduck/.zsh/oh-my-zsh/oh-my-zsh.sh:14: scalar parameter ZSH_DISABLE_COMPFIX created globally in function sourcedir

etc.",,,mcornella,"
--
`warn_create_global` shouldn't be used in an interactive session. That said, when we abide to a more strict code styling guidelines this will be thought of.
--
",,,,,,,,,,
5804,OPEN,gnu coreutils theme conflict,Area: core; Enhancement,2020-03-12 15:20:21 +0000 UTC,OAuthBringer,Opened,,"I've been using oh my zsh for probably about three years now, and I recently updated to sierra.  My shell config is version controlled and it installs fine, but when I installed `coreutils` via `brew` and overwrote the default OSX utils  I lost all of the zsh LS configuration.  

I know that the `gdircolors` > `dircolors` conversion is the culprit, but I'm unsure of how to work around it.  Any advice?  




",,,aespinoza,"
--
I have this problem as well.
--
",Thrilleratplay,"
--
@neolytics Ugh, that has been annoying me for a while and thank you for figuring out the culprit is `dircolors`.  

~~I was able to fix this by aliasing gdircolors~~

EDIT:  It looks like that only worked because I ran `source ~/.zshrc` afterwards.  Adding `source $ZSH/oh-my-zsh.sh` to the end of zshrc is a permanent hacky solution:
```bash
echo 'source $ZSH/oh-my-zsh.sh' >> ~/.zshrc && source  ~/.zshrc
```


--
",mcornella,"
--
You could alias gdircolors before the source OMZ line.
--
",,,,,,
5721,OPEN,The git plugin has too many aliases,Discussion; Plugin: git; Topic: alias,2020-07-26 19:53:39 +0000 UTC,mcornella,In progress,,"This is a recurring sentiment:

https://twitter.com/RaymondGulbr/status/808964779121475585:
![screenshot of Raymond Gulbrandsen's tweet](https://cloud.githubusercontent.com/assets/1441704/21396621/2713d72e-c7a1-11e6-8504-f476a6519d20.png)

https://github.com/robbyrussell/oh-my-zsh/issues/3288#issuecomment-145481037
https://github.com/robbyrussell/oh-my-zsh/issues/3288#issuecomment-267463829
https://github.com/robbyrussell/oh-my-zsh/issues/3682#issuecomment-78437079

This has many harmful side-effects, mainly added commands (some of which are destructive and at one keystroke). Some aliases also might override installed commands, which then need to be selectively disabled or renamed. There is #4585 pending but no closer to being merged.

Meanwhile, more and more people want to add their own little alias, without thinking about the added benefits or costs to the common interest.

One possible fix for that is having bundles of aliases for specific workflows, such that if certain git commands are used together very frequently we alias them and group these aliases into specific functions or if branches. For example, if one does not use commit signing regularly, not having that be there by default.

This is a discussion issue and it is in a very early stage, so we're quite far from a PR fixing this.
What other solutions can you think of?",,,obcilion,"
--
I'd be fine with removing all but the most common ones (add, status, branch etc.) and letting users define their own after that. Having bundles is also a good idea, but how would installing of alias bundles be managed?
--
",mcornella,"
--
My thinking is maybe adding some configuration variables, like `$GIT_PLUGIN_USE_SIGNING`, and having one for each bundle of aliases. The user would then set up these configuration variables in their zshrc file.

Another option would be to have multiple functions that define such aliases, and again, the user would call them in their zshrc files. 

I'm open to other suggestions and I'll think about other options we may have. But yes, many aliases could be purged from the main plugin and leave only the absolute necessary.
--
",muesli,"
--
I was getting rather annoyed by all kinds of ""random"" aliases defined on my system by various oh-my-zsh plugins, so I went ahead and separated the aliases from the plugins for the git and golang plugin at least.

See here:
https://github.com/muesli/oh-my-zsh/commit/9db77ac56f01458ea8aad30d75aa2a885cd5c345

This allows you to load aliases separately in your .zshrc:
aliasdefs=(golang)

--
",shinenelson,"
--
I'd prefer just segregating them into multiple plugins based on their usage. (Just my 2 ¢)
--
",noraj,"
--
`gm` alias is problematic when using **Graphics Magick**, this is the name of the main command, see http://stackoverflow.com/questions/29452564/git-fatal-error-when-using-graphics-magick-convert-command. I also said that [here](https://github.com/robbyrussell/oh-my-zsh/issues/6832#issuecomment-390722815).

Any solution to remove those useless aliases but keeping plugins ?
--

--
As I said in #5115. The solution is easy. oh-my-zsh should provide a switch to disable the aliases. No need to remove them.
--
",iMouath,"
--
There's also some dangerous commands that should **not** be aliased.
example:

```
**gpristine='git reset --hard && git clean -dfx'**
grh='git reset'
grhh='git reset --hard'
groh='git reset origin/$(git_current_branch) --hard'
gunwip='git log -n 1 | grep -q -c ""\-\-wip\-\-"" && git reset HEAD~1'
```


--
"
5708,OPEN,"Please; add support of "" "" and ' ' text objects to vi-mode plugin",Area: plugin; Topic: bindkey,2020-03-12 15:18:58 +0000 UTC,srghma,In progress,,"And many others text objects as I assume
I cant do `ci""`

zsh 5.2 (x86_64-unknown-linux-gnu)
oh-my-zsh-git r4257.26aae6b-1
",,,srghma,"
--
And how to make `set clipboard=unnamedplus` for vi-mode? :smile: 
--

--
@okapia, That must be added in vi-mode
--

--
@okapia , and I'm already using it, great thanks, I just had noted the obvious
--

--
Thanks @yangmillstheory 
--
",okapia,"
--
Note that the commands for enabling that text object are at the top of Functions/Zle/select-quoted. You can use them in `.zshrc` regardless of what the vi-mode plugin does:

```
     autoload -U select-quoted
     zle -N select-quoted
     for m in visual viopp; do
       for c in {a,i}{\',\"",\`}; do
         bindkey -M $m $c select-quoted
       done
     done
```
It'll also work for other characters if bound appropriately, e.g. i: i+ a. a, etc
You might also want to look at Functions/Zle/select-quoted and select-word-match (new in zsh 5.3).
--

--
@BjornMelgaard: yes, it _ought_ to be added but I'm not an oh-my-zsh contributor so can't do that for you. I'm just trying to be helpful by pointing out _what_ would need to be added and that you can use it directly from your `.zshrc` as a (hopefully) short-term solution.
--
",yangmillstheory,"
--
I found a snippet that I'm including in my own patched `vi-mode.plugin.zsh` [here](https://www.linux.org.ru/forum/general/12280266) (need to translate the page). Looks like https://github.com/robbyrussell/oh-my-zsh/issues/5708#issuecomment-271066670 will only work for quotes, not brackets.
--
",softmoth,"
--
By the way, this is supported in the [vim-mode](https://github.com/softmoth/zsh-vim-mode) plugin add-on.
--
",,,,
5661,OPEN,Autocomplete for path components separated by dash stopped working,Area: core; Topic: completion,2019-04-07 17:26:23 +0000 UTC,grossws,Opened,,"Current `master` (`3477ff25274fa75bd9e6110f391f6ad98ca2af72`) lacks of previosly working function which allowed autocompletions of things like `cd do-re<tab>` to `cd docker-repo` (for existsing directory `docker-repo`, of course). I'm not sure if it worked with things like `do_re -> docker_repo`.

If path components are separated by `/` it works as expected: `cd an/pr<tab>` becomes `cd ansible/project1` (for existing directory structrure `ansible/project1`).

Steps to reproduce:
- `mkdir -p docker-repo`
- `cd do-re<tab>`
- nothing happens

Expected:
- `cd do-re<tab>`
- expands to `cd docker-repo`.",,,kevin,"
--
No news on this? I really miss this feature, but not sure if it was intentional or a bug.
--
",,,,,,,,,,
5598,OPEN,repo plugin doesn't complete multiple projects for 'repo forall',Area: plugin; Enhancement; Topic: completion,2019-04-06 16:15:01 +0000 UTC,,Opened,,"I expected 'repo forall' to assume directory name completion until I do -^I. Instead, only the first name is completed and zsh assumes option completion afterwards.",,,,,,,,,,,,,,
5560,OPEN,Recent completion changes don't allow fuzzy matching,Topic: completion,2019-04-08 20:58:26 +0000 UTC,rodfersou,In progress,,"For now there is this workaround that seems to work for everybody: https://github.com/robbyrussell/oh-my-zsh/issues/1398#issuecomment-255596509. Have a look and report any issues.

Related: #1398 #5435.
─ @mcornella

---

When I try to change directory:

```
$ cd /s/s.s.l <tab>
```

I expect that it completes as:

```
$ cd /srv/sc.social.like
```

but it is not working.. I  don't know where to check this bug.. it worked fine in my old ubuntu, but this week I start using arch linux, and this bug is driving me crazy..

omz-debug.log
*REDACTED*
",,,mcornella,"
--
This will be the issue to track this problem, for everybody that has it. So please subscribe for updates.

--
",rodfersou,"
--
@mcornella the workaround didn't work for me.. is it possible to explain what commit start the mess? I didn't find it

--

--
nevermind.. I could add the workaround now! thanks

--
",jalexvig,"
--
A workaround from [this post](https://superuser.com/a/815317/686936):

Add the following to your `.zshrc`

```zsh
# 0 -- vanilla completion (abc => abc)
# 1 -- smart case completion (abc => Abc)
# 2 -- word flex completion (abc => A-big-Car)
# 3 -- full flex completion (abc => ABraCadabra)
zstyle ':completion:*' matcher-list '' \
  'm:{a-z\-}={A-Z\_}' \
  'r:[^[:alpha:]]||[[:alpha:]]=** r:|=* m:{a-z\-}={A-Z\_}' \
  'r:|?=** m:{a-z\-}={A-Z\_}'
```
--
",,,,,,
5486,OPEN,git_prompt_status is slow on cygwin,Area: theme; Bug; Performance; Platform: Windows,2019-04-10 10:04:04 +0000 UTC,TheDauthi,In progress,,"git_prompt_status is rather slow on cygwin, and on other platforms where spawning a subshell is slow.
Two cases:
(first, just calling the function, second is inside a fresh linux kernel tree. )

```
TheDauthi@Hera:~$ time (git_prompt_status)
( git_prompt_status; )  0.21s user 0.41s system 97% cpu 0.636 total
TheDauthi@Hera:~/Projects/linux$ time (git_prompt_status)
( git_prompt_status; )  2.41s user 9.50s system 228% cpu 5.216 total
```

(Not much we can do about the second one, it's due to the slowness of the git status itself)
Identical setup on linux:

```
billyconn@Hades:~$ time (git_prompt_status)
( git_prompt_status; )  0.00s user 0.01s system 16% cpu 0.047 total
billyconn@Hades:~/Projects/linux$ time (git_prompt_status)
( git_prompt_status; )  0.06s user 0.08s system 85% cpu 0.173 total
```

Tracking this down, it's the spawning of the greps (which is no shock; cygwin emulation of fork is well-known, and grep is somehow particularly slow).  I rewrote this function to use zsh builtins and an ugly bit of sed instead of spawning greps:

Cygwin:

```
TheDauthi@Hera:~$ time (git_prompt_status)
( git_prompt_status; )  0.07s user 0.04s system 117% cpu 0.102 total
TheDauthi@Hera:~/Projects/linux$ time (git_prompt_status)
( git_prompt_status; )  2.30s user 8.75s system 241% cpu 4.567 total
```

It's faster on linux, too, but linux was already fast:
Linux:

```
billyconn@Hades:~$ time (git_prompt_status)           
( git_prompt_status; )  0.00s user 0.00s system 0% cpu 0.008 total
billyconn@Hades:~/Projects/linux$ time (git_prompt_status)
( git_prompt_status; )  0.06s user 0.09s system 104% cpu 0.137 total
```

https://github.com/TheDauthi/git-prompt-status

I didn't make a pull request; this is in a frequently-used lib so I didn't want to touch it without testing, if there's even interest in using a modified version.  I wrote a FEW tests (they're in the test directory), but will try to add more.  I also would like to know if/how you typically integrate tests, as what's there is just something I hacked up in a couple of hours.

Not sure how the command works on OSX yet, don't have a machine to test on until Monday.  I suspect that the sed statements will need to be re-quoted.  Wanted to gauge interest and get feedback before continuing.
",,,mcornella,"
--
Feel free to make a PR, I'm all for using all zsh builtins. Thanks! 

--
",igitur,"
--
Was this ever PR'ed / merged?
--

--
Ok, thanks. Bit of a side question: how did you track down the cause of the slow prompt? Even after using your sed-based version, my prompt it still slow and I suspect it's the damn corporate anti-virus. But I need a way to verify that.
--

--
@TheDauthi Yes, I'm on babun (cygwin + extras). Turns out it was the anti-virus. It does a real-time scan for every fork, which exacerbates the issue. Thanks for your help.
--
",TheDauthi,"
--
I made a PR, but it was never merged.

There's also a sed-based version in that linked repo. It's even faster (another multiple) because it only counts unique status lines. But I never got around to testing it on BSD platforms, and it doesn't use ZSH builtins.
--

--
I started out by looking at the outputs of `echo $PROMPT`, `echo $RPROMPT`, `echo $RPROMPT2` and `echo $PROMPT_COMMAND`. That shows what functions are being called before/after each prompt. Testing each function separately using `$(function-name)` will show which one is taking its time. From there, it's just a matter of taking apart the functions individually.

If you're on Cygwin, I'd give it an 98% chance of being extra subshells or commands (especially grep) being executed. Forking and running commands (including subshells) is extremely slow on cygwin, because it's not really forking, it's creating a process and then cloning the previous command's entire data segment, stack, heap, etc. manually into the new process. The Windows kernel itself does support forking, but that functionality isn't exposed to the win32 subsystem.

If you're on another environment, the only real things I've seen used that killed performance in a prompt was a plugin function that scanned and parsed the history file and rewrote it after every command and one that was trying to do a git fetch after every one.
--

--
That's interesting. I'd suspect that with the extra work with the anti-virus, the pure-shell-parser version would be the faster one.  That means that the sed one should be faster in some cases, but the pure shell one would be a more consistent improvement.

Too bad we need the 'stashed' status, or we could cut the number of forks in half. On Cygwin, it might actually be better iterating up the directory tree for that status, looking for .git/refs/stash, since we don't care about anything other than whether there is a stash or not. But that change would be better served by a plugin, since it's a Cygwin-only hack.

**EDIT**: @igitur the other issue you linked to is exactly what caused me to write this. I also use babun and had switched to the theme I normally use from Linux.
--

--
#5531. 

It also provides more data for someone to use if someone wanted (the count of each type of modification), and would be trivially easy to change the order. There's no extra work being done, it's just a side-effect of how it's being counted now.

I'll be happy to fix any problems found. It's been tested somewhat (linked repo), but that's no guarantee that I didn't miss anything.
--

--
1. Agreed. But there is also significant overhead for the fork itself. You can see what the performance looks like for each portion by running the tests, as one set of tests actually cuts out the git status portion entirely and replaces them with fixture data. When running on real-world git repos, the git portion was faster than the other overhead for small repositories, but grew much slower as the size increased. The PR improves on that problem too, by eliminating all but one of the git status calls. git status itself does not seem to have any hooks, as it's not a modifying request. I could be wrong, in which case I'll go look at the source to see if there's any way of skipping the hook, like there is for committing.

2. Agreed, but this change does not have that functionality. That is already in a different function. There is also one other reason to not check .git for data that I've never seen used in real life: it's possible to change where the .git directory goes (ie, it's possible to move it outside the repository root directory). I'm assuming that's functionality that's used for read-only/network/ancient filesystems. This is the reason I did not iterate upwards to check for a stash: I did not want to break existing behaviour, even if it's in an edge-case. I actually had to research to see if this was possible when I wrote the code, as my original attempt did exactly what you are suggesting.

3. Problematic. First: this function is used in several other places (including themes not shipped with oh-my-zsh), which means we really can't change the exposed portions without breaking backwards-compatibility for other people. Second: all of the data is coming from the same git command; duplicating it would negate the goal and works against your first point. I could pass the data over to a separate function to parse the status line, and considered that, but... well, I'm lazy and didn't think it cleaned things up much more. I agree with that they _should_ be separate, if for no other reason than to allow people to put them in different locations in their prompt.

4. We should use --porcelain to ensure this functionality doesn't break in the future (non-porcelain text can be changed, though it rarely is). I'm aware I'm not using it for stashed - I might want to revisit that, it was just laziness on my part. I _should_ test the other flags to see if it improves speed on large repos on Cygwin. I mostly didn't because I was keeping previous behaviour again, but if it increases speed without changing functionality, I'm all for it.
--

--
It's different code and does a different thing, but possibly the same underlying problem. We're a bit off topic here, but your point is valid and should be noted for anyone coming across the problem: for a large codebase (or a very slow filesystem), anything calling git status underneath may be slow. I've seen several attempt to fix that, from trying to kill the git status process after a timeout to caching the output. I don't think any of them have been successful yet. I think the current suggestion is to use `git config --add oh-my-zsh.hide-status 1` in any slow git repository to make oh-my-zsh ignore building the status for that particular directory.
--
",robbyrussell,"
--
@TheDauthi could you link to your PR for me?
--
",iegik,"
--
1. On `git status` there are hooks lounched and checks for EOL /whitespaces and so on. In Windows there is some troubles with `core.autocrlf`. So, if You have large project, git will check each file state.... it will be a lot of resource usage.
2. The main feature (light one) is detecting branch name. It can be done with parsing content of `.git/HEAD`. Easy.
3. I think getting state of uncommited files and getting branch/pushed content history state should be seporate process.

Also checkout https://gist.github.com/sindresorhus/3898739.
--

--
Actually, my shell was freezing because of Russel's theme of zsh on function `git_prompt_info` (I guess it is same as `git_prompt_status`). I've to disable git plugin and also `$PROMPT` variable.
--
",CiderAndWhisky,"
--
I have the same proplem here - Win10, Ubuntu Subsystem, Oh-My-Zsh:
time (git_prompt_status)
--> ( git_prompt_status; )  0.05s user 6.73s system 253% cpu 2.674 total

This is on an i7 with an ssd, however the git repo resides in /mnt/d/..., so this is on an NTFS device, not the virtual extfs used by the bash.

Any ideas except hide-status?
--

--
My current work-around: Comment the line ""prompt_git"" at the very end of the agnoster theme (~/.oh-my-zsh/themes/agnoster.zsh-theme) - Snappy as hell, but no branch info any more. :-/
--
"
5405,OPEN,Opening files with emacsclient; creates a second frame...,Area: plugin; Bug,2020-04-04 07:33:33 +0000 UTC,jakobadam,Opened,,"When I open files with `e` from the command line emacs opens a second frame. Why not open the file in the main frame? 

https://github.com/jakobadam/oh-my-zsh/blob/master/plugins/emacs/emacsclient.sh#L8

kind regards,
Jakob
",,,PrestanceDesign,"
--
Hi,

I have the same issue.
@jakobadam Have you found a solution ?
--
",lbolla,"
--
I would like this merged, too.
--

--
With one frame:
``` » emacsclient --eval '(frame-list)'
(#<frame emacs26@lbolla-Latitude-7490 0x142ec30>)
```

With no frames:
```
~ » emacsclient --eval '(frame-list)'
(#<frame F1 0xc947b0>)
```
--

--
This is still bugging me. Also, given the number of people that have forked `ohmyzsh` just to fix the emacsclient.sh function that checks for the existing frames I think it would be worth to make it configurable.
E.g.:
```
_emacsfun()
{
    # get list of emacs frames.
    frameslist=`emacsclient --alternate-editor '' --eval '(frame-list)' 2>/dev/null | egrep -o '(frame)+'`

    if [ ""$(echo ""$frameslist"" | sed -n '$=')"" -ge ${EMACS_FRAMELIST_MAX:1} ] ;then
...
```
Users could set `EMACS_FRAMELIST_MAX` to whatever they like, to indicate how many frames they want max (and open in existing frames otherwise).
--
",mimischi,"
--
I experience a related problem: If `emacs` is opened by anything like `sudo -e`, `yoaurt` or whatever other process, it will open a new frame.

Running `e foo.bar` opens the file `foo.bar` in the same expected main frame for me (so it is not exactly the problem mentioned here?)

Both `$VISUAL` and `$EDITOR` are set to `emacs` and the latter is:

```bash
$ which emacs
emacs: aliased to /home/mischi/.oh-my-zsh/plugins/emacs/emacsclient.sh --no-wait
```

## Update (Resolved)

Well I'm stupid. For whatever reason, I set `EDITOR` and `VISUAL` to `emacs` in my `.zshrc` (as mentioned above). Unsetting those resolves my problem.

--
",mcornella,"
--
This was recently fixed.

EDIT: it wasn't. Now it really is.
--
",akinnane,"
--
@PrestanceDesign or @lbolla are you able to run `emacsclient --eval '(frame-list)'` with no emacs frames created and then with a frame created. Can you add the output of those commands to this ticket, please?
--
",jokuha,"
--
This is to describe the problem on Emacs Mac (https://bitbucket.org/mituharu/emacs-mac, installed through MacPorts as emacs-mac-app), to ask for a solution, and to support the suggestion of @lbolla to let the user set EMACS_FRAMELIST_MAX before opening a new frame – at least, as a intermediate workaround.

Indeed, using this current GNU Emacs the expected default number of frames is wrong. Here, there's always one frame open:

Emacs version:
```
± emacsclient --eval '(version)'   
""GNU Emacs 26.3 (build 1, x86_64-apple-darwin19.3.0, Carbon Version 162 AppKit 1894.3)\n of 2020-03-24""
```

Output of frame-list with 1 and 2 frames open:
```
± emacsclient --eval '(frame-list)'
(#<frame hostname: *Messages* 0x10a28c438>)
± emacsclient --eval '(frame-list)'
(#<frame hostname: *Messages* 0x116855e30> #<frame hostname: *Messages* 0x10a28c438>)
```
Trying to close the last frame results in `funcall-interactively: Attempt to delete the sole visible or iconified frame`
Running the test command with the sole frame iconized (minimized) yields one frame but without a buffer specified
```
± emacsclient --eval '(frame-list)' 
(#<frame Emacs@hostname 0x10a28c438>)
```
But even in the last case I do not want a new frame, I want this iconized frame to be used and made visible – which is what the emacsclient command does automatically already.
--
"
5186,OPEN,Prefix/suffix names of virtualenv prompt info,Area: plugin; Feature,2020-03-12 15:25:08 +0000 UTC,xueruini,Opened,,"According to the naming convention for other plugins, the prefix and suffix names for virtualenv should be `ZSH_THEME_VIRTUALENV_PROMPT_PREFIX` and `ZSH_THEME_VIRTUALENV_PROMPT_SUFFIX`, respectively, instead of `ZSH_THEME_VIRTUAL_ENV_PREFIX` and `ZSH_THEME_VIRTUAL_ENV_SUFFIX` as in:
https://github.com/robbyrussell/oh-my-zsh/blob/master/lib/prompt_info_functions.zsh#L13-L15
",,,,,,,,,,,,,,
5115,OPEN,Git plugin gm alias interferes with GraphicsMagick tool.,Plugin: git; Topic: alias,2021-01-02 20:21:19 +0000 UTC,czAdamV,Opened,,"As title says. GraphicsMagick cannot be used with git plugin enabled, because it uses ""gm"" as a name for its binary (at least when using the one from Arch repository).
",,,benjaoming,"
--
Agreed, could it me moved to `gmg` ?

Solution, add this to your `.zshrc` (adjust accordingly)

```
alias gm /usr/bin/gm
```

--

--
@mcornella 

I would rather try an approach like this in `.zshrc`:

```bash
for alias in $ALIASES_KNOWN
do
    which_alias=`which $alias`
    if ! [ ""$which_alias"" == """" ]
    then
        echo ""WARNING: Overwriting $alias, was assigned to: $which_alias""
    fi
done
```

(sorry for pseudo-coding that)

Another approach: After aliasing, you can also do `which -a $alias` and check if that returns more than one line and raise a warning.
--

--
Here is a better version of the previos pseudo-code, use it to check if an alias is overwriting existing executables in your PATH:

```bash
alias | while read alias
do
    alias_base=`echo ""$alias"" | tr ""="" ""\n"" | head -n 1`
    which_alias=`which ""$alias_base""`
    if ! ( echo ""$which_alias"" | grep -q ""aliased to"" ) && ! (echo ""$which_alias"" | grep -q ""\!"")
    then
        echo ""WARNING: Overwriting $alias_base, was assigned to: $which_alias""
    fi
done
```
--
",axe312ger,"
--
Same for OSX + brew

Just add this alias as @benjaoming recommends:
```
alias gm=/usr/local/bin/gm
```
--
",noraj,"
--
Ref for issue linking: https://github.com/robbyrussell/oh-my-zsh/issues/6832#issuecomment-390722815 https://github.com/robbyrussell/oh-my-zsh/issues/5721#issuecomment-290924482

Have you a wait to disable all git aliases without removing the git plugin?
--

--
@mcornella 

> Have you a wait to disable all git aliases without removing the git plugin?

So I have to manually put `unalias` with all git aliases manually in my `.zshrc`? This is not a solution but a workaround.

Nobody is asking for removing those aliases but only to provide a way to disable them for those who don't need them and have conflict.

Please re-open the issue.
--

--
Also there was #1432 #4900
--

--
@mcornella That's very useful.
But I hope there will be a fix one day. Else it is config at each install and make zshrc heavy.
--
",mcornella,"
--
We can't rename or remove aliases since that breaks people's workflow. The whole purpose of having aliases in a plugin is that they simplify their work, and a `gm` alias for `git merge` is one that will be very frequently used. The only solution is to delete those aliases with `unalias`: `unalias gm`.
--

--
For now, a shortcut to disabling most of the aliases created by the git plugin:
```
unalias ${(k)aliases[(R)git *]}
```
This `unalias`-es all the aliases to commands starting with `git `, meaning if you've aliased other git commands those will be gone too. There may be other git aliases left out too (check with `alias | grep git`).
--

--
Here's a script that shows which aliases shadow an installed command.
```zsh
function alias_conflicts() {
  local alias value
  for alias value in ${(kv)aliases}; do
    if (( ${+commands[$alias]} )) && [[ ""$value"" != (|noglob |command |\\)${alias}* ]]; then
      echo ""Conflict: alias $alias ('$value') <-> command $alias ('${commands[$alias]}')""
    fi
  done
}
```

This is what it returns in my system, for example:
```console
$ alias_conflicts
Conflict: alias gm ('git merge') <-> command gm ('/usr/bin/gm')
```

Note that this ignores aliases of the same name than the command they're aliasing (`alias ls='ls --color=auto'`, for example).

You can go further than that and automatically `unalias` them in the same if condition:
```zsh
function alias_conflicts() {
  local alias value
  for alias value in ${(kv)aliases}; do
    if (( ${+commands[$alias]} )) && [[ ""$value"" != (|noglob |command |\\)${alias}* ]]; then
      echo ""Conflict: alias $alias ('$value') <-> command $alias ('${commands[$alias]}')""
      unalias $alias
    fi
  done
}
```
--
",kimown,"
--
It's stupid to enable git plugin by default, `zsh-autosuggestions` plugin is more important than `git`
--
",,
5066,OPEN,git: parse_git_dirty is too slow,Area: core; Area: theme; Performance,2021-01-08 18:27:51 +0000 UTC,robertfoss,Opened,,"When opening folders that contain large git repositories, like the linux-kernel, git_prompt_info and parse_git_dirty take >3 seconds to run.

Waiting >3 seconds is pretty much unacceptable.
Either adding a flag for disabling slow git functionality or removing slow functionality altogether are acceptable alternatives to me.

Currently I'm using a work-around: https://gist.github.com/msabramo/2355834
But since oh-my-zsh auto-updates over git I'm going to have merge conflicts/my changes disregarded.
",,,ccharlton,"
--
Ditto. 

--

--
I'd be fine with even having it's update frequency not be every second, but every XX seconds.

--

--
Yep, my change list is usually fairly small too so this would be nice to get boosted.
--
",Braunson,"
--
Having the same issue, there's < 30 changes in my Git Repo :(
--
",iainp999,"
--
I'm having the same issue, again with a small number of local changes in the git repo.

Made local modifications to workaround for now but using a plugin manager, so changes would be wiped out on next update :(
--
",davidhcefx,"
--
You can limit the git command with a timeout, for example:
https://github.com/ohmyzsh/ohmyzsh/blob/f6bc949c05fd18ee557a89c92f82ff556200707d/lib/git.zsh#L7-L11

```diff
-   GIT_OPTIONAL_LOCKS=0 command git ""$@""
+   GIT_OPTIONAL_LOCKS=0 command timeout 1s git ""$@""
```
--
",mcornella,"
--
Note that you can disable `parse_git_dirty` per-repository with `git config oh-my-zsh.hide-dirty 1`, or making that global to disable it for all repositories.

But yeah, it should be made faster.
--
",basicdays,"
--
Having this issue as well. @mcornella idea of the git config option to disable this feature works as a workaround on my end though thankfully.
--
"
5038,OPEN,git plugin startup time on large local clones,Area: plugin; Performance; Plugin: git,2020-03-12 15:23:54 +0000 UTC,valentinrusu-movidius,Opened,,"hello,

here at work I have local clones of our quite large git repo (more than 20 kfiles). upon starting-up, i use tmux continuum to restore my tmux sessions and inside them there are several zsh shells. some of these shells CWD are in the local clones directories. while restoring, the computer hangs making I/Os and I cannot use any shell terminal during this period. even if i'm using kernel-ck, with the I/O scheduler enhanced, my session would stuck for 3..5 minutes during this startup sequence. i'm using i3wm, so my session usually opens-up really fast. i traced-down my start-up latency into git zsh plugin and when removed, the startup time is ok.

is it possible for this plugin to perform it's initialization in an async manner?

thanks,
",,,,,,,,,,,,,,
5013,OPEN,case insensitive tab completion fails with üöä/ÜÖÄ,Topic: completion,2019-11-06 20:26:39 +0000 UTC,marcwil,Opened,,"The case correcting tab completion does not work for 'umlauts'/'Umlaute'.

Reproducible example:
- create directory named e.g. Übung
- type in ü and the press TAB
- expected behaviour: Übung is one of the matched directories

EDIT:
I am sorry if this is an error of zsh and not of oh-my-zsh
",,,jfrankenau,"
--
Rules for matches in zsh completion are defined by `matcher-list`. Try the following and take a look at `lib/completion.zsh`.

```
zstyle ':completion:*' matcher-list 'm:{a-zA-ZÄÖÜäöü}={A-Za-zäöüÄÖÜ}' 'r:|[._-]=* r:|=*' 'l:|=* r:|=*'
```

I am not using oh-my-zsh myself but had the same issue.

EDIT: Actually, scratch that. It does not work.

--
",,,,,,,,,,
4951,OPEN,virtualenvwrapper.plugin.zsh does not support tmux and pyenv together,Area: plugin; Bug,2020-04-10 02:57:46 +0000 UTC,oskargicast,Opened,,"Hi,

I started using pyenv with [pyenv-virtualenvwrapper](https://github.com/yyuu/pyenv-virtualenvwrapper) an it works like a sharm with this plugin.

The problem comes when I try to use tmux. For example, when I run this:

``` shell
$ tmux new -s session_name
```

I get `[exited]` as response:
![screenshot from 2016-03-27 19 16 05](https://cloud.githubusercontent.com/assets/1572530/14068672/77b70d74-f450-11e5-817b-b0d003606003.png)

I realized [this line](https://github.com/robbyrussell/oh-my-zsh/blob/master/plugins/virtualenvwrapper/virtualenvwrapper.plugin.zsh#L7) in the plugin makes tmux exits automatically:

``` shell
source ${${virtualenvwrapper}:c}
```

I could start tmux in my zsh config file. Despite that, I can not start any other session so the usage of tmuxinator, for instance, is not possible :(

I really appreciate your help. This is a [link with of my dotfiles](https://github.com/oskargicast/shascii).

Thanks.
",,,trankchung,"
--
Had the same issue. Had to remove virtualenvwrapper from plugins to be able to use pyenv.
--
",propyless,"
--
Old issue, but I had this problem today and turns out it was due to asdf which  I use to manage different python version. The shims it creates wrappers for the binaries found in the python installations bin folder. So the shim looks like so.. and can't be sourced.

I just modified the oh-my-zsh virutalenvwrapper plugin with the paths to the actual virtualenvwrapper.sh script and that resolved the issue for me.

```
#!/usr/bin/env bash
# asdf-plugin: python 3.6.8
exec /home/propyless/.asdf/bin/asdf exec ""virtualenvwrapper.sh"" ""$@""
```

Not sure if you have the same issue still today/using asdf or something similar, but this was the cause for me :)

I don't use pyenv, but the problem might be similar with the shims? 

--
",awgymer,"
--
I think I may be having a similar issue. I am running on Mac Catalina 10.15.2.

I have installed `pyenv` via `homebrew` and then I used `pip` to install `virtualenvwrapper` using my `pyenv` python 3.8.2. I do not have `pyenv-virtualenv` or `pyenv-virtualenvwrapper` installed. 

When I added `virtualenvwrapper` to my plugins like so `plugins=(git pyenv virtualenvwrapper)` it caused my terminal to hang for a long time before giving me this:

```
Last login: Fri Apr 10 12:52:29 on ttys001
[Process completed]
```
--
",,,,,,
4916,OPEN,Num Pad can't input,Bug; Topic: bindkey,2021-01-20 11:19:41 +0000 UTC,mrgaolei,Opened,,"I'm using Mac + ZSH for developer and Gentoo + ZSH for server.
Both of those my Keyboard's num-pad can't input any char(1,2,3,4,5,6,7,8,9,0,.,=,/,*,-,+,enter)
But when I change to bash, those keys are OK.
In any other Applicatons, those keys are OK too.

I'm using Razer's BlackWidow keyboard.
",,,pmacey,"
--
I tend to add this to my `~/.zshrc` file:

```
# Keypad
# 0 . Enter
bindkey -s ""^[Op"" ""0""
bindkey -s ""^[On"" "".""
bindkey -s ""^[OM"" ""^M""
# 1 2 3
bindkey -s ""^[Oq"" ""1""
bindkey -s ""^[Or"" ""2""
bindkey -s ""^[Os"" ""3""
# 4 5 6
bindkey -s ""^[Ot"" ""4""
bindkey -s ""^[Ou"" ""5""
bindkey -s ""^[Ov"" ""6""
# 7 8 9
bindkey -s ""^[Ow"" ""7""
bindkey -s ""^[Ox"" ""8""
bindkey -s ""^[Oy"" ""9""
# + -  * / =
bindkey -s ""^[Ok"" ""+""
bindkey -s ""^[Om"" ""-""
bindkey -s ""^[Oj"" ""*""
bindkey -s ""^[Oo"" ""/""
bindkey -s ""^[OX"" ""=""
```

Manual: https://www.gnu.org/software/screen/manual/html_node/Key-Binding.html#Key-Binding
Source: http://superuser.com/questions/742171/zsh-z-shell-numpad-numlock-doesnt-work

--
",jbsmith7741,"
--
bindkey works nicely, but it would be nice to see it work natively.

--
",apjanke,"
--
Looks like the same thing as #2654. It's due to the whole smkx/rmkx thing, which you can read about in #2735.

#5113 should fix it and make it work ""natively"".

--
",petr7555,"
--
It was `bindkey -s ""^[Ol"" ""+""` with **l** instead of **k** for me.
--
",,,,
4898,OPEN,Vi-mode Plugin <c-j> Mapping,Area: plugin; Topic: bindkey,2020-03-12 15:18:58 +0000 UTC,chunleng,Opened,,"This happens in vi-mode, after `v (Vim edition)` mode is entered.

**Reproduced by**
1. Set insert or select mapping for `<c-j>` in vimrc
2. Go to terminal, escape to `normal` mode
3. Press `v`
4. Invoke `<c-j>` in insert mode.

vim: MacVim 7.4-97
The bug was found when using `<c-j>` for Ultisnips vim plugin
",,,,,,,,,,,,,,
4891,OPEN,Auto-complete broken for SSH hostname tab completions (_hosts_,Topic: completion,2017-12-06 09:21:51 +0000 UTC,varCharlie,In progress,,"_Edit: Sorry, I didn't search. I'm at work so I can't look through these at the moment, but I'm guessing my issue is somewhere in #4345 -- if so, I'll close this issue. If not, please link this issue to that tracker
## SSH Auto-Complete Issue

I'm hoping somebody else has encountered this issue as well. Recently, I'm not sure exactly when, the SSH hostname completion broke in Oh My ZSH (for me at least). I've verified that this is related to Oh-My-ZSH and not anything else.

Here's how it seems to happen.
1. _I open up an iTerm window and type:_
   `% ssh ftp.`
2. _I press tab to autocomplete the rest of the hostname.
   At this point, the terminal freezes and I am unable to type.
   The cursor keeps blinking. Everything else still responds._
3. _I press ctrl-c and receive this message:_
   `Killed by signal in _hosts after 45s`
4. _Once I've killed the signal in _hosts, tab completion will work fine...
   At least until I open up a new terminal and go through this again._
### Specs:
- iTerm 2.1.4
- Mac OSX 10.11.2
- zsh 5.2

```
❯❯ cat omz_diagdump_20160229-112219.txt                                      11:22AM
cat omz_diagdump_20160229-112219.txt
oh-my-zsh diagnostic dump

omz_diagdump_20160229-112219.txt

Mon Feb 29 11:22:19 CST 2016
Darwin mac-chapan 15.2.0 Darwin Kernel Version 15.2.0: Fri Nov 13 19:56:56 PST 2015; root:xnu-3248.20.55~2/RELEASE_X86_64 x86_64
OSTYPE=darwin15.0.0
ZSH_VERSION=5.2
User: charlespantoga
umask: 022
```

And my `.zshrc`:

``` zsh
# Oh-My-ZSH Location:
export ZSH=~/.oh-my-zsh

# THEME
ZSH_THEME='bluelight'

# ZSH Update Settings
DISABLE_AUTO_UPDATE=""false""
export UPDATE_ZSH_DAYS=3

# Terminal Settings:
DISABLE_LS_COLORS=""false""
DISABLE_AUTO_TITLE=""false""

# Completion/Correction:
ENABLE_CORRECTION=""true""
COMPLETION_WAITING_DOTS=""true""
HYPHEN_INSENSITIVE=""true""
CASE_SENSITIVE=""false""

# set for faster shell: DISABLE_UNTRACKED_FILES_DIRTY=""true""

# Hist Stamps:
HIST_STAMPS=""yyyy-mm-dd""

# ZSH Custom Folder:
# -- Not setting one uses default ~/.oh-my-zsh/custom
# -- this behavior is okay for us

# Plugins:
plugins=(
  vi-mode
  git
  brew
)

# Paths:
export PATH=""/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin""
#PATH=""$PATH:/opt/X11/bin:/usr/local/munki""

# Source Includes:
source $ZSH/oh-my-zsh.sh

# Use vi instead of emacs:
#set -o vi
# -- we've already set vi-mode

# Force use of `cd` to change dirs:
unsetopt autocd

# Use bash-like globbing
setopt nonomatch

# Include aliases:
if [ -e ~/.aliases ]; then
  source ~/.aliases
fi
# Include functions:
if [ -e ~/.funcs ]; then
  source ~/.funcs
fi
# Include variables:
if [ -e ~/.vars ]; then # currently no variables are set... leave anyway
  source ~/.vars
fi

# Load work specific shell options
if [ -f ~/.work ]; then
    source ~/.work
fi
```
",,,varCharlie,"
--
I should point out, this doesn't actually happen on my personal laptop. Just my work laptop.

--

--
This issue, compounded with the fact that ZSH array indexing starts at 1, has caused me to migrate back to BASH. It actually wasn't that hard to port the ZSH theme I made for ZSH back to BASH, and I'm working on my own completion now. It's not as good as ZSH completion was, but I'm just as productive now with BASH. Funny how that works out... So in a way, thank you for never solving this issue. 

--
",golimpio,"
--
It works on my Linux, but fails on my Mac:
- zsh 5.2 (x86_64-apple-darwin15.0.0)
- iTerm2 Build 2.9.20160324-nightly
- OS X 10.11.4
- zgen

--
",jamestaylr,"
--
I also get this all the time on both my work and personal machines (~Mac OS X 10.11.6). One is using iTerm2, the other is the regular Terminal.app.

This is a very annoying issue that is so easily reproduced, I'm surprised it hasn't been fixed yet.

--
",ileodo,"
--
it also happens on my Linux workstation when I try to autocomplete the path in NFS/DFS by using double-tab.
@robbyrussell 

--
",EugenMayer,"
--
Yeah this issue is probably one of the most annoying and distracting things with ZSH
--
",nickma82,"
--
Maybe a part of the globbing issue is mentioned at the [zsh-Readme](https://sourceforge.net/p/zsh/code/ci/master/tree/) ""Incompatibilities between 5.0.8 and 5.3"".
--
"
4877,OPEN,[FR] Add possibility for plugins to depend on other plugins,Area: core; Feature,2018-06-18 19:31:05 +0000 UTC,webknjaz,Opened,,"Hi,

It's similar to dependencies in *NIX package managers. What I mean is a way to declare plugin dependencies (other plugins), which should be automatically enabled if the plugin is used.

I think, it would be extremely useful feature. For example, there could be some user-defined 'virtual' plugins automatically enabling a bunch of others (i.e. plugin packs).

If you think it's a nice idea, I could implement this.

Warm regards,
Sviatoslav.
",,,,,,,,,,,,,,
4872,OPEN,"MobaXTerm ""xterm"" terminal - END; HOME; DEL keys not working",Topic: bindkey,2020-08-10 12:44:12 +0000 UTC,Lopson,In progress,,"I don't know if putting this up on this project is the right way to go, but when I searched for tickets in this git, I saw similar ones, so here goes.

I have a CentOS 7.2.1511 machine, with ZSH 5.0.2 installed. I have the latest version of oh-my-zsh installed, along with the plugin ZSH-Syntax-Highlighting.

To connect to this machine, I use MobaXTerm (latest version). I connect to the CentOS machine through SSH and present the terminal as being of the ""xterm"" type (the default option for this SSH client).

The standard HOME, END, DEL, etc keys don't work out-of-the-box. I don't know how to make a Terminfo file for this case, and it seems like I shouldn't be needing to come up with a new Terminfo in the first place, seeing as MobaXTerm truly is an xterm terminal.

As such, I'd like to hear from you on this matter: is there some kind of known bug with this specific ZSH version that impedes MobaXTerm from working as intented?

Thanks for your time.
",,,apjanke,"
--
This is an ongoing issue with key bindings and terminfo in OMZ. #3061 is probably closest to your issue, and has some detailed information. You can see various other Home/End key binding issues in the list in #4344.

Thought we had Home/End cleared up for most terminals. Check that the character sequences MobaXTerm is sending for Home and End match those in the `xterm` terminfo entry.

--

--
I grabbed MobaXterm and tried it out. It looks like in application cursor mode, it's sending the character sequences for the VT220 editing keypad Home/End keys (`^[[1~` and `^[[4~`) instead of the PC style Home/End keys like xterm does (`^[OH` and `^[OF`). So its behavior doesn't match the `xterm` terminfo entry, at least for those keys. OMZ currently sets up bindings that rely on the terminfo entry.

Eventually OMZ may be able to handle this automatically, but in the mean time you'll have to configure a workaround.

If you can configure MobaXterm to send the normal xterm sequences, that should fix it.

PuTTY does the same thing in one of its configurations. Have a look at #3757, which is specifically about PuTTY. As a workaround, you could add this in your `~/.zshrc` file.

```
bindkey '^[[1~' beginning-of-line
bindkey '^[[4~' end-of-line
```

--

--
And looking at the Help > About MobaXterm dialog, it seems like that may actually be an embedded PuTTY that they're using for the SSH client. Could be why the behavior is similar.

<img width=""656"" alt=""mobaxterm - about - annotated"" src=""https://cloud.githubusercontent.com/assets/2618447/13285733/4583cd8c-daca-11e5-9dc0-7997d3208119.png"">

--

--
Ah! In that case, you can try setting `$TERM` to `putty` instead of `xterm`. Many systems have a `putty` terminfo entry which has Home/End entries that match putty's default behavior.

```
$ infocmp -1 putty  | grep 'khome\|end'
    kend=\E[4~,
    khome=\E[1~,
```

--

--
There's a catch here: OMZ switches the terminal into ""application keypad"" mode when the ZLE command line editor is active, using terminfo's `smkx`. (This is so it can use portable terminfo-based key bindings.) This causes the cursor keys (up/down/left/right/home/end) to send different character sequences. It's switched back in to normal/local mode after line editing ends. So the key sequences that `showkey` is seeing for home and end may not (and usually shouldn't) be the same ones that the zsh command line editor is seeing. When [I tried out MobaXterm](https://docs.google.com/spreadsheets/d/1Ue5gb2hLjz058QEtEXwaw8YR7QoVZpSYzbXQKrRcGKk/edit#gid=0), it respected keypad mode switching, and gave `^[[1~`/`^[[4~` in application mode. Could you test that too?

Instead of `showkey`, try using Ctrl-v (""verbatim"") to see what sequences the keys are sending, without leaving the command line editor. Ctrl-v followed by another keystroke will just add the literal character sequence to the command line buffer, even if it's an escape or other control sequence.

Could also be that your setup is leaving the terminal in local cursor mode.

Maybe MobaXterm has their own documentation on configuring their terminal, though I didn't see much in my brief poking around at it.

(I wonder what version and configuration of Putty they're using. When I was doing that testing, I tested a few Putty configurations, and none of them gave `^[[H`/`^[[F`; the closest was `^[[H`/`^[Ow`. And it didn't respect keypad mode switches.)

--

--
Interesting.

Setting `$TERM` to whatever shouldn't affect this test – that should just change how programs interpret the character sequences, not what your terminal sends.

This makes me think that the ""terminal type"" setting in MobaXterm is affecting not just the `$TERM` it reports, but PuTTY's character sequence settings. Which makes sense: PuTTY can be configured in terms of what its cursor keys send to the server.

<img width=""465"" alt=""putty cursor keys annotated"" src=""https://cloud.githubusercontent.com/assets/2618447/13348037/28e31a04-dc3f-11e5-9ea5-0c6a43718c34.png"">

And in stock PuTTY, this is configured independent of the `$TERM` string that PuTTY defines for the server. This makes me think that maybe MobaXterm is conflating these things and presenting a simplified configuration sheet.

I dunno what to suggest you do right now. This really ought to be Not Your Problem.

To OMZ contributors: this looks to me like more support for ditching `[sr]mkx` and going with hacking in terminal-specific codes. Local-mode behavior is so much more regular.

> I don't really understand this smkx business, ...

Yeah, no reason you should. This is a bunch of historical stuff going all the way back to the sixties and the particular terminals that were built then. Sorry it's making your (and my) life harder.

--
",Lopson,"
--
MobaXterm is based on PuTTY, somehow. From their documentation page:

> MobaXterm features a great terminal emulator based on the efficient PuTTY program (by Simon Tatham).

I've sent them an e-mail a while back asking them about this specific matter, but I haven't heard back from them yet. I've taken a look at the files the program generates in its configuration folder, but I haven't found a way of changing the characters it sends when I press the aforementioned keys.

In its configuration folder, I managed to snag two relevant files. One of them is a terminfo file; another is a inputrc file. Hopefully, they'll be useful for something!

[https://drive.google.com/file/d/0Bwi2temj01hfaEdCNTZ3T24xWFU/view?usp=sharing](MobaXterm Files.zip)

--

--
While my system does have a proper terminfo entry for `putty`-type terminals, setting the terminal type to `putty` doesn't set the correct keybindings for `HOME` and `END`. However, the `DELETE` key is set properly.

Here's `showkey -a`'s output when pressing `HOME` and `END` by this order in MobaXterm:

```
» |root@Base 8:34:44| /root showkey -a
Press any keys - Ctrl-D will terminate this program

^[[H     27 0033 0x1b
         91 0133 0x5b
         72 0110 0x48
^[[F     27 0033 0x1b
         91 0133 0x5b
         70 0106 0x46
```

--

--
Just did the CTRL+V test on the same CentOS 7 machine I've been using thus far; got, yet again, `^[[H` for Home and `^[[F` for End. Again, much like in my last post, I set the terminal type to `putty`.

If I use the default `xterm` terminal type, I get `^[[1~` for Home, `^[[4~` for End, and `^[[3~` for Delete.

I don't really understand this `smkx` business, so I'm not entirely sure how to help you any further. If more data is required in order to help you guys out, just say what needs to be done and I'll get on it!

--
",fabceolin,"
--
Try to set terminal type = byobu in xmobaterm

--
",hiephm,"
--
Suggestion from @Lopson works for me. After using `showkey -a` and know the key code, I just put these lines to .zshrc and it works perfect:
```
# Fix MobaXterm Home/End key with ZSH
bindkey '^[[H' beginning-of-line
bindkey '^[[F' end-of-line
```

Edit: $TERM need to be `linux` or `putty` since `xterm` will not work.
--
",tldrblt,"
--
I tried the fix from @hiephm (my `showkey -a` results are the same as his), but: 

With `export TERM=putty`, my Home and End keys still don't work.
With `export TERM=linux`, my Home and End keys worked, but after every command I get the following error messages:

```
zle-line-finish:echoti:1: no such terminfo capability: rmkx
zle-line-init:echoti:1: no such terminfo capability: smkx
```

I am guessing the errors are talking about my OMZ prompt, which is:


```
PROMPT=""


%{$bg[white]$terminfo[bold]$fg[black]%} %D{%F %T %Z} %{$reset_color%} [%*]
%{$bg[white]$terminfo[bold]$fg[black]%}# \
%(#,%{$bg[yellow]%}%{$fg[black]%}%n%{$reset_color%},%n) \
@ \
%m %{$reset_color%} \
%{$fg[white]%}in \
%{$terminfo[bold]$fg[yellow]%}%~%{$reset_color%}\
${hg_info}\
${git_info}\
 \
 $exit_code
%{$terminfo[bold]$fg[red]%}$ %{$reset_color%}""
```


So I either need to 
1. Get Home and End keys working with `export TERM=putty` (How?), -or-
2. I need to edit my prompt so that it works with `export TERM=linux` (What needs to change?), -or-
3. I need to find a different value for $TERM that will work with Home and End keys AND custom prompt without errors (What are some other valid values for $TERM that I can try?).

Anybody have suggestions for these? I also tried `export TERM=vt100`, but results was same as `export TERM=putty`.
--

--
Thanks @goldeneye977 . Your AutoHotkey script works for me as well. My time in the terminal just got a little bit nicer thanks to you. Cheers.
--
",goldeneye977,"
--
I fixed the issue by using an [AutoHotkey ](https://autohotkey.com )script. I wrote a small script that if the active window is MobaXTerm's, change the Home/End keys to ""CTRL+A/CTRL+E"" respectively. Here's the script if anyone wants to try it out:

#If WinActive(""ahk_class TMobaXtermForm"") 
{
Home::    
   #UseHook Off
   Send ^A
   #UseHook   
   return

End::
   #UseHook Off
   Send ^E
   #UseHook   
   return
}
#If

--

--
BTW @tldrblt, the script has a minor issue. If u detach the MobaXTerm window, it's won't work there because the window's ahk_class changes. This can be fixed by using ""ahk_exe MobaXterm.exe"" instead. Hope that helps!
--
"
4763,OPEN,ssh-agent plugin symlink not usable with su on newer Linux kernels,Area: plugin; Enhancement,2020-01-02 22:19:43 +0000 UTC,agross,Opened,,"Reference: http://unix.stackexchange.com/questions/253959/

Newer Linux kernels (>= 3.6) support the `fs.protected_symlinks` `sysctl` and most distributions enable it by default (I checked with CentOS 7 and Fedora 23). The `fs.protected_symlinks` checks if a symlink and its _parent_ directory is owned by the same user as the one requesting access to the symlink target.

> When set to ""1"" symlinks are permitted to be followed only when outside
> a sticky world-writable directory, or when the uid of the symlink and
> follower match, or when the directory owner matches the symlink's owner.

Source: https://www.kernel.org/doc/Documentation/sysctl/fs.txt

`/tmp` is owned by root while `/tmp/ssh-agent-$USER-screen` as well as the symlink target `/tmp/ssh-<random>/agent.<numbers>` is owned by `$USER`. If `zstyle :omz:plugins:ssh-agent agent-forwarding` is enabled accessing the symlink `/tmp/ssh-agent-$USER-screen` works while you're logged in normally. But as soon as you `su` `fs.protected_symlinks` kicks in and rejects access to the symlink. Accessing the symlink target still works, but that would make creating the symlink with `:omz:plugins:ssh-agent agent-forwarding` moot in the first place.

I suggest the symlink is placed somewhere in `$HOME`, probably `$HOME/.ssh/ssh-agent-$USER-screen`, to allow access to the symlink on systems with `fs.protected_symlinks` enabled.
",,,chriscpritchard,"
--
A solution could be to store in $XDG_RUNTIME_DIR
--
",,,,,,,,,,
4735,OPEN,Vagrant plugin: completion for multiple boxes,Area: plugin; Feature; Topic: completion,2019-05-05 19:24:57 +0000 UTC,sbol-coolblue,Opened,,"Some vagrant commands allow you to operate on an arbitrary number of Vagrant boxes, instead of just a single box. The autocomplete currently does not take this into account, only completing the box names for the first box.

`vagrant up myfirst<tab>` => autocompletes to myfirstproject, as expected.
`vagrant up myfirstproject mysecond<tab>` => does not autocomplete at all, expected mysecondproject.

(and thank you for all the work done on zsh and the vagrant plugin... really makes my life enjoyable every day!)
",,,,,,,,,,,,,,
4603,OPEN,virtualenvwrapper plugin fail to deactivate virtualenv when parent directory is a git repository,Area: plugin,2020-03-12 15:24:53 +0000 UTC,gled-rs,Opened,,"Consider the following directory layout:

/home/src
/home/src/gitrepo => git repository
/home/src/gitrepo/adirwithvirtualenv => a repository with a virtualenv ( either a .venv or else ).

When going from adirwithvirtualenv to gitrepo ( cd .. ), deactivate is not called because $ENV_NAME is filled with the name of the directory, as it is a git repository.
",,,gled,"
--
Pull request: #4604

--

--
In my case, gitrepo is not a virtualenv. Hence the annoying behaviour.

But yes, it may be a change for some people, thanks for the headsup !

Pull request has been updated to add an option DEACTIVATE_VENV_ASAP to control that behaviour.

Without setting that option, the behaviour is the same as previously.

--
",apjanke,"
--
I think this is intended behavior. Git repos, even without venv-specific customizations, are considered to be project roots, so when this happens, it should switch you from the `adirwithvirtualenv` venv to the `gitrepo` venv. I think just calling `workon` without `deactivate` first will accomplish that. This change looks like it would end up fully deactivating the venvs in the example case. (Is that what it's intended to do? Or should `deactivate` just be called before activating the new environment?)

Have a look at the discussion in #4122, #4110, and #3918. There was a while when `virtualenvwrapper` did not consider plain git repos to be project roots, but this was a behavior accidentally introduced by #3918.

Maybe you'd want to add a setting that controls whether ordinary git repos are considered project roots? At any case, we should probably run this by the other `virtualenvwrapper` users before merging, since they've already had some unexpected behavior changes this year.

--

--
Cool.

Maybe name it `VENV_DEACTIVATE_ASAP` so it's prefixed with the plugin name? We're starting to get a lot of config variables floating around, and that might help keep it organized.

--
",jaytavares,"
--
What's the status of this issue? It would appear that this is a problem not only when the parent directory is a git repo but any time the destination directory of the cd command is. (see referenced issue above)
--

--
I just submitted a PR (#5817) with my stab at this issue. I took a different approach which also resolves another issue (#5816). Any thoughts are much appreciated.
--
",,,,,,
4590,OPEN,MVN plugin : -f doesn't filepath complete,Area: plugin; Feature; Topic: completion,2019-04-04 21:58:41 +0000 UTC,wattazoum,Opened,,"Hi, 

when using maven to build a project in a different folder than the current, one can use `-f path/to/pom.xml`. 
ZSH does't complete the path.
",,,apjanke,"
--
Looks like our Maven completion definitions don't define completions for any of the arguments to `-f` and the other switches.

There are what look like more robust versions of `mvn` completion as part of the `zsh-completions` project (`_mvn` [here](https://github.com/zsh-users/zsh-completions/blob/master/src/_mvn)) and in [this dedicated `mvn` completion project](https://github.com/Echos/maven-zsh-completion). We might want to switch to supporting one of those.

--
",victornoel,"
--
Yes, it would be great, because the current mvn plugins is really weak compared to the one for bash…

It can't complete submodules with -pl for example too… 

--
",wsdjeg,"
--
i have install zsh completion 
and add 

```
plugins+=(zsh-completions)
autoload -U compinit && compinit
```

into my ~/.zshrc but still can not complete file path after mvn -f 

--
",alexeyts,"
--
Same goes for `-s settings.xml` option too.

--
",,,,
4413,OPEN,gitfast is GPL,Area: core,2019-06-06 13:36:22 +0000 UTC,apjanke,Opened,,"Some of the code in the `gitfast` plugin is GPL (GNU Public License). 

[git-prompt.sh](https://github.com/robbyrussell/oh-my-zsh/blob/b05ef1034fffd7b0c29f1558a8a357ccce7ae74b/plugins/gitfast/git-prompt.sh#L3-L4)

```
# Copyright (C) 2006,2007 Shawn O. Pearce <spearce@spearce.org>
# Distributed under the GNU General Public License, version 2.0.
```

[git-completion.bash](https://github.com/robbyrussell/oh-my-zsh/blob/b05ef1034fffd7b0c29f1558a8a357ccce7ae74b/plugins/gitfast/git-completion.bash#L3-L5)

```
# Copyright (C) 2006,2007 Shawn O. Pearce <spearce@spearce.org>
# Conceptually based on gitcompletion (http://gitweb.hawaga.org.uk/).
# Distributed under the GNU General Public License, version 2.0.
```

[_git](https://github.com/robbyrussell/oh-my-zsh/blob/b05ef1034fffd7b0c29f1558a8a357ccce7ae74b/plugins/gitfast/_git#L5)

```
# Copyright (c) 2012-2013 Felipe Contreras <felipe.contreras@gmail.com>
```

This is incompatible with the MIT License that Oh My Zsh is licensed under. Looks like this code should be pulled, or we should add a mechanism and doco about including code using other licenses.

Most of the stuff in `gitfast` appears to simply be a copy of the completion code shipped with the `git` distribution itself. (E.g. in my Homebrew-managed `git`, similar files are installed to `/usr/local/share/zsh/site-functions`.) You could probably change the plugin to load it from the `git` installation on the local machine instead of carrying the code around in OMZ, which would fix the licensing issue.
",,,felipec,"
--
I'm the author of the `_git` script from Git anyway, and I don't have any problem with using an MIT license.

The other two are a problem.

The `git-completion.bash` script isn't actually needed, we could use whatever is installed in `/usr/share/bash-completion`. I'm fine with deleting it. I only put it in gitfast so we could have the latest that is actually tested.

But `git-prompt.sh` is trickier, because there is no standardized way of distributing such scripts. If this is a big deal we could ask the main authors if the file could be relicensed. I'm the main author, but there's at least one other.
--
",,,,,,,,,,
4361,OPEN,Forked Repo Does Not Update From Upstream,Area: updater; Feature,2019-04-07 10:33:59 +0000 UTC,idjaw,Opened,,"If the repo is forked, the auto-update will keep trying to update from ""origin"". Would be interesting to maybe introduce a new toggle that will perform the necessary git steps to auto-update from upstream if forked. 

The idea would be to introduce a variable in the zshrc that would take true for ""FORKED_REPO"". In upgrade.sh the modification  would be something like this: 

zshrc.zsh-template

```
# Uncomment the following line if you are using a forked repo
# FORKED_REPO=""true""
```

upgrade.sh

```
if FORKED_REPO
 remote='upstream'

git pull --rebase --stat ""$remote"" master
```

Something along those lines. There are probably some conditions that need to be handled. Like properly stashing and popping the stash if you have modifications that might cause a conflict. 

I am currently working on this at the moment in my fork: 
[supporting forked update from upstream](https://github.com/idjaw/oh-my-zsh/blob/supporting_fork_update_from_upstream/tools/upgrade.sh)

Anyone have any thoughts on this?
",,,SITZ,"
--
@robbyrussell This totally makes sense to include for forked repos!

--
",mcornella,"
--
Another option would be to have an `UPDATE_REMOTE` set the name, so if other people have it as `robbyrussell` for instance, could just do `UPDATE_REMOTE='robbyrussell'` and then do a `git pull --rebase --stat ""$UPDATE_REMOTE"" master`.

In the meantime, a possible workaround is just renaming your remotes so that `origin` is still the robbyrussell one. 

--
",,,,,,,,
4345,OPEN,[Tracking] SSH completion,Topic: completion,2018-06-18 20:08:21 +0000 UTC,apjanke,In progress,,"Issues related to completion for `ssh` and related commands.
## Issues
- [x] #4257 – common-aliases plugin configures zsh host completion
- [x] #4162 – Request: tmux-cssh completion
- [X] #4101 – How to get host completion working for a new command?
- [X] #3229 – Behavior change after OMZ reverted to Zsh's hosts completion (2602)
- [X] #2945 – scp/rsync completion failure with remote globbing
- [ ] #2737 – Prefers /etc/hosts entries
- [ ] #2414 – Issue with ssh_config hosts completion (using OMZ's completion)
- [ ] #2288 – ssh_config host completion fails
- [ ] #1337 – ""Auto-complete fails on SSH?""
- [X] #886 – Request: ssh_config host completion
- [X] #42 – known_hosts completion not working
## Pull Requests
- [x] #3321 – tmux-cssh completion plugin
- [ ] #2707 – Add ssh_config host completion in new `ssh` plugin
- [X] #2702 – Add ssh_config host completion in new `ssh` plugin (dupe)
- [X] #2602 – Revert to Zsh's own default hosts completion
- [X] #2489 – Remove brackets from URLs in known_hosts
- [X] #2361 – Re-enable completion of user names
- [X] #2109 – Improve ssh known_hosts parsing
- [X] #1964 – Make ssh completion more configurable
- [X] #1498 – Dupe of 2602 (Revert to Zsh's own hosts completion)
- [X] #1343 – `scp` completion fails
- [X] #1265 – Fix typo in ssh completion
- [X] #1009 – Use ssh_config for host completion
- [X] #768 – Include global `/etc/ssh_known_hosts` in host completion
- [X] #690 – Add ssh_config parsing for host completion
- [X] #668 – Ignore port info from known_hosts
- [X] #127 – Completion improvements
## Topics
### ssh_config hosts

A lot of these have to do with hosts defined in the `~/.ssh/config` and `/etc/ssh_config` files not showing up as options for completion. Zsh's own `_ssh` completion definition has code that reads hosts from `~/.ssh/config`, so it seems like they intend for it to be there by default. But it's not showing up for a lot of people, me included. We need to figure this out, to avoid thrashing on this topic.
",,,moul,"
--
You can check #4162 and #2707 

--

--
Sorry I meant #4162 (now closed) and #3321 instead of #2707 

Both are now closed :)

--
",apjanke,"
--
#4162 and #2707 look like they're still open (though #4162 has an associated PR merged). I'd rather wait until they get closed out before checking them off.

--
",EugenMayer,"
--
One of the reasons hosts do not show up is known_hosts - if you delete it, a lot more hosts will be shown for config - i guess the keyword search is limited to a specific number of hits and probably parses known_hosts first, now showing the ssh/config ones at all
--
",,,,,,
4344,OPEN,[Tracking] Terminal and terminfo related issues,Topic: bindkey,2019-11-08 18:21:20 +0000 UTC,apjanke,In progress,,"This is a tracking issue that collects the various Oh My Zsh issues and pull requests related to terminal configuration, terminal emulators, terminfo, and key bindings.

It's nice to have a list of all these because many of them are related, and existing issues (including closed ones) are good background for current terminal issues.
## Feature Requests
- [ ] #4358 – request: Set Tab and/or Window Names Independently
## Issues
- [ ] #4916 – Num Pad can't input
- [ ] #4872 – Home and End not working in MobaXterm
- [ ] #4784 – Home and End not working in PhpStorm terminal in Mac OS/X
- [x] #4540 – history-substring-search key bindings broken
- [x] #4452 – Lockup after pasting non-ascii characters
- [x] #4434 – Keyboard input disabled after paste
- [x] #4213 – duplicate pwd in Terminal.app window title
- [x] #4157 – safe-paste is unsafe in vi mode
- [x] #4075 – tab completion in OS X 10.10 leaving extra characters
- [x] #3757 – Home/End broken in PuTTY
- [x] #3733 – Home/End broken in CentOS
- [x] #3495 – Home/End broken in CentOS
- [x] #3061 – Home/End broken in Ubuntu
- [x] #2698 – Home/End broken in gnome-terminal
- [x] #2696 – Home/End broken on OS X (Terminal.app grabbing Home/End for itself)
- [x] #3658 – hardcoded escapes in installer ""echo""
- [x] #3583 – Multibyte chars in Terminal.app pwd URLs get garbled
- [ ] #3435 – vi-mode plugin clobbers key bindings
- [x] #3425 – urxvt portability problem with color escape sequences
- [x] #3350 – Tab autocompletion not working for this user
- [x] #3331 – ZOC incompatibility with xterm title-setting escape sequences
- [ ] #2750 – Cursor key bindings broken in `urxvt` on openSUSE
- [x] #2735 – history-substring-search key bindings broken after `terminfo` changeover
- [X] ~~#2654 – Num keypad broken on OS X~~
- [X] ~~#2608 – ""cannot bind to an empty key sequence"" on OS X~~
- [x] #2416 – ""terminalapp plugin is broken and obsolete in mavericks""
- [x] #2314 – Line Wrapping Bug
- [X] ~~#2369 – Change to option-arrow behavior on OS X~~
- [X] ~~#1433 – history-substring-search broken on Ubuntu 12.10~~
### tmux / screen  issues
- [ ] #3937 – broken colorscheme in tmux
- [x] #3823 – artifacts in neovim embedded terminal due to forced `$TERM` in `.zshrc`
- [x] #3645 – Emacs terminal emulator issues: artifacts after autocomplete
- [ ] #3579 – AUTO_TITLE broken in tmux
### Pull Requests
- [x] #4251 – Fix completion waiting dots line wrapping
- [x] #4193 – history-substring-search: bind arrows in both vi and emacs keymaps (after updating histsubstr from upstream)
- [x] #4192 – history-substring-search: bind arrows in both vi and emacs keymaps 
- [x] #4191 – vi-mode: remove broken line-init/finish widgets
- [ ] #3790 – iTerm2 profile control support
- [ ] #3761 – vi-mode changes, using terminal control sequences and bindings
- [ ] #3727 – selectability of choosing method of setting terminal titles
- [x] #3664 – installer: use printf and terminfo for portability
- [x] #3627 – ""Better research history"" that changes `lib/key-bindings`
- [ ] #3616 – vi-mode: adds more key bindings
- [x] #3582 – Fold terminalapp plugin in to `lib/termsupport`
- [ ] #2875 – Remove `screen*` support from `lib/termsupport`
- [ ] #2805 – iTerm2 tab colorization
- [x] #2739 – Term window title setting under cygwin prompt
- [ ] #2445 – ""Fixing iTerm Tmux integration""
- [x] ~~#1907 – `lib/keybindings`: ""rebind key for editor""~~
- [x] ~~#1629 – ""Special"" high-precedence key bindings using terminfo~~
- [ ] #1491 – screen: ""Bugfix extracted cmd""
#### Important Historical Pull Requests
- [x] #1355 – Change hardcoded escapes to `terminfo` lookups in `lib/keybindings`
## References
- My spreadsheet of observed terminal key behavior:  https://docs.google.com/spreadsheets/d/1Ue5gb2hLjz058QEtEXwaw8YR7QoVZpSYzbXQKrRcGKk/edit?usp=sharing
- [iTerm2 issue 3753](https://gitlab.com/gnachman/iterm2/issues/3753) - character sequences emitted by iTerm2 for Alt-Arrow keystrokes
",,,larson,"
--
@apjanke Can I please get an update on this issue?
--

--
@apjanke Thank you!
--
",apjanke,"
--
Hi @larson-carter! I'm on the road this weekend, but will try to address this when I get back home mid next week.
--
",,,,,,,,
4124,OPEN,[IDEA] Standardize boolean handling,Discussion,2018-06-15 18:36:33 +0000 UTC,apjanke,Opened,,"Oh My Zsh has a lot of variables that are treated as boolean true/false values. This includes some that the user provides to control options for plugins and so on. But we don't have a standardized representation for them.

Most of these treat `'true'` as true and anything else as false. (I think.) Some treat non-empty as true (like the single-bracket `[ $foo ]` test). I think a couple expect `'1'` for true. And the tests are done differently. Some do `[[ ""$x"" == ""true"" ]]`, some `[ ""$x"" ]`, some do bash-style `[[ ""x$FOO"" != ""x"" ]]`. This is not a big issue; but it seems wrong that `1` is considered false in many of the option settings, and reading through boolean tests takes a little more work than it has to, IMO.

How about we standardize this? Pick a set of values that are considered true, define a function that can test those and turn it in to a `$?` exit status, and use that for booleans everywhere (at least user-visible ones). Say, ""the strings `'true'`, `'t'`, `'yes'`, `'on'`, and `'1'` are all considered true, maybe case-insensitively, and all other values are considered false"", and a `function omz_true()` which tests a value, returning true (`$?` = 0) for the true strings and `$?`=1 otherwise. (List based on [zsh's `zstyle` boolean values](http://zsh.sourceforge.net/Doc/Release/Completion-System.html#Standard-Styles).)

One shortcoming is that a function call like that couldn't be used _inside_ a `[[ ... ]]` test. If you need to combine a boolean test with other tests, you need to pull the `omz_true` outside the brackets.

```
# broken
if [[ omz_true ""$MY_OPTION"" && -n ""$PROJECT_ROOT"" ]] ...  

# works
if omz_true ""$MY_OPTION"" && [[ -n ""$PROJECT_ROOT"" ]] ... 
```

Thoughts?
",,,,,,,,,,,,,,
4116,OPEN,Agnoster theme prompt extremly slow in mercurial,Area: theme; Enhancement,2020-08-08 03:01:41 +0000 UTC,MerliX,In progress,,"Code here https://github.com/robbyrussell/oh-my-zsh/blob/3d2bf227ea2b37d351ac3846627f28151e0a4480/themes/agnoster.zsh-theme#L111 runs very slow (mac yosemite)
",,,apjanke,"
--
FYI, if you're going to link to lines of code (or files for that matter) in a bug report, you should link to a specific commit, instead of ""master"" or another branch name. Otherwise, later commits may shift around line numbers and your link will be pointing at a different piece of code. (For example, we're about to merge a commit to `agnoster` that will probably shift everything down a few lines, and your link will be pointing in to the `zstyle` commands inside `prompt_git`.)

https://github.com/robbyrussell/oh-my-zsh/blob/3d2bf227ea2b37d351ac3846627f28151e0a4480/themes/agnoster.zsh-theme#L111

--

--
How slow is ""extremely slow"" for you? This stuff is all relative. :)

I'm trying it out on OS X 10.9.5 Mavericks, on an SSD MacBook Pro. In a newly created Hg repo, it feels like it takes between half a second and a second to issue the prompt. That feels pretty slow to me. But is also not a huge surprise: this is not a very fast theme, and it's doing `hg` shellouts.

This could maybe be improved by consolidating the `hg` calls and doing parsing with native `zsh` string stuff afterwards. And the `hg prompt` test could be done once at theme load time.

--

--
Oh, yeah, we can totally speed this up. Half those `hg` calls are unnecessary. I'll give it a try when I have some free time, maybe later today.

--

--
Thanks!

Interesting. PowerLevel9K is relying entirely on `zsh`'s own `vcs_info` for the Hg stuff, instead of rolling its own. I'll look in to that and see if it's an option for us, too.

--

--
Oh, nice. I see some `vcs_info` in my future, in that case.

--

--
Agnoster now has its own repo, https://github.com/agnoster/agnoster-zsh-theme, and is using Zsh `vcs_info`. Can you give the upstream theme a try and see if it's still slow for you?

--

--
Oh yeah, the `hg` support was an OMZ addition. Nevermind about asking upstream. :)

--
",MerliX,"
--
@apjanke thanks for advice

--

--
I did a quick fix for this, but it is not so functional. However, probably it will help

```
prompt_hg() {
  local rev_branch st hg_status
  rev_branch=$(hg id -n -b 2>/dev/null)

  if [ ! -z ""$rev_branch"" ] ; then
    st=""""
    hg_status=`hg st`
    if `echo $hg_status | grep -q ""^\?""`; then
      prompt_segment red black
      st='±'
    elif `echo $hg_status | grep -q ""^[MA]""`; then
      prompt_segment yellow black
      st='±'
    else
      prompt_segment green black
    fi
    echo -n ""☿ $rev_branch"" $st
  fi
}
```

By the way, I switched my console to https://github.com/bhilburn/powerlevel9k witch is way more fast from-the-box

--

--
Well, its not slow anymore, but it neither shows hg info in zsh prompt =) Built-in agnoster theme is still slow in hg repo. I am happy with powerlevel9k theme by the way

--
",dritter,"
--
@apjanke Jep. `vcs_info` uses mostly `hexdump` to get the information from the repository and invokes mercurial only once.

--
",Cypher1,"
--
Will this improve anytime soon? I'm having similar issues with bullettrain (which is based on agnoster).
I'm having multiple seconds of waiting time between prompt renders in a largish hg repo.
--
",caugner,"
--
Steps to reproduce:

```bash
hg clone https://hg.mozilla.org/mozilla-central
cd mozilla-central
time (prompt_hg > /dev/null)
# ( prompt_hg > /dev/null; )  2.77s user 1.19s system 99% cpu 3.971 total 
```
--

--
The lag stems from the three calls to `hg id` on lines [155](https://github.com/robbyrussell/oh-my-zsh/blob/d848c94804918138375041a9f800f401bec12068/themes/agnoster.zsh-theme#L155) and [172/173](https://github.com/robbyrussell/oh-my-zsh/blob/d848c94804918138375041a9f800f401bec12068/themes/agnoster.zsh-theme#L172-L173) and `hg st` on line [174](https://github.com/robbyrussell/oh-my-zsh/blob/d848c94804918138375041a9f800f401bec12068/themes/agnoster.zsh-theme#L174)/[177](https://github.com/robbyrussell/oh-my-zsh/blob/d848c94804918138375041a9f800f401bec12068/themes/agnoster.zsh-theme#L177):

```sh
hg clone https://hg.mozilla.org/mozilla-central
cd mozilla-central

time hg id
# hg id  0.66s user 0.35s system 99% cpu 1.020 total

time hg id -n
# hg id -n  0.65s user 0.38s system 99% cpu 1.032 total

time hg id -b
# hg id -b  0.08s user 0.03s system 99% cpu 0.117 total

time hg st
# hg st  1.32s user 0.41s system 99% cpu 1.733 total
```
--

--
In theory, there is some potential:

```
hg clone https://hg.mozilla.org/mozilla-central
cd mozilla-central
```

1. Replace `hg id` with `hg root`:

```
# hg id  0.70s user 0.40s system 99% cpu 1.103 total
# hg root  0.10s user 0.04s system 99% cpu 0.137 total
```

2. Replace double `hg st` with single `( hg st -uma | cut -c -1 | sort | uniq | paste -d, -s; )`

```
# hg st  1.29s user 0.43s system 16% cpu 10.316 total
# ( hg st -uma | cut -c -1 | sort | uniq | paste -d, -s; )  1.36s user 0.42s system 101% cpu 1.758 total
```

3. Replace `hg id -n` and `hg id -b` with single `hg id -nb`

```
# hg id -n  0.69s user 0.39s system 99% cpu 1.076 total
# hg id -b  0.10s user 0.03s system 99% cpu 0.124 total
# hg id -nb  0.66s user 0.39s system 99% cpu 1.057 total
```

In practice, this does improve the situation only slightly:

```
# Before
# ( prompt_hg > /dev/null; )  2.86s user 1.27s system 99% cpu 4.138 total
# After
# ( prompt_hg > /dev/null; )  2.17s user 0.87s system 100% cpu 3.024 total
```
--

--
> I guess it is only available on the latest hg versions?

@maelvalais What version of `hg` do you run? Unfortunately, `chg` is not available for me in Mercurial 4.3.2.
--

--
I have disabled the status in mercurial repositories now by adding `functions[prompt_hg]=""""` to my `.zshrc`.
--
",maelvls,"
--
Wow, using `chg` instead of `hg` (just put `alias hg=chg` in your `.zshrc`) seems to make `prompt_hg` as fast as the git prompt!

Any drawbacks? I guess it is only available on the latest hg versions?

**Update**: I realized that a ~12MB Python process has to be kept running in background (but I guess I don't mind)
  
--

--
Ahh... I just noticed that this `chg` is in `contrib/` and thus probably not compiled/installed by default by standard package managers. The reason I have it is that Homebrew installs `chg` by default (see [formula](https://github.com/Homebrew/homebrew-core/blob/b17b51701ebd8d62e55d9a1d68617c385a5ac26a/Formula/mercurial.rb#L23-L28)).

Unfortunate that it is not shipped by default...
--
"
3699,OPEN,[IDEA] Auto-gen TOC for wiki pages like Plugins; using MediaWiki,Discussion,2018-06-15 18:36:33 +0000 UTC,apjanke,Opened,,"What do folks think about making auto-generated Table of Contents for the [Plugins wiki page](https://github.com/robbyrussell/oh-my-zsh/wiki/Plugins) and similar wiki pages, by switching their page markup format to MediaWiki?

This would make it easier to find plugins and topics in the page. There's no auto-TOC functionality in Markdown, but if we converted the page to MediaWiki format (or one of a couple others), there's (unofficial) support for auto-TOC generation. I think this would be useful for [Themes](https://github.com/robbyrussell/oh-my-zsh/wiki/Themes), [Coding Style Guide](https://github.com/robbyrussell/oh-my-zsh/wiki/Coding-style-guide) and maybe a couple other longer pages that have either long (>7) lists of items or complicated topic structures.

It would look like this: https://github.com/apjanke/omz-scratch/wiki/Plugins  – that's a quick mockup of a conversion to MediaWiki I did using `pandoc` and a little hand-adjustment. The conversion isn't perfect: in particular, there's an issue with displaying '`<`' or '`&`' inside code blocks. But if folks are interested in this, I bet that could be solved with a bit of investigation.

You can manually construct a TOC in Markdown, and there are tools like `tocdoc` that will help, but those aren't automatically updated if the rest of the content changes, and you need to manually splice the TOCs in to the full page. Fully automatic TOCs generated on the fly sound a lot more useful and reliable to me. And there's been [long-standing interest for support in Markdown](https://github.com/isaacs/github/issues/215), but I doubt that will happen any time soon.
",,,,,,,,,,,,,,
3586,OPEN,lib/theme-and-appearance.zsh sets non-appearance options,Area: core; Enhancement,2020-02-21 00:25:33 +0000 UTC,apjanke,Opened,,"The `lib/theme-and-appearance.zsh` script sets some shell options that don't look related to cosmetic theme and appearance stuff. At line 22:

```
#setopt no_beep
setopt auto_cd
setopt multios
setopt cdablevars
```

Shouldn't these be set somewhere else? They have significant semantic effects, especially `multios`.
",,,7rulnik,"
--
I believe that `auto_cd` should be inside `lib/directories.zsh`
--
",,,,,,,,,,
3435,OPEN,vi-mode plugin must be loaded first or it wipes out custom keybindings in other plugins,Area: plugin; Enhancement; Topic: bindkey,2020-04-08 02:55:10 +0000 UTC,andrewferrier,In progress,,"It would appear that if the vi-mode plugin appears in the list of plugins _after_ another plugin which defines a keybinding using `bindkey`, that keybinding is removed. Specifically, the keybindings I've observed this with are:

```
bindkey ""^[[1;6D"" insert-cycledleft
bindkey ""^[[1;6C"" insert-cycledright
```

(from https://github.com/mcornella/oh-my-zsh/commit/383ae2d4aa1c4fa90bf35cdd6e13598dacafa5b1).

This isn't documented anywhere (I believe), and isn't obvious. Perhaps there's a way to always logically sort vi-mode to the head of the list of plugins, irrespective of where it's defined? Or emit a warning if it isn't first?
",,,mcornella,"
--
I believe the solution to this isn't obvious: it isn't always clear what the user wants in this case (the other way around, it might be that the desired behavior is enabling vi-mode key bindings and having a separate set of keys work with dircycle plugin).

I think a possible solution will be having a more API-like set of commands to define key bindings, in such a way that a user can specify their own set or providing some sort of warning when a key binding is overwritten.

--

--
We have applied a number of changes lately, let me know if any issue you had is still present.

--

--
:+1: 

--

--
@varcharlez can you specify? I interpret that means all works both with the `vi-mode` plugin and `set -o vi`, is that correct?

--
",apjanke,"
--
There's an attempt in #1629 to do this by defining a set of ""special"" keys which take precedence over other key bindings, and having `vi-mode` re-bind them. I'm not endorsing its approach, just putting an issue link here.

--

--
Part of the issue may be that the `bindkey -e` and `bindkey -v` commands that `lib/key-bindings.zsh` and the `vi-mode` plugin use don't just set up key bindings. They set up links between _keymaps_ and change which one is linked to `main` and thus the default.

From the [ZLE Builtins](http://zsh.sourceforge.net/Doc/Release/Zsh-Line-Editor.html#Zle-Builtins) section of the manual:

> bindkey’s options can be divided into three categories: keymap selection for the current command, operation selection, and others. The keymap selection options are:
> 
> -e
> 
>    Selects keymap ‘emacs’ for any operations by the current command, and also links ‘emacs’ to ‘main’ so that it is selected by default the next time the editor starts.
> -v
> 
>    Selects keymap ‘viins’ for any operations by the current command, and also links ‘viins’ to ‘main’ so that it is selected by default the next time the editor starts.

This means that `lib` files, user custom files, and plugins loaded before `vi-mode` are modifying the `emacs` keymap, and plugins loaded after `vi-mode` (and the rest of your `.zshrc`) are modifying the `viins` keymap, which is now the default. You can observe this by looking at `bindkey -lL`

```
# Normal:
➜  .oh-my-zsh git:(master) bindkey -lL | grep main
bindkey -A emacs main

# With vi-mode loaded:
➜  ~  bindkey -lL | grep main
bindkey -A viins main
```

And then you have to consider the specific key bindings that `vi-mode` makes inside the `viins` keymap.

If you want all the various files that set key bindings to play nicer with each other, you might add a `$ZSH_INITIAL_KEYMAP` option to let the user select whether `bindkey -e` or `bindkey -v` is done initially in `lib/key-bindings.sh`. But that begs the question of whether those various files would work well with the `viins` keymap, or if they're just made to work with the current behavior of always starting with the `emacs` keymap. And it would impair the ability of the user to switch between the two at runtime. (Not a common case, surely, but it's something that's at least not actively interfered with now.) Most of the existing bindings look emacs-y.

--

--
A ""keymap"" is a named set of key bindings. `zsh` maintains a few of them to switch between, depending on what you're doing.

I don't think there's an easy fix for this, because `vi-mode` and the other key binding stuff in OMZ grew kind of organically. Best you can do in the short term is have plugins that know they don't want to be clobbered by `vi-mode` check the `$plugins` list to see if `vi-mode` is being loaded after them. We could supply a function in `lib` that made that easy for the plugins to do. (And it could be added to later if other plugins were created that switched or clobbered the keymap like `vi-mode` did and needed to be checked similarly.)

Some other plugins add key bindings; they'd probably want to check for it, too.

```
➜  .oh-my-zsh git:(master) grep -rl bindkey *
lib/completion.zsh
lib/key-bindings.zsh
plugins/colemak/colemak.plugin.zsh
plugins/dircycle/dircycle.plugin.zsh
plugins/dirhistory/dirhistory.plugin.zsh
plugins/history-substring-search/history-substring-search.zsh
plugins/jump/jump.plugin.zsh
plugins/per-directory-history/per-directory-history.plugin.zsh
plugins/per-directory-history/per-directory-history.zsh
plugins/safe-paste/safe-paste.plugin.zsh
plugins/sudo/sudo.plugin.zsh
plugins/vi-mode/vi-mode.plugin.zsh
themes/dieter.zsh-theme
➜  .oh-my-zsh git:(master)
```

Alternately, we could just put the check in `vi-mode` itself, and have it check for a list of plugins known to add key bindings, and issue a single warning.

--

--
`vi-mode` breaks `history-substring-search` for a different reason, the overriding of `zle-line-init`/`zle-line-finish`, which interferes with terminfo-based bindings for arrow keys; see #2735.

--

--
No, I think this should stay open. It's an outstanding bug with our design. I don't think the recent fixes have changed this.

Konfekt - Your particular issue may have been about `zle-line-init`, but the original poster's underlying problem here remains: core OMZ switches to the `emacs` keymap when it starts up (with `bindkey -e`) and the `vi-mode` plugin switches to the `viins` keymap (with `bindkey -v`). So all bindings defined by the `lib/*` files (starting with `lib/key-bindings.zsh`) and by any plugin loaded before the `vi-mode` plugin get inserted in the `emacs` keymap, which is not what ends up as the user's default keymap, so they're effectively lost.

--

--
Read through the `vi-mode` plugin (including its README) and see if you want the other stuff it supplies. In addition to doing `bindkey -v` (which is the same as `set -o vi` in `zsh`), it defines a few useful key bindings, adds a visual indicator for insert/command mode, and does a couple things to get vi mode to play well with advanced themes. If you use the `vi-mode` plugin, then you can also put it at the front of your plugins list if you want to use key bindings defined by other plugins. And you'll pick up other improvements that eventually get checked in to it.

On the other hand, `set -o vi` is simpler and fully under your control.

For most OMZ users, I think the `vi-mode` plugin would be the way to go.

--

--
(Speaking of which, doing `set -o vi` yourself has the same ""wipes out other keybindings"" problem this issue is talking about in the first place, because you have to do it after OMZ is loaded, effectively at the end of the plugin loading sequence, and you get the exact same behavior of switching away from the `emacs` keymap after OMZ has added bindings to it.)

--
",andrewferrier,"
--
@mcornella @apjanke OK, thanks for the responses. I'm a little out of my depth on the keymap vs. keybindings issue, I have to admit. I was merely observing that as-is, it does look as if dircycle doesn't work if it is loaded in the ""wrong"" order w.r.t. vi-mode. How to fix this - well, I'm not sure.

--
",billcarroll,"
--
This apparently happens with plugins listed after vi-mode. I had to remove ""vi-mode"" from plugins in ~/.zshrc to get ""history-substring-search"" working again. 

--
",Konfekt,"
--
Had the same problem using either the vi-mode plugin or a snippet that changes the cursor shape according to the vi-mode on https://bbs.archlinux.org/viewtopic.php?id=95078 and does so by overriding `zle-line-init`. This pull-request fixes the issue and be merged without further hesitation.

--

--
Ok, will do so as soon as the arrow keys (and not only that of the keypad) are taken into account (as discussed on https://github.com/robbyrussell/oh-my-zsh/issues/2735#issuecomment-164411323)

--

--
So I guess this pull request can be closed as it is my idiosyncratic `zle-line-init` that's causing the trouble? Maybe guard this as a work around for others that want a cursor shape indicating the vi-mode. 

--
",varcharlez,"
--
:) `plugins(vi-mode)` vs `set -o vi`

--

--
I can't decide whether to go with vi-mode or just regular set -o vi...

--
"
2797,OPEN,"completion after ""vagrant box add""",Area: plugin; Topic: completion,2019-05-05 19:21:46 +0000 UTC,kontrafiktion,Opened,,"when I enter 

```
vagrant box add foobar 
```

and type the start of a box file name in the current directory, I would expect that the file name would be completed, it isn't :-(
",,,,,,,,,,,,,,
2750,OPEN,Alt-Left-Arrow and Alt-Right-Arrow broken on urxvt in openSUSE,Bug; Platform: Linux; Topic: bindkey,2020-08-04 15:22:28 +0000 UTC,michaeltraxler,In progress,,"since a recent ""git pull"" the always working bound-keys
```
^[^[[D (Alt-Cursor-Left)
^[^[[C (Alt-Cursor-Right)
```
are not resulting anymore in a backward-word (or forward-word), even though the correct bind keys are set.
```
""^[^[[D"" backward-word
""^[B"" backward-word
""^[[1;5D"" backward-word
""^[b"" backward-word
```
Alt-B and Alt-F are still working.
I'm puzzled.
Thanks for any help as these keys are really in my muscle-memory and I can't live without them...
",,,michaeltraxler,"
--
I found a solution:
If I comment the following section in 
lib/key-bindings.zsh
everything is fine again!
```
if (( ${+terminfo[smkx]} )) && (( ${+terminfo[rmkx]} )); then
  function zle-line-init() {
    echoti smkx
  }
  function zle-line-finish() {
    echoti rmkx
   }
   zle -N zle-line-init
   zle -N zle-line-finish
 fi
```

Is this useful for anything? Will I miss it?

--

--
yes, the problem is still happening on my systems (not all of them).

I use OpenSuSE13.2, urxvt and the TERM value is TERM=rxvt-unicode.
With xterm it works.
xterm sends ""^[[1;3D"" instead of ^[^[[D

On my notebook I have the same OS, same version of urxvt, same .oh-my-zsh
config and it is working here.

If I use ssh from the notebook (working ALT-Left) to the non working system,
it is still not working.
If I use the non working via vncviewer: still not working.

I don't see the difference....

--

--
Yes, you hit the spot! 
I found that systems where OMZ works in urxvt have a different date and content of the file
/usr/share/terminfo/r/rxvt-unicode.
For some reason this file was different on two ""identical"" systems even though the corresponding package was the same: terminfo-base-5.9-52.2.3.x86_64
But anyhow, the file /usr/share/terminfo/r/rxvt-unicode in this package is faulty.
By the way: one more workaround is:
<code>
cd /usr/share/terminfo/r;
cp rxvt rxvt-unicode
</code>
I will try to report this to OpenSuse.
Thanks again for finding the source of the problem.

--

--
One more solution for the problem, as it is hard to get it through the whole procedure of upstream correction:
<code>
rm /usr/share/terminfo/r/rxvt-unicode /usr/share/terminfo/r/rxvt-unicode-256color;
mkdir -p ~/.terminfo; tic -o .terminfo  /usr/share/doc/packages/rxvt-unicode/etc/rxvt-unicode.terminfo
</code>
This fixes the problem for me and I learned some stuff about terminfo.
Unfortunately it will appear again as soon as the package terminfo-base is updated :-(

--

--
Thank you so much for doing all this!
And it is a pity that they don't get along, as most likely many users suffer from this...
More subtle. They will just be frustrated and think that urxvt is bad, as the keys they are used to don't work anymore.
To the TERMINFO_DIRS workaround:
This works great (keeping the /usr/share/terminfo/r/rxvt-unicode and using as priority the terminfo in the home directory) if I call zsh in the command line.
But if I start urxvt the started zsh behaves differently and uses the /usr/share/terminfo/r/rxvt-unicode as default. 
I can also see this in the strace output of starting zsh (only local terminfo is used) and starting a new urxvt (only usr/share/terminfo/r/rxvt-unicode is used).
Any hint to that?

--

--
Thanks again! You are very helpful! 
It is good that I now can run OMZ on the many machines which I administer without tweaking the OMZ config.

--

--
Hi,

done!

Michael

--

--
Hi, as the terminfo-maintainer and the urxvt-developper can't agree on a way to communicate to solve the problem we are kind of stuck....
Maybe an entry in the README of OMZ is the way to go, mentioning that for OpenSuSE (and others?) you need to run every time you update the system the following command:
<code>
$ tic -o /usr/share/terminfo/ /usr/share/doc/packages/rxvt-unicode/etc/rxvt-unicode.terminfo
</code>
At least that is what I have to do on all my systems to get it working. It is annoying (as I always forget it) but a ""price"" I'm willing to pay to be able to use OMZ (great! can't live without it anymore) and urxvt (also great!).
Maybe mentioning the problem in more places (README) will push the two persons to talk to each other again and solve the issue for all users?

--

--
Thank you so much. Works like a charm! For me the problem is now solved. I'm surprised how complicated all this mapping is....

--
",apjanke,"
--
Probably caused by #1355, which switched to using terminfo for key bindings.

Yeah, if that's absent, I think it might mess up some of your key bindings, because zsh might not be set up to switch in to the right terminal mode when it starts editing a line.

Is this still happening for you? If so, what platform/OS, terminal program, and `$TERM` value are you using?

--

--
Okay. I can reproduce this. when I run `zsh` in `urxvt` on OpenSuSE 13.2, normally, alt-left and alt-right do forward and backward word. When I have OMZ loaded, though, they insert ""D"" and ""C"" characters. If I comment out the `zle-line-init` function like you do, they start working again.

I think the problem might be that the `terminfo` entry for `rxvt-unicode` that ships with OpenSuSE 13.2 is incorrect. It has the wrong sequences defined for the left and right arrows, and for `smkx` and `rmkx`. That means the `echoti` commands in those `zle-line-init` and `zle-line-end` functions are outputting the wrong escape sequences, which I think is messing up the interpretation of your arrow keystrokes while `zle` is active. 

To see this, compare the output of `infocmp -1 rxvt-unicode | grep '[rs]mkx\|kcu[bf]1'` with the codes documented in `man 7 urxvt`.

Correct:

```
eilonwy% infocmp -1 rxvt-unicode | grep '[rs]mkx\|kcu[bf]1'
    kcub1=\E[D,
    kcuf1=\E[C,
    rmkx=\E>,
    smkx=\E=,
```

What I see on OpenSuSE 13.2:

```
$ infocmp -1 rxvt-unicode | grep '[rs]mkx\|kcu[bf]1'
    kcub1=\EOD,
    kcuf1=\EOC,
    rmkx=\E[?1l\E>,
    smkx=\E[?1h\E=,
```

As a workaround, yeah, comment out those functions – as long as nothing else changes your terminal out of application keypad mode, you'll be okay. (You can do this in your `.zshrc` or custom code by just redefining those functions to do nothing, if you don't want to modify your main OMZ source code.)

The long term fix is probably to install a correct `terminfo` entry for `rxvt-unicode` on your OpenSuSE system. And report it to upstream so they can fix it for everyone. (Their `/etc/zshrc` key bindings work despite the bad entry because they're using hardcoded sequences instead of `terminfo`; it's kind of a hack.)

--

--
Excellent.

I think you could make that last fix survive updates to the terminfo-base package by defining a terminfo search path that puts your `~/.terminfo` ahead of the system one. In your `.zshrc` or something similar, do this.

```
export TERMINFO_DIRS=~/.terminfo:$TERMINFO
unset TERMINFO
```

If I understand the terminfo man page right (in the section ""Fetching Compiled Descriptions""), that will have your ~/.terminfo mask corresponding entries in the system terminfo dir. (Unsetting `$TERMINFO` is necessary because it takes precedence over `$TERMINFO_DIRS`.)

--

--
I've submitted an upstream bug report to openSUSE: https://bugzilla.opensuse.org/show_bug.cgi?id=936330

--

--
Interesting side note: the root cause of this may be that the official (???) ncurses/terminfo distribution does not include an rxvt-unicode entry because [its maintainer and urxvt's author don't get along](https://lists.gnu.org/archive/html/bug-ncurses/2009-10/msg00032.html). So downstream packagers have to add it in, and are more likely to get it wrong and introduce inconsistencies between distributions.

--

--
Okay, I get the same behavior. Don't really know why it's happening.

The `man 1 urxvt` page says this.

```
ENVIRONMENT
       urxvt sets and/or uses the following environment variables:
[...]
       TERMINFO
           Set to the terminfo directory iff urxvt was configured with
           ""--with-terminfo=PATH"".
```

So I think part of it is that `urxvt`, as built for openSUSE, is setting `TERMINFO` when it's being launched, and this is overriding your unsetting of it. And then something in the `zsh` startup sequence is seeing and respecting that before you get a chance to change it in your `~/.zshrc`.

When I use `urxvt -e strace zsh -l` to see tracing, I can see that it looks at both `/usr/share/terminfo` and `~/.terminfo`, but does the system one first, and that's where it finds the entry. Maybe that's enough to stick you with the system definition: maybe `zsh` sees that once and then caches the entry, so `$terminfo` is loaded from there, even if you later change `$TERMINFO` and `$TERMINFO_DIRS`.

I suspect that's because `zsh` uses the curses library, and the curses library gets invoked during startup before `.zshrc` is run, and it remembers the value of `$TERMINFO` it saw on startup.

...yep: the openSUSE rxvt-unicode-9.15-4.1.2.src.rpm has `--with-terminfo=%{_terminfo}` defined in the build options.

As a workaround, you can invoke `urxvt` as `urxvt -e env TERMINFO="""" zsh -l` which will have the effect of unsetting `$TERMINFO` early enough in the process that everything respects it. Works for me. You could set up an alias for it, and find somewhere to tweak the definition of desktop items that you're launching it from.

You could also rebuild your urxvt from the source RPM, removing the `--with-terminfo` option.

--

--
Would you mind changing this issue's title to ""Alt-Left-Arrow and Alt-Right-Arrow broken on urxvt in openSUSE"" to clarify the specific problem? There's a lot of OMZ issues around arrows and key bindings and it's getting hard to tell them apart.

--

--
Looks good. Thanks!

--

--
In my opinion, this is a bug in OpenSUSE's terminal setup, and Dr. Fink's response is incorrect; I just haven't found time to follow it up.

The way I read it, their `rxvt-unicode` terminfo entry is wrong, but it happens to be wrong in a way such that bindings using it work when our `[sr]mkx` stuff is not working (though they shouldn't). Now that we're using `[sr]mkx`, those terminfo-based bindings will no longer work (though they should).

If I'm right about the cause, fixing it in OMZ effectively means tracking and working around issues in the terminfo database shipped with OpenSUSE or other Linux distributions, which sounds like a bit of a mess and the wrong place to put responsibility for that data. I'm inclined to treat it as an upstream bug and pursue that bug report with OpenSUSE, and advise users to fix it at the system level, maybe by installing a fixed terminfo definition. Or just using a different terminal or Linux distro.

On the other hand, I think it's pretty unlikely that this will get fixed at the distro level, given how complicated this stuff is and how difficult it is to convince people they might be wrong about it. And it's limited in scope, so it wouldn't be that hard to fix in OMZ: we could create a plugin that redistributes the `rxvt-*` terminfo entries and has code to load them in front of the system terminfo. ... Oh, wait, that won't quite work, because it would have to be loaded before the `lib/*.zsh` stuff which uses terminfo to do its key bindings. Well, hmm. We'd have to hack in a special hook for it, I think. It'd be adding a new mechanism to OMZ, with potential to get messy.

--

--
After doing some more reading, I think the OpenSUSE terminfo entry might be correct, or at least not the only issue, and I got things backwards.

It looks like urxvt uses different mode control sequences for the cursor keypad and numeric keypad. And even though the urxvt man page refers to the numeric keypad application mode as ""SMKX"", the terminfo usage of `smkx` expects it to usually switch both keypads. The OS X terminfo entry for `rxvt-unicode` defines `smkx` to only switch the numeric keypad into application mode. The OpenSUSE one defines `smkx` to switch both the numeric keypad and cursor keypad into application mode. Both appear to define the cursor keys to be consistent with their entry's mode switching.

The problem might just be that these hardcoded key bindings:

```
""^[^[[D"" backward-word
""^[^[[C"" forward-word
```

use the sequences that correspond to cursor local mode. Now that OMZ is switching into cursor application mode inside ZLE, the keys are emitting a different character sequence.

The fix here might be just to switch to terminfo-based key bindings.

```
bindkey ""\e$terminfo[kcub1]"" backward-word
bindkey ""\e$terminfo[kcuf1]"" forward-word
```

This should work with both variants of the `rxvt-unicode` terminfo entries, and whether or not OMZ is using `smkx` and application mode or not. But it won't be portable across different terminals: different terminals don't treat Alt+whatever in the same way.

This worked for me on OpenSUSE. (Didn't work on OS X; it doesn't seem like `urxvt` running under XQuartz is treating the Alt modifier as ""prefix with escape"", so it just emits the normal cursor arrow key sequences.)

--

--
> I tried to null out the aforementioned functions in my .zshrc, but it doesn't seem to have made any difference.
> 
> function zle-line-init() {}
> function zle-line-finish() {}

Other way around. Leave those functions as OMZ defines them, and add these key bindings to your `~/.zshrc`. See if that works.

```
bindkey ""\e$terminfo[kcub1]"" backward-word
bindkey ""\e$terminfo[kcuf1]"" forward-word
```

--

--
Yeah. Especially if you have your `$EDITOR` set to `vi`. `bindkey` operates on the current default keymap, which OMZ switches to be `emacs`, but before that, `zsh` may have defaulted it to `vi` based on your editor setting, so it may have gone in the wrong keymap.

--
",mcornella,"
--
Hi @michaeltraxler and @apjanke, what's the status on this? Should we maybe try to fix it in oh-my-zsh (or at least dig further)? It wasn't clear to me if this was due only to wrong terminfo entries...

The follow up at bugzilla [suggests that this may be happening due to the wrong mode being set](https://bugzilla.opensuse.org/show_bug.cgi?id=936330#c2) (perhaps this ties to those `[rs]mkx` sequences being sent?). I don't know, let me know how you think we should proceed with this issue.

--

--
@Quadrocube that's probably it. Any user modifications should go _after_ sourcing OMZ.

--
",stephen304,"
--
I'm having this same problem with omz+zsh on arch with rxvt-unicode, which has TERM=rxvt-unicode-256color. 

I tried to null out the aforementioned functions in my .zshrc, but it doesn't seem to have made any difference.

```
function zle-line-init() {}
function zle-line-finish() {}
```

Any ideas?

--

--
@apjanke Thanks that worked! I saw that fix above, but since everybody was talking about terminfo files, I thought it was some fix for a terminfo file and I wasn't sure where to put it.

--
",spolakh,"
--
Hooray, thanks for the solution, @apjanke! Suffered from it for almost a year. Well, it almost works, do you have any ideas on why 

```
bindkey ""\e$terminfo[kcub1]"" backward-word
bindkey ""\e$terminfo[kcuf1]"" forward-word
```

works fine if plugged directly into zsh session but doesn't persist for newly-created sessions even if copied into .zshrc? Might the problem be in 

```
source $ZSH/oh-my-zsh.sh
```

as last line?

--
",,
2737,OPEN,ssh completion broken in last version (takes always an entry in /etc/hosts if present),Topic: completion,2019-01-24 01:13:23 +0000 UTC,ibc,In progress,,"Since a few days (last update) my oh-my-zsh fails when typing the beginning of a Hostname value in .config/ssh. For example, in my .ssh/config I have:

```
Host home-dev-1
    hostname    X.X.X.X
    user              xxxxx
```

and in my /etc/hosts I have:

```
1.2.3.4   home-test
```

If I type in the terminal `ssh home` and press TAB then I get `home-test` (which is an entry in my /etc/hosts).

If there is no entries in my /etc/hosts beginning with ""home"" then it would get entries in my .ssh/config. But obviously this is not the expected behavior and it is a clear regression.
",,,ncanceill,"
--
Hi,

Since #2602 we are using Zsh default completion. I completes **both** from `hosts` and your `.ssh/config`.

However, as you apparently noticed, it does not complete the ""HostName"" values from the config file, but it completes the ""Host"" values instead. This is a feature: ""HostName"" is necessarily the FQDN or address of the host, but ""Host"" is an alias so it can be whatever you want — you can have ""Host"" be the same as ""HostName"" if you like.

**TL;DR** just change

```
Host home-dev-1
    hostname    X.X.X.X
```

to

```
Host X.X.X.X
    hostname    X.X.X.X
```

--

--
Sorry, English is a second language. Let me try again. You wrote:

> bash completion takes the Host field rather than the hostname.

Zsh does the same. Since #2602, so does OMZ.

You should be able to complete by typing `ssh home-d` and TAB. Is that not working?

--

--
Aha, I get it now. Let me look into it — maybe Zsh completion is not enough after all.

@blueyed care to weigh in?

--

--
@blueyed thanks for your help!

---

I have the feeling that the following comment:

```
# If users-hosts matches, we shouldn't complete anything else.
```

at the end of the [ssh completion file](http://sourceforge.net/p/zsh/code/ci/master/tree/Completion/Unix/Command/_ssh) has something to do with it, but I need to read [chapter 19](http://zsh.sourceforge.net/Doc/Release/Completion-Widgets.html) of the Zsh manual before I understand how `words` and `$IPREFIX` work.

--

--
@blueyed I will trust you on that, I still do not understand the whole completion file.

However, it seems that the results from `~/.ssh/config` are still taken into account. For instance, if you have `localhost` in `/etc/hosts` and `localtest` in `~/.ssh/config`, then `ssh local` will directly complete to `localhost` but `ssh localt` will still complete to `localtest`.

Even though this is a Zsh issue, I find it troublesome that completion from `~/.ssh/config` is overshadowed by completion from `/etc/hosts`. Do you think there would be any way to correct the behavior and properly offer choices between all possibilities without rewriting the completion file entirely?

--
",ibc,"
--
I don't understand. Two points:

1) bash completion takes the Host field rather than the hostname.

2) In my case hostname is an IP, how can it be useful at all?

--

--
OK, let me explain what works and what does not work:

This is my .ssh/config:

```
Host foo-bar
        hostname  127.0.0.1
        port      1001

Host test-remote-server
        hostname  127.0.0.1
        port      1002
```

and this is my /etc/hosts:

```
127.0.0.1   test-local-server
```
- If I type `ssh foo` + TAB I get `ssh foo-bar` => OK
- If I type `ssh test` + TAB I automatically get `ssh test-local-server` => Wrong as it should show both ""test-local-server"" (from /etc/hosts) and ""test-remote-server"" (from .ssh/config).

So, in case there is an entry in /etc/hosts that matches the given `ssh xxxx` then zsh (or omzsh) does not search in .ssh/config.

--

--
Thanks a lot :)

--

--
Thanks, hope there is a solution. Otherwise my workaround will be adding all my .ssh/config entries into /etc/hosts and setting its hostname in the ""hostname"" field of .ssh/config (instead of the IP).

--
",blueyed,"
--
The issue appears to be that if there's a match in /etc/hosts already, the other files are not tried.

It seems like the completion for ssh does not consider /etc/hosts initially. There is only ""remote host name"". But ""ssh host-only-in-etc-hos"" gets completed on request.

There might be an option to change this behavior and I've asked in #zsh on IRC, but no quick answer.

--

--
@ibc 
The following was proposed on #zsh:

```
zstyle -e ':completion:*' hosts 'reply=($(< ~/.hosts))' # and then stick the ones you want in that file
```

For reference, here's the commit that removed OMZ's previous behavior, which you could adopt partially: https://github.com/robbyrussell/oh-my-zsh/pull/2602/files

@ncanceill 
I do not think it's this `users-hosts` part that returns already, because it would not look into ~/.ssh/config.
The responsible code is probably the following from the `userhost` case:

```
_alternative \
        'hosts:remote host name:_ssh_hosts' \
        ""$tmp[@]"" && ret=0
```

I could imagine that it falls back to generic `hosts` completion, where /etc/hosts is considered also.

--
",meeech,"
--
Still seeing this behaviour. Any movement or advice on this?  Different ticket to look at?
--
",Someguy123,"
--
**It's now 2019, this is still a problem.**

A somewhat related issue - I also experience a ghost hosts file problem (not sure if that's been reported): 

On my Macbook I once had a hosts file entry for `someserver.dev` (name adjusted for privacy), while on my newer iMac (some various dot files copied over from my Macbook) that entry does not exist in the hosts file, not even as a commented out line; but still when I type `some` and press tab, it'll immediately complete `someserver.dev` regardless of how many other servers I have starting with `some` in .ssh/config.

I've tried to remove any instances of `someserver.dev` from my zsh history file, but still no luck.

To workaround the ""ghost hosts file"" problem, I've ended up having to just add additional aliases for those servers that don't start with `some`, but still my old habits are hard to break, and at least once every few days I'll run into this completion problem. 

For host entries that first existed on my iMac, simply commenting them out, and then opening a new terminal session is enough to restore my tab completion, but not exactly a ""solution""...

**Is there any _real_ solution for this?** This issue has been open for almost **_5 years_** now, and there's not so much as a workaround.
--
",,
2735,OPEN,history-substring-search no longer functions after latest update,Topic: bindkey,2016-05-24 02:43:52 +0000 UTC,mayersj1,In progress,,"After updating oh_my_zsh this morning, the history-substring-search plugin no longer functions.  Even manually sourcing the history-substring-search.zsh file doesn't bring it back to life.
",,,mayersj1,"
--
Conflict appears to be with the vi-mode plugin.  If I remove vi-mode from loading, then the history-substring-search functions properly.  I've tried loading vi-mode both before and after history-substring-search to no avail.

--

--
Looking at an env where things still work, it appears that the following has changed in regards to key-bindings:

Working:

up-line-or-history = ""^[OA""
down-line-or-history= ""^[OB""
history-substring-search-up = ""^[[A""
history-substring-search-down= """"^[[B""

Non-Working

up-line-or-history = ""^[[A""
down-line-or-history = ""^[[B""
history-substring-search-up = ""^[OA""
history-substring-search-down = ""^[OB""

Why did they get switched around?  In Iterm2, I'm able to remedy this by adding key mappings for ""^[OA"" and ""^[OB"", but why do I have to?

--

--
Funny thing is, none of my shells (OSX or Linux) would report the proper 
keys in this case.  They all suffered from the same issue, so I don't 
believe it to be an iTerm case only.

## 

Steve Mayer
smayer69@me.com

On 23 Apr 2014, at 9:02, Justin Wunderle wrote:

> I had this problem, too. Noticed they switched from a hardcoded key to 
> using zsh/terminfo to determine the proper key for ""up arrow"" in 
> c563fe95. Seems iTerm defaults to reporting terminal type ""xterm"" when 
> it does not send the correct xterm key codes (according to the 
> terminfo database). Telling iTerm to report as ""linux"" fixes this for 
> me. (Preferences > Profiles > Terminal, set Report Terminal Type to 
> linux, restart iTerm)
> 
> Not sure what other effects this change will cause, though.
> 
> ---
> 
> Reply to this email directly or view it on GitHub:
> https://github.com/robbyrussell/oh-my-zsh/issues/2735#issuecomment-41179669

--

--
Adding the six lines works for me only when using the up arrow, trying to use the down arrow to go backwards through the history doesn't do anything.  For now I've reverted back to using the older version of the plugin.

--

--
Why was it changed in the first place?  It worked on every OSX and Linux 
box / terminal combo I used.

## 

Steve Mayer
smayer69@me.com

On 9 May 2014, at 12:47, Joseph Naegele wrote:

> I just don't know enough about the internals of `zsh` and its `vi` 
> bindings to solve the :arrow_down: bug. Does anyone know who might be 
> better qualified to grok this?
> 
> ---
> 
> Reply to this email directly or view it on GitHub:
> https://github.com/robbyrussell/oh-my-zsh/issues/2735#issuecomment-42706142

--

--
ahh. okay. I've always had vi-mode enabled. That would explain it.  
Thanks!

## 

Steve Mayer
smayer69@me.com

On 9 May 2014, at 12:55, Woody Gilk wrote:

> @mayersj1 because it used to not work unless you had `vi-mode` 
> enabled. (possibly other plugins, `safe-paste` was mentioned as well.)
> 
> ---
> 
> Reply to this email directly or view it on GitHub:
> https://github.com/robbyrussell/oh-my-zsh/issues/2735#issuecomment-42706939

--
",pierrre,"
--
Same problem

--

--
Same problem with gnome terminal, archlinux.

--

--
Removing `safe-paste` plugin also fixes this problem.

--
",Geekfish,"
--
I'm experiencing the same issue with iTerm.

--
",chrisjones,"
--
Updated this morning, having the same issue.

--
",regolith,"
--
I had this problem, too. Noticed they switched from a hardcoded key to using zsh/terminfo to determine the proper key for ""up arrow"" in c563fe95. Seems iTerm defaults to reporting terminal type ""xterm"" when it does not send the correct xterm key codes (according to the terminfo database). Telling iTerm to report as ""linux"" fixes this for me. (Preferences > Profiles > Terminal, set Report Terminal Type to linux, restart iTerm)

Not sure what other effects this change will cause, though.

--

--
Ahhh. Digging [deeper](http://linux.die.net/man/5/terminfo), `kcuu1` (used in that commit) is for the **keypad** up arrow, and `cuu1` is for a normal up arrow. So I think the proper thing to do would be to map _both_ to the history-substring-search-up function (and similar for down).

--
",mguentner,"
--
I can also confirm that removing `vi-mode` from `plugins` restores the pre-commit behavior. Also, changing the terminal type breaks a lot of other applications for me.

--

--
The patch provided by @naegelejd also works for KDE's `Konsole` (with `vi-mode` enabled) 

--

--
@naegelejd Like @mayersj1 stated, your patch only works for the :arrow_up: key but not for the :arrow_down: key. Also, `vi-mode` _only_ works in this order:
`plugins=(... vi-mode history-substring-search ...)`
_not_ with
`plugins=(... history-substring-search vi-mode ...)`

--
"
