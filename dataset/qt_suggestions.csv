Summary,Issue key,Issue id,Issue Type,Status,Project key,Project name,Project type,Project lead,Project description,Project url,Priority,Resolution,Assignee,Reporter,Creator,Created,Updated,Last Viewed,Resolved,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Fix Version/s,Component/s,Component/s,Component/s,Component/s,Votes,Labels,Labels,Labels,Description,Environment,Original Estimate,Remaining Estimate,Time Spent,Work Ratio,Σ Original Estimate,Σ Remaining Estimate,Σ Time Spent,Security Level,Outward issue link (Dependency),Outward issue link (Dependency),Outward issue link (Dependency),Outward issue link (Duplicate),Outward issue link (Duplicate),Outward issue link (Relates),Outward issue link (Relates),Outward issue link (Relates),Outward issue link (Work Breakdown),Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Custom field (Commits),Custom field (Done),Custom field (E-mail CCs),Custom field (E-mail Sender),Custom field (Epic Link),Custom field (Global Rank),Custom field (Mgmt Approval),Custom field (PM Owner),Custom field (Platform/s),Custom field (Platform/s),Custom field (Platform/s),Custom field (Platform/s),Custom field (Platform/s),Custom field (Platform/s),Custom field (Rank),Custom field (Rank (Obsolete)),Custom field (Ranking),Custom field (Recruitment Status),Custom field (Recruitment Target),Custom field (Requested Country/Site),Custom field (RnD Owner),Sprint,Sprint,Sprint,Sprint,Sprint,Sprint,Custom field (Status),Custom field (Story Points),Custom field (Target Level),Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment
QQmlParserStatus missing componentDestroy() method,QTBUG-91189,313436,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt.team.quick.subscriptions,morte,morte,18 Feb '21 03:51,18 Feb '21 07:40,18 Feb '21 09:41,,5.15,6.0,6.1,,,,,,,,,,,,,,,,,,,,QML: Declarative and Javascript Engine,Quick: Core Declarative QML ,,,0,,,,There is no method like QQmlParserStatus::componentDestroy() or any other method to notify implementation that object is about to be destroyed (thing that should be invoked after calling QML destroy() and before class destructor call).,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0qlsn:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"18 Feb '21 07:40;ulherman;The destruction callbacks (in particular Component.onDestruction) are a bad idea. When they are called it's unclear which objects are still alive and which ones have been deleted already. I've seen many feet shot this way. Why do you need them? ",,,,,,,,,,,,,,,,,,,,,
Have some way of moving items that don't fit in a given space into an overflow menu,QTBUG-91169,313377,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt.team.quick.subscriptions,mitch_curtis,mitch_curtis,16 Feb '21 21:08,16 Feb '21 21:40,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Quick: Controls 2,,,,0,,,,"The issue can be seen here:

https://github.com/mitchcurtis/slate/issues/158

Having a way to move these obscured items into an overflow menu would be really nice.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0qle7:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"16 Feb '21 21:35;mitch_curtis;I think one really old attempt at this was https://codereview.qt-project.org/c/qt/qtquickcontrols2/+/155771, but I'd like to explore other approaches too.

One way could be to use attached properties. If we start with some code like this:

{code}
        RowLayout {
            // ...
            
            RowLayout {
                id: viewSplitscreenLayout
                height: parent.height
                enabled: projectLoaded
                spacing: 5
    
                Ui.ToolButton {
                    objectName: ""splitScreenToolButton""
                    checkable: true
                    checked: canvas && canvas.splitScreen
                    icon.source: ""qrc:/images/splitscreen.png""
    
                    ToolTip.text: qsTr(""Split Screen"")
    
                    onClicked: canvas.splitScreen = checked
                }
    
                Ui.ToolButton {
                    objectName: ""lockSplitterToolButton""
                    checkable: true
                    checked: canvas && !canvas.splitter.enabled
                    enabled: canvas && canvas.splitScreen
                    icon.source: ""qrc:/images/lock-splitter.png""
    
                    ToolTip.text: qsTr(""Lock Splitter"")
    
                    onClicked: canvas.splitter.enabled = !checked
                }
            }
    
            ToolSeparator {
                height: parent.height
            }
    
            Ui.IconToolButton {
                id: fullScreenToolButton
                objectName: ""fullScreenToolButton""
                text: ""\uF108""
                checkable: true
                checked: window.visibility === Window.FullScreen
    
                ToolTip.text: qsTr(""Toggle fullscreen window"")
    
                onClicked: toggleFullScreen()
            }
        }
{code}

and focus on a single tool button:
{code}
        RowLayout {
            id: toolBarLayout

            // ...

            Ui.IconToolButton {
                id: fullScreenToolButton
                objectName: ""fullScreenToolButton""
                // Just show the icon normally, but also show text when in the overflow menu.
                text: !OverflowMenu.active ? ""\uF108"" : qsTr(""\uF108 %1"").arg(ToolTip.text)
                checkable: true
                checked: window.visibility === Window.FullScreen

                ToolTip.text: qsTr(""Toggle fullscreen window"")
                ToolTip.visible: hovered && !OverflowMenu.active

                OverflowMenu.menu: overflowMenu

                onClicked: toggleFullScreen()
            }
        }

        Item {
            Layout.fillWidth: true
        }

        Button {
            text: qsTr(""..."")
            visible: overflowMenu.active
            onClicked: overflowMenu.open()

            OverflowMenu {
                id: overflowMenu
                boundsItem: toolBarLayout
            }
        }
{code}

For any items that set the attached OverflowMenu.menu property, the OverflowMenu could check when they are no longer fully visible within boundsItem and reparent them to itself via addItem(), and parent them back to the original item when the parent is large enough. I guess it would store the size of boundsItem that would be large enough for the given item to be fully visible at the time when it takes ownership of it so it knows what ""large enough"" is.

This is flexible in that you can have any type of item in the menu, though it does force you to use a menu. It's also a bit tricky when it comes to ToolSeparator: does the user just change the orientation and set a new width? MenuSeparator is the ideal choice for when it gets moved to the overflow menu, but I think MenuSeparator is usually just a ToolSeparator rotated anyway.

There could be more restricted approaches that only allow the use of e.g. Action but do more work for you. Though I'm not sure how separators would work. Maybe ActionGroup could be (mis)used somehow:

{code}
        OverflowToolbar {
            // ...
            spacing: 5
            menu: overflowMenu

            ActionGroup {
                id: viewSplitscreenLayout
                enabled: projectLoaded

                Action {
                    objectName: ""splitScreenToolButton""
                    checkable: true
                    checked: canvas && canvas.splitScreen
                    icon.source: ""qrc:/images/splitscreen.png""

                    ToolTip.text: qsTr(""Split Screen"")

                    onTriggered: canvas.splitScreen = checked
                }

                Action {
                    objectName: ""lockSplitterToolButton""
                    checkable: true
                    checked: canvas && !canvas.splitter.enabled
                    enabled: canvas && canvas.splitScreen
                    icon.source: ""qrc:/images/lock-splitter.png""

                    ToolTip.text: qsTr(""Lock Splitter"")

                    onTriggered: canvas.splitter.enabled = !checked
                }
            }

            Action {
                id: fullScreenToolButton
                objectName: ""fullScreenToolButton""
                // Just show the icon normally, but also show text when in the overflow menu.
                text: !OverflowMenu.active ? ""\uF108"" : qsTr(""\uF108 %1"").arg(ToolTip.text)
                checkable: true
                checked: window.visibility === Window.FullScreen

                ToolTip.text: qsTr(""Toggle fullscreen window"")
                ToolTip.visible: hovered && !OverflowMenu.active

                onTriggered: toggleFullScreen()
            }
        }

        Item {
            Layout.fillWidth: true
        }

        Button {
            text: qsTr(""..."")
            visible: overflowMenu.active
            onClicked: overflowMenu.open()

            Menu {
                id: overflowMenu
            }
        }
    }
{code}

OverflowToolbar could create ToolButtons/ToolSeparators and MenuItems/MenuSeparators as necessary, along with toolButtonDelegate and menuItemDelegate properties to control how those delegates look (e.g. only show icon when in the toolbar, but show both icon and text when in the menu).

Each top-level ActionGroup or Action would be followed by a separator.",,,,,,,,,,,,,,,,,,,,,
macOS is not seen on the kits,QTBUG-91156,313355,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,releaseteam,javihria,javihria,16 Feb '21 13:15,16 Feb '21 14:00,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Packaging & Installer,,,,0,,,,"When macOS kits is installed to development host, it is seen as 'clang 64bit'. That name does not resemble the host OS and some developers might think the naming is weird.

Propose to have macOS stated in the name, like 'macOS (clang) 64bit'. The clang information as well as 64bit is optional as they do not bring much value.

 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,macOS,,,,,,"0|i0ql9b:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"16 Feb '21 14:00;tpyssysa;On the contrary. Developer may have several installations for different 32/64-bit toolchains. Let's assume, we had Windows as the folder name. Is it
 * MinGW 32 bit or 64 bbit
 * MSVC 2015, 2017, 2019
 * Something else 

Toolchain tells the developer much more than just the OS name. ",,,,,,,,,,,,,,,,,,,,,
"Replace all ""int"" by a Qt type like size() does with ""qsizetype""",QTBUG-91123,313256,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt.team.quick.subscriptions,alundra,alundra,14 Feb '21 14:25,14 Feb '21 14:31,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Widgets: Widgets and Dialogs,,,,0,,,,"Qt improved all the ""size"" functions to return ""qsizetype"" but a lot of places still use ""int"".
 This suggestion is to replace all ""int"" or any of the plain types to Qt types.
 Another way is to use size_t, int32_t and the others of C++11.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0qkpr:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add the possibility to set the tooltip delay before it appears and allow 0s for immediate display,QTBUG-91121,313254,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt.team.quick.subscriptions,alundra,alundra,13 Feb '21 22:51,13 Feb '21 22:51,18 Feb '21 09:41,,6.0.1,,,,,,,,,,,,,,,,,,,,,,Widgets: Widgets and Dialogs,,,,0,,,,"It is actually impossible to set the tooltip delay, so the application must use the default values.
This blocks an application to show immediately the tooltip when the mouse is on an element.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0qkpb:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
There should be a (class like) QStringTokenizer for QByteArray,QTBUG-91079,313159,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,thiago,fabiankosmale,fabiankosmale,11 Feb '21 07:18,11 Feb '21 07:18,18 Feb '21 09:41,,6.0,6.1,,,,,,,,,,,,,,,,,,,,,Core: Containers and Algorithms,,,,0,,,,"There are instances where we need to split a QByteArray on a separator in the Qt code base; and most likely also in user code (searching for QByteArray::split  invocations in Qt itself  finds plenty). 

With QByteArrayView, we have the necessary view class to support this.
Note that QStringTokenizer takes a case-sensitivity parameter which does not make sense for QByteArray (which has no concept of encoding).",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0qk4n:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add a means to get the QScxmlStateMachine for the invoked service,QTBUG-91057,313104,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,jkobus,andysh,andysh,10 Feb '21 08:48,10 Feb '21 08:48,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,XML: SCXML,,,,0,Reported_by_support_standard,,,"Add a means to get the QScxmlStateMachine for the invoked service, currently it is only possible to get the parent state machine, but not the one that the service was invoked on, so providing a means to get to this would be useful",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0qjtz:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Improve QtQuick Layouts documentation on spans and how to have ratios/weights,QTBUG-91040,313055,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,smd,smd,smd,09 Feb '21 09:58,09 Feb '21 10:04,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Quick: Layouts,,,,1,,,,"Some people think that altering spans will increase the implicit size of a cell in a GridLayout (sometimes they try to use spans in order to achieve ratios), e.g:

[https://stackoverflow.com/questions/50651369/qml-layouts-how-to-give-weights-to-items-in-a-row-or-column-layout]

 

Other times, they bind the items size hints to the parent layout e.g:
{code:java}
GridLayout {
    id: grid
    Rectangle {
        Layout.fillWidth: true
        Layout.preferredWidth: grid.width/3
    }
    Rectangle {
        Layout.fillWidth: true
        Layout.preferredWidth: grid.width/3
    }
    Rectangle {
        Layout.fillWidth: true
        Layout.preferredWidth: grid.width/3
    }
}{code}
Which basically will form a circular dependency loop.

 

The documentation should have a section covering these things:
 # Spans (and how unneeded spans and empty columns are ignored)
 # How the size hints of items can be (ab)used in order to specify size weights/ratios on each item
 # How each item is aligned inside a cell (alignment gets first effective when the cell is larger than the items maximum size)
 # Emphasize that size hints should never depend on ""external"" factors! (such as the above snippet).

 

 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0qjjz:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"09 Feb '21 10:04;mitch_curtis;I think this would help so many people, including myself. I've probably run into each of these at some point, some more than once.

The one about size hints not depending on external factors is perhaps the one that I find myself running into the most, although in a more indirect way that binding directly to the size of the layout. :D Usually it ends up in binding loops or things just not looking correct.

Having some best practices listed would be great!",,,,,,,,,,,,,,,,,,,,,
Add support for Apple Pencil Scribble feature ,QTBUG-90932,312850,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt.team.quick.subscriptions,nagrohn,nagrohn,04 Feb '21 12:42,09 Feb '21 07:29,18 Feb '21 09:41,,5.15,6.0,,,,,,,,,,,,,,,,,,,,,Quick: Mouse Touch and Tablet input,,,,1,reported_by_support_standard,,,"
Apple Pencil is detected and works for touch input, scroll inputs, or text selections, just not for scribble handwriting.
https://support.apple.com/en-au/guide/ipad/ipad355ab2a7/ipados

Please consider adding this feature. ","iPad, Apple Pencil ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,iOS/tvOS/watchOS,,,,,,"0|i0qifr:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"04 Feb '21 14:04;srutledg;When it comes to rendering ink strokes, we should have a cross-platform solution eventually; but this is about using the stylus for text editing right?   That's not a Qt Quick feature then: it will need platform work first.  Maybe it's related to input methods somehow?  And we'll have to research whether the implementation can have similarities across platforms, if other platforms can do something like this.",,,,,,,,,,,,,,,,,,,,,
Open Qt app based on file extension on Android,QTBUG-82884,295468,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,rampe,DanielSt,DanielSt,14 Mar '20 16:54,08 Feb '21 10:19,18 Feb '21 09:41,,5.15,,,,,,,,,,,,,,,,,,,,,,Extras: Android,,,,1,,,,"Similar to QTBUG-70170 it would be useful to launch an Android app based on the file extension. The following entry to the AndroidManifest.xml file starts the app. Now it would be nice if the passed url is provided:

{code:java}
<intent-filter android:icon=""@mipmap/ic_launcher"" android:label=""My music player"" android:priority=""1"">
	<action android:name=""android.intent.action.VIEW""/>
	<category android:name=""android.intent.category.DEFAULT""/>
	<category android:name=""android.intent.category.BROWSABLE"" />

	<data android:scheme=""content""/>
	<data android:scheme=""file""/>
	<data android:host=""*""/>
	<data android:mimeType=""audio/mp3""/>
	<data android:pathPattern="".*\\.mp3""/>
</intent-filter>
{code}

onCreate can then check and process the Uri:

{code:java}
Uri uri = getIntent().getData();
if (uri != null && ((getIntent().getFlags() & Intent.FLAG_ACTIVITY_LAUNCHED_FROM_HISTORY)) == 0)
   // process Uri and pass it to Qt
{code}

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Android,,,,,,"0|i0qhye:3",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Android Qt scoped file access,QTBUG-79373,287178,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,rampe,DanielSt,DanielSt,21 Oct '19 16:01,08 Feb '21 10:19,18 Feb '21 09:41,,5.15,,,,,,,,,,,,,,,,,,,,,,Extras: Android,,,,2,,,,"Android enforces restricted file access starting with Android Q which can be turned off (android:requestLegacyExternalStorage=""true"" in the AndroidManifest.xml) but will be mandatory in Android R in 2020. Qt should somehow provide scoped file access. At the moment we can get scoped file access as follows:

# Request file access in a Java method.
# Pass the file handle from Java to C++ and use it as a parameter in QFile().",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Android,,,,,,"0|i0qhye:6",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add call*Method functions which take an array or a pointer of jvalues,QTBUG-80529,289706,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,rampe,poikelin,poikelin,04 Dec '19 11:13,08 Feb '21 10:19,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Extras: Android,,,,1,Reported_by_support_standard,,,"Qt only provides va_args functions in QAndroidJniObject, but it is possible to pass a pointer of jvalues through Call*MethodA methods in jni interface. This could make some cases easier where same parameters are passed to many method calls.

https://docs.oracle.com/javase/7/docs/technotes/guides/jni/spec/functions.html",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Android,,,,,,"0|i0qhye:9",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add in a means to get to the QtActivity methods that are useful for applications,QTBUG-82432,294236,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,rampe,andysh,andysh,24 Feb '20 09:17,08 Feb '21 10:19,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Extras: Android,,,,1,Reported_by_support_standard,,,"Add in a means to get to the QtActivity methods that are useful for applications. For example onNewIntent would be useful to provide a hook into for an application comprising of reusable components. Since Java does not allow multiple inheritance then it would mean that a single subclass of QtActivity would need to be extended to cover all possibilities, whereas it would be better if a function could be called or a signal emitted to indicate that this has happened so the application can respond to it.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Android,,,,,,"0|i0qhye:c",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
QAndroidInAppTransaction should expose purchaseToken,QTBUG-77378,282157,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,rampe,rhardih,rhardih,07 Aug '19 16:11,08 Feb '21 10:19,18 Feb '21 09:41,,5.12.4,,,,,,,,,,,,,,,,,,,,,,Purchasing,,,,0,,,,"Since the existing API doesn't provide a way, to figure out if a previous purchase was refunded, one way however is to use the Google Play Developer API.

The way to look up a purchase is by *purchaseToken* and not the *orderId*, that is currently exposed:

[https://developers.google.com/android-publisher/api-ref/purchases/products/get|https://developers.google.com/android-publisher/api-ref/purchases/products/get]

It appears that the token is actually propagated all the way back to, and assigned, in the transaction instance, being used when finalising. It's just not exposed.

Aside from *orderId*, I propose to expose *purchaseToken* as well, in order to be able to get query purchase status via the developer api.

Either that, or provide the same functionality in Purchasing.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Android,,,,,,"0|i0qhye:g",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add wrapper functions for the other extra* variants for Android's Intent,QTBUG-71019,268095,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,rampe,andysh,andysh,09 Oct '18 06:17,08 Feb '21 10:19,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Extras: Android,,,,0,Reported_by_support_standard,,,"Add wrapper functions for the other extra* variants for Android's Intent. At least we can provide those that we are able to wrap around, otherwise just using QByteArray will cause it to return nothing if it is not put as a QByteArray.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0qhye:k",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Qt on android needs a built-in way to convert Android URIs to real paths,QTBUG-83987,298334,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,rampe,monsterovich,monsterovich,04 May '20 18:13,08 Feb '21 10:18,18 Feb '21 09:41,,5.14.2,,,,,,,,,,,,,,,,,,,,,,Extras: Android,,,,3,,,,"Android doesn't use normal URIs like:
{code:java}
file:///path_to_file
{code}
 Instead of that, in content providers you will have something like this:
{code:java}
content://com.example.app.provider/a_lot_of_data
{code}
This format can be different in Android activities which provide any files (FileDialog.fileUrl in QML) or only images (not implemented in Qt, I implemented it myself in my project, see [PhotoDialog|https://gitlab.com/Monsterovich/protox/-/tree/qturiconverter/sources/cpp/native/android]). That's why we need a build-in way to convert these URIs to normal paths, like a function:
{code:c++}
QString QtAndroid::uriToRealPath(const QString &uri);
{code}
 
 I have examples of implementation in my project:
 * [One|https://gitlab.com/Monsterovich/protox/-/blob/master/android/src/activity/QtActivityEx.java#L130]
 * [Two|https://gitlab.com/Monsterovich/protox/-/blob/master/sources/cpp/main.cpp#L645]",,,,,,,,,,,,,,,QTBUG-84572,QTBUG-85238,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Android,,,,,,"0|i0qhye:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"03 Jun '20 08:16;assam;I don't think this is recommended by Android. Android paths are now using the content scheme and Android APIs don't provide ways to directly convert them, and IMHO trying to convert some them doesn't generalize well and might change at any time. Also, Qt can read content scheme files anyways.","03 Jun '20 12:57;monsterovich;>I don't think this is recommended by Android.

1. Converting content paths to real paths should be the default feature in Android but it isn't. This is a bad API architecture. In this case I don't care what they recommend or not.

2. A developer spends *a lot* of time on writing such functions and it always crashes because of wrong implementation.  Android lacks documentation IMHO.

3. This piece of code is copied from project to project. There are a lot of examples on StackOverflow but some of them are unfinished and half-broken that's why we need that feature in Qt by default where it'd be implemented correctly.","05 Jun '20 13:49;assam;I don't think it _should_ be the default behavior, because it's error-prone because Android doesn't offer a universal way to convert those paths, in the long run, this kind of conversion method would end up removed or deprecated unnoticed. That's why I don't think it's a good idea to go against what Android itself offers.","05 Jun '20 14:59;monsterovich; >I don't think it _should_ be the default behavior, because it's error-prone because Android doesn't offer a universal way to convert those paths

What do you suggest then?

>this kind of conversion method would end up removed or deprecated unnoticed

It wasn't removed for 10 Android versions.


>That's why I don't think it's a good idea to go against what Android itself offers.

Using third-party frameworks already goes against Android. That's why I'm here.

 ","17 Dec '20 11:52;assam;[~monsterovich] I think a better way is to use the FileProvider from Android, we should find a way to use that with Qt (QTBUG-85238).

The other option to get a path that's not content scheme is to use the non native FileDialog by providing the flag [QFileDialog::DontUseNativeDialog|https://doc.qt.io/qt-5/qfiledialog.html#Option-enum] to your fileDialog.",,,,,,,,,,,,,,,,,
QQuickFramebufferObject: use rhi against opengl related types.,QTBUG-90993,312959,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt.team.quick.subscriptions,niqingliang2003,niqingliang2003,08 Feb '21 03:18,08 Feb '21 03:18,18 Feb '21 09:41,,6.0.1,6.1.0 FF,,,,,,,,,,,,,,,,,,,,,Quick: Core Declarative QML ,,,,0,,,,QQuickFramebufferObject: use rhi against opengl related types.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0qj2v:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
QWebEngineView::setHtml() should allow empty baseUrl for External objects linked ,QTBUG-90927,312837,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt_webengine_team,philip,philip,04 Feb '21 11:17,04 Feb '21 11:17,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,WebEngine,,,,0,,,,"According to the doc of https://doc.qt.io/qt-5/qwebengineview.html#setHtml

> For external objects to be loaded, baseUrl cannot be empty.
> 
But for convenience , and if we set all external objects in the HTML linked with absolute url, I suggest QWebEngineView::setHtml() should allow empty baseUrl.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0qicv:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
QML Type for DBUS access (much like nemo-qml-plugin),QTBUG-90785,312574,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,thiago,al13n,al13n,31 Jan '21 16:38,03 Feb '21 08:55,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,D-Bus,,,,0,,,,"It would be great for a qml type to exist to easily handle a few simple DBUS cases. much like nemo-qml-plugin, but without the requirements on nemo. see https://git.sailfishos.org/mer-core/nemo-qml-plugin-dbus",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0qgvz:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"01 Feb '21 09:05;ulherman;This should not be part of QtQml, but rather a separate QML module.","03 Feb '21 06:45;srutledg;Yeah, of course it should be another module.

What do you want to use it for?  Building system configuration UIs?  Client only or do you want to write a service in QML?

The nemo solution looks like only an imperative API so far?  It would be nice to think about how to have a declarative API at least for some things.  For example imagine using it for configuring bluetooth or wifi using connman or bluez or something else that has a d-bus API: you'd get back lists of things the user needs to choose.  So conventionally you need a subclass of QAIM that can hold lists of stuff you got back from a d-bus function call (and yeah QAIM is a holdover from the widget days, but we don't have anything better); or else you could try to get by populating a ListModel in JS, or a TableModel, but then that's more imperative JS.  I used MeeGo.Connman once, and it has those ListModels:
https://github.com/ec1oud/grefsen/blob/master/imports/Grefsen/ConnmanPopover.qml
If you write C++ for each D-bus service that you want to access, it's not too hard to make a nice QML-facing API.  The generic solution for all possible D-bus services could be powerful with the right API, but it's hard to make it generic and beautiful at the same time.

Maybe it makes sense to extend QtRO https://doc.qt.io/qt-5/qtremoteobjects-index.html for that? (disclaimer: I don't have experience with it; maybe it doesn't fit at all)  or some other context where it makes sense to parse the xml interface definition and generate proxy objects with local functions that call remote functions, and also local properties that will use remote setters and getters, so you can make declarative bindings to them.

We don't even have a pure-qml solution for running a QProcess yet (even though the idea has been around for years, and there have been patch proposals).  Nor reading and writing of files.  This seems lower priority than that somehow, although perhaps it's also safer.

You could write it yourself and put it into Qt Marketplace.  The plan is that eventually Conan will make it easier for a project to have a build-time dependency on a third-party module that comes from Marketplace.  I don't expect that the Qt Company cares much about this, unless it turns out that we have multiple commercial customers asking for it, which is not something I've heard about so far anyway.","03 Feb '21 08:55;al13n;I think it would be interesting to have both client and server.

I figured it would be fairly easy to port this into the system so that it would come default everywhere, in which case as like a qml dev it would be interesting if i can kind of count on this functionality (since i'm doing mostly qml-only apps).

I can see this would be a hassle politically, so i'm probably not gonna bother and just try to use the nemo thing and rip out these nemo dependencies.

For my purposes, i wanted to have some simple small services, in which case the app becomes controllable from remote/cli and/or other apps; and i don't have to bother with C++ and/or compiling.  (i start most of my apps just from qmlscene)

In my case i don't need complex data throughput or anthing, just fairly simple things like: what's the current status, and things like start, stop, and do X, Y.",,,,,,,,,,,,,,,,,,,
QElapsedTimer could use a QML Type,QTBUG-90784,312573,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt.team.quick.subscriptions,al13n,al13n,31 Jan '21 16:32,01 Feb '21 09:19,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Core: Date/Time,Quick: Core Declarative QML ,,,0,,,,"it would be great to have access in QML to a Timer based on monitonic clocks and where you can use it for relatively precise elapsed time, independant on any DST, leap seconds, time changes. (also maybe QDeadlineTimer)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0qgvr:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
OpenSSL Toolkit from Installer should be built with a recent MSVC compiler,QTBUG-78242,284468,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,aksalova,markus.maier,markus.maier,12 Sep '19 06:53,01 Feb '21 08:58,18 Feb '21 09:41,,5.12.5,,,,,,,,,,,,,,,,,,,,,,Packaging & Installer,,,,3,Reported_by_support_standard,,,"Opening one of the dll's in C:\Qt\Tools\OpenSSL\Win_x64\bin with e.g. Dependencies.exe ([https://github.com/lucasg/Dependencies] ) or another dependency analyzer shows which libraries these dlls depend on.

One of these dependencies is MSVCR100.dll, meaning that the libraries have been built with MSVC 2010. This means that every application using these files gets an additional dependency to the ""Microsoft Visual C++ Redistributable 2010"" package.

In order to avoid that a Qt application depends two different C++ runtime environments, OpenSSL should be built with the latest MSVC version that Qt itself currently uses, so there is at least a possibility to avoid this additional dependency.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Windows,,,,,,"0|i0m373:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"25 Jun '20 14:10;bolieu541;I totally agree. Some users of my software had an issue with OpenSSL and it took some times to find that the issue was related to the dependencies. Maybe add multiple version of the binaries depending on the Visual Studio version.","12 Jan '21 01:04;rgriebl;Although is not really a bug, please a least document this somewhere. Not even the installer's description of the OpenSSL packages tells you about this.

I just spent too much time trying to figure out why some users of my open-source project have weird TLS problems with Windows binaries built against Qt 5.15 / MSVC 2019 plus OpenSSL from the installer.","01 Feb '21 08:58;patrick.babonneau;We all agree that this not really a bug. However, I'm not willing to instal a full MSVC compilation toolchain only to produce two Dll's (nor run mandatory associate tests that shoudl be conducted by someone that really mastered potential security issues associated with).

Like Robert I also spent many time to detect what could explain issues reported by my customers, and finally add VCredist 2010 package inro my installer. VCredist is sytematically activated (silently) to install potential missing dll. I'm not very satisfied with this dirty patch.

Please,  can you re-evaluate issue priority ?",,,,,,,,,,,,,,,,,,,
Support adjustable draggable border width in qt5ct,QTBUG-90774,312559,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,,mray271,mray271,30 Jan '21 07:51,30 Jan '21 07:54,18 Feb '21 09:41,,5.15.2,,,,,,,,,,,,,,,,,,,,,,GUI: Window management,,,,0,,,,"{{In Gnome3 the draggable border width on windows that can be ""grabbed"" by mouse to resize a window can be set and configured easily by:}}
{code:java}
gsettings set org.gnome.mutter draggable-border-width 15
{code}
{{This functionality doesn't appear available in QT and would make accessibility – especially for programmers that frequently need to resize windows – much better.}}

Related ticket:
 {{[https://github.com/eteran/nedit-ng/issues/291]}}

https://bugreports.qt.io/browse/QTBUG-90569

 ","QT 5.15.2

Fedora Core 33 (5.10.10-200.fc33.x86_64)

Gnome3 Desktop Window manager.",,,,,,,,,,,,,,QTBUG-90569,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Linux/Other display system,,,,,,"0|i0qgsn:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"30 Jan '21 07:53;mray271;If qt5ct supported something similar to Gnome's\{{}}
{code:java}
gsettings set org.gnome.mutter draggable-border-width 15

{code}
 

it would solve the issue.

 ",,,,,,,,,,,,,,,,,,,,,
Qt online installer should ship all licenses in separate plaitext files,QTBUG-90671,312327,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,releaseteam,talkless,talkless,27 Jan '21 08:36,27 Jan '21 08:36,18 Feb '21 09:41,,5.13.2,5.15.2,,,,,,,,,,,,,,,,,,,,,Packaging & Installer,,,,0,,,,"In Qt Online installer directory {{Qt/Licenses}} we get:
{code:java}
ThirdPartySoftware_Listing.txt
LICENSE
LICENSE.FDL
{code}
But non of these license files mentions, for example, ICU license, while {{libicu*}} are shipped and we have to bundle them with our application too.


 One can find ICU licenses ""buried"" in docs within {{Qt/Docs/Qt-5.13.2/qtwebengine/qtwebengine-3rdparty-icu.html}}, but that's unusable for distribution.

It would be convenient if Licenses directory contained plaintext files for all third party licenses, available to copy during CMake/QMake run, for example, to the output directory, ready to build installer, etc.

While currently Qt user have to manually sync relevant license files from upstream.

 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0qfgn:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add an uninitialized resize to sequential containers,QTBUG-90581,312173,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,thiago,peppe,peppe,25 Jan '21 11:06,25 Jan '21 11:06,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Core: Containers and Algorithms,,,,0,,,,"To complement resize(), which (when growing) value-initializes the objects, add constructors and resize-like methods that ""don't initialize"".

h2. How to ""not initialize""

h3. Default construction

The straightforward way is to default construct elements in the container, not value construct them. However, such a thing won't give benefits for Qt types which always initialize when default constructed...

h3. Qt::Uninitialized

Many Qt types have a constructor taking a Qt::Uninitalized argument. So, if the type is constructible using that, we should definitely use it.

h3. Not constructed at all

Not a fan of this, at least, not through resize() methods -- having objects around for which lifetime hasn't started yet is tricky to manage (they can't be merely overwritten via assignments).

h2. What kind of API to offer

h3. uninitializedResize(m)  / resizeUninitialized(n)

(Subject to the usual bikeshedding on the name). If n < size() then they erase from the end, as usual. If n > size(), reallocate if necessary and construct the n-size() elements at the end as specified above. So this is mostly like resize(), it just changes what happens when growing.

h3. Resize for overwrite

P1072 is also proposing a different API, resizing AND delegating initialization to a function called from within the resizing:

https://wg21.link/p1072

I wonder how actually practical it is, or if it's a boring ""settling for a compromise"" to actually achieve Standardizataion...

h2. Bonus points: fix QByteArray / QString

Stop making QByteArray::resize() / QString::resize() not initialize their data, unlike *any* other resize() method. (They should still NUL terminate it, that's another story)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0qein:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Poor documentation for QSortFilterProxyModel::sortRole and filterRole,QTBUG-90481,311925,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,dfaure_kdab,andrhans,andrhans,20 Jan '21 12:01,20 Jan '21 12:01,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Core: Item Models,Documentation,,,0,,,,"The QSortFilterProxyModel::sortRole and filterRole properties are strange. They only affect the default implementations of `filterAcceptsRows` and `lessThan`, virtual methods that you typically reimplement to provide custom filtering or sorting. But when reimplementing, these properties lose their entire value it seems.

More than once, we have had developers who think these properties affect which roles trigger filtering or sorting. You don't want all changes to affect sorting, or filtering, only a few ones.

At best, the docs could be improved to indicate that these properties only work if you don't reimplement the above-mentioned methods...",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0qd4f:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Tool for inspecting connections between QObjects,QTBUG-90454,311885,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,macadder,gogo,gogo,19 Jan '21 19:28,19 Jan '21 19:28,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Testing: qtestlib,,,,0,,,,"To have exported class into QObject as singleton cannot be running in separate thread (moveToThread). To overcome this issue, you need to create an intermediate object, expose it to QML and connect it with worker QObject that is running in separate thread.

With this pattern, you get a set of code that cannot be easily tested (connectTo method, for instance, more on example below) and may pose problems when refactoring and changing your API between the intermediate and worker class.

An example code:
{code:c++}
// Intermediate
class MyIntermediate : public QObject {
  Q_OBJECT
  QML_ELEMENT
  QML_SINGLETON

public:
  explicit MyIntermediate() = default;

  void connectTo(const MyWorker *worker) const {
    connect(this, &MyIntermediate::query, worker, &MyWorker::query);
    connect(this, &MyIntermediate::command, worker, &MyWorker::command);

    connect(worker, &MyWorker::commandError, this, &MyIntermediate::commandErrorHandler);
    connect(worker, &MyWorker::commandSuccess, this, &MyIntermediate::commandSuccess);
    connect(worker, &MyWorker::queryResponse, this, &MyIntermediate::queryResponse);
  }

public slots:
  void commandErrorHandler(int errorCode) {
    // Here be some mapping if needed
  }

signals:
  // Queries
  void query();

  // Commands
  void command(const QString &input);

  // Responses
  void queryResponse(const QStringList &results);
  void commandSuccess();
  void commandError(int erorCode);
};

// Worker
class MyWorker : public QObject {
  Q_OBJECT

public:
  explicit MyWorker() = default;

public slots:
  // Queries
  virtual void query();

  // Commands
  virtual void command(const QString &input);

signals:
  void queryResponse(const QStringList &results);
  void commandSuccess();
  void commandError(int errorCode);
};

{code}
As you can see, it would be hard to test the connections (unless writing integration tests for each function).

So I've created a few helper methods to verify the connectivity is correct (while you go and change the interaction between both classes).

The tool:
{code:c++}
#define INSPECT_CONNECTIONS                                                    \
private:                                                                       \
  int countReceivers(const char *signal) const override {                      \
    return receivers(signal);                                                  \
  }                                                                            \
  const QObject *getQObject() const override { return this; }                  \
  void assertSuperclass(const QMetaObject &superclassMetaObject) override {    \
    auto errorMsg                                                              \
        = QString(                                                             \
              ""Inspecting wrong class for connections, inspecting %1 on %2"")   \
              .arg(superclassMetaObject.className())                           \
              .arg(metaObject()->className());                                 \
    QVERIFY2(metaObject()->inherits(&superclassMetaObject),                    \
             qPrintable(errorMsg));                                            \
  }

#define INSPECT_SIGNAL(y, x, c) QCOMPARE(y.numConnections(x), c)

class ConnectionInspector;

class InspectorAddon {
  friend class ConnectionInspector;

protected:
  virtual int countReceivers(const char *signal) const = 0;
  virtual void assertSuperclass(const QMetaObject &superclassMetaObject) = 0;
  virtual const QObject *getQObject() const = 0;
};

class ConnectionInspector : public QMap<QString, int> {
public:
  int sum() {
    int output = 0;
    for (auto num : qAsConst(*this))
      output += num;
    return output;
  }

  template <typename PointerToMemberFunction>
  inline int numConnections(PointerToMemberFunction signal) {
    auto signalMember = QMetaMethod::fromSignal(signal);
    auto name = methodToString(signalMember);
    return value(name);
  }

  template <class T> void inspect(const InspectorAddon *objectInspector) {
    auto *object = objectInspector->getQObject();
    assertSuperclass(&T::staticMetaObject, object->metaObject());

    for (auto objectSignal : listSignals<T>()) {
      auto signalSignature = objectSignal.methodSignature();
      // A magic number from SIGNAL macro
      auto signalDescriptor = signalSignature.prepend('2');
      insert(ConnectionInspector::methodToString(objectSignal),
             objectInspector->countReceivers(signalDescriptor));
    }
  }

private:
  static QString methodToString(const QMetaMethod &method) {
    return QString(""%1:%2"").arg(method.enclosingMetaObject()->className(),
                                QString(method.methodSignature()));
  }

  static void assertSuperclass(const QMetaObject *superclassMetaObject,
                               const QMetaObject *metaObject) {
    auto errorMsg
        = QString(""Inspecting wrong class for connections, inspecting %1 on %2"")
              .arg(superclassMetaObject->className(), metaObject->className());
    QVERIFY2(metaObject->inherits(superclassMetaObject), qPrintable(errorMsg));
  }

  template <class T> static QList<QMetaMethod> listSignals() {
    QList<QMetaMethod> objectSignals;

    auto numberOfMethods = T::staticMetaObject.methodCount();
    for (auto methodIndex = T::staticMetaObject.methodOffset();
         methodIndex < numberOfMethods; ++methodIndex) {
      auto method = T::staticMetaObject.method(methodIndex);
      if (method.methodType() == QMetaMethod::Signal) {
        objectSignals << method;
      }
    }

    return objectSignals;
  }
};
{code}
And this is how the test looks like:
{code:c++}
class MonitoredMyWorker : public MyWorker, public InspectorAddon {
  Q_OBJECT
  INSPECT_CONNECTIONS
};

class MonitoredMyIntermediate : public MyIntermediate, public InspectorAddon {
  Q_OBJECT
  INSPECT_CONNECTIONS
};

void MyIntermediateTest::test_connectTo() {
  InspectedMyIntermediate intermediate;
  InspectedMyWorker worker;

  intermediate.connectTo(&worker);

  ConnectionInspector inspector;
  inspector.inspect<MyWorker>(&worker);
  inspector.inspect<MyIntermediate>(&intermediate);

  INSPECT_SIGNAL(inspector, &MyIntermediate::query, 1); // Cannot assert the other end, but can assert receivers count
  // All other signals ...
  QCOMPARE(inspector.sum(), 5); // ""Guard"" assert if you add new connections
}
{code}
It is crude and feels a bit of ""bad magic"", but wanted to share if anyone sees this useful in any way. It could require some feature (like asserting all signals are connected, or number of all available signals, etc.).",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0qcvz:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Android: Add support for QPlatformWindow::safeAreaMargins(),QTBUG-90346,311652,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,vestbo,andysh,andysh,15 Jan '21 09:39,15 Jan '21 09:39,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,QPA,,,,2,Reported_by_support_standard,,,Android: Add support for QPlatformWindow::safeAreaMargins() as this is still applicable on Android so it is possible to know where you can safely render. This would complement the iOS support of the same functionality then.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Android,,,,,,"0|i0qblj:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Support more file formats for QSettings,QTBUG-90336,311637,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,thiago,wangwenx190,wangwenx190,15 Jan '21 02:16,15 Jan '21 02:16,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Core: Other,,,,0,,,,"Is it possible to add more ""backends"" to QSettings? XML and JSON are widely used as settings file formats nowadays. Can Qt support such file formats in QSettings?",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0qbif:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add support for backdrop filter in QtQuick items,QTBUG-90249,311451,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt.team.graphics.and.multimedia,greenwolf,greenwolf,13 Jan '21 19:59,13 Jan '21 19:59,18 Feb '21 09:41,,6.0,,,,,,,,,,,,,,,,,,,,,,Quick: Graphical Effects,,,,0,,,,"It would be nice to have support for backdrop filters in Qt, especially to implement effect like background blur or the acrylic effect from fluent design:

!https://docs.microsoft.com/en-us/windows/uwp/design/style/images/appacrylic_darktheme.png!

!image-2021-01-13-14-59-40-023.png!

This effect is super common now. It's possible to be done in QtQuick 2.0 but this is technically complicated, and needs a lot of adaptation depending on the case to keep it performant.

 

Would be nice to have a way to do it easily in QtQuick so the Scene Graph optimize the effect.

 

The implementation is coming to web browser (on Firefox you need to enable a config), to have a preview of the css filter please see [https://glassmorphism.com/]",,,,,,,,,,,,,,,,,,,"13 Jan '21 19:59;greenwolf;image-2021-01-13-14-59-40-023.png;https://bugreports.qt.io/secure/attachment/103913/image-2021-01-13-14-59-40-023.png",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0qagn:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add the possibility to create custom QAbstractSeries,QTBUG-90247,311446,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,e0348803,ikkinit,ikkinit,13 Jan '21 16:18,13 Jan '21 16:18,18 Feb '21 09:41,,5.15.2,6.0.0,,,,,,,,,,,,,,,,,,,,,Charts,,,,0,,,,"For the moment it's impossible to create a custom chart serie or derive from other one for some reasons :
 * The enum QAbstractSeries::SeriesType don't have a UserType defined
 * The XYChart class is private so it's impossible to derive from it in order to create a custom displayed item

Could you add the possibility to create custom chart series ?

 

For example, in my case I would like to have a spline serie with control points customisable.

As QSplineSeries cannot user define control points, I would like to create my own serie instead based on QLineSeries.

 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0qafj:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add a means to allow whitespace to be preserved when using QDomDocument,QTBUG-90003,311131,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,,andysh,andysh,12 Jan '21 07:13,12 Jan '21 07:13,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,XML: DOM,,,,1,Reported_by_support_standard,,,"Add a means to allow whitespace to be preserved when using QDomDocument, currently it is ignored by default yet with QXmlSimpleReader this was not the case. So now that this is no longer available, then having a means to preserve it would be ideal",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0q8jj:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
QPageSetupDialog: set margins to minimum if input value <= minimum,QTBUG-89965,311042,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,johnlayt,miikapernu,miikapernu,11 Jan '21 08:43,11 Jan '21 08:43,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,GUI: Printing,,,,1,Reported_by_support_standard,,,"Currently if one of the margins is set below the minimum in the dialog, changes to the others will be ignored as well due to QPageLayout::setMargins() disregarding all the margins if one of them is outside the range.
=> If the input value is below the minimum set it to minimum instead to allow the values to be updated.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0q80f:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"QFont support for OpenType features (variations, stylistic sets, etc.)",QTBUG-89958,311029,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,esabraha,brainpreview,brainpreview,11 Jan '21 01:43,11 Jan '21 01:43,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,GUI: Font handling,,,,0,,,,"Hello Qt developers,

Is there any current or planned support/interface for manipulating advanced [OpenType features|https://docs.microsoft.com/en-us/typography/opentype/spec/features_pt] like stylistic alternatives and [variations|https://docs.microsoft.com/en-us/typography/opentype/spec/otvaroverview]?

My apologies if this is already available in some API and I missed it.

Thank you!",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0q7xj:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Option to sort attributes in QDomDocument::toString(),QTBUG-76800,280718,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,,pravorskyi,pravorskyi,30 Jun '19 12:56,10 Jan '21 21:47,18 Feb '21 09:41,,5.13.0,6.0,6.0.0,,,,,,,,,,,,,,,,,,,,XML: DOM,,,,2,,,,"Saving a QDomDocument to file sometimes results in its elements' attributes being reordered.

.e.g. the XML attributes in this QString:

{code:java}
<root name=""fred"">
    <element1 c=""a"" d=""b"" f=""c""/ >
</root>
{code}

get reordered to:

{code:java}
<root name=""fred"" >
    <element1 f=""c"" c=""a"" d=""b"" />
</root> 
{code}

_I know that similar bugs were reported before and I have read them._

_The previous reasons to not consider attribute order was optimization._

Instead of changing the default behavior, I propose adding an another option: a method or flag that makes it possible to save XML files with ordered attributes. Application developers would be able to choose whether they need it or not.
h2. Rationale

Even if the XML standard does not care about the order of attributes, people may care. It is true that there are tools for comparing XML files, but XML is not only machine-readable. People sometimes need to read XML too, which is why *we already have options for pretty printing XML and JSON*. We even have options to change the size of indentation in XML, e.g. ""{{QDomDocument::toString(int indent = 1)}}"".

XML can be tracked in SCM (for example, Git), and random rearrangments produce useless large diffs.

h2. Qt6?

It seems that Qt5 is at the end of its improvement period. Qt6 is on the roadmap, and I think it would be a good idea to introduce this feature before Qt6 is released.

I want to help and can prepare patches if this feature request is approved.",,,,,,,,,,,,,,,QTBUG-8158,QTBUG-5364,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0lhtz:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"24 Sep '20 18:56;holyspicoli;My two cents: I agree that this would be a beneficial feature (if not in Qt5, then hopefully in Qt6).

In QTBUG-8158, the rationales for _not_ implementing consistently-ordered attributes were as follows:
----
h3. 1. Order of attributes is meaningless.
{quote}...the DOM specification...states that the order of attributes has no meaning, [therefore] there is _no reason_ for Qt to respect the order of the attributes. [Emphasis added.]
{quote}
Reference here? *Extensible Markup Language (XML) 1.1 (Second Edition)*, section 3.1: [Start-Tags, End-Tags, and Empty-Element Tags|https://www.w3.org/TR/xml11/#sec-starttags]:
{quote}Note that the order of attribute specifications in a start-tag or empty-element tag is not significant.
{quote}
Which may be true for machines generally, but as [~pravorskyi] mentioned, the order of attributes _does_ have meaning for humans and version control systems, for example. (XML is intended to be human-readable as well as machine-readable, is it not?)  Isn't that a valid reason to maintain a consistent order of attributes in [QDomDocument|https://doc.qt.io/qt-5/qdomdocument.html]?
----
h3. 2. Implementation would hurt performance.
{quote}...it would mean that the internal representation of the attributes would need to change and this would have a performance hit as a result.
{quote}
I'm a noob, but I'm guessing that's here in [src/xml/dom/qdom_p.h|https://github.com/qt/qtbase/blob/dev/src/xml/dom/qdom_p.h#L238]?
{code:c++}
QMultiHash<QString, QDomNodePrivate *> map;{code}
From the documentation on [container classes|https://doc.qt.io/qt-5/containers.html]:
{quote}...if order doesn't matter [QHash|https://doc.qt.io/qt-5/qhash.html] is a faster alternative (to [QMap|https://doc.qt.io/qt-5/qmap.html]).
{quote}
I assume this is due to the use of a hash table? And I assume that, by extension, [QMultiHash|https://doc.qt.io/qt-5/qmultihash.html] is also faster than [QMultiMap|https://doc.qt.io/qt-5/qmultimap.html] for that reason? But even though a hash table might be _generally_ faster, I think an XML attribute list would be a rather specific application of a hash table – one that might be an exception to that general rule?

In QTBUG-8158, [~prade] cited *[QMap vs. QHash: A small benchmark|https://woboq.com/blog/qmap_qhash_benchmark.html]* of lookups, which found that:
{quote}QMap is FASTER than QHash in the case that there are less than 20 entries (which imho will be true for most [XML] applications).
{quote}
If so, then it suggests that performance might _improve_ in many cases for a QDomDocument implemented with QMultiMap instead of QMultiHash.  (And FWIW, the interface to [QMultiMap|https://doc.qt.io/qt-5/qmultimap-members.html] looks very similar to that of [QMultiHash|https://doc.qt.io/qt-5/qmultihash-members.html] – it might even be a drop-in replacement?)","03 Jan '21 17:55;chehrlic;So why do you think QMulteMap will retain your 'order' (whatever this is)? It will only sort the attributes by key so your attributes are sorted alphabetically. But this is as wrong as not sorting them at all. And as you already wrote - the order is not defined by the standard so we don't need to care either.","10 Jan '21 21:47;holyspicoli;Good points, [~chehrlic] – in re-reading my earlier comment, I see that I didn't explain myself very well, so please allow me to clarify.
{quote}So why do you think QMulteMap will retain your 'order' (whatever this is)? It will only sort the attributes by key so your attributes are sorted alphabetically.
{quote}
Yes, exactly.  For my part, I'm not concerned with _in which_ order the attributes are sorted – only that the attributes are sorted _consistently_ (in whatever order that happens to be, whether alphabetical or otherwise), rather than in a random order that _changes every time_; and I think having them sorted alphabetically would be the perfect solution.  (But I see that's not stated explicitly...perhaps the OP meant that they want the ability to sort the attributes in a _custom/user-defined_ order?  If so, then I have misinterpreted the original report.)
{quote}And as you already wrote - the order is not defined by the standard so we don't need to care either.
{quote}
Right, but my point (and the OP's point, I think) is that _despite_ the standard, consistent order is still useful for (A) human readability, and (B) storage in version control systems; so for those reasons, IMHO we _should_ care about the order of attributes, _even though_ it's not required by the standard.  Thus the OP's suggestion to provide an optional implementation that _does_ maintain a consistent order of attributes, for those applications that would benefit from it – surely there is value in such a feature?",,,,,,,,,,,,,,,,,,,
SVG Tiny -> Basic,QTBUG-72026,270209,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,,larss,larss,26 Nov '18 07:42,10 Jan '21 13:07,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,SVG Support,,,,6,,,,"QsvgRenderer should support SVG Basic to enable the use of filters.
Mobile devices are more powerful today. Using WebKit can not be a solution because the binary will grow unreasonable.

https://en.wikipedia.org/wiki/SVG_filter_effects

Relates to QTBUG-9081",,,,,,,,,,,,,,,,,,,"26 Nov '18 07:39;larss;result.png;https://bugreports.qt.io/secure/attachment/78446/result.png","26 Nov '18 07:39;larss;source.svg;https://bugreports.qt.io/secure/attachment/78445/source.svg",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0jv7r:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"26 Nov '18 07:44;larss;What do you think [~srutledg]?","04 Dec '18 07:47;dg0yt;QSvgGenerator shares many of the serious limitations of QsvgRenderer.

Clipping is another feature requiring more than SVG Tiny (QTBUG-23200, QTBUG-28636).",,,,,,,,,,,,,,,,,,,,
Provide FlowLayout for Qt Quick,QTBUG-89950,310967,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt.team.quick.subscriptions,phoenox,phoenox,09 Jan '21 11:26,09 Jan '21 11:26,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Quick: Layouts,,,,1,,,,"While there is a layout corresponding to most of the positioners, there is no {{FlowLayout}}.
Please consider implementing a {{FlowLayout}}.

One simple example use case that is not possible with the {{Flow}} positioner:

 
{code:java}
FlowLayout {
  id: flowLayout
  Item {
    id: item0
    Layout.fillWidth: true
    Layout.minimumWidth: 100
  }
  Item {
    id: item1
    Layout.minimumWidth: 100
  }
}{code}
 * If the {{flowLayout}} had {{width=150}}, then it would have two rows, with {{item0}} with {{width=150}} in the first row and {{item1}} with {{width=100}} in the second row.
 * If the {{flowLayout}} had {{width=300}}, then it would have just one row with {{item0}} with {{width=200}} and {{item1}} with {{width=100}}.

 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0q7jr:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Provide a QListWidget::findData(...) method,QTBUG-85402,301390,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt.team.quick.subscriptions,slysven,slysven,02 Jul '20 19:36,07 Jan '21 19:29,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Widgets: Itemviews,,,,0,,,,"Would it be feasible to provide a means to search the `data` portion of QListWidgetItems held in a QListWidget? Currently, I note  there _is_ a method to search the text part only:

 
{quote}{color:#007330}QList{color}<{color:#007330}QListWidgetItem{color}*> {color:#007330}QListWidget{color}::findItems(const {color:#007330}QString{color}&text, {color:#007330}Qt::MatchFlags{color} flags) const

Finds items with the text that matches the string text using the given flags.
{quote}

I would like to draw a comparison with the QComboBox widget which instead returns an index rather than a list of item pointers but can do so for _both_ the text entry specifically but _also_ for any data role as well:

{quote}int {color:#007330}QComboBox{color}::findData(const {color:#007330}QVariant{color}&data, int role = Qt::UserRole, {color:#007330}Qt::MatchFlags{color} flags = static_cast<Qt::MatchFlags>(Qt::MatchExactly|Qt::MatchCaseSensitive)) const

Returns the index of the item containing the given data for the given role; otherwise returns -1.

The flags specify how the items in the combobox are searched.

int {color:#007330}QComboBox{color}::findText(const {color:#007330}QString{color}&text, {color:#007330}Qt::MatchFlags{color} flags = Qt::MatchExactly|Qt::MatchCaseSensitive) const

Returns the index of the item containing the given text; otherwise returns -1.

The flags specify how the items in the combobox are searched.
{quote}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0op33:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"03 Jan '21 18:08;chehrlic;What do you gain about the current implementation? The code in your patch doesn't look like there's much gain over the current function","04 Jan '21 15:09;slysven;I think the person who proposed that patch had latched onto the second of the two methods for the {{QComboBox}} and thought they needed to provide a similar method for the {{QListWidget}} - whereas my original comparison was trying to show how that second method was comparable to the one for the {{QListWidget}} and what I was asking for was something like the first method - that would look through a specified data role (and not just the display text one). This is particular so that data assigned against the {{Qt::UserRole}} and higher can be used to access/select items.

 

I would posit that the desired method would have the following signature:

QList<QListWidgetItems*> {color:#007330}QListWidget{color}::findData(const {color:#007330}QVariant{color}&data, int role = Qt::UserRole, {color:#007330}Qt::MatchFlags{color} flags = static_cast<Qt::MatchFlags>(Qt::MatchExactly|Qt::MatchCaseSensitive)) const

Returns a list of pointers to the {{QListWidgetItems}} of the item containing the given data for the given role; returns an empty list if no matches are found.

The flags specify how the items in the \{{QListWidget}} searched.","04 Jan '21 16:33;chehrlic;Even I don't understand why this would be needed - esp. the findFlags makes me worry - you're searching for data, not for strings here - I reopen the bug.","07 Jan '21 19:29;slysven;Those flag options are present in the {{QComboBox::findData(...)}} method so I was assuming that they would be equally applicable for a corresponding method for the {{QListWidget}} class. How they are applied to non-textual data elements is not something I was unduly concerned about - but whatever is good for the combo-box would probably be equally good for the list widget...! :)",,,,,,,,,,,,,,,,,,
Add support for Parallel Coordinate Plots,QTBUG-89877,310852,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,e0348803,andysh,andysh,07 Jan '21 11:22,07 Jan '21 11:22,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Charts,,,,0,Reported_by_support_premium,,,"Add support for Parallel Coordinate Plots (limited interactivity with sliders) as these would be useful to have. An example of them can be found here:

https://www.google.com/search?q=parallel+coordinate+plots+(limited+interactivity+with+sliders)&rlz=1C1CHBD_frBE786BE786&sxsrf=ALeKk033IL-MtkHlQ1qbOviYcqW175Imlg:1610017335015&source=lnms&tbm=isch&sa=X&ved=2ahUKEwjxl9f61YnuAhURYxoKHakUBv0Q_AUoAXoECAUQAw&biw=1920&bih=912",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0q6uf:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add a means to allow mouse/touch events to pass through a Control if desired instead of just accepting all of them,QTBUG-89785,310648,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt.team.quick.subscriptions,andysh,andysh,04 Jan '21 11:17,04 Jan '21 14:31,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Quick: Controls 2,,,,0,Reported_by_support_standard,,,Add a means to allow mouse/touch events to pass through a Control if desired instead of just accepting all of them. This allows the user to have finer control over what happens to events if they are over another item.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0q5vz:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"04 Jan '21 14:31;mitch_curtis;Could use something similar to https://doc.qt.io/qt-5/qml-qtquick-mousearea.html#acceptedButtons-prop.

I couldn't find any changes that had an explanation of why certain items don't allow events through, but I know there was a reason. ",,,,,,,,,,,,,,,,,,,,,
Function QBluetoothLocalDevice::connectedDevices only return a list of address,QTBUG-89779,310632,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,ablasche,nguoithichkhampha,nguoithichkhampha,04 Jan '21 09:36,04 Jan '21 09:36,18 Feb '21 09:41,,5.15.0,,,,,,,,,,,,,,,,,,,,,,Connectivity: Bluetooth,,,,0,,,,"As I see in the Qt source code. function QBluetoothLocalDevice::connectedDevices get data from native android function 
https://developer.android.com/reference/android/bluetooth/BluetoothManager#getConnectedDevices(int)
this function return a list of BluetoothDevice. and BluetoothDevice has many useful info include bluetooth device name.
But when wrapper from native function to C++ code. Qt team does not provide info of bluetooth device name only bluetooth address.
It will very useful if function QBluetoothLocalDevice::connectedDevices return device name as well.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Android,,,,,,"0|i0q5sn:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
function requirement of Q3DScatter with QScatter3DSeries for display key point and spline,QTBUG-82293,293755,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,tokorpip,tigerlfj,tigerlfj,18 Feb '20 12:44,04 Jan '21 06:47,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Data Visualization,,,,1,,,,"There is a function requirement that  display the key 3D points and draw a spline(NURBS,polyline etc.) through these 3D points.
Qt Data Visualization module is a best module but it lose this function logtime.

Now, i use Q3DScatter and QScatter3DSeries  to display all key 3D points .
For display a spline through these 3D key points , i make a lot of 3d points from a spline, to display a lot points to display spline curve.  but the effect is not good。
Clound your team to add the display 3Dcurve function?
 
!image-2020-02-18-20-43-52-464.png!",,,,,,,,,,,,,,,,,,,"18 Feb '20 12:43;tigerlfj;a.jpg;https://bugreports.qt.io/secure/attachment/92164/a.jpg","18 Feb '20 12:44;tigerlfj;image-2020-02-18-20-43-52-464.png;https://bugreports.qt.io/secure/attachment/92163/image-2020-02-18-20-43-52-464.png",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0njfz:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"27 Dec '20 23:45;tigerlfj;Could add it in QT6.1?","04 Jan '21 06:47;tokorpip;A straight port of the current implementation is planned for 6.1, so there will be no new features added for now. We will see if there will be a new version of Qt Data Visualization module at some point.",,,,,,,,,,,,,,,,,,,,
Can't use wide characters as password mask character,QTBUG-74296,275149,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,esabraha,broulik,broulik,08 Mar '19 15:19,03 Jan '21 20:32,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,GUI: Text handling,,,,0,,,,"Trying to use a wide character as {{PasswordMaskCharacter}} does not work.
{noformat}
case QPlatformTheme::PasswordMaskCharacter:
    return QChar(0x1F648);
{noformat}
This affects both QtQuick Controls {{TextField}} and QWidget {{QLineEdit}}.

Setting the {{passwordCharacter}} property on a {{TextInput}} exhibits the same behavior as doing so via {{themeHint}}.

Using a  {{QString}} which can actually hold a character this wide doesn't work either.",Qt 5.12.0 on KDE neon,,,,,,,,,,,,,,,,,,"08 Mar '19 15:15;broulik;Bug.png;https://bugreports.qt.io/secure/attachment/81769/Bug.png","08 Mar '19 15:15;broulik;Expected.png;https://bugreports.qt.io/secure/attachment/81768/Expected.png",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0kmlj:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"03 Jan '21 20:32;chehrlic;Because QChar is only 16bit wide as described in the documentation.",,,,,,,,,,,,,,,,,,,,,
if an arg contains a %1 pattern that pattern will not be copied to the target string,QTBUG-80198,288819,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,thiago,u19809,u19809,19 Nov '19 18:25,03 Jan '21 19:19,18 Feb '21 09:41,,5.13.2,,,,,,,,,,,,,,,,,,,,,,Core: QString and Unicode,,,,0,,,,"I have this code

QString( ""%1 foo %2"" ).arg( Str1 ).arg( Str2 )

Str2 contains

""bar""

now - by chance - Str1 contains

""baz %1"" 

I get as output

""baz bar foo %2"", and not as I would expect

""baz %1 foo bar""

 

So it seems that the %1 of the Str1 value is used as pattern and that - as Str1 is processed, Str2 becomes the value for %1 and not for %2

 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0mrhz:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"03 Jan '21 19:19;chehrlic;That's [documented |https://doc.qt.io/qt-5/qstring.html#arg-14]and the solution is to use QString( ""%1 foo %2"" ).arg( Str1, Str2 )",,,,,,,,,,,,,,,,,,,,,
Missleading info about signal-signal connections in https://doc.qt.io/qt-5/signalsandslots.html,QTBUG-82566,294170,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,docteam,daschuer,daschuer,22 Feb '20 20:40,03 Jan '21 19:06,18 Feb '21 09:41,,5.12,5.13,,,,,,,,,,,,,,,,,,,,,Documentation,,,,0,,,,"The documentation about signal-signal connections is misleading, and can be improved. 

https://doc.qt.io/qt-5/signalsandslots.html
""You can connect as many signals as you want to a single slot, and a signal can be connected to as many slots as you need. It is even possible to connect a signal directly to another signal. (This will emit the second signal immediately whenever the first is emitted.)""

The term directly, can be read that it uses an implicit direct connection.

It would be nice if we can rephrase this a bit. How about that: 

""You can connect as many signals as you want to a single slot, and a signal can be connected to as many slots as you need. It is even possible to connect a signal to another signal. In such a signal-signal connection the second signal is emitted in place of a slot call. By default connected slots and signals are executed in the receiver's thread.""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0nl8f:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"24 Feb '20 07:50;tosaario;This should target Qt rather than Coin project.","27 Feb '20 07:42;hehalmet;Please re-assignee this to Qt and to correct component",,,,,,,,,,,,,,,,,,,,
Support animations which react to property changes while already running,QTBUG-81040,290895,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt.team.quick.subscriptions,jpetrell,jpetrell,01 Jan '20 18:32,01 Jan '21 23:10,18 Feb '21 09:41,,6.0.0,,,,,,,,,,,,,,,,,,,,,,Core: Animation Framework,Quick: Core Declarative QML ,,,1,,,,"Another suggestion for Qt 6: Qt Quick Animations don't react to property changes while they are running, making them a bit clumsy to use in declarative environment, where the binding evaluation order is often undefined or otherwise hard to control. In many cases you are forced to drop declarative bindings and just configure the animation imperatively within a function that ends with line that starts the animation (running = true).

There is probably some good reason why the animations work like this though, which I don't remember, but which should be checked e.g. from Michael Brasser or some other Qt Quick oldtimer to avoid throwing the baby out with the bath water.",,,,,,,,,,,,,,,,,,,"01 Jan '21 23:09;rectalogic;anim.qml;https://bugreports.qt.io/secure/attachment/103406/anim.qml",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0n3jr:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"01 Jan '21 23:09;rectalogic;Here's an example you can run with {{qmlscene}}

It has a {{NumberAnimation}} with {{from}} bound to {{width}} which is determined by the window size ({{ResizeMode::SizeRootObjectToView}})

I have to listen for {{onWidthChanged}} and manually reset {{animation.from = width}} and restart the animation for the binding to take effect.

[^anim.qml]",,,,,,,,,,,,,,,,,,,,,
"Note to add CMake variables to the cache in ""Deploying an Application on Android""",QTBUG-89732,310542,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,docteam,talkless,talkless,30 Dec '20 08:39,30 Dec '20 08:39,18 Feb '21 09:41,,5.15.2,,,,,,,,,,,,,,,,,,,,,,Documentation,,,,0,,,,"I've struggled for more than a day trying to figure out why {{ANDROID_PACKAGE_SOURCE_DIR}} does not work with CMake.

 I just get default {{AndroidManifest}} file, and android-build/res/* keeps cleared after copying manually.

Until I found _blog post_ [https://www.kdab.com/qtcreator-cmake-for-android-plugin/] that says:
{noformat}
The CACHE is mandatory, otherwise QtCreator won’t see the variable and it won’t use it
{noformat}
So I have to define variable like this:
{code:java}
set(ANDROID_PACKAGE_SOURCE_DIR ""${PROJECT_SOURCE_DIR}/android"" CACHE INTERNAL """")
{code}
i.e. adding {{CACHE..}}

Meanwhile, ""Deploying an Application on Android"" article ([https://doc.qt.io/qt-5/deployment-android.html]) only says this:
{noformat}
Note: This list of variables can also be used with CMake.
{noformat}
it would be nice to have note about setting {{CACHE}}, or just full example of doing that in CMake.

Also, if I create new CMake project with QtCreator 4.14, I get this commented block:
{code:java}
# QtCreator supports the following variables for Android, which are identical to qmake Android variables.
# Check https://doc.qt.io/qt/deployment-android.html for more information.
# They need to be set before the find_package(...) calls below.

#if(ANDROID)
#    set(ANDROID_PACKAGE_SOURCE_DIR ""${CMAKE_CURRENT_SOURCE_DIR}/android"")
#    if (ANDROID_ABI STREQUAL ""armeabi-v7a"")
#        set(ANDROID_EXTRA_LIBS
#            ${CMAKE_CURRENT_SOURCE_DIR}/path/to/libcrypto.so
#            ${CMAKE_CURRENT_SOURCE_DIR}/path/to/libssl.so)
#    endif()
#endif()
{code}
Note that there's no {{CACHE}} there too!",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0q59j:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
QJsonObject iterator should return key/value pair,QTBUG-89713,310497,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,thiago,bubke,bubke,28 Dec '20 15:43,29 Dec '20 12:27,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Core: Other,,,,0,,,,"It would be nice if you could write:

for (const auto &[key, value] : jsonValue) ...

The iterator should return a key/value pair instead of a value. Otherwise you have to work with the iterator directly which makes the code much less readable.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0q52f:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"28 Dec '20 23:35;thiago;Unfortunately, that's source incompatible. We can only do it for new classes when designing them from scratch, like I did for QCborMap.

For older ones, we can add keyValueIterator(), like QMap and QHash have.","29 Dec '20 09:33;bubke;What about returning a std::ranges::*range too? It could be conditional to C++ 20.","29 Dec '20 12:27;thiago;I don't know the first thing about those, so I can't even comment on feasibility and consequences.",,,,,,,,,,,,,,,,,,,
Strange behaviour with Q_OBJECT_BINDABLE_PROPERTY and std::unique_ptr,QTBUG-89489,309881,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,thiago,autoantwort,autoantwort,15 Dec '20 01:17,28 Dec '20 01:38,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Core: Object Model,,,,0,,,,"I have the following class in foo.h:

{code:c++}
class Foo : public QObject
{
    Q_OBJECT
    Q_PROPERTY(int x READ x WRITE setX NOTIFY xChanged BINDABLE bindableX)
    Q_PROPERTY(int * p READ getP  NOTIFY pChanged BINDABLE bindableP)
public:
    explicit Foo(QObject *parent = nullptr);

    int x() const { return xProp; }
    void setX(int x) { xProp = x; emit xChanged();}
    QBindable<int> bindableX() { return QBindable<int>(&xProp); }

    int * getP() const { return p.value().get(); }
    void setP(std::unique_ptr<int> x) { p = std::move(x); emit pChanged();}
    QBindable<const std::unique_ptr<int>&> bindableP() { return QBindable<const std::unique_ptr<int>&>(&xProp); }

signals:
    void xChanged();
    void pChanged();

private:
    Q_OBJECT_BINDABLE_PROPERTY(Foo, int, xProp, &Foo::xChanged)
    Q_OBJECT_BINDABLE_PROPERTY(Foo, std::unique_ptr<int>, p, &Foo::pChanged)
};
{code}
This is my main.cpp:
{code:c++}
int main(int argc, char *argv[])
{
    Foo f;
    auto b = f.bindableP().subscribe([&]{
        qDebug() << ""pointer changed to"" <<f.getP() ;
    });
    auto b2 = f.bindableX().subscribe([&]{
        qDebug() << ""x changed to"" <<f.x() ;
    });
    QProperty<int> test;
    test.setBinding([&]{
        auto p =f.getP();
        if(p)
            return *p * 2;
        return -1;
    });
    auto ts = test.subscribe([&](){qDebug() << ""test is now"" << test;});
    f.setP(std::make_unique<int>(20));
    f.setX(4);
    qDebug() << ""test"";
    f.setP(std::make_unique<int>(30));
    f.setX(5);
    qDebug() << ""test"";
    return 0;
}
{code}
With this code the output looks as expected:

{noformat}
pointer changed to 0x0
x changed to 0
test is now -1
test is now 40
x changed to 4
pointer changed to 0x560411674010
test
test is now 60
x changed to 5
pointer changed to 0x560411675090
test
{noformat}
BUT: If I remove the 'f.setX(4)' in the main.cpp I get the following:
{noformat}
pointer changed to 0x0
x changed to 0
test is now -1
test is now 40
test
test is now 60
x changed to 5
pointer changed to 0x559910401090
test
{noformat}
The 'pointer changed to ...' output is missing. But the test variable was recomputed correctly. 
PS: The output does not change if I remove the 'emit ...' calls
PS 2: If I remove the signal from the std::unique_ptr<int> property, I get compile errors. 
PS 3: The QProperty system is very cool! I would love to see a blog post about how the 'dependency detection' word. In my example: How does the 'test' QProperty knows that it depends on the QBindings of the std::unique_ptr. Awesome work!
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0q1in:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"28 Dec '20 01:16;autoantwort;I have found the error in the line:
{code:java}
QBindable<const std::unique_ptr<int>&> bindableP() { return QBindable<const std::unique_ptr<int>&>(&xProp); }
{code}
`xProp` is a int property and not a `std::unique_ptr<int>`. Imho this code should not compile. Or print a warning in the debug mode if that is possible.","28 Dec '20 01:38;autoantwort;So there is no way to use `Q_OBJECT_BINDABLE_PROPERTY` with `std::unique_ptr`? But QProperty works with std::unique_ptr. Maybe the solution is to create a `QReadBindable`, a ""const"" QBindable, that only allows reading. Then also the following would be possible:
{code}
QReadBinding<int> x() const {...} // currently no const possible 
{code}
When this is possible, the signals get useless, because you can subscribe a QReadBinding. Currently you have the problem that if you have a const ref to a QObject, you can not get the QBindable and have to use a signal. ",,,,,,,,,,,,,,,,,,,,
Create signal out of QtWebProfile for clearHttpCache completion,QTBUG-89670,310390,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt_webengine_team,dice14u,dice14u,23 Dec '20 03:44,23 Dec '20 03:44,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,WebEngine,,,,0,,,,"With this change
[https://github.com/qt/qtwebengine/commit/75412200db05ddc5ee2b9aea367b580d8b0c438e#diff-82fae0ea12cd786b0b9aa0c5e4c50de33d87b0bcc4ccb89176c8dbea8acaf769R671]
calls to clearHttpCache do not immediatly reset the network context, and only do so after a call to BrowsingDataRemoverObserverQt::OnBrowsingDataRemoverDone() I would very much like it if that was either a signal I could connect to or if the result of clearHttpCache was a form of promise that I could await for further processing.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0q4ev:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Interactive QTextObjectInterfaces,QTBUG-89668,310373,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,esabraha,appadeia,appadeia,22 Dec '20 21:34,22 Dec '20 21:34,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,GUI: Text handling,,,,0,,,,"For many usecases, such as mentions in a chat application, it is desirable to add non-text elements inside the flow of text. The current QTextObjectInterface APIs work fine for this, but fail to provide APIs for interactive elements.

Namely, the following APIs are lacking for the interactive elements usecase:
- an API to let the QTextDocument know the QTextObjectInterface wants to redraw itself for whatever reason; e.g. an animation
- event APIs to the QTextObjectInterface, e.g. hover, click/tap, focus, etc.",,,,,,,,,,,,,,,,,,,"22 Dec '20 21:30;appadeia;the design.png;https://bugreports.qt.io/secure/attachment/103184/the+design.png",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0q4c7:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Selection start position,QTBUG-89615,310198,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt.team.quick.subscriptions,arsen,arsen,19 Dec '20 11:23,22 Dec '20 07:59,18 Feb '21 09:41,,5.13.0 RC 3,5.14.0 RC2,5.15.2,6.0.0 Beta2,,,,,,,,,,,,,,,,,,,Widgets: Itemviews,,,,0,,,,"There is currently no separate function for the start index of the selection. For example QListwidget have got five functions that can change current position/

setCurrentIndex(const QModelIndex &)
setCurrentItem(QListWidgetItem *)
setCurrentItem(QListWidgetItem *, QItemSelectionModel::SelectionFlags)
setCurrentRow(int)
setCurrentRow(int, QItemSelectionModel::SelectionFlags)

But only one can change current selection start index. This function is setCurrentIndex defined in (void QAbstractItemView::setCurrentIndex(const QModelIndex &index)).

it would be great if you add function setCurrentSelectionStartIndex(const QModelIndex &index)
wich can change currentSelectionStartIndex (defined in QAbstractItemView)

it is necessary for implement some internal selection mechanism.

Now it is very difficult to do!

thank you!",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0q3d3:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"19 Dec '20 13:49;chehrlic;currentSelectionStartIndex is an internal, private member - I don't see why this should be modified from outside.","19 Dec '20 17:16;arsen;Let's imagine that you often need to programmatically change the selected elements in a QTableWidget or QListWidget. The internal QT API is quite enough for this, But after the programmatically changed selection, the selection mechanism from the user breaks down, since there is no way to control the beginning of the selection. it is easy to check it is enough to use, for example, any of the functions
 setCurrentItem (QListWidgetItem *)
 setCurrentItem (QListWidgetItem *, QItemSelectionModel :: SelectionFlags)
 setCurrentRow (int)
 setCurrentRow (int, QItemSelectionModel :: SelectionFlags)
 to select the current element and then, without changing the selection, try to select other elements with the shift key pressed. As you can see the selection breaks down.

You have the current element and the start of selection living its own life.
The start of selection comes from currentSelectionStartIndex but there is no easy access to it ...

It is for such cases that you need the ability to easily control the start of selection. (currentSelectionStartIndex )",,,,,,,,,,,,,,,,,,,,
Maps should also offer a zoom around position method,QTBUG-80020,288327,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,paangele,DanielSt,DanielSt,13 Nov '19 07:06,21 Dec '20 05:21,18 Feb '21 09:41,,5.13.2,,,,,,,,,,,,,,,,,,,,,,Location: Maps/Navigation,,,,0,,,,The Qml map supports alignCoordinateToPoint and setBearing methods for setting the map and bearing around specific points. It would be useful to have a similar function for zooming.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0monz:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"13 Nov '19 10:33;paangele;for zooming you can set the visible region, can't you?
For example by using a circle with the appropriate radius.
And if you want to animate it, you can set a behavior on zoom?","13 Nov '19 11:09;DanielSt;There are multiple ways to do this. I just store the position before zooming, then zoom, and reset the position. But I thought it would be more convenient if the map already supports this out of the box.","13 Nov '19 11:27;paangele;[~DanielSt] i think i misunderstand the request then. Are you asking for a method to zoom not on center but on another point?
If that's the case then yes, it's alignCoordinateToPoint the function we introduced for that, to keep a certain coordinate fixed on the screen.","13 Nov '19 16:44;DanielSt;Yes, I suggested a method to zoom on another point than the map center. I do not need the method (my workaround actually uses alignCoordinateToPoint) but I though it would be useful to have it out-of-the-box. But if you think that it is useless then we can close this suggestion.","13 Nov '19 18:19;paangele;[~DanielSt] I think it would be redundant, and while i agree that using the proposed approach is a bit more tedious, requiring as you note to store the pixel coordinate, then reanchor, or, if you have an animation,  requiring to use the target value change notification -- see https://codereview.qt-project.org/#/c/247954/. But on the other hand this is also how it is implemented internally when you pinch or scroll-wheel on a specific point, so in the end maybe just a documentation improvement would do, explaining how to achieve the desired functionality with the available building blocks?","14 Nov '19 04:13;DanielSt;Some words about it in the documentation sounds good.","16 Dec '20 12:24;admin;This is an automated message.

This issue has been in ""Need more Info"" status for two weeks without further updates. This suggests that the required information has not been provided yet. 

Please answer any question in the comments and give more details. Then click the ""Provide Missing Information"" button. This issue will be closed
automatically if no information is provided.","21 Dec '20 05:21;macadder;It appears that there was an agreement on how to proceed with this. I'm not sure why it was still in Needs More Info.",,,,,,,,,,,,,,
Allow centering checkbox in itemviews,QTBUG-88978,308765,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt.team.quick.subscriptions,chehrlic,chehrlic,27 Nov '20 20:24,20 Dec '20 14:16,18 Feb '21 09:41,,6.0,,,,,,,,,,,,,,,,,,,,,,Widgets: Itemviews,,,,2,,,,"It would be nice to have the possibility to center-align a checkbox in an itemview. Currently the checkbox is always drawn left no matter if there is additional text or decoration.

This feature is often asked in the forum. Herean example on how it would look like created with a test implementation:

!checkbox_itemview.png!

The first row is with text (no behavior change), the other three without text and AlignHCenter/AlignLeft/AlignRight with the new behavior.

Here the old behavior:
 !checkbox_itemview_old.png!

 

The question is how to pass the alignment information to the view. Currently I'm misusing the TextAlignmentRole since the alignment of the checkbox / decoration only works when there is no text. Also adding two new alignments may conflict with e.g. QStyleOptionViewItem::decorationPosition then.",,,,,,,,,,,,,,,,,,,"27 Nov '20 20:22;chehrlic;checkbox_itemview.png;https://bugreports.qt.io/secure/attachment/100753/checkbox_itemview.png","27 Nov '20 20:24;chehrlic;checkbox_itemview_old.png;https://bugreports.qt.io/secure/attachment/100752/checkbox_itemview_old.png",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0pv3r:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"27 Nov '20 21:06;jonbrave;If I may, I would second this suggestion.  Allowing a column with centered checkbox is pretty common, and it's not so easy to achieve without this.",,,,,,,,,,,,,,,,,,,,,
need to have cursor theme changed event from platform,QTBUG-89592,310151,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,vestbo,liaqi,liaqi,18 Dec '20 10:03,18 Dec '20 10:04,18 Feb '21 09:41,,6.1,,,,,,,,,,,,,,,,,,,,,,QPA,,,,0,,,,"When cursor theme changed from system, at least on x11/xcb, Gtk/CursorThemeName change in xsettings is monitored, see also QTBUG-67373 .

Guess similar situation on windows, macos and etc.

We need a signal or event to notify the running application that system cursor theme changed.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0q33j:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix ugly color design fail of Qt Maintenance Tool,QTBUG-89575,310123,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,releaseteam,moellney,moellney,17 Dec '20 19:54,17 Dec '20 20:31,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Packaging & Installer,,,,1,,,,"The new Qt Maintenance tool has a real ugly color composition!

Please return to color schemes that look adult.

Maybe use the theme / palette of the operating system?

!image-2020-12-17-20-41-19-379.png!

Much to much visual noise:
 * Light green much too light
 * color gradient to long and to steep
 * ""vertical"" bar is not vertical

All this sums up to a brain trying to visually fix this. And this hurts after a few seconds.

 

The ""green"" in the setup does not match the green of the Qt home page and the designer icon color:

!image-2020-12-17-21-30-53-715.png!

 

And when you press cancel:

!image-2020-12-17-20-43-29-460.png!

Can your see, where the ""Qt Question"" (btw. a childish dialog title) dialog window has its border... Hardly, the background is melting with the background of the dialog.

And the question mark is blue.
 Seems to be the most important attraction, as it is a ... well ... a ""Qt *question*"", so we should give it a color that really pops out...

Please go back to the color and design that you had before.

And maybe give your design artist a break.

 ",,,,,,,,,,,,,,,,,,,"17 Dec '20 19:41;moellney;image-2020-12-17-20-41-19-379.png;https://bugreports.qt.io/secure/attachment/103039/image-2020-12-17-20-41-19-379.png","17 Dec '20 19:43;moellney;image-2020-12-17-20-43-29-460.png;https://bugreports.qt.io/secure/attachment/103038/image-2020-12-17-20-43-29-460.png","17 Dec '20 20:30;moellney;image-2020-12-17-21-30-53-715.png;https://bugreports.qt.io/secure/attachment/103041/image-2020-12-17-21-30-53-715.png",,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Windows,,,,,,"0|i0q2xb:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Maintenance Tool show ""Meeting / Conference"" announcements of events of the past",QTBUG-89576,310124,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,releaseteam,moellney,moellney,17 Dec '20 20:05,17 Dec '20 20:05,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Packaging & Installer,,,,0,,,,"Just now... 17th Dez. 2020 showing me a hint to join a Online Learning Event that will take place .... a month ago.

Ok, will just enter my ""Time Machine"" - (which btw. has a more ergonomic color arrangement in its GUI)

!image-2020-12-17-21-00-46-243.png|width=712,height=452!

Maybe give the ads a point in time so installer just shows events in the future?

 ",,,,,,,,,,,,,,,,,,,"17 Dec '20 20:00;moellney;image-2020-12-17-21-00-46-243.png;https://bugreports.qt.io/secure/attachment/103040/image-2020-12-17-21-00-46-243.png",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0q2xj:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Change the hard-coded ssl ca (ctl) path for the binary openssl distribution,QTBUG-78104,284161,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,tpochep,chaz6,chaz6,07 Sep '19 10:06,17 Dec '20 13:55,18 Feb '21 09:41,,5.13.1,,,,,,,,,,,,,,,,,,,,,,Network: SSL,,,,0,,,,"When using the Qt installer to install 5.13.1 and the OpenSSL package on CentOS/RHEL 7.6, the certificate trust list is hard coded to /home/qt/openssl-1.1.1c/ssl/cert.pem which does not exist. It would be sensible to change it to a common location such as /etc/ssl/certs/ca-bundle.crt, or provide a way to change the path at installation and/or run time.",Tested on CentOS Linux release 7.6.1810 (Core).,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Linux/Other display system,,,,,,"0|i0m1en:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"09 Sep '19 11:33;tpochep;Sorry, I'm missing something - what and where is hardcoded? That's not how ssl sockets in Qt loading/finding CA certs.","15 Sep '19 17:27;chaz6;I am referring to the binary openssl that is installed using qt-unified-linux-x64-online.run ([https://www.qt.io/download-thank-you?os=linux&hsLang=en)] for Linux (installed into $QTDIR/Tools/OpenSSL/\{binary,src} - i.e. not using the system openssl). I confirmed the behavior using `strace`.","16 Dec '20 12:24;admin;This is an automated message.

This issue has been in ""Need more Info"" status for two weeks without further updates. This suggests that the required information has not been provided yet. 

Please answer any question in the comments and give more details. Then click the ""Provide Missing Information"" button. This issue will be closed
automatically if no information is provided.","17 Dec '20 13:55;macadder;It looks like information was provided.",,,,,,,,,,,,,,,,,,
Add support for Swift language,QTBUG-89566,310058,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,laknoll,nagrohn,nagrohn,17 Dec '20 11:56,17 Dec '20 11:58,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Other,,,,0,reported_by_support_standard,,,"
Apple is moving strongly with Swift. 
Swift will replace Objective-C in the future, so it would be nice to have a support for Swift.
",,,,,,,,,,,,,,,QTBUG-47186,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0q2iv:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
SChannel: Only use SCH_CRED_NO_DEFAULT_CREDS if there's no local client certificate chain specified,QTBUG-89556,310038,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,tpochep,andysh,andysh,17 Dec '20 07:04,17 Dec '20 07:04,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Network: SSL,,,,0,Reported_by_support_standard,,,SChannel: Only use SCH_CRED_NO_DEFAULT_CREDS if there's no local client certificate chain specified. This would allow then for the automatic supplying of a certificate (assuming there is one) from the device store.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0q2ev:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
QTextEdit::createStandardContextMenu(QPoint) inconsistency,QTBUG-89439,309787,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt.team.quick.subscriptions,chehrlic,chehrlic,13 Dec '20 14:05,17 Dec '20 06:15,18 Feb '21 09:41,,6.0.0,,,,,,,,,,,,,,,,,,,,,,Widgets: Widgets and Dialogs,,,,0,,,,"QTextEdit::createStandardContextMenu(QPoint) takes the coordinates in document coordinates which is completely inconsistent:

* no other function takes a point in document coordinates (e.g. anchorAt(), cursorForPosition())
* there is no public api to get the document coordinates from the QTextEdit

The only workaround which emulates the anchorAt/cursorForPosition behavior is

 
{code:c++}
void MainWindow::OnShowContextMenu(const QPoint& pos)
{
    QPoint p = pos + QPoint(ui->textBrowser->horizontalScrollBar()->value(), ui->textBrowser->verticalScrollBar()->value());
    QMenu* menu = ui->textBrowser->createStandardContextMenu(p);
   ...
{code}

I see two options here:
* break SC in Qt6 and syn it with the other functions
* document this strange behavior and live with it until Qt7",,,,,,,,,,,,,,,,,,,"13 Dec '20 15:38;chehrlic;qtbug_89439.tgz;https://bugreports.qt.io/secure/attachment/101428/qtbug_89439.tgz",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,QTBUG-89157,9223372036854775807,,,All,,,,,,"0|i0q0zb:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"13 Dec '20 16:16;chehrlic;The examples for Q(Plain)TextEdit::contextMenuEvent() are also not using the QPoint variant of createStandardContextMenu() so there it's also not possible to see the correct usage. I'm for a SiC change here - everything else is a hack.","15 Dec '20 16:14;kkohne;Maybe I'm missing something, but that behavior seems not new to Qt 6, and is properly documented?

https://doc.qt.io/qt-5/qtextedit.html#createStandardContextMenu-1 : 

{quote}
This function creates the standard context menu which is shown when the user clicks on the text edit with the right mouse button. It is called from the default contextMenuEvent() handler and *it takes the position in document coordinates* where the mouse click was. This can enable actions that are sensitive to the position where the user clicked. The popup menu's ownership is transferred to the caller.

This function was introduced in Qt 4.4.
{quote}","15 Dec '20 16:16;kkohne;Or are you saying we should take the opportunity to (still) fix this in Qt 6, anyhow?","15 Dec '20 17:28;chehrlic;Yes, it should be fixed.
And ""*it takes the position in document coordinates*"" doesn't help at all - noone explains me how to translate to this nor is there a function to do so. It's simply inconsistent and very very surprising. It took me more than one hour to figure out why it does not work as expected and to create a workaround. Without looking into the Qt source code it would not have been possible.","16 Dec '20 07:50;kkohne;I agree that the behavior is surprising. But it's documented and has been like this since more than a decade (basically back to beginning of qt git history). Hence making this a suggestion...","17 Dec '20 06:15;chehrlic;> But it's documented

 

No, it is not as already explained in the bug report - 'document coordinates' is not explained anywhere, not used anywhere else and there is no description how to calculate them - so it's basically useless.",,,,,,,,,,,,,,,,
QLineEdit PlaceholderText in stylesheet,QTBUG-89550,310024,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt.team.quick.subscriptions,alundra,alundra,16 Dec '20 20:13,16 Dec '20 20:13,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Widgets: Style Sheets,,,,0,,,,"I saw that Qt 5.12 introduced this new QPalette value: QPalette::PlaceholderText.
That looks to be very good since before it was apparently using the foreground with alpha.
Looks like this value is missing in stylesheet.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0q2br:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Be able to read the maximum MTU value that is set for the device,QTBUG-84115,298596,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,ablasche,andysh,andysh,11 May '20 07:25,16 Dec '20 12:30,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Connectivity: Bluetooth,,,,1,Reported_by_support_standard,,,Be able to read the maximum MTU value that is set for the device.,iOS,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,iOS/tvOS/watchOS,,,,,"0|i0o8rr:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Feature Request: Support best fit line display for data points,QTBUG-89453,309802,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,e0348803,vipinjain,vipinjain,14 Dec '20 04:56,15 Dec '20 16:11,18 Feb '21 09:41,,5.12.3,,,,,,,,,,,,,,,,,,,,,,Charts,,,,0,schrodinger,,,Ability to display best fit line and its equation for the given data points in the XY line series.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0q12n:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Feature Request: Ability to set point size with different-2 value in the series,QTBUG-89448,309797,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,e0348803,vipinjain,vipinjain,14 Dec '20 04:41,15 Dec '20 16:11,18 Feb '21 09:41,,5.12.3,,,,,,,,,,,,,,,,,,,,,,Charts,,,,0,schrodinger,,,"Sometime people want to visualize chart in more than one dimension. In that case, we would like to use point size as another dimension for the plotting. Qt should provide API to change size of each point within the series.

 

Matplot offers this kind of functionality.",,,,,,,,,,,,,,,,,,,"14 Dec '20 04:41;vipinjain;size by example plot.png;https://bugreports.qt.io/secure/attachment/101437/size+by+example+plot.png",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0q11j:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Feature Request: Axis in Middle of Chart,QTBUG-89446,309795,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,e0348803,vipinjain,vipinjain,14 Dec '20 04:36,15 Dec '20 16:11,18 Feb '21 09:41,,5.12.3,,,,,,,,,,,,,,,,,,,,,,Charts,,,,0,schrodinger,,,"It would be useful to have the intersection of axes be at any arbitrary point on the chart.

Example: Chart with Y Axis from (-20, 20) where X Axis (0, 6) intersects at y=0
20
10
0---1---2---3---4---5---6
-10
-20",,,,,,,,,,,,,,,,,,,"14 Dec '20 04:36;vipinjain;Screen Shot 2020-12-07 at 8.54.27 AM.png;https://bugreports.qt.io/secure/attachment/101434/Screen+Shot+2020-12-07+at+8.54.27+AM.png",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0q113:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Feature Request:Support for selection in a plot,QTBUG-89445,309794,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,e0348803,vipinjain,vipinjain,14 Dec '20 04:35,15 Dec '20 16:11,18 Feb '21 09:41,,5.12.3,,,,,,,,,,,,,,,,,,,,,,Charts,,,,0,schrodinger,,,"The ability to select data within a plot (select individual data points, select data series) is a common need for interactive plots. Currently QtChart does not have any concept of selection.

We have implemented ways around this in our product, we had to create a separate series for the single selection of a data point so that it could be shown the proper way.

Having a selection model (similar to what is available for the Model/View framework) would be great.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0q10v:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Feature Request: Axis Label Font Issues,QTBUG-89444,309793,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,e0348803,vipinjain,vipinjain,14 Dec '20 04:31,15 Dec '20 16:11,18 Feb '21 09:41,,5.12.3,,,,,,,,,,,,,,,,,,,,,,Charts,,,,0,schrodinger,,,"There are challenges with assigning font size and customization to axis labels. In particular, for histogram X-axis, if the labels aren’t the right size the label is shown as “...” - so the entire axis has no meaningful labels.

Preferably, we would like to directly set font size of the labels and ideally be able to set the '...' values when the chart is too compressed.",,,,,,,,,,,,,,,,,,,"14 Dec '20 04:31;vipinjain;chart_full_width.png;https://bugreports.qt.io/secure/attachment/101433/chart_full_width.png","14 Dec '20 04:31;vipinjain;chart_small_width.png;https://bugreports.qt.io/secure/attachment/101432/chart_small_width.png",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0q10n:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Feature Request: Allow for More Markers Shapes in Plots,QTBUG-89443,309792,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,e0348803,vipinjain,vipinjain,14 Dec '20 04:29,15 Dec '20 16:11,18 Feb '21 09:41,,5.12.3,,,,,,,,,,,,,,,,,,,,,,Charts,,,,0,schrodinger,,,"Currently, the plots markers can only be a colored rectangle or a colored circle. It would be good to have more shapes. matplotlib provides such ability.",,,,,,,,,,,,,,,,,,,"14 Dec '20 04:29;vipinjain;Diamond shape.png;https://bugreports.qt.io/secure/attachment/101431/Diamond+shape.png","14 Dec '20 04:29;vipinjain;cross shape.png;https://bugreports.qt.io/secure/attachment/101430/cross+shape.png",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0q10f:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Feature Request: Legend Placement Issues,QTBUG-89442,309791,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,e0348803,vipinjain,vipinjain,14 Dec '20 04:27,15 Dec '20 16:11,18 Feb '21 09:41,,5.12.3,,,,,,,,,,,,,,,,,,,,,,Charts,,,,0,schrodinger,,,"It is difficult to fully customize legend placement. We would like the ability to:

-Place the legend in the corner of the plot. Currently, QLegend.alignment doesn't accept more than one flag.

-Place the legend over the plot instead of next to it and fully control its placement. It should be easy to place it in any corner or just inside the center of any edge.

-Have Qt determine the best location for the legend based on the plotted data, i.e. something equivalent to matplotlib's ""loc = 'best'""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0q107:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Feature Request: Tick Mark Labels for QLogAxis,QTBUG-89441,309790,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,e0348803,vipinjain,vipinjain,14 Dec '20 04:24,15 Dec '20 16:11,18 Feb '21 09:41,,5.12.3,,,,,,,,,,,,,,,,,,,,,,Charts,,,,0,schrodinger,,,"When using a QLogValueAxis, a user has no control over the tick mark labels on a graph. Qt will only put labels at the powers of 10. This especially provides a poor experience when all values fall within a power of 10 (no labels will be shown). We would like to be able to use a QLogValueAxis to be similar to a QValueAxis and be able to set tick marks.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0q0zz:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Feature Request: Allow individual points to be labelled,QTBUG-89452,309801,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,e0348803,vipinjain,vipinjain,14 Dec '20 04:46,15 Dec '20 16:11,18 Feb '21 09:41,,5.12.3,,,,,,,,,,,,,,,,,,,,,,Charts,,,,0,schrodinger,,,"* Qt allows to label points, but [API|https://doc.qt.io/qt-5/qxyseries.html#pointLabelsVisible-prop] provides very limited control. Either user can display all labels in the series, or can not display at all. We would like to control it, so Qt can display only user specified points.
 * Qt does not allow to customize label. User can only display [X or Y axis data as label|https://doc.qt.io/qt-5/qxyseries.html#pointLabelsFormat-prop], but if someone wants to display custom data as a label, there is no control for that.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0q12f:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Feature Request: Add Histogram Chart Type,QTBUG-89451,309800,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,e0348803,vipinjain,vipinjain,14 Dec '20 04:44,15 Dec '20 16:11,18 Feb '21 09:41,,5.12.3,,,,,,,,,,,,,,,,,,,,,,Charts,,,,0,schrodinger,,,"There is currently no histogram chart in Qt Charts. A user has to essentially use a bar chart with a Categorical Axis as the X Axis. It would be good if there was a dedicated class for this. The histogram class should support a numeric axis, with bins of numeric values.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0q127:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Feature Request: Lines in Legends,QTBUG-89449,309798,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,e0348803,vipinjain,vipinjain,14 Dec '20 04:43,15 Dec '20 16:11,18 Feb '21 09:41,,5.12.3,,,,,,,,,,,,,,,,,,,,,,Charts,,,,0,schrodinger,,,"Currently, the legend can only display a colored rectangle or a colored circle. For a line series, it should instead show a short line segment of the appropriate color and style (i.e. dotted or dashed).",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0q11r:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Feature Request: Ability to color points with the different-2 color in the series,QTBUG-89447,309796,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,e0348803,vipinjain,vipinjain,14 Dec '20 04:39,15 Dec '20 16:11,18 Feb '21 09:41,,5.12.3,,,,,,,,,,,,,,,,,,,,,,Charts,,,,0,schrodinger,,,"Sometime people want to visualize chart in more than one dimension. In that case, we would like to use color as another dimension for the plotting. Qt should provide API to change color of each point within the series.",,,,,,,,,,,,,,,,,,,"14 Dec '20 04:39;vipinjain;3 dimension plotting.png;https://bugreports.qt.io/secure/attachment/101435/3+dimension+plotting.png","14 Dec '20 04:39;vipinjain;color_by in old charts.mkv;https://bugreports.qt.io/secure/attachment/101436/color_by+in+old+charts.mkv",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0q11b:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Explain what a QBindable is,QTBUG-89488,309880,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,docteam,autoantwort,autoantwort,15 Dec '20 00:38,15 Dec '20 00:43,18 Feb '21 09:41,,6.0.0,,,,,,,,,,,,,,,,,,,,,,Documentation,,,,0,,,,"What is a QBindable? It is used in the example code but there is no documentation in the internet. 
Btw there is a type in the example code: https://doc-snapshots.qt.io/qt6-dev/qobjectbindableproperty.html#details
The function should return a QBindable and not the Bindable.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0q1if:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"15 Dec '20 00:42;autoantwort;And why should I use a QBindable? I can simply use a QObjectBindableProperty and return is by reference",,,,,,,,,,,,,,,,,,,,,
QProgressDialog documentation lacks modality explanation,QTBUG-88057,307128,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,docteam,toxin65,toxin65,30 Oct '20 13:56,14 Dec '20 09:45,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Documentation,,,,1,,,,"QProgressDialog documentation lacks modality explanation.

Shown examples does not address the call of open() (for modal version) and show() (for non modal version). Nothing is said about the action of forceShow concerning modality. Although it acts like QDialog, which is a base of QProgressDialog, and could be suspected...

At least it could refer to QObject behavior concerning modality.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0plhr:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"14 Dec '20 09:45;piotrwieczorek;Same problem here.

The modal dialog example is using exec() which the documentation recommends to avoid.

It would be great to have a modal dialog example which uses open() - the recommended way.",,,,,,,,,,,,,,,,,,,,,
Add range limitation feature to QValueAxis,QTBUG-81759,292605,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,e0348803,martonmiklos,martonmiklos,30 Jan '20 15:33,14 Dec '20 06:55,18 Feb '21 09:41,,5.14,,,,,,,,,,,,,,,,,,,,,,Charts,,,,1,,,,"I have some use cases where none of the displayed series could have any data in a specific range of a one of the horizontal/vertical axes.

For e.g. I only display positive data with the series.

When zooming and scrolling of the chart is enabled it would be useful if these operations could respect a limitation set on the axes itself.

I am thinking about adding the following API to the QValueAxis:
 * void setLowerRangeLimit(bool enabled, qreal limitValue = 0.0)
 * void setLowerRangeLimit(bool enabled, qreal limitValue = 0.0)
 * bool lowerRangeLimitEnabled() const;
 * bool upperRangeLimitEnabled() const;
 * qreal lowerRangeLimit() const;
 * qreal upperRangeLimit() const;

At the moment I workarounded this issue by deriving a class from QValueAxis and keeping a list from the limited axes in my zooming/panning logic, however it could be more elegant if it would be builtin to the QValueAxis.

 Please let me know what do you think about this change. If I got positive feedback I have the willingness of implementing it. 

 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0nct3:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"04 Feb '20 14:34;e0348803;I don't see a problem having this kind of feature. The limits should be Q_PROPERTYs, so that they are usable from qml, too. To be consistent, this limit should be applied to normal range setting and not just scroll/zoom. Also, suggested names are bit clunky. Maybe just call the properties minLimit/maxLimit to keep terminology consistent.","04 Feb '20 15:19;martonmiklos;Thanks for your feedback Miikka!

I agree with the naming changes.

What is the preferred way to handle the not allowed range/limit changes? F

For e.g. when the user specify range outside of limits manually?

Or when specify maximum limit below the minimum limit.

 ","04 Feb '20 15:37;e0348803;Options are to either reject the change or adjust the supplied range so that it is bounded by the limits. I think the latter is better. In case of max below min or vice versa, similar logic can be applied.","14 Dec '20 06:53;vipinjain;We also have similar type of limitations for QXYSeries.

After a certain zoom out event the plot appears as a dot and isn't any useful to the user. Could we consider disallowing zoom after a certain limit is reached.

Perhaps separate issue is translation past the point where any data exists.  It would be helpful to the user if we could disallow translation in a direction that has no further data (i.e., outside the range of the associated axis).  So if I am at the leftmost edge of the x-axis, viewing the minimum X data point, then I try to translate farther to the left, I shouldn't be able to drag the chart very much further (some amount of margin is acceptable, maybe as much 50px).  And similarly if I am viewing the maximum X value and trying to drag to the right.  And the same for the Y axis, of course.  Otherwise, the user ends up in a region that is technically not even on the chart, and it's very confusing.   This is of course a result of zooming in too far...",,,,,,,,,,,,,,,,,,
"Add Documentation, how to use QProperty in QML",QTBUG-89166,309309,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,docteam,febbe,febbe,07 Dec '20 13:49,10 Dec '20 14:45,18 Feb '21 09:41,,6.0.0,,,,,,,,,,,,,,,,,,,,,,Documentation,,,,1,,,,"Neither https://doc-snapshots.qt.io/qt6-dev/properties.html, nor https://www.qt.io/blog/property-bindings-in-qt-6 contains information, how to use QProperty in QML.

I would like to have such an information, to test the new Qt6 QProperty bindings.


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0py5b:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"10 Dec '20 14:45;febbe;Still no update in https://doc-snapshots.qt.io/qt6-6.0/properties.html
The page should at **least** refer to https://doc-snapshots.qt.io/qt6-6.0/qproperty.html
but also there no description what Qt's intention is how those shall be used with QML.",,,,,,,,,,,,,,,,,,,,,
QSysInfo::machineUniqueId() should get an Android implementation,QTBUG-72684,271532,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qtandroidteam,alekseyka,alekseyka,19 Dec '18 21:44,08 Dec '20 15:06,18 Feb '21 09:41,,5.12.0,,,,,,,,,,,,,,,,,,,,,,Core: Other,,,,0,,,,QSysInfo::machineUniqueId() does not work on Android. Please implement. Necessary for Qml Online project.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Android,,,,,,"0|i0ntyz:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"20 Dec '18 09:37;manordheim;Probably related: https://bugreports.qt.io/browse/QTBUG-59848","25 May '20 08:34;assam;First, Google don't recommend using any hardware IDs [https://developer.android.com/training/articles/user-data-ids]. Also, in QTBUG-59848 IMEI number is asked to be implemented, and that requires having ""android.permission.READ_PHONE_STATE"" permission, which I don't think is a good idea to be added to the Qt library by default. However, there might be other options for uniqueID for Android, which will need more investigation for a solution that works with all supported Android versions.","08 Dec '20 14:45;macadder;This bug shouldn't have been set to Needs More Info. That state is for requesting information from the reporter, not for investigating potential implementations.",,,,,,,,,,,,,,,,,,,
Access to attachments in PDFs,QTBUG-89129,309158,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,srutledg,poikelin,poikelin,04 Dec '20 12:38,04 Dec '20 12:40,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,PDF,,,,0,Reported_by_support_standard,,,PDF files can have attachments and there does not seem to be an API in Qt PDF to access that data.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0pxcn:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
SkeletonLoader for FBX,QTBUG-80301,289152,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,seanharmer,anders-rkk,anders-rkk,25 Nov '19 12:57,04 Dec '20 06:50,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Qt3D,,,,0,,,,"It would be useful to have support for importing an FBX model with joints and skinning weights directly into a Qt3D (QML) entity (e.g. via `QArmature` and `QSkeletonLoader`), so that its mesh can be deformed and animated by changing the joint transforms.
Currently, it seems these components only support the glTF 2.0 format.

The `QSceneLoader` seems to lack joint and skinning weight data.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0mtjb:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
fade-out tab label instead elide with ...,QTBUG-89106,309096,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt.team.quick.subscriptions,asashnov,asashnov,03 Dec '20 13:28,03 Dec '20 13:33,18 Feb '21 09:41,,5.12,,,,,,,,,,,,,,,,,,,,,,Widgets: Widgets and Dialogs,,,,0,,,,"Currently (Qt 5.12) QTabBar can elide long text in tab header with ...

It would be nice if it can fade-out the long text as Google Chrome do it with its tabs

This stylesheet does similar what I want, but
 # it applied to all tabs
 # I have to truncate long text on my own

We need this to improve Kiwix - offline web browser, which initially was designed to read Wikipedia offline.

 

The original issue:

[https://github.com/kiwix/kiwix-desktop/issues/358]

 
We can apply stylesheet to tabs:

{code:c}
tabWidget->setStyleSheet(
""QTabBar::tab {""
"" color: qlineargradient(x1: 0, y1: 0, x2: 1, y2: 0,""
"" stop: 0.8 #2A2A2A, stop: 1.0 #E1E1E1); }""); 
{code}


[https://github.com/kiwix/kiwix-desktop/pull/538]

So they look like in attached picture.

For long texts this is OK, exactly what needed, but short texts are centered and fade-out also.

 

It would be better if we can set stylesheet individually for each tab as previously requested by other people:

https://bugreports.qt.io/browse/QTBUG-8930

https://bugreports.qt.io/browse/QTBUG-72063

 ",,,,,,,,,,,,,,,,,,,"03 Dec '20 13:23;asashnov;Screenshot from 2020-12-03 20-23-19.png;https://bugreports.qt.io/secure/attachment/100984/Screenshot+from+2020-12-03+20-23-19.png",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0pwzj:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Qt for WebAssembly: Add a note that projects need to be on the same drive as emsdk,QTBUG-88963,308722,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,docteam,miikapernu,miikapernu,27 Nov '20 08:04,02 Dec '20 23:35,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Documentation,,,,0,Reported_by_support_standard,,,"Apparently if project files are not on the same drive as emsdk it's going to result in build errors along the lines:


{code:java}
Traceback (most recent call last):
  File ""C:\...\emsdk_1.39.7\upstream\emscripten\tools\wasm-sourcemap.py"", line 352, in <module>
    sys.exit(main())
  File ""C:\...\emsdk_1.39.7\upstream\emscripten\tools\wasm-sourcemap.py"", line 331, in main
    map = build_sourcemap(entries, code_section_offset, prefixes, options.sources, options.basepath)
  File ""C:\...\emsdk_1.39.7\upstream\emscripten\tools\wasm-sourcemap.py"", line 282, in build_sourcemap
    file_name = os.path.relpath(os.path.abspath(file_name), base_path)
  File ""D:\obj\windows-release\37amd64_Release\msi_python\zip_amd64\ntpath.py"", line 562, in relpath
ValueError: path is on mount 'C:', start on mount 'D:'
shared:ERROR: 'C:\...\emsdk_1.39.7\python\3.7.4-pywin32_64bit\python.exe C:\...\emsdk_1.39.7\upstream\emscripten\tools\wasm-sourcemap.py C:\Users\...\AppData\Local\Temp\emscripten_temp_jjyg68u7\Test_Web_Assembly.wasm --dwarfdump=C:/.../emsdk_1.39.7/upstream/bin\llvm-dwarfdump.exe -o C:\Users\...\AppData\Local\Temp\emscripten_temp_jjyg68u7\Test_Web_Assembly.wasm.map --basepath=D:\temp\build-Test_Web_Assembly-Qt_5_15_1_WebAssembly-Debug' failed (1)
mingw32-make: *** [Makefile:78: Test_Web_Assembly.js] Error 1
09:18:43: The process ""C:\...\mingw810_64\bin\mingw32-make.exe"" exited with code 2.
Error while building/deploying project Test_Web_Assembly (kit: Qt 5.15.1 WebAssembly)
The kit Qt 5.15.1 WebAssembly has configuration issues which might be the root cause for this problem.
When executing step ""Make""
{code}
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,WebAssembly,,,,,,"0|i0puvb:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Reusing QFileDialog cannot clear File name: field,QTBUG-88971,308742,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt.team.quick.subscriptions,perdrix,perdrix,27 Nov '20 12:20,27 Nov '20 13:22,18 Feb '21 09:41,,5.15.0,,,,,,,,,,,,,,,,,,,,,,Widgets: Widgets and Dialogs,,,,0,,,,Please refer to: [https://forum.qt.io/topic/121235/qfiledialog-has-memory],,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0puyv:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[Accessibility] Add a flag to remove a QWidget from the accessibility tree,QTBUG-88956,308706,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,frederik,bizcot,bizcot,26 Nov '20 20:17,26 Nov '20 20:17,18 Feb '21 09:41,,5.13.1,,,,,,,,,,,,,,,,,,,,,,GUI: Accessibility (a11y),,,,0,,,,"There are cases in which QWidgets are non focusable and added just for cosmetic purposes (icons, indicators etc) and there is no way to mark the widget so that it won't appear in the accessibility tree. This is possible with the aria-hidden attribute.

It would be useful to have a flag on QWidget which could be used in childWidgets in qaccessiblewidget.cpp to avoid adding the child.

Similarly it would be very handy to have an option to ""inline"" the children of a widget in the accessibility tree, since there are many cases of widget wrappers, or widgets used just to group children in a layout, that shouldn't be exposed in the accessibility tree as group.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0purz:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"UIA: TreeItem controls and those marked as QAccessible.state().expandable need to implement IExpandCollapseProvider, fire state change events",QTBUG-81874,292858,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,frederik,cosminp,cosminp,05 Feb '20 01:57,24 Nov '20 18:31,18 Feb '21 09:41,,5.12,,,,,,,,,,,,,,,,,,,,,,GUI: Accessibility (a11y),,,,1,,,,TreeItem controls and anything that has state().expandable should implement a IExpandCollapseProvider UIA pattern and fire expanded/collapsed state change events.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Windows,,,,,,"0|i0ne8v:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"24 Nov '20 18:31;bizcot;This is needed also for compliance in QComboBox",,,,,,,,,,,,,,,,,,,,,
Add padding options to %{function},QTBUG-88711,308318,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,cnn,mitch_curtis,mitch_curtis,21 Nov '20 15:56,21 Nov '20 15:57,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Core: Other,,,,0,,,,"https://doc.qt.io/qt-5/qtglobal.html#qSetMessagePattern has a %\{function\} placeholder which is really useful. However, if you have several related functions whose output should be viewed together (e.g. as a set of steps, with indenting indicating e.g. loops), it becomes difficult to follow:

{noformat}
29:14:428 GameController::updateHoveredActions: updating hovered actions for cursor tile pos: QPoint(12,-4)
29:14:428 GameController::maybeAddDeployAction: - nothing being deployed; skipping Deploy action
29:14:428 GameController::maybeAddUseAbilityOnTargetAction: - the player doesn't have any active ability; skipping UseAbilityOnTarget action
29:14:428 GameController::maybeAddExitLevelAction: - Tiled tile at cursor pos is out of bounds or is marked as an exitLevel tile; adding ExitLevel action
29:14:867 GameController::updateHoveredActions: updating hovered actions for cursor tile pos: QPoint(12,-4)
29:14:867 GameController::updateHoveredActions: - either there's no current level or no selected entity; no actions
29:14:868 GameController::updateHoveredActions: updating hovered actions for cursor tile pos: QPoint(12,-4)
29:14:868 GameController::updateHoveredActions: - either there's no current level or no selected entity; no actions
{noformat}

It would be nice if there was a way to pad the function name:

{noformat}
%{function padding=30 paddingchar="".""}
{noformat}

or to treat it as a ""column"" and set its width:

{noformat}
%{function columnwidth=30 paddingchar="".""}
{noformat}

Then the output would become much easier to read:

{noformat}
29:14:428 ............GameController::updateHoveredActions: updating hovered actions for cursor tile pos: QPoint(12,-4)
29:14:428 ............GameController::maybeAddDeployAction: - nothing being deployed; skipping Deploy action
29:14:428 GameController::maybeAddUseAbilityOnTargetAction: - the player doesn't have any active ability; skipping UseAbilityOnTarget action
29:14:428 .........GameController::maybeAddExitLevelAction: - Tiled tile at cursor pos is out of bounds or is marked as an exitLevel tile; adding ExitLevel action
29:14:867 ............GameController::updateHoveredActions: updating hovered actions for cursor tile pos: QPoint(12,-4)
29:14:867 ............GameController::updateHoveredActions: - either there's no current level or no selected entity; no actions
29:14:868 ............GameController::updateHoveredActions: updating hovered actions for cursor tile pos: QPoint(12,-4)
29:14:868 ............GameController::updateHoveredActions: - either there's no current level or no selected entity; no actions
{noformat}

I imagine these would also be useful for the other placeholders.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0pshb:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add Qt Ribbon Widget to Qt Windows Extras,QTBUG-86861,304958,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,javihria,marble2go,marble2go,23 Sep '20 12:34,20 Nov '20 16:43,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Widgets: Widgets and Dialogs,,,,0,,,,I read the issue #73430 concerning a ribbon implementation in Qt. As there exist patent problems to reimplement it for a cross platform use I want to suggest to implement a Qt ribbon widget as part of Qt Windows Extras. The implementation can be a wrapper around the Microsoft ribbon framework which simplifies the use of the API and makes the best possible integration into the other Qt functionality and framework. I hope that this kind of implementation does not violates patents.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Windows,,,,,,"0|i0p8tj:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[QNX] support QCursor functionalities on QNX,QTBUG-88686,308264,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,srutledg,karimpinter,karimpinter,20 Nov '20 11:23,20 Nov '20 11:52,18 Feb '21 09:41,,5.15.2,,,,,,,,,,,,,,,,,,,,,,"GUI: Basic Input System (keyboard, mouse, touch)",,,,0,Reported_by_support_standard,,,"[https://wiki.qt.io/Qt_Status_on_QNX|https://wiki.qt.io/Qt_Status_on_QNX] says that Screen doesn't have the functionality, but it seems it already has:
[http://www.qnx.com/developers/docs/7.0.0/#com.qnx.doc.screen/topic/manual/cscreen_session_pointer.html|http://www.qnx.com/developers/docs/7.0.0/#com.qnx.doc.screen/topic/manual/cscreen_session_pointer.html]
So Qt can already fully support QCursor features on QNX. ",QNX,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,QNX,,,,,,"0|i0ps6v:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Extend QCamera::errorOccurred to include more information such as the native error code,QTBUG-88681,308256,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,valentyn.doroshchuk,andysh,andysh,20 Nov '20 09:59,20 Nov '20 09:59,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Multimedia,,,,1,Reported_by_support_standard,,,"Extend QCamera::errorOccurred to include more information such as the native error code, so it is clear what is the actual cause of the problem when one occurs as some backends might have more information based on the error code.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0ps53:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add a warningOccurred signal for warnings that come from the backend so that the application can react to them accordingly without having to parse them via the message handler,QTBUG-88679,308254,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,valentyn.doroshchuk,andysh,andysh,20 Nov '20 09:56,20 Nov '20 09:56,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Multimedia,,,,1,Reported_by_support_standard,,,Add a warningOccurred signal for warnings that come from the backend so that the application can react to them accordingly without having to parse them via the message handler. Since the backend is outputting via qWarning() a number of warnings which an application might find relevant then emitting a signal with these instead would be useful.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0ps4n:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add ability to disable smooth scrolling/acceleration in Flickable,QTBUG-83843,297987,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt.team.quick.subscriptions,alnyan,alnyan,28 Apr '20 10:22,19 Nov '20 19:35,18 Feb '21 09:41,,5.14.1,,,,,,,,,,,,,,,,,,,,,,Quick: Core Declarative QML ,,,,2,,,,"Currently, there's no way to disable smooth scrolling and animation for Flickable (and children). It would be good to have a property to do so.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0o573:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"19 Nov '20 19:32;syncu;*PLEASE *finally fix this. We are building a desktop app and we still need these ugly onWheel hacks to create a native experience. Smooth scrolling and swipe gestures should be *disabled *by default on a desktop operated with a normal mouse.",,,,,,,,,,,,,,,,,,,,,
Data race in QObject::~QObject,QTBUG-88658,308218,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,thiago,peppe,peppe,19 Nov '20 17:56,19 Nov '20 18:58,18 Feb '21 09:41,,5.15.2,6.0,,,,,,,,,,,,,,,,,,,,,Core: Object Model,,,,0,,,,"[https://codereview.qt-project.org/c/qt/qtbase/+/320789] is exposing a data race between  ~QObject and QObject::disconnect (or, in general, code called from it -- like cleanOrphanedConnections()). 

This is likely exposing a pre-existing condition, and that can be isolated in its own testcase...",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0prwn:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"19 Nov '20 17:58;peppe;https://codereview.qt-project.org/c/qt/qtbase/+/322562","19 Nov '20 18:34;thiago;There's no such thing as a data race when one of the threads is running the destructor.","19 Nov '20 18:58;peppe;I'm not sure. The second thread isn't touching the destroyed object any more, it's just calling disconnect(connectionObject). That must still work without races. I think the code I posted is slightly wrong in the synchronization (will fix it), but the problem is reproducible elsewhere nonetheless.",,,,,,,,,,,,,,,,,,,
Add option to fail if unfinished translations are found,QTBUG-82292,293754,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,kkohne,cbuchart,cbuchart,18 Feb '20 12:21,18 Nov '20 22:32,18 Feb '21 09:41,,Some future release,,,,,,,,,,,,,,,,,,,,,,Tools: Linguist,,,,0,,,,"Some workflows may include a check that all translations are completed. Right now it is necessary to parse the output of the *lrelease* tool, probably conflicting with user locale.

I'd propose to add a *-failonunfinished* flag so *lrelease* doesn't generate the .qm file and returns an error that can be easily caught from scripts.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0njfr:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"18 Nov '20 22:30;cbuchart;Currently I'm using the following Batch script (on Windows) to check for unfinished translations _before_ releasing them:
{code:java}
rem findstr sets errorlevel to 0 on error, to 1 on success
findstr /spin /c:""type=\""unfinished\"""" /A:0C my_translation_file.ts
if not errorlevel 1 exit /b 1

rem Call lrelease here...

exit /b 0{code}
 ",,,,,,,,,,,,,,,,,,,,,
Qt needs to support glass style backgrounds,QTBUG-85310,301156,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt.team.quick.subscriptions,tshah,tshah,28 Jun '20 22:43,18 Nov '20 15:56,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,GUI: Look'n'Feel,Quick: Controls 2,Widgets: Main Window,,2,qtquickcontrols2-desktop,,,"It is official now: every desktop needs to have a glass background!

Windows started this already with Aero.
macOS Big Sur will expect native apps to have a glass background
KDE apps are started to support a blurred background as well

Please note that this is different from a transparent or translucent background. Transparent just means you can see through the window, glass background will actually blur the contents behind the window. This is normally done via the Window Compositor but it needs to be enabled in order to get this effect.

For Qt on Windows, you can use the QtWin module to make a glass frame.
For KDE, there is no way to do this via Qt so you have to write a crazy xprop hack to enable the _KDE_NET_WM_BLUR_BEHIND_REGION flag.
As for macOS, you will have to write some Cocoa code to get that working.

Rather than write a hack for each platform, Qt should provide a simple Window flag like ""WA_GlassBackground"" to make this effect cross platform.

This is important because end users expect their desktop apps to look and feel like a native app rather than something foreign. Having this flag would make cross platform development much easier.",All the desktop environments.,,,,,,,,,,,,,,,,,,"28 Jun '20 22:43;tshah;36403-67715-Home-App-in-macOS-Big-Sur-xl.jpg;https://bugreports.qt.io/secure/attachment/95918/36403-67715-Home-App-in-macOS-Big-Sur-xl.jpg","28 Jun '20 22:43;tshah;Aero_Example.png;https://bugreports.qt.io/secure/attachment/95917/Aero_Example.png","28 Jun '20 22:43;tshah;kdeBlurWindow.png;https://bugreports.qt.io/secure/attachment/95915/kdeBlurWindow.png","28 Jun '20 22:43;tshah;kdeTransparentWindow.png;https://bugreports.qt.io/secure/attachment/95916/kdeTransparentWindow.png",,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Linux/X11,macOS,Windows,,,,"0|i0onrj:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"18 Nov '20 15:56;vestbo;I QWindow flag would probably be the right way to enable this on the QtGui level, but we'd probably need to teach QtWidgets a few tricks to not paint over the nice blurred background with the QStyle background color. Overlaps slightly with the use-case of being able to set a background color on QWindow (which would be set/drawn by the OS).",,,,,,,,,,,,,,,,,,,,,
Have an environment variable indicating where the resource files can be found,QTBUG-88595,308091,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt_webengine_team,andysh,andysh,18 Nov '20 08:19,18 Nov '20 08:19,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,WebEngine,,,,1,Reported_by_support_standard,,,"Have an environment variable indicating where the resource files can be found, this would act as a compliment to the QTWEBENGINEPROCESS_PATH environment variable then and the dictionaries one too.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0pr5z:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add more detail concerning a users environment ,QTBUG-88557,308025,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,chrisadams,lawrence.emke,lawrence.emke,16 Nov '20 18:40,18 Nov '20 01:10,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Tools: Qt Configuration Tool,,,,0,,,,"I reviewed my account information in this bugreports application.
To speed analysis might I suggest you allow users to add information
concerning the environment they use.  e.g. the hardware and software
environment, and which versions of Qt they are running.   

Keeping it as part of a user profile saves having to ask and the time to describe the
general environment each time a new report is filed.   It would be nice if your installation and telemetry information was used to update this data, as changes are made to my configuration.
Just a suggestion. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0pqrr:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"18 Nov '20 01:07;chrisadams;This is a good suggestion, however the ""Feedback"" JIRA component actually refers to ""Haptic Feedback"" (the JIRA component really should be renamed), so I am the wrong person to discuss this possibility with.  I will try to re-assign the component so that this suggestion reaches appropriate ears.",,,,,,,,,,,,,,,,,,,,,
Mention which Qt prebuilt llvm package to use for qdoc on distros other than ubuntu and rhel,QTBUG-88547,308011,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,docteam,alexandru.croitor,alexandru.croitor,16 Nov '20 13:59,17 Nov '20 16:19,18 Feb '21 09:41,,6.0,,,,,,,,,,,,,,,,,,,,,,Documentation,,,,0,,,,"See last comments at https://bugreports.qt.io/browse/QTBUG-88509

The how to build qdoc + llvm doc page should perhaps mention which prebuilt Qt llvm package to use on Linux distros other than Ubuntu and RHEL.
https://doc-snapshots.qt.io/qt6-dev/qdoc-guide-clang.html
http://download.qt.io/development_releases/prebuilt/libclang/qt/",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0pqov:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"16 Nov '20 14:17;alexandru.croitor;cc [~kkohne]",,,,,,,,,,,,,,,,,,,,,
Add support for selecting client certificates when needed for OAuth2,QTBUG-88325,307602,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,manordheim,andysh,andysh,09 Nov '20 12:00,16 Nov '20 07:36,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Network: Authentication,,,,1,Reported_by_support_standard,,,"Add support for selecting client certificates when needed for OAuth2, this should be done in a similar vein to Qt WebEngine - https://darutk.medium.com/oauth-2-0-client-authentication-4b5f929305d4
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,mkalinow,,,,,,,"0|i0pobr:",9223372036854775807,9223372036854775807,,,,ablasche,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Introduce a way to display GIFs from another module,QTBUG-88488,307881,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,docinfrastructure,mitch_curtis,mitch_curtis,13 Nov '20 12:13,13 Nov '20 12:13,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Build tools: qdoc,,,,1,,,,"The use case is rendering GIFs in e.g. Qt Creator documentation that come from Qt Quick Controls 2, without having to copy (and therefore duplicate) those GIFs into the Creator repo.

The solution would need to work with offline and online docs.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0ppzr:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add animation for Matrix4x4,QTBUG-88479,307867,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt.team.quick.subscriptions,moerkb,moerkb,13 Nov '20 08:49,13 Nov '20 09:01,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Quick: Core Declarative QML ,,,,1,,,,"It would be really nice if you could offer an animation type for [Matrix4x4|https://doc.qt.io/qt-5/qml-qtquick-matrix4x4.html] resp. [matrix4x4|https://doc.qt.io/qt-5/qml-matrix4x4.html] similar to [Vector3dAnimation|https://doc.qt.io/qt-5/qml-qtquick-vector3danimation.html]. 

This could then animate several transformation at once, e.g. translate and scale. If I understand the [implementation of Vector3dAnimation|https://code.woboq.org/qt5/qtdeclarative/src/quick/util/qquickanimation.cpp.html#_ZN23QQuickVector3dAnimationC1EP7QObject] correctly, adding such would not be a lot effort.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0ppwv:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Expose Particles PerfLevel,QTBUG-88473,307853,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt.team.quick.subscriptions,kagro,kagro,13 Nov '20 06:10,13 Nov '20 06:10,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Quick: Particles,,,,0,,,,"Qt Quick particles QQuickImageParticle has currently 6 different PerfLevels, which define the used vertex data and shaders. Proper level is selected based on features and the rendering backend. Lower the level, less memory usage and better the performance is.

Current PerfLevel could be exposed as an enum int QML property for the users. 
- This would assist users to make optimal features vs. performance decisions.
- Document different levels. Documentation should state that this property should be used only for debugging and no promise is given that output remains the same in future Qt versions.
- Design Studio could show the PerfLevel for users automatically.
- Autotests could check the level to make sure that most optimal is selected with different features, and there are no regressions in this.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0pptr:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Particles: Add option to render without point levels,QTBUG-88472,307852,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt.team.quick.subscriptions,kagro,kagro,13 Nov '20 06:07,13 Nov '20 06:07,18 Feb '21 09:41,,6.0.0,,,,,,,,,,,,,,,,,,,,,,Quick: Particles,,,,0,,,,"Usually point sprites, when available, are faster and require less memory than triangle particles. But on some systems it might be preferred to not use points, maybe because driver bug, rendering quality, performance etc. So consider adding either a direct property or more general ""renderingHints"" property which can be used to set perf level always at least Colored. (Currently Colored is used only on d3d11, other backends use SimplePoint/ColoredPoint and jump over Colored to Deformable.)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0pptj:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Use the PHPickerViewController in place of UIImagePickerController on iOS 14 and later,QTBUG-88442,307794,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,vestbo,andysh,andysh,12 Nov '20 08:03,12 Nov '20 08:03,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,QPA,,,,2,Reported_by_support_standard,,,Use the PHPickerViewController in place of UIImagePickerController on iOS 14 and later. This is to enable the new permissions to work correctly with the iOS applications which enable the users more control over what access and to which photos is given.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,iOS/tvOS/watchOS,,,,,,"0|i0pphz:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"QSignalSpy for all signals and slots, like the -vs/QSignalDumper option for QtTest ",QTBUG-88349,307635,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,macadder,bbarber,bbarber,10 Nov '20 04:34,10 Nov '20 13:17,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Testing: qtestlib,,,,0,Reported_by_support_standard,,,"Please make QSignalDumper in QtTest available for Qt applications.  It would be like QSignalSpy, but for all signal and slot events.

The '-vs' option to QtTest produces a dynamic trace of signal and slot events (qtbase/src/testlib/qsignaldumper.cpp).   It writes its events to qPrintMessage.  On Windows, these messages go to the debugger's output window.

Signals and slots are particularly important for understanding the flow of control in GUI applications.

My application has a custom logging framework which stores log events in a circular buffer.  It includes a QtMessageHandler which captures qDebug() output.   Since QSignalDumper writes to qPrintMessage, its events are not recorded.

QSignalSpy tracks individual signals.   It does not track all signals, nor does it report slot events.

As a workaround on Windows, it appears that EVENT_TRACE_FLAG_DBGPRINT would turn qPrintMessage into real-time events.   I don't see how to configure this option without a kernel access to Windows.

See INC-1507451 -- How to capture -vs output from QtTest (Signal-Slot events)
    https://account.qt.io/support/request/INC-1507451 

 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Windows,,,,,,"0|i0poj3:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Support dockable window manager in QML,QTBUG-88292,307557,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,,pengyunquan,pengyunquan,08 Nov '20 18:18,08 Nov '20 18:18,18 Feb '21 09:41,,5.14.2,,,,,,,,,,,,,,,,,,,,,,GUI: Window management,,,,0,,,,"We have `QMainWindow` and `QDockWidget` for `QWidgets`, but we don't have equivalent in `QtQuick/QML`. Could you please share whether we have plan to have built-in dock support in `QtQuick/QML`?",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0po1z:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Expose TransparentForPositioner,QTBUG-88212,307444,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt.team.quick.subscriptions,grecko,grecko,05 Nov '20 13:00,05 Nov '20 15:22,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Quick: Core Declarative QML ,,,,0,,,,"Exposing TransparentForPositioner as a (attached?) R/W property of Item would be useful for multiple usecases.

One might want to instantiate a Item as a parent of another existing Item and position it relative to the existing Item.
This is not possible if the existing Item is in a positionner or layout, the container will take over the positionning.
I have encountered this usecase when trying to implement a reorderable delegate, a crossfading behavior and other cases I've since forgotten about.

A possible workaround is to embed the new Item in a 0 sized Item so that it gets ignored, but that is hacky, add to the memory footprint and is one more level of indirection.

Being able to set transparentForPositioner in user code would greatly simplify things and seems natural.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0pndz:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"05 Nov '20 13:17;mitch_curtis;Hi!

Can you please go into more detail about your use cases? Perhaps take one of them and expand on it here so we can get a better idea about which problem this API would solve.

In general I agree that this would be a useful addition. Personally I could use it for visually debugging stuff (but that's not a good enough justification for adding it :D). ","05 Nov '20 15:22;grecko;In general this API would solve the problem of inserting a transient (or not) Item in a visual hierarchy and being able to position it arbitrarily.

I'll try to make a simple example but I fear it will be too specific.",,,,,,,,,,,,,,,,,,,,
Extend AppContainer to implement the IApplicationOverrides2 functions as well so the application can communicate with a service,QTBUG-88085,307172,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,owolff,andysh,andysh,02 Nov '20 07:49,02 Nov '20 09:43,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,QPA,,,,0,Reported_by_support_standard,,,Extend AppContainer to implement the IApplicationOverrides2 functions as well so the application can communicate with a service. This is possible because it provides the OnBackgroundActivated function with the service is looking for.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,WinRT,,,,,,"0|i0plr3:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Make Qt Creator optional package, make related packages child items",QTBUG-88082,307166,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,releaseteam,morte,morte,02 Nov '20 03:17,02 Nov '20 05:02,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Packaging & Installer,,,,0,,,,"Latest Qt Creator release currently is mandatory package  (<ForcedInstallation>true</ForcedInstallation>). There are cases when Qt will be installed without need for Qt Creator or other version of Qt Creator may be installed (preview or an manually installed older release). Is there an reason that latest Qt Creator release should be mandatory package?

Also ""Qt Creator CDB Debugger Support"", ""Qt Creator Debug Symbols"", ""Qt Creator Plugin Development"" should be child items for Qt Creator

 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0plpr:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Don't download examples and documentation or make it a checkbox,QTBUG-88083,307156,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,releaseteam,dice14u,dice14u,01 Nov '20 13:34,02 Nov '20 05:02,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Packaging & Installer,,,,0,,,,"I have very little hard drive space, and know how to use QT, when I attempted to install the webengine component it forced the install of excess documentation and examples, I seem to have never gotten the option to disable such frivolous use of my hard drive.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0plnj:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Quick Controls ScrollBar should have support for arrow buttons,QTBUG-88028,307060,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,mitch_curtis,smd,smd,29 Oct '20 12:19,29 Oct '20 12:26,18 Feb '21 09:41,,6.0.0 Beta2,,,,,,,,,,,,,,,,,,,,,,Quick: Controls 2,,,,0,,,,"In the windows native style, a scrollbar is expected to have arrow buttons on each side of the scrollbar groove. QQuickScrollBar doesn't have the concept of these arrow buttons (since its primary objective was touch), but in order for windows native style to work, an API should be added for those (probably a bit similar to the ""up/down indicator"" properties on QQuickSpinBox).

The status today is that the scrollbar *looks* fine - arrow buttons are shown, but you don't really intereact with them. However, they seem to almost ""work"", but that's just a coincidence: If I press the arrow button area now, it assumes I'm pressing the groove, so the slider handle just moves to one of the edges close to where you clicked.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0pl33:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Support insertFromMimeData in QML TextArea / TextEdit,QTBUG-88011,307018,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt.team.quick.subscriptions,deepbluev7,deepbluev7,28 Oct '20 19:14,28 Oct '20 20:17,18 Feb '21 09:41,,5.15.1,,,,,,,,,,,,,,,,,,,,,,Quick: Controls 2,Quick: Core Declarative QML ,,,0,,,,"If you want to create native feeling, rich content applications in QML, you need to be able to paste various different mime types. For example in a chat application, you want to be able to paste videos and files to send them to the other party.

 

Currently QML only allows pasting text (plain text, html and the qt variations of it). It also offers no way to customize the behaviour of the various text elements (in this case TextEdit / TextArea) apart from implementing custom components in QML. This makes it impossible to add support for pasting additional mime data in applications, unless you implement a completely new edit component in C++, which will lose all the native look enhancements already done for TextArea and also seems to be fairly difficult.

 

In my opinion there are a few ways to solve that:
 # Allow specifying a mime data handler on TextArea or TextEdit themselves, which can then call a C++ function or similar.
 # Make TextEdit a public API and allow inheriting it in C++ (Widget style?)
 # Provide a PasteTarget component, which can be added to any input element to handle pasting of various mime data.

 

Feel free to correct me, if I missed an obvious way to handle mime data in Qml. I was researching that for quite a bit, but couldn't figure it out and it currently blocks my application from using Qml in more places,",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Linux/Wayland,Linux/X11,macOS,Windows,,,"0|i0pku7:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"28 Oct '20 20:17;deepbluev7;I think I actually found a workaround by adding a MouseArea and a Shortcut to the TextArea, then checking for the right key combination and accessing the keyboard directly. I think adding that to a PasteTarget would be best, so that it can be reused and handles all the platform specifics properly without stealing keys or mouse clicks.",,,,,,,,,,,,,,,,,,,,,
Allow Online Installer to setup Android environment ,QTBUG-87993,306992,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,releaseteam,assam,assam,28 Oct '20 12:58,28 Oct '20 12:58,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Packaging & Installer,,,,0,,,,"The current workflow for Qt users targeting Android (or who want to build Qt for Android) is the following:
 * Install a Qt for Android version from installer
 * Manually download the Android SDK, Android NDk, install required packages, potentially install an AVD.
 * Or use Android Studio to download the SDK, NDK and other packages
 * Qt Creator ""Setup SDK"" to download the SDK, NDK and other packages.

However, all of those methods are not fully automatic, some semi-automatic. It would be much more user friendly, to have the Installer setup the Android environment when an Android version for Qt is selected. Then, the user would straight go to using that. The advantage of that also is that we could control which version of each package to use with for Qt, and notify for updates when ready.

 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Android,,,,,,"0|i0pkof:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
QTouchEvent::TouchPoint can not longer handle transformations for rect,QTBUG-86864,304963,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,srutledg,andrhans,andrhans,23 Sep '20 14:00,27 Oct '20 16:43,18 Feb '21 09:41,,5.15.0,,,,,,,,,,,,,,,,,,,,,,"GUI: Basic Input System (keyboard, mouse, touch)",,,,0,,,,"May be wrong, but looks like a mistake was made when these APIs were deprecated in Qt 5.15:

[https://doc.qt.io/qt-5/qtouchevent-touchpoint-obsolete.html]

This API allowed TouchPoint to return different values for the rect, sceneRect and screenRect, which can be the case when scale is applied to an item or the view.

The new API, only one ellipseDiameters() method (funny name for a single size by the way), is perhaps defined in item coordinates? Or is it scene or screen coordinates? Hard to say.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0p8un:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"23 Sep '20 15:18;srutledg;It's not being transformed during delivery, so I guess we should document that it's in units of logical pixels on the touchscreen where the finger is pressed.  The docs already have a picture to explain why it's an ellipse, and why a rectangular area that corresponds to the convex hull of the ellipse _after_ rotation is not a good way to model it.

We should make sure it's easy to transform the QSizeF to item coordinates in QML.  (same as with velocity but that's QVector2D)","23 Sep '20 16:16;andrhans;I agree that an ellipse makes more sense than a rectangle, I only question the decision to drop the scene and screen variants, as to me, it seems like an item's coordinate system is different from the scene, which is different from the screen (that's why the rect, sceneRect and screenRect API was there in the first place). So if your ellipse is 2x2 in screen coordinates, in QGraphicsView the view may have a 2x transform that causes the corresponding ellipse size in scene coordiantes to be 1x1, whereas an item may have a 0.25x scale that causes the size to be 4x4.

In QML you at least have the scene/screen <-> item distinction, and with this new API, that seems to be gone.","23 Sep '20 17:56;srutledg;We could add accessors which do the transformation at runtime, but then QEventPoint's API gets thicker, and few users need it anyway.  Or we can just make sure you can call item.mapFromScene(size) and such; it's more widely applicable I think?","27 Oct '20 16:43;andrhans;Isn't it Qt internally that uses this feature primarily? My understanding is that it lets the user know that a touch input device that is 25x25 in logical coordinates is actually 50x50 in device coordinates, and that can affect hit regions. Why remove this feature from the API? Especially in the name of simplicity. It seems better to just keep the Rect APIs to me.",,,,,,,,,,,,,,,,,,
Support c++11/c++20 templates for QObjects,QTBUG-87865,306793,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qtbuildsystem,febbe,febbe,26 Oct '20 11:52,26 Oct '20 12:43,18 Feb '21 09:41,,5.13.0 RC 3,5.14.0 RC2,5.15.0 RC2,,,,,,,,,,,,,,,,,,,,Build tools: moc,,,,0,,,,"{{I would like to create templated QObjects. This would allow me to create a Property structure for example. Which is fully compatible with QML without writing getters and setters and signals for each property and binding it over a Q_PROPERTY macro. Which is prone to bugs and also limits the use of all c++ features.}}

{{For example: I would like to have something like the following:}}

{{template <std::equality_comparable T>}}
{{class Property : QObject<}}{{Property<T>}}{{> {}}
{{//Q_OBJECT not required, since we use the ""templated QObject""}}

{{public:    }}
{{    T value()\{...}}}
{{slot:}}
{{    set(T&& val)\{...}}}
{{signal:}}
{{    valueChanged();}}

{{private:}}
{{    T [[Qt::Property READ }}{{value}}{{ WRITE }}{{set NOTIFY }}{{valueChanged}}{{]] value_;}}
{{// Alternatively:}}
{{// #pragma Qt Property }}{{READ }}{{value}}{{ WRITE }}{{set NOTIFY }}{{valueChanged }}
{{// }}{{T value_;}}
{{};}}
h1.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0pjj3:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"26 Oct '20 12:33;fabiankosmale;The closest you get with Qt 5 is https://github.com/woboq/verdigris; with Qt 6 mandating at least C++17 new QProperty system we might be able to do a bit more.

Note that something like your example would however require vastly more advanced static reflection capabilities in C++ than currently available, or a major reworking of moc (which almost certainly won't happen).",,,,,,,,,,,,,,,,,,,,,
Custom metadata for QNetworkCookie,QTBUG-87831,306721,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,manordheim,emdek,emdek,23 Oct '20 14:00,23 Oct '20 14:21,18 Feb '21 09:41,,6.0.0 Beta1,,,,,,,,,,,,,,,,,,,,,,Network: Cookies,,,,0,,,,"Lack of ability to attach extra metadata to {{QNetworkCookie}} makes it hard to pass it around without loosing extra data, for example information about cookie creation / modification time which is crucial for features like deletion of cookies for given period described in QTBUG-86511.
Generic {{data()}} / {{setData()}} operating on {{QVariant}} should be good enough.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0pj3r:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"23 Oct '20 14:21;emdek;Or perhaps an approach with attributes similar to {{QNetworkRequest}} etc., in context of needs like this:
https://codereview.qt-project.org/c/qt/qtbase/+/317352",,,,,,,,,,,,,,,,,,,,,
Clear the cache in time range.,QTBUG-86511,304191,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,xiepinze,xiepinze,xiepinze,08 Sep '20 09:32,23 Oct '20 10:34,18 Feb '21 09:41,,5.15.0 RC2,,,,,,,,,,,,,,,,,,,,,,WebEngine,,,,1,,,,There should be a public api in class QWebEngineProfile for clearing the cache in time range.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0p4db:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"11 Sep '20 12:44;allan.jensen;What is the use-case?","23 Oct '20 10:24;emdek;As discussed on the IRC, I have some suggestions for this API, to extend it to clearing of other stuff too, since these are related.
 The use case is obviously using QWE as proper browser, where allowing to clear data (in this case: cache, cookies and other website specific data are relevant) is a standard feature nowadays (including Chromium).

The thing is to have a nice API for that, I've seen the current state of the code review and I have some proposals.
 # Either limit it to just _n_ hours instead or use {{QDateTime}} for the range (and note timezone stuff in the docs), unless Chromium internally speaks only in hours;
 # Consider making it a proper API to deal with cookies and other stuff, for example renaming it to {{clearBrowsingData()}} and introduce flags to specify what should be included (the minimum would be to have one for cache, cookies, local storage and others);
# Consider optional parameter to specify domain, so data could be removed for a specified domain only (or a separate call(s), to allow to easily clear everything too).

Another possibility is to create a dedicated class just for that purpose, to not overload the {{QWebEngineProfile}} (does it even really operate on just a single profile? that feature is usually a global one).","23 Oct '20 10:34;emdek;To cover all of these cases in a sane way we need at least two methods:

{code}
clearBrowsingData(from, to=NOW, flags=ALL, domain=""*"")
clearAllBrowsingData(flags=ALL, domain=""*"")
{code}

We could treat invalid {{from}} value as ""from the beginning"" but that might make it too easy to clear everything by a mistake.
",,,,,,,,,,,,,,,,,,,
Add option to configure line spacing of a Font,QTBUG-87771,306607,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,esabraha,davschul,davschul,22 Oct '20 04:58,22 Oct '20 07:24,18 Feb '21 09:41,,5.15,,,,,,,,,,,,,,,,,,,,,,GUI: Text handling,,,,0,,,,We need a public function in Qt to adjust the linespacing of a Font to configure the linespacing inside the Qt Creator main editor.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0pifr:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"22 Oct '20 05:06;davschul;Is such functionality feasible?
Where would such functionality fit best? Next to https://doc.qt.io/qt-5/qfont.html#setWordSpacing or at a completely different spot? 
Do you have any advise, known pitfalls when start looking into it?
","22 Oct '20 05:17;esabraha;This is covered by the line height settings in QTextBlockFormat: https://doc.qt.io/qt-5/qtextblockformat.html#lineHeight-1 

If there is something missing from that, then I suggest to expand on that. Although this is too late for any Qt 5.x version, so if it is needed for Qt Creator, I guess it will have to wait until it is ported to Qt 6? Hopefully the current API is sufficient.","22 Oct '20 06:06;davschul;Ohh... I haven't seen that functionality. Let me check whether it works as expected in qc.","22 Oct '20 07:24;davschul;It seems the QPlainTextEdit ignores the line hight format. I directly merge the QTextBlockFormat after loading the document.

QTextDocumentLayoutPrivate::layoutBlock calls getLineHeightParams which checks the line hight of the format but QPlainTextEdit uses QPlainTextDocumentLayout and that has no check for the line hight in the layoutBlock function... Am I doing something wrong here or is it just missing in that layout class?",,,,,,,,,,,,,,,,,,
No way to control alignment of item rows and columns in Flow positioner,QTBUG-78006,283802,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt.team.quick.subscriptions,jpetrell,jpetrell,03 Sep '19 11:25,20 Oct '20 19:31,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Quick: Core Declarative QML ,,,,1,,,,"Flow positioner fits as many items as it can on one row, and then continues on the next line.  The behavior mimicks text layouting ""The Flow item positions its child items like words on a page, wrapping them to create rows or columns of items."", but lacks many alignment cases like horizontal centering, aligning to right and justify.

If Flow is horizontally centered to the view very likely you also want each row of positioned child elements also horizontally centered, but that is currently not possible with Flow. With layout direction you can align Flow rows to the left or right side, but that will also affect the stacking direction.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0lze7:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"20 Oct '20 19:22;simon_gamache;It indeed appears to be quite difficult to achieve certain types of visual layout with this positioner. In particular, suppose we have item A-B-C-D in a flow with layoutDirection: Qt.LeftToRight. Suppose the original item disposition should be
|A (1)|B (2)|C (3)|D (4)|

Here, the numbers in the () next to the letters represent the 1-based index order of the element in the underlying model.

Then the wrapping of the D element may cause the following visual:
|A (1)|B (2)|C (3)|
|D (4)| | |

However, the desired visual would actually be:
|A (1)|B (2)|C (3)|
| | |D (4)|

How can we achieve this? It would seem as though the solution might be the use the layoutDirection property mentioned above and set it to Qt.RightToLeft. Simply doing this, however, would reverse the visual ordering of the element in the layout. We would have:
|D (4)|C (3)|B (2)|A (1)|

Thus, we would have to change the ordering of the underlying model element in order to obtain
|A (4)|B (3)|C (2)|D (1)|

So far so good. The problem arises, however, when the wrapping starts. We would then have:
|B (3)|C (2)|D (1)|
| | |A (4)|

As of right now, this seemingly has to be so, as the Flow element appears to wraps its items starting from the biggest index position in the underlying model.

Perhaps a new property wrapOrdering, with options Qt.Ascending, Qt.Descending or something of the sort would be appropriate here? However, this would have the disadvantage of not including the ""Justified"" or ""Centered"" alignment use cases mentioned in the original suggestion.

P.S. This suggestion seems to also correspond to this ([https://stackoverflow.com/questions/33540483/flow-aligned-right]) stack overflow question, signifying that there is some interest in its resolution.",,,,,,,,,,,,,,,,,,,,,
Make DelegateChoice's roleValue property accept array of values,QTBUG-87720,306479,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt.team.quick.subscriptions,moia,moia,20 Oct '20 07:51,20 Oct '20 07:51,18 Feb '21 09:41,,5.15.1,,,,,,,,,,,,,,,,,,,,,,Quick: Core Declarative QML ,,,,0,,,,Allowing DelegateChoice roleValue accepting multiple values with an array would prevent code duplication when same delegate is used for different types,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0php3:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Switch control for widgets,QTBUG-87705,306440,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt.team.quick.subscriptions,DanielSt,DanielSt,19 Oct '20 09:19,19 Oct '20 09:19,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Widgets: Widgets and Dialogs,,,,0,,,,"A switch control for widgets could be an useful addition.

See also: https://stackoverflow.com/questions/14780517/toggle-switch-in-qt",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0phgv:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Improve canDropMimeData/dropMimeData API,QTBUG-87614,306272,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,dfaure_kdab,miikapernu,miikapernu,15 Oct '20 07:00,15 Oct '20 13:58,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Core: Item Models,,,,2,Reported_by_support_standard,,,"*Suggestion:*

Change
{code:java}
bool canDropMimeData(const QMimeData *data, Qt::DropAction action, int row, int column, const QModelIndex &parent;) const
{code}
to more closely mimic the API of QDropEvent:
{code:java}
Qt::DropAction QAbstractItemModel::canDropMimeData(const QMimeData *data, Qt::DropActions possibleActions, Qt::DropAction proposedAction, int row, int column, const QModelIndex &parent;) const{code}
If you return IgnoreAction, that's like returning false, and the event is
ignored. Otherwise whatever you return goes to QDragMoveEvent::setDropAction.

If they want to ask a different question, they hit a modifier key, and we ask
with a different proposedAction

Generally if you returned true now, you'd return proposedAction in this
interface.

*Why:*

What you gain is the ability to tell a source that allowed both move and copy, proposing move, that you only accept copy and thus give the user the right cursor feedback.

I want to know all the possibleActions() from the QDragMoveEvent (so I can know Copy is actually allowed) and I want to know which one was proposed (so I can default to following the modifier-keys the user was holding down), and I want to be able to override that (if I support one of the possible actions, but not the currently proposed one).

 

 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0pghz:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"15 Oct '20 13:58;thornto4;It would be straight forward to migrate from the old API to my proposed API by doing:



{code:java}
Qt::DropAction MyQt5Model::canDropMimeData(const QMimeData *data, Qt::DropActions possibleActions, Qt::DropAction proposedAction, int row, int column, const QModelIndex &parent) const
{
    if(canDropMimeData(data, proposedAction, row, column, parent)) // old call signature
    {
        return proposedAction;
    }​​​​​​​ else {
        return IgnoreAction;
    }
}{code}
{code:java}
Qt::DropAction MyQt5Model::dropMimeData(const QMimeData *data, Qt::DropActions possibleActions, Qt::DropAction proposedAction, int row, int column, const QModelIndex &parent) const 
{
    if(dropMimeData(data, proposedAction, row, column, parent)) // old call signature 
    {
        return proposedAction;
    }​​​​​​​ else {
        return IgnoreAction;
    }
}{code}",,,,,,,,,,,,,,,,,,,,,
Changing TableView columnWidthProvider from 0 (hidden) to non-zero not effective,QTBUG-87609,306262,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt.team.quick.subscriptions,mmi_puya,mmi_puya,15 Oct '20 01:02,15 Oct '20 12:51,18 Feb '21 09:41,,5.15.1,,,,,,,,,,,,,,,,,,,,,,Quick: Core Declarative QML ,,,,0,,,,"I have a {{TableView}} inside my {{Window}}. I am using {{columnWidthProvider}} to provide the column width to be a specific size, and I am calling {{onWidthChanged: forceLayout()}} to force updates after {{width}} changes. However if the initial value returned by {{columnWidthProvider}} is zero (meaning telling {{TableView}} to hide that column) then the update does not have any effect.

I think if not a bug, this would be incompatible with design of other QtQuick components such as {{Window}} that has the {{TreeView}} inside, since {{Window}} first creates its {{contentItem}} at 0x0 and then resizes it to the final {{Window}} size. Therefore {{TableView}} cannot be used inside a {{Window unless I set a dummy initial size for the column. A sample code would be like this:}}

{{}}
{code:java}
import QtQuick 2.15
import QtQuick.Window 2.15
import Qt.labs.qmlmodels 1.0

Window {
    width: 400
    height: 400
    visible: true

    TableView {
        anchors.fill: parent
        columnSpacing: 1
        rowSpacing: 1
        boundsBehavior: Flickable.StopAtBounds

		/* cannot resize and have the column appear */
		columnWidthProvider: function (column) { return column === 0 ? width : 0 }
		onWidthChanged: forceLayout()
		/**********************************************/

        model: TableModel {
            TableModelColumn { display: ""checked"" }
            TableModelColumn { display: ""amount"" }
            TableModelColumn { display: ""fruitType"" }
            TableModelColumn { display: ""fruitName"" }
            TableModelColumn { display: ""fruitPrice"" }

            // Each row is one type of fruit that can be ordered
            rows: [
                {
                    // Each property is one cell/column.
                    checked: false,
                    amount: 1,
                    fruitType: ""Apple"",
                    fruitName: ""Granny Smith"",
                    fruitPrice: 1.50
                },
                {
                    checked: true,
                    amount: 4,
                    fruitType: ""Orange"",
                    fruitName: ""Navel"",
                    fruitPrice: 2.50
                },
                {
                    checked: false,
                    amount: 1,
                    fruitType: ""Banana"",
                    fruitName: ""Cavendish"",
                    fruitPrice: 3.50
                }
            ]
        }
        delegate:  TextInput {
            text: model.display
            padding: 12
            selectByMouse: true

            onAccepted: model.display = text

            Rectangle {
                anchors.fill: parent
                color: ""#efefef""
                z: -1
            }
        }
    }
}{code}",,,,,,,,,,,,,,,QTBUG-83612,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0pgfr:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"qdoc: filter lists (groups, etc) by regex, not just prefix",QTBUG-87587,306232,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,docinfrastructure,vestbo,vestbo,14 Oct '20 11:09,14 Oct '20 11:09,18 Feb '21 09:41,,6.0,,,,,,,,,,,,,,,,,,,,,,Build tools: qdoc,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0pg9j:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
qdoc: generate subclasses list of specific class,QTBUG-87586,306231,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,docinfrastructure,vestbo,vestbo,14 Oct '20 11:08,14 Oct '20 11:08,18 Feb '21 09:41,,6.0,,,,,,,,,,,,,,,,,,,,,,Build tools: qdoc,,,,0,,,, {{classhierarchy}} only seems to spit out the full list. ,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0pg9b:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[QCanBusFrame] Investigate storing the timestamp in microseconds only,QTBUG-87343,305910,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,aha_1980,aha_1980,aha_1980,12 Oct '20 06:42,14 Oct '20 09:29,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,SerialBus: CAN Bus,,,,1,,,,"Currently the timestamp consists of two 64 bit fields for seconds and microseconds.

As 64 bit allows storing very large numbers, it might be enough to have only the microseconds field and still have a big range. That would save 8 bytes for every QCanBusFrame.

This suggestion came up on https://forum.qt.io/topic/119688/qcanbusframe-timestamp",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0pebr:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"14 Oct '20 01:14;collin80;Thanks for starting this issue. I brought this up because it's a little confusing to use the timestamp field as-is. For instance, it's not easy to compare two timestamps when there are two fields within. This is possible to work around but just results in more code. 64 bits is so large that one can store a timestamp range of about half a million years. So, it would be simpler to store only the microseconds field.

Alternatively, if it is not deemed viable to switch to only one 64 bit field for the timestamp, might it instead be acceptable to add toMicroseconds() as a function that automatically multiplies seconds by one million and adds that to microseconds, returning that number? That would help to abstract away the two 64 bit fields. This would be essentially the inverse of fromMicroseconds(number) which already exists.

Also, I believe it could be viable to add comparison operators so that frame1.timeStamp < frame2.timeStamp works out-of-the-box. With these two changes, which only add and do not subtract any functionality, the timestamp class would be more useful without sacrificing backward compatibility.

 

But, if I had to vote I'd still vote to remove the seconds field and keep microSeconds. The range is large enough and the memory savings, while not all that large, could still be a nice side effect. I sometimes load millions of frames at a time so saving 8 bytes per frame could save megabytes of RAM.","14 Oct '20 08:57;ablasche;Looking at [https://www.wolframalpha.com/input/?i=2%5E64+microseconds+from+now] I agree that the seconds field is over-engineered. It nicely solves the comparison case and reduces size.","14 Oct '20 09:18;aha_1980;{quote}So, it would be simpler to store only the microseconds field.
{quote}
I fully agree to that.
{quote}Also, I believe it could be viable to add comparison operators so that frame1.timeStamp < frame2.timeStamp works out-of-the-box.
{quote}
That looks like a useful addition. But note that you probably cannot compare timestamps generated by different CAN interfaces, and sometimes not even from different sessions (see QTBUG-55295)
{quote}add toMicroseconds() as a function
{quote}
I think adding this function might nevertheless be a good idea, as we cannot remove seconds() and microseconds() now. We need to deprecate them first and then we can remove them in Qt 7.

That means, for now seconds() would return (m_microseconds / 1E6) and microSeconds() would return (m_microSeconds % 1E6). That would be the compatibility for existing users.
{quote}I sometimes load millions of frames at a time so saving 8 bytes per frame could save megabytes of RAM.
{quote}
Especially, since the timestamp now occupies more RAM than the payload data itself.
{quote}64 bits is so large that one can store a timestamp range of about half a million years.
{quote}
But note that we use signed integers, so it's roughly 300'000 years only :P","14 Oct '20 09:29;aha_1980;[~ablasche] it seems I missed your comment when I wrote my answer.

So I'll prepare a patch for Qt 6.",,,,,,,,,,,,,,,,,,
Investigate porting RHi Quick Graphical Effects to 5.15.x,QTBUG-87476,306098,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt.team.graphics.and.multimedia,ttgil,ttgil,13 Oct '20 16:23,13 Oct '20 16:23,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Quick: Graphical Effects,,,,3,,,,"Since the 6.0.0 release doesn't include some modules used in larger projects, migration to RHi will have to happen on 5.15.x for many of us.  However, the absence of QML Graphical Effects implemented under RHi is a blocker for that. 

Would it be possible to backport the RHi support to 5.15?",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0pfgf:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add a means to validate the data and determine the next edit hint before the editor is closed ,QTBUG-79616,287608,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt.team.quick.subscriptions,andysh,andysh,30 Oct '19 07:11,13 Oct '20 14:08,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Widgets: Itemviews,,,,1,Reported_by_support_standard,,,"This could be done by providing a virtual protected function in QAbstractItemDelegate that gives a pointer to the widget and the index information, plus it could have an optional parameter to indicate the EndEditHint. So something like:

{code}
  bool aboutToCloseEditor(QWidget *editor, const QModelIndex &index, QAbstractItemDelegate::EndEditHint *endEditHint)
{code}

for instance. So if the data to be set is not ready for submission due to a validator or something then the function can return false to prevent the closing of the editor, and if it is ready it gives a means to change what the EndEditHint would be if it should differ from the default.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0mkhb:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"13 Oct '20 14:01;thornto4;For more context, there is no way to override Qt's default behavior for committing/closing an editor or changing the EndEditHint when closeEditor is called.

In it's simplest, there's no easy way to change the default EndEditHint for an QAbstractItemDelegate without taking over all
the event handling manually.

We want to keep all the keyboard/focus handling events of QStyledItemDelegate, but override the EndEditHint.

And there's also no easy way to keep the editor open if calling model->setData fails because QAbstractItemDelegate::setModelData only returns void and can't propagate the failure back to anyone.

We can work around this limitation by doing a terrible hack and overriding the delegate's private _q_commitDataAndCloseEditor slot:
{code:java}
void Delegate::_q_commitDataAndCloseEditor(QWidget *editor)
{
    emit commitData(editor);
    if (!CustomErrorHandler::hasErrorThroughOutsideKnowledge(editor)) {
        emit closeEditor(editor, QAbstractItemDelegate::EditNextItem);
    }
}{code}

This let's us separate committing the data, testing whether or not it succeeded on the model, and if successful closing our editor with a different
EndEditHint. But the workaround is obviously a terrible / unsupported hack abusing MOC.","13 Oct '20 14:08;thornto4;I had forgotten we had raised this issue last year.

When we were reviewing our code, and came across our hacky workaround, we thought of another approach:

* Making QAbstractItemDelegate::setModelData return a bool that in some way
influences whether closeEditor is called
* Obtaining the EndEditHit from a virtual instead of hard coding
""EditNextItem"", that way if closeEditor is called, it's called with
a value the user can override
* Exposing commitDataAndCloseEditor as a public slot. Not sure if necessary if
the above items are resolved, but also don't think it hurts anything either

Default implementations would preserve the existing behavior.",,,,,,,,,,,,,,,,,,,,
QHelp documentation example code is wrong,QTBUG-87337,305899,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt.team.quick.subscriptions,viniciusjl,viniciusjl,12 Oct '20 02:59,12 Oct '20 03:00,18 Feb '21 09:41,,5.15.0,5.15.1,,,,,,,,,,,,,,,,,,,,,GUI: Look'n'Feel,,,,0,,,,"The example code at end of page [https://doc.qt.io/qt-5/qthelp-framework.html] should be:
{code:c++}
QHelpEngineCore helpEngine(""mycollection.qhc"");
helpEngine.setUsesFilterEngine(true);

...

// get all file references for the identifier
QList<QHelpLink> links =
    helpEngine.documentsForIdentifier(QLatin1String(""MyDialog::ChangeButton""));

// If help is available for this keyword, get the help data
// of the first file reference.
>if (links.count()) {
    QByteArray helpData = helpEngine->fileData(links.cbegin()->url);
    // show the documentation to the user
    if (!helpData.isEmpty())
        displayHelp(helpData);
}

{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0pe9b:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
QOrbitCameraController wrong behaviour,QTBUG-87301,305796,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,seanharmer,andreykuz,andreykuz,08 Oct '20 17:05,08 Oct '20 17:05,18 Feb '21 09:41,,5.15.1,,,,,,,,,,,,,,,,,,,,,,Qt3D,,,,0,,,,"The QCamera class allows to define the vertical orientation with upVector. But the orbit camera controller ignores it and uses axis Y as vertical.

The reason is in the method QOrbitCameraController::moveCamera() contains a line:

    const QVector3D upVector(0.0f, 1.0f, 0.0f);

which (i guess) should be changed to:

    const QVector3D upVector = theCamera.upVector();",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0pdn3:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"For QImage constructor, add a version where std::function is used for the clean up function",QTBUG-87274,305730,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,vgt,doug_rogers,doug_rogers,08 Oct '20 00:09,08 Oct '20 03:18,18 Feb '21 09:41,,5.15.1,,,,,,,,,,,,,,,,,,,,,,GUI: Painting,,,,0,,,,"I would like to be able to specify a lambda for the clean-up function when creating a QImage.  It would allow much more flexibility for deleting the allocated buffer. something like:
h3. QImage::QImage(const [uchar|https://doc.qt.io/qt-5/qtglobal.html#uchar-typedef] *_data_, int _width_, int _height_, int _bytesPerLine_, [QImage::Format|https://doc.qt.io/qt-5/qimage.html#Format-enum] _format_, std::function<void(void**)> )

 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0pd9b:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Move Q_DECLARE_TR_FUNCTIONS into a smaller header,QTBUG-87165,305526,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,thiago,EliteScience,EliteScience,05 Oct '20 11:22,05 Oct '20 17:01,18 Feb '21 09:41,,5.15.1,,,,,,,,,,,,,,,,,,,,,,Core: QString and Unicode,,,,0,,,,"When you have a class which contains string to translate, you have currently 4 choice:
- Use {{QObject::tr}} =>bad to maintain tr files
- Use {{QCoreApplication::translate}} => passing the class name as string is bad for refactorings
- Inherit by {{QObject}} => a moc file will be generated, even it doesn't contain anything required and {{QObject}} doesn't have a copy constructor
- Use {{Q_DECLARE_TR_FUNCTIONS}} => sounds nice, but your header are getting [bloated|https://github.com/qt/qtbase/blob/5.15.1/src/corelib/kernel/qcoreapplication.h#L43-L51] with unnecessary includes

How it could be solved:
- Simple class which use a forward declaration for {{QString}} and the implementation is within a cpp file ({{QObject}} then should inherit from this tiny class)
- Move {{Q_DECLARE_TR_FUNCTIONS}} to a separate header and move the call {{QCoreApplication::translate}} to a cpp file
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0pc27:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"05 Oct '20 16:59;thiago;-It's in ""qobjectdefs.h"", which is one of the lightest headers we have. Where do you want it to be moved to?- oops, confused with {{QT_TR_FUNCTIONS}}

Splitting the macro in two would be a source-incompatible change. So ""won't do"" for that.

We can add a new pair. Not sure exactly where they could go.",,,,,,,,,,,,,,,,,,,,,
Pass the clicked mouse button in the QLegendMarker::clicked signal,QTBUG-87102,305389,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,e0348803,martonmiklos,martonmiklos,01 Oct '20 08:48,01 Oct '20 11:59,18 Feb '21 09:41,,5.15.0 Alpha,,,,,,,,,,,,,,,,,,,,,,Charts,,,,0,,,,I wanted to add a context menu to my QLegendMarker but the clicked signal does not expose the clicked button. Would it be possible to add this feature without breaking the API?,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0pbav:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"01 Oct '20 09:37;e0348803;Changing the signal arguments would be an API break. Maybe you can work around it in your application by listening to mouse events sent to the chart (using eventFilter) to determine what the button for the latest click was.","01 Oct '20 09:58;martonmiklos;Well that's what I was afraid of. As far as I know we are now out from the Qt 6 API freeze, and I assume it applies to the Charts module as well?","01 Oct '20 10:28;e0348803;I'm not entirely sure what happens with charts in Qt 6. I don't think it's going to be included in 6.0 release at least, so I guess technically you could still make API changes to it, but I don't know the official policy on API breaks on modules not included in 6.0.","01 Oct '20 11:39;martonmiklos;In the case if it turns out that we could modify this API for 6.x would you support a such a change?","01 Oct '20 11:59;e0348803;While knowing the button would be useful in some use cases, none of the other clicked, pressed, released, etc. mouse button signals in Qt Charts specify the button. If button were to be added, it should probably be added to all relevant signals.",,,,,,,,,,,,,,,,,
Support compressed encodings for VNC QPA,QTBUG-85619,301869,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,vestbo,poikelin,poikelin,16 Jul '20 10:06,30 Sep '20 10:27,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,QPA,,,,0,Reported_by_support_standard,,,"Currently only raw encoding is supported, which requires a lot of bandwidth",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Linux/Other display system,,,,,,"0|i0orxr:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"30 Sep '20 10:06;liaqi;https://en.wikipedia.org/wiki/RFB_protocol#Encoding_types
https://tools.ietf.org/html/rfc6143#section-7.7","30 Sep '20 10:27;vestbo;Is there anything preventing use of 3rd party VNC solutions instead? Like  [https://xpra.org/] or [http://www.karlrunge.com/x11vnc/] e.g ?",,,,,,,,,,,,,,,,,,,,
`_q_interpolate' maybe change the size of `QRect',QTBUG-87074,305341,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,,jchiron,jchiron,30 Sep '20 09:57,30 Sep '20 10:18,18 Feb '21 09:41,,5.14.2,,,,,,,,,,,,,,,,,,,,,,Core: Animation Framework,,,,0,,,,"I need do a flickable table, so make follow code:

!image-2020-09-30-17-53-48-141.png!

 

Then, I found the `TableView::resizeEvent()' invoked always, the reason is the function `template<> Q_INLINE_TEMPLATE QRect _q_interpolate(const QRect &f, const QRect &t, qreal progress)', the function can not ensure the size of `QRect'.",windows10 qt-5.14.2,,,,,,,,,,,,,,,,,,"30 Sep '20 10:18;jchiron;Video_2020-09-30_180446_edit.wmv;https://bugreports.qt.io/secure/attachment/98652/Video_2020-09-30_180446_edit.wmv","30 Sep '20 09:53;jchiron;image-2020-09-30-17-53-48-141.png;https://bugreports.qt.io/secure/attachment/98650/image-2020-09-30-17-53-48-141.png",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Windows,,,,,,"0|i0pb2f:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Checking for UNDEFINED should not result ""undefined error"" thrown.",QTBUG-86994,305177,Suggestion,Open,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,fawzi,lawrence.emke,lawrence.emke,27 Sep '20 17:25,28 Sep '20 21:26,18 Feb '21 09:41,,5.15.0,6.0,,,,,,,,,,,,,,,,,,,,,QML: Declarative and Javascript Engine,,,,0,,,,"Sorry I did not state the problem as clear as I should have.  I guess I need to
make it obvious.  I thought I did that. But I was wrong.  I will  try make the title more obvious.
This is NOT a SUGGESTION. 

If someone thinks checking to prevent an error, should throw an error, the purpose of ""typeof""
is not understood.

=================================================================

I did a test.  I created a Qt Quick Prototype that contains a window.
In the window I created an Item and an Component.onCompleted element.

In the Item I created a function that passes an argument.
In the function I test for the typeof value of a property that does exist
but  the qualified property of the argument does exist. The qualified property does not. 
( see the two attached snapshots)

If I do: typeof(x) === ""undefined"",  then it produces the correct result.
However,
If I do: typeof(x.z ) === ""undefined"", then if throws a bad reference error. 

I don't expect that the testing for existence of an undefined object or
undefined property of an object should throw an error. The purpose was
to detect the undefined element.


",,,,,,,,,,,,,,,,,,,"27 Sep '20 17:27;lawrence.emke;Screenshot 2020-09-27 at 12.09.07.png;https://bugreports.qt.io/secure/attachment/98574/Screenshot+2020-09-27+at+12.09.07.png","27 Sep '20 17:27;lawrence.emke;Screenshot 2020-09-27 at 12.09.38.png;https://bugreports.qt.io/secure/attachment/98573/Screenshot+2020-09-27+at+12.09.38.png",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0pa4n:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"27 Sep '20 18:30;lawrence.emke;There is another variation on this situation.
In this case the object referenced exists but its value is null.

By this I mean:
The qualifier object (ie. ""a"") exists but has a value of null.
When the qualified test (i.e if ( a.b === ""undefined"") is made error message reports
that ""b"" is undefined. But the real problem is that ""a"" is defined as a null value. 
When  ""a"" is set to reference an existing object that contains ""b"", the test is successful.
But, then again if ""b"" is undefined that we receive the message that ""b"" is undefined.

","27 Sep '20 18:39;lawrence.emke;You might want to consider a new ""typeof"" value:  ""null_reference"". 
This means that somewhere in the chain of references a ""null"" value
prevents the determination of the type of the referenced object from being determined.
","28 Sep '20 02:09;fawzi;I do not see this as a bug, but rather as a suggestion on how handle non existing symbols (the none argument to your function).
I find the current behaviour consistent, and I fail to see why we should silently convert a unknown symbol x (not declared as var) to undefined so that you can pass it to a function/method.
Maybe you meant something else (then reopen and clarify), but the current behaviour in your example is correct.
In any case such a suggestion is about QML, not creator, so I moved your bug to the correct place.","28 Sep '20 21:18;lawrence.emke;I am sorry I confused you.  This is no suggestion (the null_reference was a suggestion)
The first section is a REAL problem.

WHEN you TEST for UNDEFINED type you do not expect to an error thrown when UNKNOWN 
is the result.  The entire purpose of checking for typeof() UNKNOWN is to prevent an error
In the case of checking for an unknown entry of an existing pointer is not to cause an error.
HAVING A CHECK FOR UNDEFINED should not cause an error when UNDEFINED is the resule.

",,,,,,,,,,,,,,,,,,
AboutQt dialog in Qt Quick Controls 2,QTBUG-72917,271979,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt.team.quick.subscriptions,ceperez1996,ceperez1996,09 Jan '19 03:57,28 Sep '20 15:26,18 Feb '21 09:41,,5.12.0,5.12.1,5.12.2,5.12.3,,,,,,,,,,,,,,,,,,,Quick: Controls 2,,,,0,qtquickcontrols2-desktop,,,"Add an _""About Qt""_ dialog to Qt Quick Controls 2.

[EDIT]

Maybe also an _""About""_ dialog, to complement. Just as Qt Widgets has.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0k55z:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"25 May '19 21:12;ceperez1996;I think that it's more important having this in Qt Quick Controls 2 than in Qt Quick Dialogs, so I updated the report to target QQC2.",,,,,,,,,,,,,,,,,,,,,
Support for mnemonic shortcuts for QML Button ,QTBUG-74347,275251,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt.team.quick.subscriptions,pekarjal,pekarjal,12 Mar '19 08:58,28 Sep '20 15:19,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Quick: Controls 2,,,,1,qtquickcontrols2-desktop,Reported_by_support_standard,,"Using an ambersand with QPushButton creates automatically a shortcut, for example 

{code:java}
QPushButton *button = new QPushButton(""&Press Me"", this);
{code}

creates a shortcut for ALT + P. The same thing does not work with QML Buttons, for example

{code:java}
Button {
    text: qsTr(""&Press Me"")
}
{code}

This adds the underscore to the ""P"" but there is no shortcut for it. Would it be possible to add similar automatic shortcut in QML as it is with QWidgets?",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0kn7b:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
MenuItems should have shortcuts,QTBUG-76281,279713,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt.team.quick.subscriptions,thohartm,thohartm,07 Jun '19 14:51,28 Sep '20 15:19,18 Feb '21 09:41,,5.12.3,,,,,,,,,,,,,,,,,,,,,,Quick: Controls 2,,,,0,qtquickcontrols2-desktop,,,"MenuItems should have shortcuts that just apply to the context of the Menu.

While it is possible to use Actions with a shortcut instead, actions always define
an application wide global shortcut.
If implementing e.g. a context menu for a TextField, then I want to use shortcuts like delete 
and ctrl+c, but they should not override global action shortcuts and cannot be actions for this reason.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0lbxb:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Menu - adding property ""parentMenu""",QTBUG-76295,279737,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt.team.quick.subscriptions,codezeug,codezeug,10 Jun '19 05:44,28 Sep '20 15:18,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Quick: Controls 2,,,,1,qtquickcontrols2-desktop,,,"Would it be possible adding a new property ""parentMenu"" (or similar) to Menu (Quick Controls 2)? It could be very useful.

The Menu from {color:#2e2f32}Qt.labs.platform 1.1{color} already owns a relevant property (Src\qtquickcontrols2\src\imports\platform\qquickplatformmenu_p.h).

 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0lc2n:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
MenuBar does not open a menu immediately on mouse press and does not support press-hold-release,QTBUG-79554,287491,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt.team.quick.subscriptions,abizjak,abizjak,25 Oct '19 21:05,28 Sep '20 15:09,18 Feb '21 09:41,,5.13.1,,,,,,,,,,,,,,,,,,,,,,Quick: Controls 2,,,,0,qtquickcontrols2-desktop,,,"A menu using MenuBar opens only once the mouse is clicked and released on the menu item. This can feel a bit sluggish, especially if the menu takes a bit of time to show up as it tends to the first time it is opened. It would be better if a menu opened as soon as the mouse is pressed. This is how menus in almost all desktop applications behave.

MenuBar also does not support press-hold-release usage, which is common in many  applications/toolkits, and is almost universal on Linux. This means that menus can be used like this:
 * Press and hold the mouse button while the pointer is one of the menu bar items. The menu appears immediately.
 * Navigate to the desired menu item and release the button. The item is activated and the menu disappears.

 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Linux/X11,,,,,,"0|i0mjrj:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
QML FileDialog should provide local path as a string property,QTBUG-80509,289663,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt.team.quick.subscriptions,viniciuscosta,viniciuscosta,03 Dec '19 14:43,28 Sep '20 15:06,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Quick: Controls 2,Quick: Dialogs,,,1,qtquickcontrols2-desktop,,,"Currently, only an url property is available, which requires conversion to string before using with standard c++",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0mwg7:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add support for having a default button in DialogButtonBox,QTBUG-84295,298972,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt.team.quick.subscriptions,andysh,andysh,18 May '20 12:53,28 Sep '20 13:47,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Quick: Controls 2,,,,0,qtquickcontrols2-desktop,Reported_by_support_standard,,"Add support for having a default button in DialogButtonBox, currently there is no way to mark that a button is a default one which is handy functionality to have when navigating the dialog with a keyboard.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0oay7:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
No wrap-around of conflicting &mnemonic key in QtQuick.Controls 2 Menu,QTBUG-86278,303573,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt.team.quick.subscriptions,yunishih,yunishih,27 Aug '20 12:17,28 Sep '20 13:35,18 Feb '21 09:41,,5.15.0,,,,,,,,,,,,,,,,,,,,,,Quick: Controls 2,,,,0,qtquickcontrols2-desktop,,,"Unlike platform menu or QMenu of QWidget, &mnemonic key in Controls 2 Menu doesn't wrap around.

For example, pressing Alt+D+D+D+... doesn't move the current item inside the menu, but
flips the visibility of the menu.

{code:javascript}
        Menu {
            title: qsTr(""&Debug"")
            Action { text: qsTr(""&Do it"") }
            Action { text: qsTr(""&Do it"") }
            Action { text: qsTr(""&Do it"") }
        }
{code}

I understand QtQuick.Controls doesn't try to copy the platform's exact behavior, but I think
it's common for menu to have ambiguous &mnemonic items.

The wrapping behavior could be implemented without modifying Qt codebase, but 
it wasn't an easy task. For reference, my PoC-level hack is attached.",,,,,,,,,,,,,,,,,,,"27 Aug '20 12:13;yunishih;quick-controls-menu-hack.tar.gz;https://bugreports.qt.io/secure/attachment/97615/quick-controls-menu-hack.tar.gz",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Linux/X11,Windows,,,,,"0|i0p10v:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Default values for Layout attached properties,QTBUG-86900,289781,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,,VersalEszett,VersalEszett,05 Dec '19 12:35,25 Sep '20 01:59,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,QML: Declarative and Javascript Engine,,,,0,,,,"I often find myself in a situation where I'd like to to give all items in a Layout the same attached property values.

In case of margins, this could be worked around with a wrapper item and {{anchors.margins}}, but for stuff like alignment, those properties have to be defined for all items.

I'd really like to be able to define the property once in the Layout and have it applied for all items:

!image-2019-12-05-13-44-01-625.png!",,,,,,,,,,,,,,,,,,,"05 Dec '19 12:44;VersalEszett;image-2019-12-05-13-44-01-625.png;https://bugreports.qt.io/secure/attachment/89886/image-2019-12-05-13-44-01-625.png",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0mx5j:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
TableView: Be able to move the columns around in the table,QTBUG-86877,304992,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,richard,andysh,andysh,24 Sep '20 06:03,24 Sep '20 06:52,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Quick: Other,,,,2,Reported_by_support_standard,,,TableView: Be able to move the columns around in the table. This is possible with QTableView and the TableView as part of Qt Quick Controls 1 so it would be a good addition here too.,,,,,,,,,,,,,,,QTBUG-83612,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0p90v:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add an exec() method to Dialog,QTBUG-86782,304776,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt.team.quick.subscriptions,ceperez1996,ceperez1996,21 Sep '20 05:32,24 Sep '20 00:10,18 Feb '21 09:41,,5.15.1,,,,,,,,,,,,,,,,,,,,,,Quick: Controls 2,,,,0,,,,"Consider two QML components named {{A}} and {{B}}, and a custom {{MessageDialog}} component that consist in a {{Dialog}} with a required {{message}} property. There is not an obvious way to reuse {{MessageDialog}} while keeping all three classes unaware of each other.

The two obvious options are:
 # Instantiate a {{MessageDialog}} for every message you want to handle
 With this the handling of messages is fully encapsulated, but there is an overload for the QML engine. Also, the amount of code will be significantly increased, making it more difficult to maintain.
 # Instantiate {{MessageDialog}} only once, and handle all possible situations in the {{MessageDialog}} itself, or in its single instance. The amount of code is not increased and the QML engine is not overloaded, but there will not be any encapsulation: the {{MessageDialog}} will not only be aware of the existence of {{A}} and {{B}}, but it will also manage operations and access/modify properties.

There are other options, like creating the {{MessageDialog}} dynamically, but I cannot think in one that makes the implementation small, intuitive, and not make the code difficult to understand.

The purpose is adding a {{exec()}} function to {{Dialog}} in _Qt Quick Controls 2_ module that behaves like the one provided by the {{QDialog}} widget: blocks the application until the user closes the dialog by declining, and return the result code.

Some years ago, when I was using widgets...
{code:java}
bool MyWidget::processData(const QByteArray &data)
{
    // ...
    if (result.empty()) {
        messageDialog.setMessage(""Found nothing, try the hard method?"");
        if (messageDialog.exec() == QDialog::Accepted) {
            // ...
        }
    }
    // ...
}
{code}
Now, imagine this in Qt Quick Controls 2:
{code:java}
onClicked() {
    messageDialog.message = ""Remove all elements?""
    if (messageDialog.exec() === Dialog.Accepted) {
        model.clear()
    }
}
{code}
See? It's so beautiful... simple... short... concise... elegant... intuitive...",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0p7s7:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"23 Sep '20 12:32;ulherman;You can make the MessageDialog a singleton. Then you can access it from anywhere while still only creating one instance of it. There are various ways to get the notification when the dialog is closed. Binding, Connections with the ""enabled"" propertry, Qt.binding(), ...","23 Sep '20 12:34;ulherman;You can also use Loader or Component.create() to create a local dialog on the fly when requested. Then it doesn't waste resources while it's inactive.","24 Sep '20 00:10;ceperez1996;[~ulherman] thanks for the tip about the singleton, I haven't made a singleton directly in QML, but I will check on it. However, I do not think that that invalidates this issue. I only mentioned the most obvious approaches. The fact that something can be done don't means that it cannot be improved. For example, before {{anchors.centerIn}} were added to QQC2's {{Dialog}}, centering a {{Dialog}} were already possible, but anchors made things a lot easier.

Using connections, bindings and creating components in the fly, while can be done, it's not very straightforward, or at least not as the {{exec()}} option that we have in the widgets module and we miss so much. I don't know how difficult can be implementing such feature in QQC2, but if done, will simplify things a lot. Many features with the same purpose (make things easier for developers) were added in the last 2 years in order to make coding easier, and this one will save a lot more work than any other I've seen in years.",,,,,,,,,,,,,,,,,,,
Add a way to customize the easing type of the ListView highlight animation,QTBUG-86841,304910,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt.team.quick.subscriptions,ndavis,ndavis,22 Sep '20 19:52,23 Sep '20 13:26,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Quick: Core Declarative QML ,,,,1,,,,"The ListView has a built-in SmoothedAnimation for highlight movement and highlight resizing. Right now, it uses InOutQuad (I think) and there's no way to use a different {{easing.type}}.

KDE's HIG currently recommends using Cubic easing types, but we can't be consistent with the HIG if the ListView forces us to use InOutQuad.","Operating System: openSUSE Tumbleweed 20200917
KDE Plasma Version: 5.19.90
KDE Frameworks Version: 5.75.0
Qt Version: 5.15.1
Kernel Version: 5.8.4-1-default
OS Type: 64-bit
Processors: 4 × Intel® Core™ i7-6500U CPU @ 2.50GHz
Memory: 7.6 GiB of RAM
Graphics Processor: Mesa DRI Intel® HD Graphics 520",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0p8jj:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"23 Sep '20 13:26;ndavis;Actually, it seems like SmoothedAnimations don't use the {{easing}} property at all. Changing the {{easing.type}} does nothing.",,,,,,,,,,,,,,,,,,,,,
emit a signal when webpage launching external url,QTBUG-86781,304774,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt_webengine_team,wangjuna,wangjuna,21 Sep '20 05:05,23 Sep '20 11:32,18 Feb '21 09:41,,5.15.1,,,,,,,,,,,,,,,,,,,,,,WebEngine,,,,0,,,,"Sometimes when webpage launching external url,  user maybe want to get a prompt dialog just like chrome, or get a choice to decide whether launch external application or not.

This means in *src/core/web_contents_delegate_qt.cpp*
{code:java}
void WebContentsDelegateQt::launchExternalURL(const QUrl &url, ui::PageTransition page_transition, bool is_main_frame, bool has_user_gesture)
{ 
........ 
if (navigationRequestAccepted)     
    QDesktopServices::openUrl(url); 
....... 
} {code}
it is better not call ""QDesktopServices::openUrl"" directly,  I suggest it should just emit a signal, let developer who use qtwebengine to handle it.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0p7rr:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"23 Sep '20 11:32;ignitor;I think this is already possible by overriding [QWebEnginePage::acceptNavigationRequest()|https://doc.qt.io/qt-5/qwebenginepage.html#acceptNavigationRequest] or using a [QWebEngineUrlRequestInterceptor|https://doc.qt.io/qt-5/qwebengineurlrequestinterceptor.html].",,,,,,,,,,,,,,,,,,,,,
Adding text to QPainterPath that follows the path.,QTBUG-86839,304908,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,vgt,kgschlosser,kgschlosser,22 Sep '20 19:36,22 Sep '20 21:54,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,GUI: Painting,,,,0,,,,"Currently the documentation for PyQt for the QPainterPath.addText method can lead a person to believe that the text would follow the path. It does not state in the documenattion that the text is always going to render horizontally. The text rendering horizontally really doesn't make any sense when using QPainterPath to render text, it would make sense to have the text follow the path. The image provided in the documentation leads one to believe that the text follows the path because of the line drawn under the text. My interpertation of the image is that the line represents the path and the x, y indicates where the bottom left corner of the text is along that path. This is not the case. The text is always added horizontally.

 

If a path was created that is a single line adding text to the path would place the bottom edge of the text along the line and a flag could be used to determine if the line should be rendered or not. This would make it far easier to render ""wavy"" text or curved text. When using PyQt. There is also a speed factor when using PyQt, it would increase the speed of the calculations 50 to 200 times faster because the calculations would reside in C code instead of in Python code.

 

I know there are examples for handling this exact thing but there ends up being spacing issues between the letters that would need to be compensated for, I have not seen any examples of how to properly handle the spacing problems.

 

 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0p8j3:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Wayland: Add notes to doc that global positioning does not work on Wayland,QTBUG-86780,304769,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,docteam,luspi,luspi,20 Sep '20 16:52,20 Sep '20 16:52,18 Feb '21 09:41,,5.15.1,,,,,,,,,,,,,,,,,,,,,,Documentation,,,,0,,,,"Wayland by design does not support things like getting the global cursor position (QCursor::pos()) or explicitely positioning a window. It probably would be very helpful if either notes were added to all such methods that they will not work on Wayland, or if something like an overview of all of the unavailable methods were compiled somewhere (maybe as part of the already existing ""Wayland and Qt"" page).",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0p7qn:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add support for combining QFutures together,QTBUG-86728,304676,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,sonakur,pschuchardt,pschuchardt,17 Sep '20 15:15,17 Sep '20 15:38,18 Feb '21 09:41,,6.0,,,,,,,,,,,,,,,,,,,,,,Core: QtConcurrent,,,,0,,,,"For many tasks, multiple concurrent pipelines are needed to complete the task. There's no easy way to combine multiple QFuture together. For example:
{code:java}
QFuture<int> pipeline1 = QtConcurrent::run([]() { return 1; });
QFuture<QString> pipeline2 = QtConcurrent::run([]() { return ""Hello world""; });

//Proposed API to combine multiple futures together
QFuture<void> combinePipelines = QFuture::combine({pipeline1, pipeline2});

combinePipeline.then([pipeline1, pipeline2]() {
    //Should print out ""Results: 1 Hello World""
    qDebug() << ""Result:"" << pipeline1.result() + pipeline2.result();
});{code}
This functionality is supported by [AsyncFuture|https://github.com/vpicaver/asyncfuture?files=1] library.",,,,,,,,,,,,,QTBUG-86714,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0p76v:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add support for automatic unwrapping QFuture inside of .then(),QTBUG-86725,304673,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,sonakur,pschuchardt,pschuchardt,17 Sep '20 14:49,17 Sep '20 15:18,18 Feb '21 09:41,,6.0,,,,,,,,,,,,,,,,,,,,,,Core: QtConcurrent,,,,0,,,,"When creating a Async pipeline sometimes QFuture.then() may return QFuture. It's useful to unwrap the returned QFuture such there's not QFuture<QFuture<T>>. For example:
{code:java}
auto download = [](QUrl url) {
   ...
   return QList<Tile>({tile1, ..., tileX});
}

auto processTiles = [](QList<Tile> tiles) {
   QFuture<QImage> future = QtConcurrent::mappedReduced(tiles, 
                                             processTile, //Map function
                                             reduceTiles) //Reduce function
   return future;
} 

auto saveImage = [](QImage image) {
   image.save(...);
}

auto future = QtConcurrent::run(download, url)
            .then(processTiles)
            .then(saveImage){code}
Things to consider when implementing unwrapped QFutures this:
 * Handling / propagating progress
 * Handling errors
 * Handling canceling and pausing ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0p767:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"17 Sep '20 14:56;pschuchardt;This is functionality is supported by the [AsyncFuture|https://github.com/vpicaver/asyncfuture?files=1] library.",,,,,,,,,,,,,,,,,,,,,
Detect installed llvm automatically,QTBUG-80842,290468,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,docinfrastructure,miikapernu,miikapernu,17 Dec '19 10:19,14 Sep '20 12:19,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Build tools: qdoc,,,,0,Reported_by_support_standard,,,"When building QDoc it's necessary to set the LLVM_INSTALL_DIR variable.

*Suggestion*: add autodetection for an llvm installation so it may not be necessary to set the variable",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Windows,,,,,,"0|i0n12v:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Mark functions that are Q_INVOKABLE with a [invokable] tag in the docs,QTBUG-79698,287790,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,docinfrastructure,andysh,andysh,01 Nov '19 14:23,14 Sep '20 12:19,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Build tools: qdoc,Documentation,,,0,,,,Mark functions that are Q_INVOKABLE with a [invokable] tag in the docs similar to having a [slot] and [signal] one so it is easy to see which ones are invokable.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0mlg7:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Single sourcing documentation,QTBUG-81885,292875,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,docinfrastructure,veshivas,veshivas,05 Feb '20 10:24,14 Sep '20 12:19,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Build tools: qdoc,,,,0,,,,"Now that we have more products on offer, making Qt cover a wider spectrum.  We should consider single sourcing seriously, to leverage existing documentation for Qt and package it differently for the different products.

This means including parts that are only relevant for the product and ignoring the rest. We do this to some extent with Qt for Python. Although it works , it adds the maintenance overhead with all those \if defined()...\endif blocks several places in the doc. More optimal solution would be something like the \since command, which enables us to list all the API for a specific version. May be another qdoc command to mark parts of content for a specific product, and in the qdocconf we should be able to define the product we are building the docs for.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0necf:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"11 Feb '20 14:37;dourouc05_;I just found out about this issue. A nice feature of DocBook (now supported in qdoc) is that you can do some profiling on the files: based on some attributes, you select some parts of the document that are only conditionally used for generation. DocBook readily provides attributes like {{arch}}, {{audience}}, {{os}}, and the generic {{condition}}.

The reference documentation: https://tdg.docbook.org/tdg/5.2/ref-elements.html#common.effectivity.attributes
An implementation: https://github.com/docbook/xslt10-stylesheets/tree/master/xsl/profiling
Some documentation on generating documents with profiling: http://www.sagehill.net/docbookxsl/Profiling.html
A tutorial from OpenSUSE: https://opensuse.github.io/daps/doc/cha.daps.user.modular.html
How profiling works in a decent XML editor: https://www.oxygenxml.com/demo/DocBook_Profiling.html

That might be useful to output the doc for all products and ""since"" versions at once for comparison (QTBUG-71493), but still be able to have meaningful output from the DocBook document without too much trouble. ",,,,,,,,,,,,,,,,,,,,,
"QDoc: extend ""\include"" usage model to ""\overload""s",QTBUG-86559,304325,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,docinfrastructure,agolubev,agolubev,10 Sep '20 15:29,14 Sep '20 12:19,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Build tools: qdoc,,,,0,,,,"It would be great if \include-ed text paragraphs would also be auto-added to function overloads (marked with \overload).

There are, obviously, certain pitfalls / exceptions:
- If \include contains argument (marked with \a) and overload does not have this argument, such auto-include is somewhat useless (although, such things are not generalized to be \include-d in the first place, I guess)
- There are very simple overloads that only contain \overload statement and that's it. For these, auto-include does not give much, the user is natively expected to see the descriptive version of a function. Let's call such documented functions ""empty""

For me, as a user, QDoc is a complete black-box, so the following logic is just how a user would see it (no clue if certain stuff is possible to achieve at all or not):
1) It would be great if trivial (but not ""empty"") \overload-s would support auto-inclusion feature
2) for anything non-trivial, reporting a warning (e.g. ""auto-inclusion is not possible"") or anything similar is good enough, I guess
3) ""empty"" overloads are just ignored (see reasoning above)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0p55z:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
QDoc should support -include flag,QTBUG-76195,279530,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,docinfrastructure,annulen,annulen,04 Jun '19 16:18,14 Sep '20 12:19,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Build tools: qdoc,,,,0,,,,"QDoc already supports {{-I}}, {{-isystem}}, and {{-D}}, however there is no support for {{-include}}. Some code bases require forced include to be parsed successfully, and while it may be considered a bad practice, it limits possible uses of qdoc",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0latz:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"04 Jun '19 16:48;gbk;What is -include ?","04 Jun '19 16:50;annulen;-include is a flag supported by GCC, Clang and other GCC-like compilers, which forcibly includes given file when compiling. It's usually used for PCH.","04 Jun '19 16:54;gbk;What should qdoc do with the file? qdoc doesn't actually compile anything. Do you mean we could pass a PCH to qdoc that way?","04 Jun '19 16:57;annulen;>What should qdoc do with the file? qdoc doesn't actually compile anything. 

But it uses clang to build AST, and if source file cannot be compiled without PCH, it results in errors when running qdoc.

>Do you mean we could pass a PCH to qdoc that way?

Yes, it could be also used to pass existing PCH and so far speed up qdoc.",,,,,,,,,,,,,,,,,,
readonly qml elements / reusable qml elements,QTBUG-86600,304396,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt.team.quick.subscriptions,lawrence.emke,lawrence.emke,12 Sep '20 20:51,13 Sep '20 06:19,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,QML: Declarative and Javascript Engine,,,,0,,,,"In the debug mode, I looked at the data structures of elements in my application.
I see that everytime I invoke an qml object an entire new instance of the object
is created. 

Now I have a set of configuration values that I want to use through out the application.
It only contains readonly objects. Yet all of its value are copied for each instance
and all of the supporting attributes are produced as well. 

It would be nice if the compiler could be aware that this was a data block (no functions
no signals, no children, no viewable objects, etc..) just readonly constants, and 
therefore it could be reused. 

I want to use it to set default length and width values for a certain ""set"" of objects
(more than one) and I don't want to have to go and find all of the places it is being
used. I would like the compiler to set those values on load, rather than setting
them in an ""onCompleted"" event handler, or some call to a function after the
object has already been displayed.  

Second:  I assume (maybe falsely) that the Java Script functions are all serially reusable.
I would like to have a basic object that just contains java script functions so that
they would not have to be replicated with every occurence of a QML object.  

This is sort of making QML into more of an Object ""class"" structure, where only the
data section of the object is copied to create a new instance of the QML object. 

It will save a large amount of ""run time memory"" with all of the extra unused attributes
not being repeated. 





 ","Running qmlscene type qml applications in Qt Creator. 

What I would like to do is develop the application in QML (not too much worried
about performance) and then compiling it as a normal Qt Quick application. 

And then if there are more concerns, extract the functions and data and place
them in a C++ structure.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0p5kv:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"13 Sep '20 06:19;ulherman;There are singletons and readonly properties in QML. Singletons are only instantiated once per QML engine, and readonly properties can only be initialized once per object.",,,,,,,,,,,,,,,,,,,,,
Add a distance function to QPointF,QTBUG-86590,304382,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,thiago,daljit97,daljit97,11 Sep '20 15:11,11 Sep '20 15:12,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Core: Other,,,,1,,,,"I think the QPointF class should provide a static function to compute the distance between two points. It is very unintuitive to call QLineF(p1,p2).length() just to get distance between two points.

Instead something like 

 
{code:java}
static qreal QPointF::distance(QPointF const &p1, QPointF const &p2)
{code}
should be provided. As a bonus, a ""distancesquared"" function could also be included.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0p5hr:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Editable ComboBox additional property to specify auto-completion case sensitivity,QTBUG-79877,288074,Suggestion,In Progress,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,mitch_curtis,henning,henning,08 Nov '19 09:15,11 Sep '20 11:32,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Quick: Controls 2,,,,1,Reported_by_support_premium,,,"When an editable ComboBox has the following model elements, the auto-completion will also match ""banana"", ""bANANA"" or any other variation. This causes a problem when you want to exactly match the strings.
{code}
ComboBox {
    editable: true
    model: ListModel {
        id: model
        ListElement { text: ""Banana"" }
        ListElement { text: ""Apple"" }
        ListElement { text: ""Coconut"" }
    }
}
{code}
In qquickcombox.cpp:459 in the {{acceptInput()}} function the find message uses {{Qt::MatchFixedString}} which is case insensitive per documentation. 
The problem is that I do the handling completely in the custom ComboBox, but this {{acceptInput()}} function kicks in afterwards and sets the {{currentIndex}} again.

The suggestion is to introduce a property to set the {{Qt::MatchFlags}} for the {{acceptInput()}} case.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0mn5b:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"10 Sep '20 13:28;mitch_curtis;I'm trying to understand what happens if I change

{code}
const int indexForEditText = find(d->extra.value().editText, Qt::MatchFixedString);
{code}

to

{code}
const int indexForEditText = find(d->extra.value().editText, Qt::MatchExactly);
{code}

I assume this will make it impossible for users who want case-insensitive flags to have that behaviour?

I'm just thinking that it would be nice if we could avoid adding a property to control this very specific part of ComboBox's behaviour (considering that find() will still use its own, separate flags).","10 Sep '20 13:42;mitch_curtis;It seems it's a little more complex in widgets, because there you have the QCompleter as well:

https://code.qt.io/cgit/qt/qtbase.git/tree/src/widgets/widgets/qcombobox.cpp?id=62f5ecca7d2b193236cd4e5ccfc96290541b9fff#n1272

Although I don't really understand how it's supposed to behave, because if I make an editable QComboBox, enter a ""Test"" entry, and then type ""test"" and hit enter, it selects ""Test"". :/ Indeed that's what [the docs|https://doc.qt.io/qt-5/qcombobox.html#setCompleter] say too:

{quote}
By default, for an editable combo box, a QCompleter that performs case insensitive inline completion is automatically created.
{quote}","10 Sep '20 14:01;mitch_curtis;So my understanding of this is that the lack of a QCompleter is perhaps the root cause of this problem. If we had that, the case sensitivity for cases where the ComboBox handles completion itself (rather than the user calling find()) would be delegated out to QCompleter, where the user could set a caseSensitivity property:

https://doc.qt.io/qt-5/qcompleter.html#caseSensitivity-prop

{quote}
The problem is that I do the handling completely in the custom ComboBox, but this acceptInput() function kicks in afterwards and sets the currentIndex again.
{quote}
From what I can see, it's a bit different. If I use the example from the documentation:
{code}
ComboBox {
    editable: true
    model: ListModel {
        id: model
        ListElement { text: ""Banana"" }
        ListElement { text: ""Apple"" }
        ListElement { text: ""Coconut"" }
    }
    onAccepted: {
        if (find(editText) === -1)
            model.append({text: editText})
    }
}
{code}
and enter ""apple"", then:
{code}
void QQuickComboBoxPrivate::acceptInput()
{
    Q_Q(QQuickComboBox);
    int idx = q->find(extra.value().editText, Qt::MatchFixedString); // <=== Sets editText to ""Apple""
    if (idx > -1)
        q->setCurrentIndex(idx);

    extra.value().accepting = true;
    emit q->accepted(); // <=== causes QML to call find with editText, which is now ""Apple"" instead of ""apple""

    if (idx == -1)
        q->setCurrentIndex(q->find(extra.value().editText, Qt::MatchFixedString));
    extra.value().accepting = false;
}
{code}

Adding a caseSensitivity property would certainly be the easier option though, given how complex QCompleter is and how it's tied to widgets.",,,,,,,,,,,,,,,,,,,
Be able to define the type for a TableModel column so it is possible to specify null where relevant for those types,QTBUG-86577,304364,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt.team.quick.subscriptions,andysh,andysh,11 Sep '20 09:02,11 Sep '20 09:02,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Quick: Mouse Touch and Tablet input,,,,0,Reported_by_support_standard,,,Currently it is not possible to specify NaN as a value in a column for a row. So it would be good to be able to define the type for a TableModel column so it is possible to specify null where relevant for those types. This will mean it is possible to pass null to a double field which would map to NaN when parsed from the JSON. ,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0p5e7:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
QQC2 plugin does not load static style plugins,QTBUG-73933,274159,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt.team.quick.subscriptions,pekarjal,pekarjal,20 Feb '19 11:10,09 Sep '20 11:52,18 Feb '21 09:41,,5.12,,,,,,,,,,,,,,,,,,,,,,Quick: Controls 2,,,,1,reported_by_support_standard,,,"Quick Controls 2 plugin does not load statically built custom style plugins when using dynamically built Qt. 

This suggestion is related to https://bugreports.qt.io/browse/QTBUG-67062

According to the change request https://codereview.qt-project.org/#/c/229114/11/src/imports/controls/qtquickcontrols2plugin.cpp static plugins are only loaded and initialised when using static Qt build, so the suggestion is to load also static style plugins even when using dynamically built Qt. ",,,,,,,,,,QTBUG-67062,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0khvz:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"09 Sep '20 11:52;mitch_curtis;This should be solved with the type registration changes in Qt 6.0. There, every style (even if it's just QML and doesn't have a C++ plugin) must be a proper QML module that can be loaded by the QML engine, and hence must be available in the import path list. That means we could get rid of the custom plugin-loading code.",,,,,,,,,,,,,,,,,,,,,
Automatically break grab from other items when a dialog is shown,QTBUG-86340,303716,Suggestion,Open,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt.team.quick.subscriptions,poikelin,poikelin,31 Aug '20 08:00,04 Sep '20 09:02,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Quick: Controls 2,,,,1,Reported_by_support_standard,,,"While user is interacting with something, like dragging an item or using items such as Flickable or Slider and some popup dialog opens (modal or not), those items are still keeping the grab and are getting the input.

This could be a problem for example if the dialog opens in front of a Slider, so the user could still change its value without knowing while still holding the screen.

Currently it could be worked around by disabling whole contentItem of the window, but this wouldn't work for multiple dialogs and also changes the appearance.

For example:
{code}
import QtQuick 2.15
import QtQuick.Window 2.15
import QtQuick.Controls 2.15

ApplicationWindow {
    visible: true
    width: 640
    height: 480
    Slider {
        onValueChanged: if (value > 0.5) d.open()
    }
    Dialog {
        id: d
        modal: true
        Text {
            text: ""hello""
        }
    }
}
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0p1vb:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"04 Sep '20 09:02;mitch_curtis;This looks like a valid issue to me. Fixing it would bring our behaviour in line with widgets:

{code}
#include <QtWidgets>
#include <QDebug>

int main(int argc, char *argv[])
{
    QApplication app(argc, argv);

    QMainWindow mainWindow;

    QWidget *centralWidget = new QWidget;
    mainWindow.setCentralWidget(centralWidget);

    QDialog *dialog = new QDialog(centralWidget);
    dialog->resize(200, 200);

    QHBoxLayout *hBoxLayout = new QHBoxLayout(centralWidget);

    QSlider *slider = new QSlider(centralWidget);
    QObject::connect(slider, &QSlider::valueChanged, [=](int value){ if (value > 50) dialog->exec(); });
    hBoxLayout->addWidget(slider);

    mainWindow.centralWidget()->setLayout(hBoxLayout);

    mainWindow.resize(400, 400);
    mainWindow.show();

    return app.exec();
}
{code}",,,,,,,,,,,,,,,,,,,,,
Add a `icon.fillMode` property to icons in QtQuick Controls 2,QTBUG-73147,272536,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt.team.quick.subscriptions,ceperez1996,ceperez1996,19 Jan '19 18:04,03 Sep '20 21:59,18 Feb '21 09:41,,5.12.0,5.12.1,5.12.2,5.12.3,,,,,,,,,,,,,,,,,,,Quick: Controls 2,,,,0,,,,"If the icon to show doesn't have square dimensions, it's stretched. That's doesn't look well, so I suggest adding a {{icon.fillMode}} (like {{Image.fillMode}}) property to the controls that support icons.
h2. UPDATE

As [~mitch_curtis] suggested, I will add a working example:

Consider the two following SVG icons:

*0.svg*

 
{code:java}
<svg width=""512"" height=""256"">
 <circle cx=""256"" cy=""128"" r=""96"" style=""fill: red; stroke: black; stroke-width: 24""/>
</svg>{code}
 

*1.svg*

 
{code:java}
<svg width=""256"" height=""512"">
 <circle cx=""128"" cy=""256"" r=""96"" style=""fill: blue; stroke: black; stroke-width: 24""/>
</svg> {code}
 

And the following {{main.qml}}:

*main.qml*
{code:java}
import QtQuick 2.15
import QtQuick.Controls 2.15
import QtQuick.Window 2.15

Window {
    ComboBox {
        anchors.centerIn: parent
        model: 2
        delegate: MenuItem {
            width: parent.width
            text: ""Index "" + modelData
            icon.source: index + "".svg""
            icon.color: ""transparent""
        }
    }
}
{code}
Despite the icons are both circles, when running the above example with {{qmlscene}} this is what we obtain:

  !Screenshot_20200903_175445.png|thumbnail!",,,,,,,,,,,,,,,,,,,"03 Sep '20 21:58;ceperez1996;IconFillMode.tar.gz;https://bugreports.qt.io/secure/attachment/97926/IconFillMode.tar.gz","03 Sep '20 21:55;ceperez1996;Screenshot_20200903_175445.png;https://bugreports.qt.io/secure/attachment/97924/Screenshot_20200903_175445.png",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0k7zb:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"18 Aug '20 06:43;mitch_curtis;Can you please provide a minimal example (with icon) that shows the issue?","03 Sep '20 21:59;ceperez1996;[~mitch_curtis] you're right. I just updated the issue, and I also attached the example in a compressed {{tar}} file.",,,,,,,,,,,,,,,,,,,,
Animation details section to Qt Quick 3D,QTBUG-86252,303375,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,docteam,tero.pelkonen,tero.pelkonen,26 Aug '20 06:13,26 Aug '20 06:13,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Documentation,,,,0,reported_by_support_standard,,,"Qt Support received a request from customer regarding animation in Qt Quick 3D.

When we check the documentation for Qt Quick 3D:

[https://doc.qt.io/qt-5/qtquick3d-index.html]

there is no section for Animation or any mention of it.

 

Could there be instructions and details added regarding Animations in Qt Quick 3D?

 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0p0pz:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Best Effort OAuth1 token parsing,QTBUG-85928,302538,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,jefernan,mbarclay,mbarclay,07 Aug '20 00:57,19 Aug '20 15:18,18 Feb '21 09:41,,5.15.0,,,,,,,,,,,,,,,,,,,,,,Network: Authentication,,,,0,,,,"The Oauth1 standard requires the server to respond with Content-Type: application/x-www-form-urlencoded  However the code in qoauthoobreplyhandler.cpp:

 

void QOAuthOobReplyHandler::networkReplyFinished

Handles a number of other Content-Types, such as text/html, application/javascript, text/json, etc.

 

SUGGESTION:

Instead of issuing a warning and returning when the content type is unknown, attempt to parse the data and only return if the parsing failed:

 

 

{{diff --git a/src/oauth/qoauthoobreplyhandler.cpp b/src/oauth/qoauthoobreplyhandler.cpp}}
{{index 0409274..a2c03cd 100644}}
{{--- a/src/oauth/qoauthoobreplyhandler.cpp}}
{{+++ b/src/oauth/qoauthoobreplyhandler.cpp}}
{{@@ -92,7 +92,9 @@ void QOAuthOobReplyHandler::networkReplyFinished(QNetworkReply *reply)}}
{{ ret = object.toVariantMap();}}
{{ } else {}}
{{ qCWarning(lcReplyHandler, ""Unknown Content-type: %s"", qPrintable(contentType));}}
{{- return;}}
{{+ ret = parseResponse(data);}}
{{+ if(ret.isEmpty())}}
{{+ return;}}
{{ }}}

{{ Q_EMIT tokensReceived(ret);}}

 

This was discovered while attempting to authenticate against OpenStreetMap.org's auth server.  It returns ""text/plain"" and the url encoded oauth credentials resulting in failed authentication by QOAuth1.  The content type was ultimately set by the Ruby oauth-plugin project which is used by OSM.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0ovuf:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add setting method to set image animation policy,QTBUG-86154,303079,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt_webengine_team,the compiler,the compiler,19 Aug '20 14:07,19 Aug '20 14:07,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,WebEngine,,,,0,,,,"Chromium has [animation_policy|https://source.chromium.org/chromium/chromium/src/+/master:content/public/common/web_preferences.h;l=196;drc=72aa50fa724be49fb2c59872b20bce365ab44c12] in its WebPreferences which can be used to control how GIF images are animated (allowed, only once without looping, not animated at all).

With Chromium, this can be controlled using an [Animation Policy|https://chrome.google.com/webstore/detail/animation-policy/ncigbofjfbodhkaffojakplpmnleeoee] extension which uses the {{chrome.accessibilityFeatures.animationPolicy}} API. No command-line switch seems to exist, so this can't be set with QtWebEngine at all as far as I'm aware.

Similarly to QTBUG-84486, this probably only requires a new method plus enum in {{QWebEngineSettings}}.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0oyzr:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
QML and QtQuick suggestions for advanced users,QTBUG-85397,301381,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt.team.quick.subscriptions,greenwolf,greenwolf,02 Jul '20 15:12,19 Aug '20 05:04,18 Feb '21 09:41,,5.15.0,6.0.0,,,,,,,,,,,,,,,,,,,,,Quick: Core Declarative QML ,,,,2,,,,"Hi,

I really love the QML language and QtQuick, it's really easy to create custom views and controls with custom styling, and really convenient for creating a good UI experience.

 

But as an advance QML/QtQuick user I have some frustrations that I think could be really easy to fix and that would definitivelly be a game changer for Qt:

*Enhanced C++ API for QtQuick:*
 This is probably the most frustrating ones, but a lot of basic QtQuick components are private and made really difficult to integrate or create new powerfull and optimized controls.

For example I recently tryed to implements a masonry like view ([https://masonry.desandro.com/]), but without subclassing Flickable from C++ it's either a mess to implements or a performance issue. It would be really nice and powerfull that Flickable (QQuickFlickable) become a public API in QtQuick c++ module. Since it would prevent us to links again Qt private API.

There is a non-exaustive list of other items I really would love to become C++ available in such manner:
 * *Flickable* (For the reason explained above)
 * *Text* (As it would be convenient to create it from C++)
 * *Transition* (Would be a tricky one maybe, but will allow us to create custom transition for our custom view, will probably need some other API to manipulate it).
 * *Control* (As it would allow us to implements a custom control and tacking advantages of all existings features of controls)

This could be a start and the following ones may be a plus:
 * Some Control generic classes, like *AbstractButton* or *Container*.
 * *ApplicationWindow*, *Popup* and *Dialog*.

 

*Binding reference*

I would be nice to have some kind of binding references available in the core language, like in SwiftUI for example.

For now to create a proper bidirectionnal binding we have to make something like this:
{code:java}
TextField {
    text: myDataModel.someTextProperty
    onEditingFinished: myDataModel.someTextProperty = text
}
{code}
It would be really convenient to have something like this:
{code:java}
TextField {
   text: &myDataModel.someTextProperty
}
{code}
Or any kind of symbol (Swift use $) or even a global function.

So the text propery could be like a *BindingReference<QString>* and the *&* operator could return a *BindingReference<QString>* instead of a binding to a *QString*.

A *BindingReference<QString>* will allow the control to send back a value to the model.

Of course the original synthax should still work, for special cases, so a *BindingReference<QString>* could accept a simple QString binding. In that case sending back a value from the control will send a warning. The *BindingReference<T>* should have some kind of *canWrite* property to prevents the warning.

 

This is a start, but these two suggestions will be I think a real game changing.

 

 ",,,,,,,,,,,,,QTBUG-57549,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0op1b:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add a means to pass on SSL errors to the application for presenting to the user,QTBUG-83613,297322,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,stromme,andysh,andysh,17 Apr '20 07:33,18 Aug '20 06:48,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,WebView,,,,0,Reported_by_support_standard,,,Add a means to pass on SSL errors to the application for presenting to the user. This is possible on Android at least using SSLErrorHandler. This way it could be possible to ignore the error if desired or to accept it and thus prevent loading of the page.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0o1yv:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Extra detail into FileDialog.qml,QTBUG-86091,302947,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,docteam,tero.pelkonen,tero.pelkonen,18 Aug '20 06:46,18 Aug '20 06:46,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Documentation,,,,1,reported_by_support_standard,,,"[https://doc.qt.io/qt-5/qml-qtquick-dialogs-filedialog.html#details]

User has requested to improve FileDialog documentation.

Currently there is written:

""

_The implementation of FileDialog will be a platform file dialog if possible. If that isn't possible, then it will try to instantiate a [QFileDialog|https://doc.qt.io/qt-5/qfiledialog.html]. If that also isn't possible, then it will fall back to a QML implementation, DefaultFileDialog.qml._

""

From this description it is not clear tha to get the DefaultFileDialog.qml you need to rebuild Qt from sources with -no-widgets argument set.

 

Maybe a line that hints this could be added?

 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0oy8n:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add terminal layout with Ctrl and Alt modifier keys,QTBUG-86083,302928,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,mitch_curtis,btantau,btantau,17 Aug '20 15:35,17 Aug '20 15:35,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Virtual Keyboard,,,,0,,,,"It would be great to have special keys available on the keyboard like the F keys, Esc, Tab and Ctrl and Alt. Without these keys a terminal emulator is almost impossible to use in a touch only environment. Other applications would benefit as well for keyboard shortcuts, at least easier copy and paste.",Noticed this while trying to use Plasma Mobile or Plasma Desktop on a Pinephone.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0oy4f:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Read widevine from ~/.config,QTBUG-86007,302764,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt_webengine_team,the compiler,the compiler,12 Aug '20 09:38,12 Aug '20 09:38,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,WebEngine,,,,0,,,,"It looks like newer versions of Chromium store Widevine in {{~/.config}}, at least on Linux (no idea how things look on Windows/macOS).

On my machine, I have a {{~/.config/chromium/WidevineCdm/latest-component-updated-widevine-cdm}} which contains:

{code}
{""Path"":""/usr/lib/chromium/WidevineCdm""}
{code}

and Widevine is then stored in {{/usr/lib/chromium/WidevineCdm/_platform_specific/linux_x64/libwidevinecdm.so}}.

However, another user reports having this in the {{latest-component-updated-widevine-cdm}}:

{code}
{""Path"":""/home/myuser/.config/chromium/WidevineCdm/4.10.1610.0""}   
{code}

and the actual library is at {{~/.config/chromium/WidevineCdm/4.10.1610.0/_platform_specific/linux_x64/libwidevinecdm.so}}.

It'd probably make sense for QtWebEngine to read the path in that JSON (?) file and also search Widevine there (in the proper subdirectory) in addition to the current paths.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0ox6f:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Possible to introduce a type ""uint64"" in QML?",QTBUG-85601,301836,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt.team.quick.subscriptions,codezeug,codezeug,15 Jul '20 13:41,10 Aug '20 07:24,18 Feb '21 09:41,,6.0.0,,,,,,,,,,,,,,,,,,,,,,QML: Declarative and Javascript Engine,,,,0,,,,"Would it be possible to introduce a type ""uint64"" in QML? 
 The background is that Javascript's type Number doesn't cover completely the value range of 64bit unsigned integer. 
 That can be problematic in technical applications e.g. when using C++ property of type quint64.
Or further is it possible to introduce corresponding QML types for each numeric C++ type?",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0orqv:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"16 Jul '20 07:19;ulherman;It would be possible to introduce the type, but you wouldn't be able to do JavaScript math on it. Whenever we operate on any QML numerical types in JavaScript, we first convert them to a JavaScript Number, and then do the requested operation. With 64bit integral types, the conversion to Number would be lossy as JavaScript Number is a 64bit floating point type.

Numerical operations in JavaScript include simple bindings like ""x: a.width - b.x""","16 Jul '20 07:20;ulherman;We can introduce QML variants of the shorter C++ types, but I'm not sure if there is much of a point to that.","18 Jul '20 12:50;codezeug;But would it at least be possible to introduce it for property binding between C++ uint64 and QML? This means that you can enter and display very large numbers of(C++)  uint64 in e.g. TexEdit that are not covered by Number in JavaScript.","10 Aug '20 07:24;ulherman;People will accidentally use such types for JS math if they are available. What should we do with them then? The JavaScript answer is silent type coercion, and that would give you really nasty, hard to find bugs. We could warn about it at runtime, but that would be a hit-and-miss affair for any real world sized application. I really prefer not to support 64bit integer types. You can wrap your 64bit integer in a struct and register that one. Then you can pass it around without accidentally doing math on it. If you want to use it in a TextEdit you need to convert it to/from strings at some point anyway. You might as well do it before passing it.",,,,,,,,,,,,,,,,,,
Make it possible to use HoverHandler to filter events,QTBUG-85926,302535,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt.team.quick.subscriptions,mitch_curtis,mitch_curtis,06 Aug '20 15:44,06 Aug '20 15:44,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Quick: Mouse Touch and Tablet input,,,,0,,,,"I'm trying to track the position of the mouse cursor regardless of what items are occupying the scene, like an event filter, but without having to resort to C++.

At first I tried using a HoverHandler on the window, but it was never hovered:

{code}
import QtQuick 2.13
import QtQuick.Controls 2.13

ApplicationWindow {
    id: window
    width: 400
    height: 400
    visible: true
    title: ""hovered: "" + hoverHandler.hovered

    StackView {
        anchors.fill: parent
    }

    HoverHandler {
        id: hoverHandler
        target: window.contentItem
    }
}
{code}

It seems like it is designed so that it will only get events that weren't already accepted, which makes sense. However, it would be nice if there was a way to filter hover events, similar to how PointHandler [apparently allows mouse clicks to be filtered|https://doc.qt.io/qt-5/qml-qtquick-pointhandler.html#details]:

{quote}
By being only a passive grabber, it has the ability to keep independent oversight of all movements. The passive grab cannot be stolen or overridden even when other gestures are detected and exclusive grabs occur.

If your goal is orthogonal surveillance of eventpoints, an older alternative was QObject::installEventFilter(), but that has never been a built-in QtQuick feature: it requires some C++ code, such as a QQuickItem subclass. PointHandler is more efficient than that, because only pointer events will be delivered to it, during the course of normal event delivery in QQuickWindow; whereas an event filter needs to filter all QEvents of all types, and thus sets itself up as a potential event delivery bottleneck.

One possible use case is to add this handler to a transparent Item which is on top of the rest of the scene (by having a high z value), so that when a point is freshly pressed, it will be delivered to that Item and its handlers first, providing the opportunity to take the passive grab as early as possible. Such an item (like a pane of glass over the whole UI) can be a convenient parent for other Items which visualize the kind of reactive feedback which must always be on top; and likewise it can be the parent for popups, popovers, dialogs and so on.
{quote}

The docs mention MultiPointTouchArea as an alternative for some issue about macOS and trackpads, so I tried it just out of curiosity, but as expected, it didn't react to hover:

{code}
import QtQuick 2.13
import QtQuick.Controls 2.13

ApplicationWindow {
    id: window
    width: 400
    height: 400
    visible: true
    title: ""x: "" + point1.x

    StackView {
        anchors.fill: parent
    }

    MultiPointTouchArea {
        id: hoverHandler
        anchors.fill: parent
        touchPoints: [
            TouchPoint { id: point1 }
        ]
    }
}
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0ovtr:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Pass the sourceClipRect from Image to QQuickImageProvider,QTBUG-85895,302470,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,w00t,andysh,andysh,05 Aug '20 11:11,05 Aug '20 11:11,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Quick: Other,,,,0,Reported_by_support_standard,,,Pass the sourceClipRect from Image to QQuickImageProvider as this could be useful for when the image is being loaded so it can take this into consideration already.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0ovfz:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Missing useful overload for QObject::connect,QTBUG-85875,302415,Suggestion,Open,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,thiago,andrhans,andrhans,04 Aug '20 08:58,04 Aug '20 18:46,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Core: Object Model,,,,0,,,,"I really miss an overload for `QObject::connect` with the following signature:
{code:java}
QObject::connect(const QObject *sender, const QMetaMethod &signal, Functor functor){code}
I would propose a diff but I'm not familiar in this code..

My example is that I am wanting to monitor a named set of properties by connecting to these properties' notify signals:

 
{code:java}
#include <QCoreApplication>
#include <QMetaProperty>
#include <QDebug>
void observeProperties(QObject *object) {
    auto *mo = object->metaObject();
    for (int i = mo->propertyOffset(); i < mo->propertyCount(); ++i) {
        auto prop = mo->property(i);
        if (QString::fromLatin1(prop.name()).startsWith(""observeMe"")) {
            qWarning() << ""found prop"" << prop.name();
            QObject::connect(object, prop.notifySignal(), []() {
                // No such overload
            });
        }
    }
}
class Foo : public QObject {
    Q_OBJECT
    Q_PROPERTY(bool observeMePlease MEMBER m_please NOTIFY pleaseChanged)
public:
    using QObject::QObject;
 
signals:
    void pleaseChanged();
 
private:
    bool m_please{false};
};
int main(int argc, char **argv) {
    QCoreApplication app(argc, argv);
 
    Foo foo;
    observeProperties(&foo); 
}
#include ""main.moc""
{code}
 

 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0ov4f:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"04 Aug '20 16:12;thiago;Impossible to implement, since we QMetaMethod won't give us the C++ signature of the signal at compile time. There's no way to connect it to a functor.

What we could do is connect it to a functor receiving a `const void **`array, but that's not very nice...","04 Aug '20 16:17;thiago;Hm... what we need is something other than {{QMetaMethod}} as the source. We need a C++ type, such as {{QMetaSignal<void(bool)>}} which needs to be verified at runtime if it matched an actual signal. THAT could be used as the connect source.

[~ogoffart], [~fabiankosmale] what do you think?","04 Aug '20 17:23;fabiankosmale;Well, we won't be able to avoid a runtime check at some point, as QMetaMethod has indeed no compile-time knowledge of the signature. However, a hypothetical QMetaSignal wouldn't buy us that much, as it would only move the check to a different point.

 

I think a connect overload for QMetaMethod would however be possible by doing roughly the following steps:
 * extract the parameter types from the functor via template meta programming
 * use the extracted types to create a tuple of QMetaTypes
 * check that the tuples size == metaMethod.parameterCount(), and that the metatypes are equal
 * if the checks were successful, use a new QMetaCall to either receive the function pointer of the signal, or to do the actual connection. The actual connection work should reuse the code in QObject::connectImpl. There we pass the functions as void**, but with the checks above, we already verified that this is safe","04 Aug '20 18:46;thiago;That's what I was thinking.",,,,,,,,,,,,,,,,,,
TextInput new property: NoSmartPunctuation,QTBUG-85809,302268,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt.team.quick.subscriptions,tero.pelkonen,tero.pelkonen,30 Jul '20 07:50,30 Jul '20 09:56,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,"GUI: Basic Input System (keyboard, mouse, touch)",,,,1,reported_by_support_standard,,,"iOS has a feature called ""smart punctuation"" which
automatically converts straight quotes(like ""this"" and 'this') to
curly quotes(like “this” and ‘this’) and two hyphens (–) to an em dash (—).

This is feature is automatically enabled but can be disabled in settings.

In the QML TextInput component, the property inputMethodHints can be used to
set the input behaviour, such as Qt.ImhNoAutoUppercase and
Qt.ImhNoPredictiveText.

 

Could there be similar property to disable smart punctuation?

Note: Apple has an API that can be used to disable smart punctuation: https://
developer.apple.com/documentation/uikit/uitextinputtraits/2865931-smartquotest
ype",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,iOS/tvOS/watchOS,,,,,,"0|i0ou9b:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"30 Jul '20 09:18;mitch_curtis;I think this could be moved to qtbase, as adding a new enum value to https://doc.qt.io/qt-5/qt.html#InputMethodHint-enum sounds like the best solution. Do you agree Tero? Or do you think this needs its own property in TextInput?","30 Jul '20 09:35;tero.pelkonen;[~mitch_curtis] Good point and I agree. 

 ",,,,,,,,,,,,,,,,,,,,
Introduce advanced text layout with inline elements,QTBUG-85651,301933,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt.team.quick.subscriptions,syncu,syncu,17 Jul '20 14:32,27 Jul '20 17:40,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Quick: Core Declarative QML ,Quick: Layouts,,,1,,,,"A large number of modern (mostly HTML/Electron-based) applications nowadays feature smart WYSIWYG text input fields which are able to automatically highlight or link certain parts of the text and show buttons, tags, emojis or similar controls inlined in the text.

These kinds of controls get more and more important in UI development.  As of yet, QtQuick lacks such a feature. Anything going beyond very basic hyperlink/image support requires developers to resort to the RichText mode which however requires you to use HTML rather than your own QtQuick Controls, causing a bad performance impact and more development effort.

I would like propose a new layout control in QML for laying out an arbitrary composition of text and other QtQuick elements. In a second iteration, it could support user selections and user editing (similar to contenteditable=true in HTML) and also attached properties which allow the QML elements inside the text to change behavior based on their current selection status. A strong JS/C++ API should offer to do all sorts of manipulations such as inserting/deleting new nodes, querying/manipulating the current cursor position, etc.

My suggested syntax would look like this:

{code:javascript}
TextLayout {
    alignment: Qt.AlignLeft
    editable: true
    selectionAllowed: true

    TextSpan {
        text: ""Lorem ipsum dolor sit amet""
    }

    Button {
        label: ""Click me""
        TextLayout.alignment: TextLayout.Center
        background: TextLayout.isSelected ? ""blue"" : ""white""
        TextLayout.copyText: ""textual representation of Button""
    }

    TextSpan {
        text: ""Text after the button""       
        TextLayout.allowSelection: false
    }

    TextSpan {
        lineBreakBefore: true
        color: ""red""
        text: ""more text""
    }
}

{code}

See attachment for how the output should look like for the above example.



A different usage mode could look like this:

{code:javascript}
TextLayout {
    alignment: Qt.AlignLeft
    editable: true
    selectionAllowed: true
    model:  myTextLayoutModel
    delegates: [
        TextDelegate {
                name: ""button"" // delegate type identifier to be used from C++
                delegate: Button {
                        label: model.label // data object assigned from C++
                }
         }
    ]
}
{code}
 
where myTextLayoutModel could be a special C++ object describing the structure of the content. This would allow to query and manipulate the text dynamically from C++. We could declare a set of possible delegates which may appear in the text.

Usage from C++ could look like this:

{code:c++}
QQuickTextStyle redText;
redText.setColor(QColor(""red""));
redText.setTopMargin(5);
...
auto* myModel = new QQuickTextLayoutModel(this);
myModel->addTextSpan(""Lorem ipsum dolor sit amet"");
myModel->addDelegate(""button"", QVariantMap{{""label"", ""Click me""}}); // might also be a QObject with onXXXChanged signals
myModel->addTextSpan(""Text after the button"");
myModel->addLineBreak();
myModel->addTextSpan(""more text"", redText);
...
qmlContext->setContextProperty(""myTextLayoutModel"", myModel);
{code}

 
My suggestion is strongly inspired by the TextSpan and WidgetSpan controls in Flutter:

[https://api.flutter.dev/flutter/widgets/WidgetSpan-class.html]
[https://api.flutter.dev/flutter/painting/TextSpan-class.html]",,,,,,,,,,,,,,,QTBUG-39107,,,,"26 Jul '20 20:12;syncu;img.png;https://bugreports.qt.io/secure/attachment/96736/img.png",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0osav:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"25 Jul '20 22:55;deepbluev7;I agree that this would be very useful. I often find myself using RichText to work around the lack of customizable text layouting, but that has a few issues. Having explicit control over inline images, being able to reuse Qml components inside flowing text and maybe even inlining proper tables, hiding sublayouts, when not hovered or syntax highlighting would be very useful. I think the proposed design looks sane, although my main use case is returning custom textlayouts as model properties from C++ (messages in a chat client).","27 Jul '20 05:36;srutledg;Have you tried hacking around with the lineLaidOut signal?  I'm not sure if it gives you enough, but at least you get a chance to run some JS during the layout process, and you could probably instantiate new items that way too.  Maybe react to some special placeholder characters or syntactic tags.  (I haven't tried that.)","27 Jul '20 17:09;deepbluev7;I don't think the lineLaidOut signal is a good place for complex formatting changes. Currently instantiating our delegates is already a bit on the expensive side. Running a custom command for each line, that may insert buttons, images, etc sounds like a bad idea in that regard. Also I would prefer a simpler API like mentioned in this bug report, although that may be able to be built on top of the lineLaidOut signal (as long as issues like QTBUG-39107 are fixed).","27 Jul '20 17:40;syncu;The lineLaidOut signal can only be used to change width and x/y position of the line. It is not suited for mixing text and inline elements. 
A good starting point which I think is not too hard to implement would be to introduce text placeholders which simply skip a given amount of pixels in the text and return the x/y position of the gap so that we can move elements into the gap ourselves.",,,,,,,,,,,,,,,,,,
ListView should set implicitWidth to the max of its delegates' widths,QTBUG-82290,293745,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt.team.quick.subscriptions,srutledg,srutledg,18 Feb '20 10:52,27 Jul '20 04:56,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Quick: Core Declarative QML ,,,,2,,,,"I'm writing the multi-page PDF viewer for QtPDF.  It was natural to get started using ListView to arrange pages vertically and be able to flick through them; so each delegate is one page from the PDF.   Next, I want to add horizontal scrolling.  The natural thing is to put the whole ListView into a horizontal-scrolling Flickable.  What should its contentWidth be?  Different pages can be different sizes.  So I need the horizontal Flickable's contentWidth to be the max of the widths of all delegates (pages) that are currently visible (or currently instantiated? or all delegates ever seen?) in the ListView.  So it seems natural that implicitWidth of the ListView should provide some sort of maximum width like that: either the current maximum or the all-time maximum.  (maybe configure the calculation method with another property?)  Then I could just bind width: implicitWidth.  I don't want to do any QML hack-arounds to iterate delegates myself and find this out.

Since this isn't there, I will try to switch to TableView, because it already knows how to do horizontal scrolling.  But it can't be the first time someone has wanted to do this with ListView.
",,,,,,,,,,,,,,,QTBUG-45607,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0njdr:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"18 Feb '20 10:58;srutledg;https://codereview.qt-project.org/c/qt/qtwebengine/+/291028/2 is the use case","18 Feb '20 12:25;mitch_curtis;Some random thoughts:

It seems a bit weird to me to set implicitWidth based on explicit widths. Setting implicitWidth to the largest implicitWidth seems more sensible.

Currently contentHeight for ListView is an estimate based on the average height of each visible item at that point in time. I imagine that that is the only approach that is both accurate and efficient enough, given how large some models can be.

One potential issue with this is that the ListView's width will jump around when bringing differently sized items into view.","18 Feb '20 15:40;srutledg;Good point, largest implicitWidth would work fine I think.","06 Jul '20 19:46;kalileo;See also QTBUG-82290, QTBUG-84120, QTBUG-45607, QTBUG-52553.
Main impact seems to be that ListView cannot be scrolled horizontally.
ContentWidth needs to get set dynamically, considering any change in width of a delegate.",,,,,,,,,,,,,,,,,,
Add textEdited signal to SpinBox,QTBUG-85739,302122,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt.team.quick.subscriptions,mitch_curtis,mitch_curtis,25 Jul '20 16:54,25 Jul '20 18:18,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Quick: Controls 2,,,,0,,,,"I'm implementing a live preview, where edits made to a SpinBox should update some backend values instantly. Unfortunately this doesn't work for SpinBox, whose only modification signal is emitted when e.g. enter is pressed. Using valueChanged as a workaround is not possible, as it's not emitted until the value is accepted, and same with displayText. There's no editText to use either (as seen in e.g. ComboBox). So it seems the only workaround is to have a Binding to the contentItem's textEdited signal. However, even despite that only being a workaround, it also has its own issues:

QTBUG-64151

To avoid having to use valueFromText, having an editText property would help too.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0otdr:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
TapHandler: Similar property as MouseAreas propagateComposedEvents,QTBUG-85694,302026,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt.team.quick.subscriptions,tero.pelkonen,tero.pelkonen,22 Jul '20 08:08,22 Jul '20 08:08,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Quick: Core Declarative QML ,,,,1,reported_by_support_standard,,,"User has requested TapHandlers to have similar property as MouseAreas propagateComposedEvents.

Example where overlapping Rectangles with Taphandlers will both have click events but the MouseAreas will not with propagateComposedEvents: false:
{code:java}
import QtQuick.Window 2.12
import QtQuick 2.14

Window {
    visible: true
    width: 640
    height: 480
    Rectangle {
        anchors.fill : parent
        color: '#1e1e1e'

        Rectangle {
            width : 120
            height : width
            color : ""green""
            TapHandler {
                onTapped: console.log( ""GREEN"" );
            }
        }
        Rectangle {
            //anchors.centerIn: parent
            width : 80
            height : width
            color : ""red""
            TapHandler {
                onTapped: console.log( ""RED"" );
                grabPermissions: PointerHandler.TakeOverForbidden
            }
        }
    }
    Rectangle {
        y:200
        color: ""yellow""
        width: 100; height: 100

        MouseArea {
            anchors.fill: parent
            onClicked: console.log(""clicked yellow"")
        }

        Rectangle {
            color: ""blue""
            width: 50; height: 50

            MouseArea {
                anchors.fill: parent
                propagateComposedEvents: false
                onClicked: {
                    console.log(""clicked blue"")
                    mouse.accepted = false
                }
            }
        }
    }

}
{code}
 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0ostz:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
qtwebengine release tarball bundles non-free software,QTBUG-85666,301965,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt_webengine_team,stikonas,stikonas,19 Jul '20 19:46,19 Jul '20 19:46,18 Feb '21 09:41,,5.15.0,,,,,,,,,,,,,,,,,,,,,,WebEngine,,,,0,,,,"Qtwebengine tarball ships with

src/3rdparty/chromium/third_party/unrar/

which is not a free software (neither according to FSF definition nor according to Open Source definition).

Quick grep'ing indicates that qtwebengine does not use it. Maybe it's possible to remove it from future release tarballs?
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0osh3:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
QDockWidget: Improve <CTRL> docking prevention support,QTBUG-81372,291620,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt.team.quick.subscriptions,kkyzivat,kkyzivat,14 Jan '20 22:33,15 Jul '20 13:34,18 Feb '21 09:41,,5.12.6,5.14,,,,,,,,,,,,,,,,,,,,,Widgets: Main Window,Widgets: Widgets and Dialogs,,,0,Reported_by_support_standard,,,"What happens today (Qt 5.12.6 + 5.14): 
When you click-drag a floating QDockWidget around any QMainWindow for the app, it will attempt to dock the widget as you float over the different DockWidgetAreas of the main window (it will resize widgets in the main window, showing a placeholder where your dockwidget would dock to if you release the mouse button).

To avoid this behavior today, you can press and hold <CTRL> *BEFORE* you click to drag the position of the floating QDockWidget. The result is that you can reposition the QDockWidget floating window without affecting the QMainWindow - the QMainWindow will not resize it's contents to show the different DockWidgetAreas, and if you release the window anywhere, it will not dock with any QMainWindow.

This option is cumbersome as you must remember to press <CTRL> prior to dragging the floating QDockWindow around.

Proposed new behavior:

Improved behavior would be for the user to be able to press the <CTRL> modifier at any time during the drag of the floating QDockWidget window to prevent or allow the docking behavior.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0n7on:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"14 Jan '20 22:37;kkyzivat;This bug relates to really old bug QTBUG-2295 - that one describes a solution much like I go into here, along with a bunch of other suggestions related to QDockWidget. I wanted to break that single suggestion out into it's own Jira issue.",,,,,,,,,,,,,,,,,,,,,
QDockWidget: Invert drag modifier key behavior (dock if <CTRL> pressed),QTBUG-81374,291622,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt.team.quick.subscriptions,kkyzivat,kkyzivat,14 Jan '20 23:44,15 Jul '20 13:33,18 Feb '21 09:41,,5.12.6,5.14,,,,,,,,,,,,,,,,,,,,,Widgets: Main Window,Widgets: Widgets and Dialogs,,,0,Reported_by_support_standard,,,"What happens today (Qt 5.12.6 + 5.14):
When you click-drag a floating QDockWidget around any QMainWindow for the app, it will attempt to dock the widget as you float over the different DockWidgetAreas of the main window (it will resize widgets in the main window, showing a placeholder where your dockwidget would dock to if you release the mouse button).

To avoid this behavior today, you can press and hold <CTRL> before you click to drag the position of the floating QDockWidget. The result is that you can reposition the QDockWidget floating window without affecting the QMainWindow - the QMainWindow will not resize it's contents to show the different DockWidgetAreas, and if you release the window anywhere, it will not dock with any QMainWindow.
----
Some users may wish to favor not having the QDockWindow dock. To address this I am suggesting that the <CTRL> modifier behavior be inverted.

How this would act with the inversion would then be:
 * Dragging a floating QDockWidget window around a QMainWindow would not attempt to dock the widget as you float over the different DockWidgetAreas. Drag as you like, when you release, it would not dock.
 * Pressing and holding <CTRL> before clicking (for improvement to this see suggestion QTBUG-81372 ), then click-dragging the QDockWidget window and dragging around the QMainWindow *would* attempt to dock the widget as you float over the different DockWidgetAreas. Releasing would complete the dock action.

I realize that this would be a departure from a long-standing feature, so I would also propose that this is paired with a settable flag controlling this behavior. By default <CTRL> would be used to suppress docking. Toggling the default value of the flag would then enable this inverted behavior.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0n7p3:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Setting default filename in FileDialog QML Type,QTBUG-85592,301824,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt.team.quick.subscriptions,artembabaev,artembabaev,15 Jul '20 09:59,15 Jul '20 09:59,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Quick: Dialogs,,,,0,,,,"When i export some things from my program, i want to set default name of saving file. FileDialog do not provide this opportunity. Could be good if he learn such a thing :)

!screen.png!",,,,,,,,,,,,,,,,,,,"15 Jul '20 09:56;artembabaev;screen.png;https://bugreports.qt.io/secure/attachment/96352/screen.png",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0oro7:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
libinputkeyboard should have a way to change repeat delay and rate,QTBUG-85553,301687,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,srutledg,ellbur,ellbur,12 Jul '20 06:28,12 Jul '20 06:28,18 Feb '21 09:41,,Some future release,,,,,,,,,,,,,,,,,,,,,,"GUI: Basic Input System (keyboard, mouse, touch)",,,,0,,,,"Currently, qlibinputkeyboard.cpp has the repeat delay and rate hard-coded:

 
{code:java}
const int REPEAT_DELAY = 500;
const int REPEAT_RATE = 100; 
{code}
It would be nice to have a way to change them.

A quick and dirty solution that could work would be to copy what is done in qevdevkeyboardmanager.cpp and read the delay and rate from an environment variable.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Linux/Wayland,,,,,,"0|i0oqv3:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
API to get QFileInfos for JS modules imported via script,QTBUG-85430,301442,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt.team.quick.subscriptions,be,be,04 Jul '20 16:07,09 Jul '20 14:01,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,QML: Declarative and Javascript Engine,,,,0,,,,"In our application, we use QFileSystemWatcher to automatically reload a script file when it is edited by the user. If the user edits any submodules imported from the script, they need to edit the top level module that the application loads to get the application to reload the submodule. It would be convenient if there was an API to get the QFileInfos for modules imported from a script so the application could automatically reload the scripts whenever any of them is edited.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0open:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"06 Jul '20 12:48;ulherman;Dependent modules can come from a number of places, and not all of them can be monitored.

You may want to take a look at the QML preview feature in Qt Creator. It does most of what you want without requiring you to write specific code for it.","09 Jul '20 14:01;be;Sure, imports are not necessarily from filesystem files. In that case, this API wouldn't return a QFileInfo for that module, only for the modules that were imported from files.",,,,,,,,,,,,,,,,,,,,
Add support for recording video using the DirectShow backend,QTBUG-85442,301462,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,valentyn.doroshchuk,andysh,andysh,06 Jul '20 08:11,06 Jul '20 08:12,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Multimedia,,,,1,Reported_by_support_premium,,,Add support for recording video using the DirectShow backend,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Windows,,,,,,"0|i0opj3:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add support for dark mode in the Gnome style plugin,QTBUG-85393,301372,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,tpochep,andysh,andysh,02 Jul '20 13:20,02 Jul '20 13:20,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Widgets: Styles,,,,0,Reported_by_support_standard,,,Add support for dark mode in the Gnome style plugin,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0oozb:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
QtWebEngine doesn't provide microFocusChanged signal,QTBUG-85334,301242,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt_webengine_team,amosbird,amosbird,30 Jun '20 03:28,02 Jul '20 09:16,18 Feb '21 09:41,,5.15.0,,,,,,,,,,,,,,,,,,,,,,WebEngine,,,,0,,,,"microFocusChanged signal is provided in QWebPage https://doc.qt.io/archives/qt-5.5/qwebpage.html  which is useful for browsers to take action upon element changing. For example, qutebrowser could use this signal to have better INSERT mode management.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0oo7b:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Accessible QML - no way to pass flags expanded/expandable to corresponding QAccessible.state(),QTBUG-81873,292857,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,frederik,cosminp,cosminp,05 Feb '20 01:53,01 Jul '20 14:02,18 Feb '21 09:41,,5.12,,,,,,,,,,,,,,,,,,,,,,GUI: Accessibility (a11y),,,,1,,,,"Filing this to track the missing bool properties in plugins.qmltypes for QQuickAccessibleAttached - they just need to be added there and to QQuickAccessibleAttached_p.h as 

STATE_PROPERTY(expandable)
 STATE_PROPERTY(expanded)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,macOS,Windows,,,,,"0|i0ne8n:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"01 Jul '20 14:02;shoogle;In MuseScore, this forced us to [append the word ""expanded"" to the accessible name|https://github.com/musescore/MuseScore/blob/master/mscore/qml/palettes/PaletteTree.qml#L504] of items in the Palettes to force the screen reader to say whether they are expanded or not. The Palettes is a custom tree structure created in QML with a model in C++ (QAbstractItemModel).",,,,,,,,,,,,,,,,,,,,,
QQC2 AbstractButton.display: add option to select left or right for TextBesideIcon,QTBUG-85367,301328,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt.team.quick.subscriptions,miikapernu,miikapernu,01 Jul '20 11:51,01 Jul '20 12:11,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Quick: Controls 2,,,,0,Reported_by_support_standard,,,"Currently seems like the only option to edit on which side of the icon text is drawn on a button is by mirroring the layout. However, that works only with some locales.

Suggestion:

Expand the Display enum with something along the lines ""TextBesideIconLeft"", ""TextBesideIconRight"" to allow selection on which side of the icon text would be drawn.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0oopz:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Qt.labs.calendar MonthGrid should be works with QCalendar::System,QTBUG-85315,301177,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt.team.quick.subscriptions,returnx,returnx,29 Jun '20 07:41,29 Jun '20 08:12,18 Feb '21 09:41,,5.14.2,,,,,,,,,,,,,,,,,,,,,,Quick: Controls 2,,,,0,,,,"Now, MonthGrid and CalendarModel just work with Gregorian, it's be a good idea for supporting MonthGrid and CalendarModel to accept QCalendar::System.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0onuf:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
QML CandlestickSeries wick color,QTBUG-85291,301119,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,e0348803,naezith,naezith,26 Jun '20 15:59,26 Jun '20 16:14,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Charts,,,,0,,,,"I need to set wick color of candles at the CandlestickSeries QML code. I could not find how. Is it missing? I didn't write any C++ code yet for UI. I'd rather not to.

I added *color.png* and *no_color.png. no_color.png* is the one I'm making. 

There are two other problems:

2-) Round candle body rectangles, this one is not that important (https://bugreports.qt.io/browse/QTBUG-85293)

3-) I couldn't not find a way to use BarSeries with the same DateTimeAxis to achieve the volume chart at bottom. (https://bugreports.qt.io/browse/QTBUG-85294)",,,,,,,,,,,,,,,,,,,"26 Jun '20 16:05;naezith;color.png;https://bugreports.qt.io/secure/attachment/95892/color.png","26 Jun '20 16:05;naezith;no_color.png;https://bugreports.qt.io/secure/attachment/95890/no_color.png",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0onjj:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
QML CandlestickChart round candle rectangle,QTBUG-85293,301121,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,e0348803,naezith,naezith,26 Jun '20 16:11,26 Jun '20 16:14,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Charts,,,,0,,,,"I need to make the rectangle corners of candle bodies at the CandlestickSeries round, using QML code. I could not find how. Is it missing? I didn't write any C++ code yet for UI. I'd rather not to.

I added *color.png* and *no_color.png. no_color.png* is the one I'm making. 

There are two other problems:

2-) I can't change the wick color (https://bugreports.qt.io/browse/QTBUG-85291)

3-) I couldn't not find a way to use BarSeries with the same DateTimeAxis to achieve the volume chart at bottom. (https://bugreports.qt.io/browse/QTBUG-85294)",,,,,,,,,,,,,,,,,,,"26 Jun '20 16:09;naezith;color.png;https://bugreports.qt.io/secure/attachment/95894/color.png","26 Jun '20 16:09;naezith;no_color.png;https://bugreports.qt.io/secure/attachment/95893/no_color.png",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0onjz:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
QML BarSeries with DateTimeAxis,QTBUG-85294,301122,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,e0348803,naezith,naezith,26 Jun '20 16:14,26 Jun '20 16:14,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Charts,,,,0,,,,"I need to make a volume chart using bars and DateTimeAxis, using QML code. BarSeries only work with BarCategoryAxis and that's not useful for me. I could not find how. Is it missing? I didn't write any C++ code yet for UI. I'd rather not to.

I added *color.png* and *no_color.png. no_color.png* is the one I'm making. 

There are two other problems:

2-) I can't change the wick color (https://bugreports.qt.io/browse/QTBUG-85291)

3-) Round candle body rectangles, this one is not that important (https://bugreports.qt.io/browse/QTBUG-85293)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0onk7:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Enhance QMenu item shortcut display,QTBUG-85132,300697,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt.team.quick.subscriptions,rafeek,rafeek,18 Jun '20 14:42,18 Jun '20 14:42,18 Feb '21 09:41,,5.15.0,,,,,,,,,,,,,,,,,,,,,,GUI: Menus,,,,0,,,,Qt stylesheets and styling doesn't seem to support having the menu shortcut show in a different style than the menu item text.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0ol1z:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Allow icon regeneration in mode QIcon::Normal,QTBUG-85102,300648,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,,jlb,jlb,17 Jun '20 14:25,18 Jun '20 01:16,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,SVG Support,,,,0,,,,"Actually, in default IconEngine (QSvgIconEngine & QPixmapIconEngine), pixmap method generate QPixmap except for QIcon::Normal (Optimization ?).

In certain use case it's can be practice that method generate a QPixmap for QIcon::Normal mode too.

Maybe disable optimization with flag or something else, to keep actual processing by default and switch when we need full generation.

 
{code:c++}
QPixmap QSvgIconEngine::pixmap(const QSize &size, QIcon::Mode mode,
                               QIcon::State state)
// ...
if (loadmode != mode &&  (mode != QIcon::Normal || flagNormalGenerate) {
    const QPixmap generated = QGuiApplicationPrivate::instance()->applyQIconStyleHelper(mode, pm);
    if (!generated.isNull())
        pm = generated;
 }
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0okrb:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Allow disabling middle click to paste from clipboard,QTBUG-85082,300603,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,srutledg,proturm,proturm,16 Jun '20 14:56,16 Jun '20 14:56,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,"GUI: Basic Input System (keyboard, mouse, touch)",,,,0,,,,"Releated to suggestions

https://bugreports.qt.io/browse/QTBUG-58087

Disabling the middle button by an option, would safe some working time

""I frequently find myself having to recompile code because errant code was pasted as I was scrolling. """,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0okhr:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
New setting for charts: Set timezone of the displayed data,QTBUG-85074,300592,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,e0348803,tero.pelkonen,tero.pelkonen,16 Jun '20 12:34,16 Jun '20 12:36,18 Feb '21 09:41,,5.12.8,5.15.0,,,,,,,,,,,,,,,,,,,,,Charts,,,,0,reported_by_support_standard,,,"User has requested new setting for Charts: Setting the timezone of the displayed data.

 

Initial issue:

Users local time zone (EST - eastern US) implements daylight savings time (DST). QML ChartView with a QDateTimeAxis won't allow him to display data having a timestamp that falls in the DST transition hour, e.g., ""March 08, 2020 02:15:00"". The chart axis supports data in the 01:xx:xx range and then jumps to the 03:xx:xx range. Timestamps in the 02:xx:xx range are not allowed.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0okfb:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
QApplication::setCursorFlashTime might be better in QGuiApplication?,QTBUG-85056,300533,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt.team.quick.subscriptions,tohge,tohge,16 Jun '20 02:58,16 Jun '20 10:04,18 Feb '21 09:41,,5.15,6.0,,,,,,,,,,,,,,,,,,,,,GUI: Window management,Widgets: Main Window,,,0,,,,"It is currently in Widgets as below.

[https://doc.qt.io/qt-5/qapplication.html#cursorFlashTime-prop]

However, that enforces to include Widgets even if application is pure QML.

As I assume this is not heavily relying on Widget, it may be better if it is in QGuiApplication.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0ok4n:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"16 Jun '20 03:04;tohge;[~qt.team.quick.subscriptions] 
Mentioning as it is currently unassigned.
Can you check if it should be in Widgets or not?","16 Jun '20 05:12;srutledg;I wonder if it's even reliable enough on all platforms that we should keep it.  It seems like an awfully low-level thing to expose that way; makes more sense as a style property, doesn't it?  Why do individual applications need to change it for themselves anyway?","16 Jun '20 10:04;tohge;I agree with that. It just changes OS setting and is not application-wise setting. (still convenient, though)
I don't know where is the right place for this property but I think QApplication is not the right place.
Maybe Qt6 is good chance to reconsider?",,,,,,,,,,,,,,,,,,,
Ability to disable / replace built-in handles and touch selection menu,QTBUG-85043,300509,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt_webengine_team,basyskom_daniel_engelke,basyskom_daniel_engelke,15 Jun '20 12:38,16 Jun '20 06:19,18 Feb '21 09:41,,5.13,5.14,5.15,,,,,,,,,,,,,,,,,,,,WebEngine,,,,0,,,,"With 5.13 Peter added [https://codereview.qt-project.org/c/qt/qtwebengine/+/233633] touch handles and a touch selection menu. While Chromium doesn't give the ability to disable / replace these, it would be great if we still had the ability in Qt.

We implemented our own handles and menu, which has customized buttons etc., now of course with that change we have 2x the menu and the handles.

Another step could be to extend the API to be able to override the handles / touch menu with a custom one directly.",Widget / QML,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0ojzj:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"15 Jun '20 12:39;basyskom_daniel_engelke;[~pvarga] for reference, since we spoke about it.","16 Jun '20 06:19;pvarga;[~basyskom_daniel_engelke] thanks!",,,,,,,,,,,,,,,,,,,,
SSID of currently connected wifi network,QTBUG-85038,300474,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,tpochep,poikelin,poikelin,15 Jun '20 08:23,15 Jun '20 08:25,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Network,,,,1,Reported_by_support_standard,,,"Sometimes different behavior based on the connected network is needed. For example, application could use different settings/profile when it is on work and on home network.

There is an interface for getting IP and netmask from network interfaces, but this is not reliable way as the addresses could be identical in different networks.

Addition of currently connected SSID for wifi networks would be helpful in situations where an application should have different behavior whether it is connected to a specific network or not.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0ojtb:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Why is Qt5WebEngine.lib not available in Qt 5.15.0 and MSVC 2015 binaries?,QTBUG-85001,300401,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,thiago,miguel.majuelos,miguel.majuelos,12 Jun '20 11:21,12 Jun '20 15:21,18 Feb '21 09:41,,5.15.0,,,,,,,,,,,,,,,,,,,,,,Packaging & Installer,,,,0,,,,"Why is Qt5WebEngine.lib not available in MSVC 2015 binaries? However if it is available in MSVC 2019.

Is it not compatible with VS2015 or VS2017?",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Windows,,,,,,"0|i0ojd3:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"12 Jun '20 15:21;thiago;It could be because the Windows SDK installed on the MSVC 2015 builders in the Qt CI is too old (10.0.18362 or newer is required).

Anyway, it is binary compatible. Go ahead and use the 2019 binaries.",,,,,,,,,,,,,,,,,,,,,
QT move to shared_ptr memory model,QTBUG-85004,300404,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt.team.quick.subscriptions,dahubley,dahubley,12 Jun '20 12:46,12 Jun '20 12:46,18 Feb '21 09:41,,Some future release,,,,,,,,,,,,,,,,,,,,,,Widgets: Widgets and Dialogs,,,,0,,,,C++ uses std::shared_ptr/std::unque_ptr/std::weak_ptr to manage memory. It would be nice if QT used a memory management strategy that was compatible with the standard C++ memory management strategy.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0ojdr:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
QThreadPool function to determine size of scheduled QRunnables,QTBUG-84787,300034,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,thiago,rick,rick,08 Jun '20 13:31,10 Jun '20 07:12,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Core: Threads,,,,0,,,,Would be nice to have a method to get the size of the Queue for all QRunnables scheduled for processing,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0oh4v:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"09 Jun '20 17:23;thiago;Any such function is inherently racy and its result could be stale just as you return. The only sticky value is zero, because the value cannot go up in the same thread that is the one adding jobs.

Does this still help you?","10 Jun '20 07:12;rick;Hi Thiago,
I had a look to the QThreadPool_p.h. All QRunnable pointer will be stored in the _QueuePage_ of _QVector<QueuePage*> queue;_ I assume the QueuePages are for performance reasons. I just want to know, how many QRunnables are stored in the vector of all QueuePages. Reason is, that I will start 10000ths of QRunnables using 100K of Memory and I need to control how many QRunners are actually scheduled. Currently I count them in my code, but would be better to have a method in the QThreadPool.

int QThreadPoolPrivate::getScheduledRunnables()
{
    Q_D(QThreadPool);
    QMutexLocker locker(&d->mutex);
    int number = 0;
    for (QueuePage *page : qAsConst(d->queue)) {
        number += page->size(); // size function needs to be implemented in QueuePage
        }
    return number ;
}


",,,,,,,,,,,,,,,,,,,,
Support images as categories,QTBUG-84854,300136,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,e0348803,poikelin,poikelin,09 Jun '20 12:25,09 Jun '20 12:27,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Charts,,,,0,Reported_by_support_standard,,,Sometimes using images as bar categories would be preferrable over the text only categories,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0ohrb:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
QQuickImageProvider for a framebuffers,QTBUG-84850,299661,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt.team.quick.subscriptions,evgeniy_prikazchikov,evgeniy_prikazchikov,01 Jun '20 09:49,09 Jun '20 09:44,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Quick: Core Declarative QML ,,,,0,,,,"Hello,
We have faced QML restriction related to displaying shared textures from the framebuffers.
Currently, QML is able to display shared textures using QQuickImageProvider class with _QQmlImageProviderBase::Texture_ as type. Unfortunately, QML engine has no mechanism to mark an Image element as dirty in case of texture was updated. Wich will lead to redrawing the QML scene. This functionality will be useful for the FBO attached textures.

I'm suggesting to add additional type for _QQmlImageProviderBase::ImageType_. For example, VideoTexture which will act as a _Texture_ but will keep the Image element as dirty while it is visible. This will allow forsely redraw QML scene.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0oeyn:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"01 Jun '20 11:21;kileppal;Should this rather be moved under Quick: Core Declarative QML?","01 Jun '20 11:30;evgeniy_prikazchikov;[~kileppal] I think yes. I have created a ticket for 3D Studio because I have no ""Quick: Core Declarative QML"" project in my drop down menu.",,,,,,,,,,,,,,,,,,,,
Support Windows drives in FolderListModel,QTBUG-84780,300013,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,w00t,poikelin,poikelin,08 Jun '20 09:10,08 Jun '20 09:13,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Quick: Other,,,,0,Reported_by_support_standard,,,"It doesn't seem possible to show a location that would contain the drives. For example it would sound logical that when pointing to {{file:///}} it would show the available drives, but now seems to show root of C:.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0oh0v:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Provide a separate package for Qt's documentation,QTBUG-84759,299975,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,releaseteam,wangwenx190,wangwenx190,07 Jun '20 05:10,08 Jun '20 05:36,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Packaging & Installer,,,,0,,,,I think it's very useful and convenient to provide a separate package for Qt's documentation for those who only want to install an offline version of Qt's documentation.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0ogsf:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Pass on the related network error on (if one exists) when a connection to the source is no longer valid,QTBUG-84693,299820,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,bstottle,andysh,andysh,04 Jun '20 07:16,06 Jun '20 12:25,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Remote Objects,,,,0,Reported_by_support_standard,,,"Pass on the related network error on (if one exists) when a connection to the source is no longer valid. Currently there is only the state changed but there may be extra information from the network side indicated why it lost the connection, so making this available would be useful in this case.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0ofvj:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"06 Jun '20 12:25;bstottle;You don't happen to have example code that shows the network error you'd like exposed, do you Andy?",,,,,,,,,,,,,,,,,,,,,
Settings.fileName should be url,QTBUG-84731,299938,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,w00t,rebemlix,rebemlix,05 Jun '20 12:11,05 Jun '20 12:11,18 Feb '21 09:41,,5.14.2,,,,,,,,,,,,,,,,,,,,,,Quick: Other,,,,0,,,,With fileName being a string it is cumbersome to use it together with things like StandardPaths.locate().,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Linux/Other display system,,,,,,"0|i0ogkf:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
acceptTouchEvents is misleading,QTBUG-84698,299839,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,bibr,asperamanca,asperamanca,04 Jun '20 09:42,04 Jun '20 09:42,18 Feb '21 09:41,,5.15.0,,,,,,,,,,,,,,,,,,,,,,Widgets: GraphicsView,,,,0,,,,"The name of QGraphicsItem::acceptTouchEvents is misleading, as in the following code:
{code:java}
auto* pItem = new MyTouchButtonItem();
pItem->acceptTouchEvent();
pMyScene->addItem(pItem);
{code}
I understand that changing the name would be a breaking change, so I suggest an alternative:

Make the return value [[nodiscard]], so the code above would at least trigger a warning.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0ofzr:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
QImage to support column-first data ,QTBUG-84684,299805,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,vgt,zxpatric,zxpatric,03 Jun '20 20:52,04 Jun '20 05:57,18 Feb '21 09:41,,5.15.0 RC2,,,,,,,,,,,,,,,,,,,,,,GUI: Painting,,,,0,,,,"QImage only supports the data initialization of row-first memory alignment.   Assume there is a data of '1,2,3,4,5,6' getting loaded into an image of 3*2, it will be an image of

1 2 3

4 5 6

However, some times (vertical sensor scanning), the data is coming in as column first. So for the above case, the data was really coming as 1, 2 -> 3,4 -> 5,6 so users are expecting an image of

1 3 5

2 4 6

To convert memory in row first to column first is very costy but not sure if when QImage's memory is used internally, it can be handled relatively easier? Is yes, please add an option to support this column first memory alignment data initialization without rearrange the memory layout.

 It is not necessary a bug but definitely a very good feature to have.

Thanks!

 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0ofs7:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add Android immersive mode switch function,QTBUG-84667,299767,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt.team.quick.subscriptions,gourmand64,gourmand64,03 Jun '20 11:40,03 Jun '20 18:14,18 Feb '21 09:41,,5.12,5.13,5.14,5.15,,,,,,,,,,,,,,,,,,,GUI: Look'n'Feel,GUI: Window management,,,1,,,,"Now to switch on immersive mode in Android the Qt's templates or code modification required. But this mode is mandatory needed for all game applications and not only. I request for new function in GUI Qt part - to turn on immersive mode (and other possible Android screen modes). The support must be implemented in QtActivity.java class. It requires modification of onCreate() and and onWindowFocusChanged() functions according to [this|[https://forum.qt.io/topic/75789/max-screen-size-on-android-whithout-navigationbar-dimension/2].] And some AndroidManifest.XML tokens needed to turn immersive mode on.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Android,,,,,,"0|i0ofjz:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"03 Jun '20 11:58;fabiankosmale;Isn't immersive mode what you get on Android when you call  QWindow::showFullScreen() (or showFullScreen of an ApplicationWindow in QML). Do you want a way to change it to sticky immersive or lean back?","03 Jun '20 18:14;gourmand64;QWindow::showFullScreen() does nothing in my Android 7.1. App is completely widget based therefore I cannot test in QML.

 ",,,,,,,,,,,,,,,,,,,,
Add missing move constructor to QKeySequence,QTBUG-84465,299383,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,srutledg,jotik,jotik,26 May '20 20:31,26 May '20 20:31,18 Feb '21 09:41,,5.14.2,,,,,,,,,,,,,,,,,,,,,,"GUI: Basic Input System (keyboard, mouse, touch)",,,,0,,,,"{{QKeySequence}} has a copy-constructor, a copy assignment operator and a move assignment operator, but no move constructor. Please add it. :)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0odav:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Suggestion: export / alias all properties of wrapped control,QTBUG-84400,299232,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt.team.quick.subscriptions,tero.pelkonen,tero.pelkonen,25 May '20 06:43,26 May '20 13:07,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,QML: Declarative and Javascript Engine,,,,0,reported_by_support_standard,,,"User contacted Qt support with following improvement idea:

""

_In order to style my controls, i have wrapped some of theme in My... components (e.g TextField MyTextField)_

_Problem is that I need to alias by hand all properties of the wrapped TextField by hand._

_So, conceptually_


{code:java}
MyTextField {
    
    // can this list be made more simple ?
    property alias text : field.text
    property alias elide : field.elide
    // etc
    
    RowLayout {
        Image{
        }
        TextField {
            id : field
        }
    }{code}
""

 

Users improvement idea:

""

_Perhaps something similar to the default property ?_


{code:java}
property default alias : componentId
                         
//eg.

Item {
    
    // would alias all properties of subItem
    property default alias : subItem
    
    Text {
        id : subItem
    }
}{code}


_perhaps one could consider 'merging' where the last alias overrules any alias_
_property previously aliased ?_


{code:java}
Item {
    
    // would alias all properties of subItem1
    property default alias : subItem1
    // this alias exports all properties of subitem2 overruling any previous
    aliases ? (i.e. subitem1 has no valid aliases anymore as both are Text Items
    property default alias : subItem2
    // perhaps also allowing this : overrule subItem2 text alias cause all
    alliases that are NOT text to be subitem2 but only text to be subitem1
    property alias text : subItem1.text
    
    Text {
        id : subItem1
    }
    Text {
        id : subItem2
    }
}

{code}


_perhaps with an unalias which would break the alias of default exported_
_aliases_


{code:java}
Item {
    
    // would alias all properties of subItem1
    property default alias : subItem1
    // breaks the alias for subitem1.text
    property unalias : subItem1.text
    
    Text {
        id : subItem1
    }
}{code}


_or allow for multiple aliases (e.g set all colors of items_


{code:java}
Item {
    property alias color : [ r1.color, r2.color ]
    
    Rectangle {
        id : r1
    }
    Rectangle {
        id : r2
    }
}{code}
""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0ocgf:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"25 May '20 07:03;mitch_curtis;Is there a reason they can't derive from TextField directly? Then they will have the API by default.","25 May '20 08:30;ulherman;I would like to avoid adding further complexity to this area as much as possible. Aliases are already a rather fragile affair.","26 May '20 13:07;u19809;what makes them fragile ?  

what makes them different than

property int foo

item {

   prop : foo 

}

to me it looks like a compilation shortcut

 

Also why need them ? Here is an example :

{{suppose I want to decorate that text (or other component) like}}
{{but would like the rest of the qml app to consider the component to be a}}
{{text (like elide, wrapmode etc)}}

{{RowLayout {}}
{{  Image {}}
{{  }}}
{{  Text {}}
{{  }}}
{{  Image {}}
{{  }}}

{{}}}

 ",,,,,,,,,,,,,,,,,,,
QTEST_MAIN,QTBUG-84445,299337,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,docteam,simgunz,simgunz,26 May '20 08:27,26 May '20 08:27,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Documentation,,,,0,,,,"The documentation of [QTEST_MAIN|[https://doc.qt.io/qt-5/qtest.html#QTEST_MAIN]] should state that it is possible to create a static method `initMain()` which will be called by the main created by QTEST_MAIN and that is is available from Qt 5.14.

As for now this is only stated in [this page|[https://doc.qt.io/qt-5/qtest-overview.html]|https://doc.qt.io/qt-5/qtest-overview.html]",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0od2n:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Outdated docs on QObjectPrivate::ConnectionData,QTBUG-84427,299294,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,thiago,ratijas,ratijas,25 May '20 18:23,25 May '20 18:44,18 Feb '21 09:41,,5.14.2,,,,,,,,,,,,,,,,,,,,,,Core: Object Model,Documentation,,,0,,,,"Documentation of {{QObjectPrivate::ConnectionData}} (lines 233-246) is outdated w.r.t. current codebase. There were some changes (git blame history) to the struct and members, but documentation was never updated.

For example, there are no more mentioned {{allsignals}} member.

https://code.qt.io/cgit/qt/qtbase.git/tree/src/corelib/kernel/qobject_p.h?h=865729617349c7fbd39e00079e96863c1107ad00#n234
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0octr:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"25 May '20 18:44;ratijas;Looks like Lars Knoll <lars.knoll@qt.io> have been editing it most of the time. Can we kindly ask him to update their docs?",,,,,,,,,,,,,,,,,,,,,
Don't copy tables in _hb_qt_reference_table,QTBUG-84365,299163,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,esabraha,behdad.esfahbod,behdad.esfahbod,21 May '20 18:50,21 May '20 18:50,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,GUI: Text handling,,,,0,,,,"In qharfbuzzng.cpp's _hb_qt_reference_table(), table is always malloc()ed and returned:

[https://github.com/mburakov/qt5/blob/master/qtbase/src/gui/text/qharfbuzzng.cpp#L626]

 

This is not ideal.  Since the font is already mapped or otherwise available to the process, Qt should embrace that and return a hb_blob_t without a copy.  That's currently not possible because Qt's get_font_table does not allow that.  But there's no reason why this can't change internally.

 

I personally suggest acknowledging HarfBuzz as the sole shaper and exposing its types in the API.  But that's me only.

 

Anyway.  This was brought to my attention by way of the memory usage of a text layout server using Qt.  Here's an older doc about HarfBuzz memory consumption:

 

  [https://docs.google.com/document/d/12jfNpQJzeVIAxoUSpk7KziyINAa1msbGliyXqguS86M/edit#heading=h.jat5k1v2zfe]

 

In short, HarfBuzz should *never* show up as a memory hog.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0oc1z:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JSON story in QT,QTBUG-77763,283009,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,laknoll,andreas_felix_haeberle,andreas_felix_haeberle,22 Aug '19 08:53,19 May '20 09:35,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Other,,,,0,,,,"to quickly work with messages or data containers in websocket connections or serializations there should be a good JSON story.

The aim should be not only to implement the standard of JSON but to implement it with the easy of use that it provides in other languages (primary Java Script)

A good example of this is the nlohmann::json library that really does a good job of storing and recovering data from json in a great way.

The QJsonDocument does strange conversations via QByteArray and while reading there will always be the intermediate step of QJsonValue and checking what the value is.

The work with this API and the resulting code is really long winded and hard to maintain.

Another approach would be to add a QObject based story tapping into the meta-object system.

 

At the moment it feels like a small project not really integrated in the framework just so say Json-Support is implemented.

One of our case would be a JSON-RPC-Implentation ...

Please feel free to ask for clarification if this is to broad.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0luv3:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"19 May '20 09:35;andreas_felix_haeberle;Any updates on this?

We talked with nils lohnann (nlohmann::json maintainer) and started to add QT types like QString and QStringList.
QVariant is still not solved though. 
I am Shute there has to be an easy solution. Maybe even integrate QObject based classes with QProperties as values.

Down to the facts JSON ahould be a solved problem is there is serialisation 

Cheers
Felux",,,,,,,,,,,,,,,,,,,,,
Support a clearButton in QKeySequenceEdit,QTBUG-83862,298032,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt.team.quick.subscriptions,dbutijn,dbutijn,28 Apr '20 16:58,04 May '20 15:52,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Widgets: Widgets and Dialogs,,,,0,,,,"I need some way to clear the shortcut in a QKeySequenceEdit. It would be very helpful to have a similar clearButton as in a QLineEdit. When looking at the source code of QKeySequenceEdit I noticed following comment in QKeySequenceEditPrivate::init(): ""{{TODO: add clear button}}"".

It didn't sound like a complex idea to implement, so I wrote a patch myself which is also attached to this log. It's a patch against the 5.12.6 branch, but it's only a few lines of code so I guess it can easily be ported to a more recent branch.
I tested my change on macOS 10.15 and Windows 10

Hopefully this can serve as a starting point of supporting this in Qt

 ",,,,,,,,,,,,,,,,,,,"04 May '20 15:52;dbutijn;QKeysequenceEdit_ClearButton.patch;https://bugreports.qt.io/secure/attachment/94477/QKeysequenceEdit_ClearButton.patch",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0o5gn:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Make QMetaType::registerConverterFunction public,QTBUG-80502,289653,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,,laurentgom,laurentgom,03 Dec '19 12:50,04 May '20 05:31,18 Feb '21 09:41,,5.13.1,,,,,,,,,,,,,,,,,,,,,,Core: Other,,,,0,,,,"Hi

I know it's rather a corner case, but my project requires to callQMetaType::registerConverterFunction, ie. allow to register conversion functions with metatype ids rather than C++ types. My project uses an abstraction layer, everything is rather generic and dynamic, and compile-time types are not known when I need to register my conversion functions.

So far I've been able to use it, because an internal workaround makes it public with my compiler (MSVC), but of course it fails to compile in other environments, and won't compile anymore with Qt6.

I don't see any strong reason to hide it, except maybe the inability to perform a compile-time check that both types are not built-in Qt types, like template functions on top of it do, but this could easily be done with a cheap runtime check such as ""type >= QMetaType::User"".

Let me know what you think.

Thanks.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Windows,,,,,,"0|i0mwdz:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"03 Dec '19 15:43;thiago;We'll see what we can do after we devise the Qt 6 solution. Nothing will change in Qt 5. If it's working for you today, it should continue working and there's no reason it wouldn't work on other compilers besides MSVC.","03 Dec '19 17:15;laurentgom;It's a private function, so it basically doesn't work, I can't call it. Except with MSVC, because of this:

{code:cpp}
// ### Qt6: FIXME: Remove the special Q_CC_MSVC handling, it was introduced to maintain BC.
#if !defined(Q_NO_TEMPLATE_FRIENDS) && !defined(Q_CC_MSVC)
#ifndef Q_CLANG_QDOC
    template<typename, bool> friend struct QtPrivate::ValueTypeIsMetaType;
    template<typename, typename> friend struct QtPrivate::ConverterMemberFunction;
    template<typename, typename> friend struct QtPrivate::ConverterMemberFunctionOk;
    template<typename, typename, typename> friend struct QtPrivate::ConverterFunctor;
    template<typename, bool> friend struct QtPrivate::AssociativeValueTypeIsMetaType;
    template<typename, bool> friend struct QtPrivate::IsMetaTypePair;
    template<typename, typename> friend struct QtPrivate::MetaTypeSmartPointerHelper;
#endif
#else
public:
#endif
    static bool registerConverterFunction(const QtPrivate::AbstractConverterFunction *f, int from, int to);
{code}

So I can test it and validate that it works for my needs, but as long as the function is private on all other compilers, I can't publish my work (I'm writing a library, so it needs to work in all environments, not just mine).","03 Dec '19 23:46;thiago;Ah, sorry, I understand now.

Anyway, we're not going to make changes for Qt 5, at least not until the Qt 6 changes are ready and we know what it'll look like going forward. Only then will we see if there's anything that can be retroactively made available in Qt 5.",,,,,,,,,,,,,,,,,,,
Multiple Q_NAMESPACE for the same namespace in different files,QTBUG-81792,292683,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,,twj,twj,01 Feb '20 19:37,04 May '20 05:31,18 Feb '21 09:41,,5.14.0,,,,,,,,,,,,,,,,,,,,,,Build tools: moc,Core: Object Model,,,0,,,,"I have two enums. They are in the same namespace, but different header files. To make them available to Qt meta type system, I try this:
{code:cpp|title=C1.h}
#include <QObject>
namespace SW {
    Q_NAMESPACE
    enum class Enum1 {A, B};
    Q_ENUM_NS(Enum1)
}
{code}
{code:cpp|title=C2.h}
#include <QObject>
namespace SW {
    Q_NAMESPACE
    enum class Enum2 {A, B};
    Q_ENUM_NS(Enum2)
}
{code}
{code:cpp|title=main.cpp}
#include ""C1.h""
#include ""C2.h""
int main(int argc, char *argv[]) {
}
{code}
 - With the above I get duplicate symbol linker error. Because both moc_C1.o and moc_C2.o defined the staticMetaObject that result from Q_NAMESPACE
 - Both headers must contain Q_NAMESPACE. Otherwise moc complains ""Error: Namespace declaration lacks Q_NAMESPACE macro.""
 - If I have only *one* of C1.h or C2.h, it works.
 - If I move content of C2.h into C1.h, it also works

The core of the problem seems to be that with multiple header files, the toolchain doesn't know how to define only one copy of the namespace's meta object stuff. 

The following looks like a reasonable effort:
{code:cpp|title=SW_MetaDef.h}
#include <QObject>
namespace SW {
    Q_NAMESPACE
}
{code}
{code:cpp|title=C1.h}
#include ""SW_MetaDef.h""
namespace SW {
    enum class Enum1 {A, B};
    Q_ENUM_NS(Enum1)
}
{code}
{code:cpp|title=C2.h}
#include ""SW_MetaDef.h""
namespace SW {
    enum class Enum2 {A, B};
    Q_ENUM_NS(Enum2)
}
{code}
With the above:
 - moc_SW_MetaDef.cpp defines the only copy of SW namespace's meta object stuff
 - The staticMetaObject referenced by Q_ENUM_NS is visible. So should be no compiler error there
 - But moc would output ""Error: Namespace declaration lacks Q_NAMESPACE macro."" Is moc being too strict? Would the above work if we disable the ""Q_NAMESPACE present"" check in moc?

Related issue: QTBUG-68611",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0nd93:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"02 Feb '20 05:08;thiago;Changing to suggestion because Q_NAMESPACE, as designed, can only appear once. You're asking for a new feature.

And unlikely to be implemented, ever.","03 Feb '20 04:59;twj;In the meantime, you could rewrite this
{code:cpp|title=C1.h}
#include <QObject>
namespace SW {
    Q_NAMESPACE
    enum class Enum1 {A, B};
    Q_ENUM_NS(Enum1)
}
{code}
as
{code:cpp|title=C1.h}
#include <QObject>
namespace SW {
    struct Enum1_ {
        enum class E {A, B};
        Q_ENUM(E)
    private: 
        Q_GADGET
    };
    typedef Enum1_::E Enum1;
}
//Since moc_.cpp still refers to the enum as ""SW::Enum1_::E"",
// if you want to use ""SW::Enum1"" for signal/slot argument, Q_PROPERTY type etc,
// you'd need to run the following in main() to register an alias:
// qRegisterMetaType<SW::Enum1>(""SW::Enum1"")
{code}",,,,,,,,,,,,,,,,,,,,
QMetaType::IsEnumeration for QFlags<T>,QTBUG-74639,276004,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,,t-moe,t-moe,22 Mar '19 12:02,04 May '20 05:31,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Core: Containers and Algorithms,,,,0,,,,"Consider the following code:

myclass.h
{code:java}
#include <QObject>

class MyClass : public QObject {
    Q_OBJECT
public:
    enum LoadHint {A=1, B=2, C=4, D=8};
    Q_DECLARE_FLAGS(LoadHints, LoadHint)
    Q_FLAG(LoadHints)

    enum Alignment {Left, Right};
    Q_ENUM(Alignment)
};
{code}
main.cpp
{code:java}
#include <QVariant>
#include <QDebug>
#include ""myclass.h""

int main(int, char *[])
{
    MyClass::Alignment al = MyClass::Right;
    QVariant alv = QVariant::fromValue(al); //Store Q_ENUM in a QVariant
    qDebug() << alv << alv.toInt() << alv.toString();
    //Output: QVariant(MyClass::Alignment, ""Right"") 1 ""Right""

    MyClass::LoadHints lhs(MyClass::A | MyClass::C);
    QVariant lhsv = QVariant::fromValue(lhs); //Store Q_FLAG in a QVariant
    qDebug() << lhsv << lhsv.toInt() << lhsv.toString();
    //Output: QVariant(MyClass::LoadHints, ) 0 """"
    //Expected Output: QVariant(MyClass::LoadHints, ""A|C"") 5 ""A|C""
}
{code}
Receiving a flag-enumeration (e.g. QFlags<MyClass::LoadHints>) from a QVariant is currently cumbersome. It can't be converted to string and it also can't be converted to any integral type.

The main reason behind this is that
{code:java}
QMetaType::typeFlags(qMetaTypeId<MyClass::LoadHints>()).testFlag(QMetaType::IsEnumeration);
{code}
returns false.

I suggest to set the QMetaType::IsEnumeration bit on the QMetaType flags of the QFlags<T> Types and adjust qmetatype.h as follows (diff):
{code:java}
     template<typename T>
     struct QMetaTypeTypeFlags
     {
         enum { Flags = (QTypeInfoQuery<T>::isRelocatable ? QMetaType::MovableType : 0)
                      | (QTypeInfo<T>::isComplex ? QMetaType::NeedsConstruction : 0)
                      | (QTypeInfo<T>::isComplex ? QMetaType::NeedsDestruction : 0)
                      | (IsPointerToTypeDerivedFromQObject<T>::Value ? QMetaType::PointerToQObject : 0)
                      | (IsSharedPointerToTypeDerivedFromQObject<T>::Value ? QMetaType::SharedPointerToQObject : 0)
                      | (IsWeakPointerToTypeDerivedFromQObject<T>::Value ? QMetaType::WeakPointerToQObject : 0)
                      | (IsTrackingPointerToTypeDerivedFromQObject<T>::Value ? QMetaType::TrackingPointerToQObject : 0)
-                     | (std::is_enum<T>::value ? QMetaType::IsEnumeration : 0)
+                     | ((std::is_enum<T>::value || QtPrivate::IsQEnumHelper<T>::Value) ? QMetaType::IsEnumeration : 0)
                      | (IsGadgetHelper<T>::IsGadgetOrDerivedFrom ? QMetaType::IsGadget : 0)
                      | (IsPointerToGadgetHelper<T>::IsGadgetOrDerivedFrom ? QMetaType::PointerToGadget : 0)
              };
     };
{code}
This would also harmonize the QMetaType::IsEnumeration usage.
 The QMetaTypeIdQObject template already uses _QtPrivate::IsQEnumHelper<T>::Value_ to set QMetaType::IsEnumeration.
 
{code:java}
template <typename T, int =
    QtPrivate::IsPointerToTypeDerivedFromQObject<T>::Value ? QMetaType::PointerToQObject :
    QtPrivate::IsGadgetHelper<T>::IsRealGadget             ? QMetaType::IsGadget :
    QtPrivate::IsPointerToGadgetHelper<T>::IsRealGadget    ? QMetaType::PointerToGadget :
    QtPrivate::IsQEnumHelper<T>::Value                     ? QMetaType::IsEnumeration : 0>
struct QMetaTypeIdQObject
{
    enum {
        Defined = 0
    };
};
{code}
But the QMetaType flag QMetaType::IsEnumeration is only set if _std::is_enum<T>::value_ is true.

Of course it makes sense to have QMetaType::IsEnumeration set for plain enums that are not part of a QObject class. 
 But QFlags are just better enums, so why should QMetaType::IsEnumeration not also be set on a QFlags class?

Benefits of this change:
 * QVariant(QFlags<T>).toString() can be easily implemented, without hacks to detect if the payload is a QFlags<T> type
 * Q_FLAG behaves more like Q_ENUM. Both have a assigned meta object, both can be converted to string and int using QVariant (new), QMetaEnum (existing) or QDebug (existing)
 * We don't need reinterpret_cast hacks to receive an int from a QVariant(QFlags<T>) like here in qtwebchannel: [https://codereview.qt-project.org/gitweb?p=qt/qtwebchannel.git;a=blobdiff;f=src/webchannel/qmetaobjectpublisher.cpp;h=6ea348028e7314a4cdd5c161d389032c5ee1219f;hp=9e08453a2651348f35382fe862cbb19065060e01;hb=38f097ba76fe5b26ccc15a5599e312336200e564;hpb=c80cbce7ac3b38a45a38b57795c7eb19e5177a17]
 * User Applications that use reflection with QMetaType/QVariant can now handle Q_FLAG.

Before I submit this change to gerrit I would like to hear your feedback.

In case you don't like to change the behaviour of QMetaType::IsEnumeration, we could also achieve the same functionality by either:
 * Adding a new flag QMetaType::IsQEnumHelper to QMetaType instead.
 * Or by modifying QVariant to/from string/int methods with hacks like the one in the linked webchannel change above.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0kqpr:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"22 Mar '19 15:29;thiago;Olivier, what do you think?",,,,,,,,,,,,,,,,,,,,,
Consider disabling the useless-cast warning for moc generated code ,QTBUG-71938,270027,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,,andysh,andysh,21 Nov '18 07:07,04 May '20 05:31,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Build tools: moc,,,,1,Reported_by_support_standard,,,"Consider disabling the useless-cast warning for moc generated code, it is complaining about the static_cast for signals in gcc 7.3.0. I assume this is needed for all possible cases so disabling the warning would be ideal so that users cam turn it on for their own code.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0ju3z:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Floating label in TextEdit (with proposed implementation),QTBUG-83903,298118,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt.team.quick.subscriptions,ceperez1996,ceperez1996,30 Apr '20 03:23,30 Apr '20 03:24,18 Feb '21 09:41,,5.14.2,,,,,,,,,,,,,,,,,,,,,,Quick: Controls 2,,,,0,,,,"Most Material implementations have a floating label as placeholder text in editable text controls. The one provided in QQC2 does not.
Without it, having redundant labels is mostly required in order to remember to the user what should be typed, because the tip dissapears after the user start typing, and if it gets interrupted for X reason, it may be unable to remember what it's typing in first instance.
A possible workaround can be using tool-tips, a ""help"" icon, but etc. But all of that are redundant and consume UI space, which cannot be tolerated in many cases. I have not checked if the Material specification involves a floating label or not; but still, it's a very useful and intuitive feature that can help users to save UI space, and it's implemented almost in every Material style.

In the other hand, using a floating label will increase the control's size, but since this will be target Qt 6, this should not be an issue.

For convenience, I've used a custom TextField on all my projects, now I improve it to match the QQC2 architecture/design. Such implementation is attached here, so you can save some work, I hope. Of course there are details that I don't wanted to go in, like the control's size (you will get a cropped floating label if you set the clip property to true).

The zip contains the TextField's source code as Qt 5.14.2 implements it, with some tiny modifications, indicated with a //! ADDED comment:
* A ""float"" state that changes the x, scale and color properties of the PlaceholderText.
* A Transition for that state.
* The property transformOrigin of the PlaceholderText is set to Item.TopLeft, to handle the x property appropriately.
* The PlaceholderText is shown even when the control's text is not empty.

Also contains an example that can be executed with qmlscene (pass the --style=material flag).
A screen-shot is also provided.

Hope this help you improve the amazing QQC2!!",,,,,,,,,,,,,,,,,,,"30 Apr '20 03:24;ceperez1996;FloatingPlaceholderTextField - Proposed implementation.tar.gz;https://bugreports.qt.io/secure/attachment/94378/FloatingPlaceholderTextField+-+Proposed+implementation.tar.gz","30 Apr '20 03:24;ceperez1996;FloatingPlaceholderTextField.png;https://bugreports.qt.io/secure/attachment/94377/FloatingPlaceholderTextField.png",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0o5zr:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Support function properties in QML,QTBUG-83855,298016,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt.team.quick.subscriptions,andrhans,andrhans,28 Apr '20 14:07,28 Apr '20 15:41,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Quick: Core Declarative QML ,,,,0,,,," 

Feature request for function properties. You can use this method to pass a function into a component to adjust its behavior. Example: A generic SwipeArea that doesn't know how to detect whether a swipe is happening or not. The method is conveniently injected from the outside, by the user of SwipeArea.
{code:java}
SwipeArea {
    id: area
    detectionThreshold: function(point) {
        return point.x < area.width / 2;
    }
}{code}
In SwipeArea's implementation, the method is declared somewhat similarly to a signal, and can be called, typically passing essential arguments and checking the return type.
{code:java}
// SwipeArea.qml
MouseArea {
    property function detectionThreshold(point)

    onReleased: {
        if (detectionThreshold(Qt.point(mouse.x, mouse.y))) {
            itIsASwipe = true;
        }
    }
}{code}
 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0o5d3:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"28 Apr '20 14:14;mitch_curtis;Can't you already do this by using var as the property type? Having a ""function"" type would be nice for type strictness though. Oh and I guess the user would also need to match the parameters, which makes it even stricter.","28 Apr '20 14:15;ulherman;You can already define JavaScript member functions in QML types:
{code}
 SwipeArea {
    id: area
    function detectionThreshold(point) {
        return point.x < area.width / 2;
    }
}
{code}

You can also assign a JavaScript function to a var property:
{code}
FooBar {
    property var theFunction: return function() { doSomething(); }
}
{code}","28 Apr '20 14:16;mitch_curtis;{code}
 SwipeArea {
    id: area
    function detectionThreshold(point) {
        return point.x < area.width / 2;
    }
}
{code}
That can't be overridden in derived types though.","28 Apr '20 15:37;andrhans;You guys reply way to fast :D. I was unaware of the var approach, is this really the same thing though? It looks like a binding that happens to resolve its return value through a function. If SwipeArea wants to pass parameters, does that really work? If so, interesting - but the magic arguments makes it a bit suboptimal.

The purpose is to provide the user a component that allows the user to pass a function that is called from the inside, with arguments. Another example could be an encryption object that wants you to provide the crypt-function.
{code:java}
ObfuscatedText {
    obfuscator: function(text) {
        return ""youcantreadthis"" + text + ""sinceitsobfuscated""; // I dunno ;-)
    }
}{code}",,,,,,,,,,,,,,,,,,
Add configure's output files to packages,QTBUG-78749,285577,Suggestion,Open,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,janihe,rlohning,rlohning,25 Sep '19 09:12,28 Apr '20 09:09,18 Feb '21 09:41,,Some future release,,,,,,,,,,,,,,,,,,,,,,Packaging & Installer,,,,0,,,,"Sometimes I see problems in my own build but not in the official builds or vice versa. In such cases it might help to see how the official packages were built. For this, I suggest to add the output files from configure to the installed files, primarily:
- config.opt
- config.summary",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0n6oo:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"25 Sep '19 16:46;iknd;We already save the full build output, e.g. [http://ci-files02-hki.intra.qt.io/packages/jenkins/qt/5.14.0/latest/build_logs/qtbase_buildLogs/Linux-RHEL_7_6-GCC-Linux-RHEL_7_6-X86_64/]

It would be then only a matter of including these files in the installers ([~janihe], [~ankokko], [~aksalova])","26 Sep '19 06:31;janihe;[~iknd] There is only log.txt in that archive; config.opt & config.summary are missing. 
","27 Nov '19 14:12;assaarel;Any news regarding this? Prio and affects version?",,,,,,,,,,,,,,,,,,,
Error Unknown method return type: QMediaPlaylist* passing *QMediaPlaylist from C++ to QML,QTBUG-83834,297970,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,w00t,davidino,davidino,28 Apr '20 08:01,28 Apr '20 08:07,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Quick: Other,,,,0,,,,"Error type: Unknown method return type: QMediaPlaylist*
It happens when passing QMediaPlaylist* from C++ to QML.
The code is compose by a playlistModel that load automatically a playlist vector according to the folder found in the system. In QML the user select the playlist which gets loaded in MediaPlayer.


In QML the playlist model is shown with a pathView and one selected, its index is passed to a MediaPlayer as follow:

_import QtQuick 2.6
import QtQuick.Controls 2.0
import QtMultimedia 5.9
import "".""

import ""QUItMeterComponent""
import ""../menu""

PageTheme {
    property string playlistName
    property int playlistIndex
    property int playlistSize

    id: musicPage
    toolbarTitle: playlistName + "": "" + playlistSize + "" songs""

    function changePlaylist() {
        var item = playlistModel.getPlaylistFromIndex(playlistIndex)
        //note: using double ! to check item is not null or undefined (little JavaScript trick)
        if(!!item) {
            playMusic.playlist = item;
            console.log(""playlist changed!!"");
        }
        else
            console.log(""playlist no good!!"");
    }

    onPlaylistIndexChanged: changePlaylist()

    MediaPlayer {
        id: playMusic
        autoLoad: true
        autoPlay: true
        //Component.onCompleted: changePlaylist()
    }
_ 

In main.cpp playlistModel is created and made available to QML as follow:

_    
    PlayListModel playlistModel(""/home/root"");

    QQmlApplicationEngine engine;

    QQmlContext* context = engine.rootContext();
    context->setContextProperty(""playlistModel"", &playlistModel);
_

Despite  Q_DECLARE_METATYPE(QMediaPlaylist*) is declared, I got the error.","b2qt 5.1 for raspberrypi0
Qt version 5.12.0",,,,,,,,,,,,,,,,,,"28 Apr '20 08:07;davidino;myplaylist.h;https://bugreports.qt.io/secure/attachment/94313/myplaylist.h","28 Apr '20 08:06;davidino;playlistmodel.cpp;https://bugreports.qt.io/secure/attachment/94314/playlistmodel.cpp","28 Apr '20 08:06;davidino;playlistmodel.h;https://bugreports.qt.io/secure/attachment/94315/playlistmodel.h",,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0o53r:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add property to enable middle click close for QTabWidget,QTBUG-82408,294160,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt.team.quick.subscriptions,martonmiklos,martonmiklos,21 Feb '20 21:50,27 Apr '20 17:01,18 Feb '21 09:41,,5.14.1,,,,,,,,,,,,,,,,,,,,,,Widgets: Itemviews,,,,1,,,,"Most of the modern web browsers allow closing tabs with a middle mouse click, making this feature somewhat natural user expected behaviour.

I think it would make sense to add a property to the QTabWidget which could be used enable/disable this behaviour. If my idea get positive feedback I can implement a patch.

I know it could be workarounded by creating a custom QTabBar and QTabWidget, but I still feel that many developers would benefit from it if it get integrated to Qt.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0nl67:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"23 Feb '20 10:43;chehrlic;Fell free to provide a patch and add me as reviewer.","23 Feb '20 11:37;martonmiklos;Will do, thanks!","20 Apr '20 16:57;eugenezelenko;I think *tabsClosable* should be used to enable such functionality. My implementation that may be not perfect:

{code:c++}
    int tab_index = tabBar()->tabAt(event->pos());

    if ((event->buttons() == Qt::MiddleButton) && (tab_index >= 0))
    {
        event->accept();
        removeTab(tab_index);
    }
    else
        QTabWidget::mousePressEvent(event);
{code}
","20 Apr '20 18:59;eugenezelenko;I would add that not only browsers, but IDEs and text editors are implementing same behavior too. For example, Visual Studio Code and Kate.","27 Apr '20 17:01;eugenezelenko;Middle click button is supported in Unity file manager.",,,,,,,,,,,,,,,,,
Allow setting vertical and horizontal spacing individually in Flow,QTBUG-83782,297718,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt.team.quick.subscriptions,poikelin,poikelin,27 Apr '20 06:19,27 Apr '20 06:20,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Quick: Core Declarative QML ,,,,1,Reported_by_support_standard,,,Currently Flow only has one property that is used for spacing in both directions,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0o4cf:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Method to know when 3D content actually appears on screen,QTBUG-83239,296546,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,seanharmer,gordon_bowman,gordon_bowman,01 Apr '20 18:22,20 Apr '20 20:14,18 Feb '21 09:41,,5.12,,,,,,,,,,,,,,,,,,,,,,Qt3D,,,,0,,,,"When trying to improve startup times, we are most interested in the time from launch to when 3D content is actually visible on the screen. There does not seem to be a programmatic way to know this, however. FrameAction, for instance, can be triggered up to 50 times before 3D content actually appears on the screen. Also, if 3D content is animated too soon, issues seem to arise, plus you probably wouldn't want to start animating before it's visible anyway, so knowing when it's visible is useful for that too.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0nxcv:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"20 Apr '20 20:14;mkrus;It's a vast yet vague question. What is the 3d content, how is it loaded, are you interest in it just being ready to render or it actually being visible (it may be behind the camera)...

If you know the object, and it has a texture, tracking the status property may help, it will change to Ready when loaded. If no texture, QGeometry has min/max extent property which change when object is loaded and it's bounding volume calculated...
Trick is knowing which object to track.",,,,,,,,,,,,,,,,,,,,,
extend SCXML to support BPMN 2.0,QTBUG-78689,285424,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,jkobus,powerballk66,powerballk66,23 Sep '19 09:37,20 Apr '20 13:46,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,XML: SCXML,,,,1,,,,"BPMN 2.0 is the industry standard where business (business analytics) translate product requirements and use cases to developers team.

 

 

BPMN is more widely used than SCXML.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0m84n:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"15 Apr '20 13:05;kofr;I think it would be very useful for corporate customers. At the moment there are only Java solutions","20 Apr '20 09:57;liaqi;http://www.bpmn.org ?","20 Apr '20 13:46;kofr;[~liaqi] yes",,,,,,,,,,,,,,,,,,,
Please specify what plugins each Qt module is using.,QTBUG-83642,297383,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,docteam,energokoder,energokoder,19 Apr '20 10:28,19 Apr '20 19:25,18 Feb '21 09:41,,5.12.4,,,,,,,,,,,,,,,,,,,,,,Documentation,,,,0,,,,"I create my custom, gneric installer for Linux apps (not limited to any distro nor limited to Qt but also Qt aware). I want do something like AppImage, but without compulsory creation on the oldest supported linux distro. In order to create this installer correctly I must fight against Qt plugins. I search whole Internet and I found only two hints: [https://doc.qt.io/qt-5/plugins-howto.html] and [https://github.com/probonopd/linuxdeployqt/blob/master/tools/linuxdeployqt/shared.cpp] . I think the former is more complete than later, but it does not resolve all problems. In my simple Qt app. I use core, widget and network Qt modules. I copy all plugins mentioned on the former page. My app works, but not perfectly: I can't chose file from file dialog. Icons are broken and dirs not appear. I suppose I don't have complete list of plugins copied to plugin dir. Now I have these plugins in plugin dir: 
{code:java}
bearer  platforminputcontexts  platforms  platformthemes  styles{code}
The plugin dir  is set in qt.conf in my installation bin dir (my app is installed in home dir and linked to ~/bin). LD_LIBRARY_PATH is point to the lib dir of my instalation (not to the system dirs).

In attached screenshot you can see the broken file dialog in my app (run as complete app, instead from Qt Creator). In sake of completnes I attach also partially broken file dialog from VLC (as you know also Qt based).

Please fill the documentation gap and create simple table of so/dll and plugins they use. Thanks!","Operating System: Kubuntu 19.10
KDE Plasma Version: 5.16.5
KDE Frameworks Version: 5.62.0
Qt Version: 5.12.4
Kernel Version: 5.3.0-46-generic
OS Type: 64-bit
Processors: 8 × Intel® Core™ i7-10510U CPU @ 1.80GHz
Memory: 22,9 GiB",,,,,,,,,,,,,,,,,,"19 Apr '20 10:28;energokoder;Screenshot_20200419_121342.png;https://bugreports.qt.io/secure/attachment/93852/Screenshot_20200419_121342.png","19 Apr '20 10:26;energokoder;Screenshot_20200419_122600.png;https://bugreports.qt.io/secure/attachment/93850/Screenshot_20200419_122600.png",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Linux/X11,,,,,,"0|i0o2c7:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Expose QQuickItemPrivate::paintOrderChildItems (or some other way to access items in visual order),QTBUG-83647,297389,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt.team.quick.subscriptions,w00t,w00t,19 Apr '20 15:32,19 Apr '20 15:32,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Quick: Core Declarative QML ,,,,4,,,,"When implementing a variety of things like hit testing, or customized/tweaked event delivery, it is almost always necessary to make use of QQuickItemPrivate::paintOrderChildItems to do so (as QQuickWindow itself does for event delivery).

Similarly, the usual loop over it (checking isVisible / isEnabled / isCulled) would be nice to have in some sort of a reusable form. Maybe the right thing to do with this is to turn it into an iterator, and make that public.

This would go a very very long way to stamping out use of private API that I've written (or seen) around the place.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0o2dj:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Change TableView so that if there is a Horizontal/VerticalHeaderView synced with it that it is the headerview controlling the size,QTBUG-83598,297288,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt.team.quick.subscriptions,andysh,andysh,16 Apr '20 11:01,17 Apr '20 07:31,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Quick: Controls 2,,,,0,Reported_by_support_standard,,,"Change TableView so that if there is a Horizontal/VerticalHeaderView synced with it that it is the headerview controlling the size. That way it will make it easier to resize the sections, and account for the contents better.",,,,,,,,,,,,,,,QTBUG-83612,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0o1rj:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"17 Apr '20 07:14;richard;One thing to keep in mind though when looking into this, is that several HeaderViews can be be synced to the same TableView. E.g you can have a HorizontalHeaderView on top of the table, and one below. In that case it's more tricky to decide which one should set the width of each column. ",,,,,,,,,,,,,,,,,,,,,
Make it possible to check possible transitions for each state in a QScxmlStateMachine.,QTBUG-83487,297147,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,jkobus,miikapernu,miikapernu,15 Apr '20 11:28,15 Apr '20 11:31,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,XML: SCXML,,,,0,Reported_by_support_standard,,,Make it possible to check possible transitions for each state in a QScxmlStateMachine since that currently seems impossible using public API.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0o0w7:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Provide an API to check if a file exists,QTBUG-83340,296779,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt.team.quick.subscriptions,mitch_curtis,mitch_curtis,06 Apr '20 16:30,14 Apr '20 08:39,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,QML: Declarative and Javascript Engine,,,,0,,,,"So that you can do stuff like this:

{code}
readonly property string qmlPath: ""qrc:/qml/entities/"" + model.name + "".qml""

source: FileInfo.fileExists(qmlPath) ? qmlPath : someOtherPath
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0nyof:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"06 Apr '20 16:44;ulherman;An ""exists"" function on generic URLs is potentially expensive.","06 Apr '20 16:47;ulherman;In general this should be part of some larger file system API, not an isolated piece of functionality.","14 Apr '20 08:39;mitch_curtis;{quote}
An ""exists"" function on generic URLs is potentially expensive.
{quote}
How so?

{quote}
In general this should be part of some larger file system API, not an isolated piece of functionality.
{quote}
Yeah, that's why I suggested FileInfo as a name, to mirror QFileInfo: https://doc.qt.io/qt-5/qfileinfo.html

Although that lends itself more to an object that is declared since all of its API assumes you've already passed a path to the constructor. We could just make each function take a path though.",,,,,,,,,,,,,,,,,,,
Add method to set QTabBar Tab alignment,QTBUG-83455,297053,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt.team.quick.subscriptions,taytoo,taytoo,13 Apr '20 14:56,13 Apr '20 14:56,18 Feb '21 09:41,,5.14.2,,,,,,,,,,,,,,,,,,,,,,GUI: Look'n'Feel,,,,0,,,,"Qt stylesheets allow complete customization of the widgets including QTabBar. In some cases Tabs don't look like traditional tabs any more, which is the case with our application.

However, the QTabBar alignment is limited to native tab alignment i.e. Left on Windows and Middle on macOS. While its understandable to have that limitation when Native UI is being rendered, but in cases of custom styled QTabBar its a huge limitation. 

Proposed method:
void QTabBar::setAlignment(Qt::Alignment alignment);

Calling this method forces specific tab alignment i.e. Left, Center, Right.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0o0bz:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Please make QStorageInfo identify network mounts cross-platform,QTBUG-83321,296723,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,thiago,l3u,l3u,06 Apr '20 07:11,08 Apr '20 15:12,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Core: Filesystem watching,,,,0,,,,"With Qt 5.15 almost being finished, this probably would be something for Qt 6, but however:

It would be nice if one could find out if a directory is on a network mount or not cross-platform.

On Linux, this seems to be possible via {{QStorageInfo}}. If I go through {{QStorageInfo::mountedVolumes()}}, I can check {{fileSystemType()}}. So I e. g. get {{nfs4}}, {{cifs}} or {{fuse.sshfs}} for network mounts.

On Windows however, for a Samba share, I get {{NTFS}}, as if the share was a normal local file system.

At least on Windows, it seems to be possible to distinguish a local drive from a remote one using {{GetDriveTypeA}}: [https://docs.microsoft.com/de-de/windows/win32/api/fileapi/nf-fileapi-getdrivetypea] – but nobody wants to mess with the Windows API ;)

It would be nice if {{QStorageInfo}} was extended by such functionality.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0nyd3:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"06 Apr '20 13:19;thiago;If you're trying to identify remote drives, I'd use an API specifically for that (isRemote / isLocal). But I don't know if we can determine that reliably everywhere. We'd probably need a tri-state:

{code}
    enum LocalStatus { Local, Remote, Unknown };
    LocalStatus localStatus() const;
{code}","06 Apr '20 13:38;l3u;An additional function for exactly that question would be wonderful, if that would be possible!

Maybe, on Linux one could determine that status via the underlying file system we already get (sticking with my example, {{nfs4}}, {{cifs}} and {{fuse.sshfs}} are all remote, and I think there's an overseeable number of such file systems). On Windows however, either additional checks would be needed (as we only get NTFS for a share) or the reported file system type should be what it really is (NTFS for a share also isn't really correct, is it?).","06 Apr '20 17:52;thiago;The problem is that there are plenty more network filesystems using fuse, but also a few local ones using fuse. It's not easy to tell. I don't want to maintain a white or black list of filesystems.

No, the heuristic needs to be different.","06 Apr '20 20:30;l3u;Windows apparently can tell if a file system is remote or not, maybe by the way it's mounted. Question is if this could also work for Linux, thinking of stuff like curlftpfs, sshfs and so on. The mount process is the same as for local file systems, so maybe one would check if some hostname or IP address is involved? One can't look into GetDriveTypeA to see what's happening in there, can one?","06 Apr '20 23:39;thiago;No, what works for one is not at all how it works for the other.","07 Apr '20 16:30;l3u;Of course, the {{GetDriveTypeA}} thing won't work under Linux :P

{{df --local}} seems to exit with status 1 if run with a remote mount as the argument. So somehow, it seems to know if a file system is local or remote. Maybe this will help to identify a remote file system on Linux/macOS?","07 Apr '20 18:46;thiago;That just means it has some heuristics we could copy, but that's no guarantee it's correct.

One suggestion is to check the device: if it starts with anything other than a slash or if it starts with a double slash, it's not local. That means all the virtual file systems will be understood as non-local either.","08 Apr '20 12:32;l3u;Looking at the device, it's actually possible to identify if a mount uses a ""normal"" physical device, or something else (possibly a net mount). I could do this reliably on Linux, Windows and macOS using the following enum:
{code:java}
enum DeviceType {
    Physical,
    Other,
    Unknown
};{code}
and the following function:
{code:java}
DeviceType deviceType(const QStorageInfo &volume) const
{
#ifdef Q_OS_LINUX
    if (QString::fromLatin1(volume.device()).startsWith(QLatin1String(""/""))) {
        return DeviceType::Physical;
    } else {
        return DeviceType::Other;
    }
#endif
#ifdef Q_OS_WIN
    if (QString::fromLatin1(volume.device()).startsWith(QLatin1String(""\\\\?\\Volume""))) {
        return DeviceType::Physical;
    } else {
        return DeviceType::Other;
    }
#endif
#ifdef Q_OS_MACOS
    if (! QString::fromLatin1(volume.device()).startsWith(QLatin1String(""//""))) {
        return DeviceType::Physical;
    } else {
        return DeviceType::Other;
    }
#endif
    return DeviceType::Unknown;
}

{code}
Maybe this helps? Thanks a lot for the hint with device!",,,,,,,,,,,,,,
Adding information about implicitwidth with Text type if wrapMode: Text.wordWrap is used.,QTBUG-83392,296892,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,docteam,tero.pelkonen,tero.pelkonen,08 Apr '20 10:13,08 Apr '20 10:13,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Documentation,,,,0,reported_by_support_standard,,,"User noticed that implicitWidth does not get updated if wrapMode: Text.wordWrap is used.

Could documentation [https://doc.qt.io/qt-5/qml-qtquick-item.html#implicitWidth-prop] have more details regarding Text type and wrapMode: Text.wordWrap?",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0nzdb:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Support colored SVGinOT fonts,QTBUG-71930,270016,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,esabraha,mr.greywater,mr.greywater,20 Nov '18 19:02,04 Apr '20 09:43,18 Feb '21 09:41,,5.11.2,,,,,,,,,,,,,,,,,,,,,,GUI: Text handling,Quick: 2D Renderer,,,4,,,,"Currently on Windows, the only font that Qt supports that contains colored emojis is ""Segoe UI Emoji"". Other fonts like [twemoji-color-font|https://github.com/eosrei/twemoji-color-font] or [noto-color-emoji|https://github.com/googlei18n/noto-emoji] use SVGinOT which  while supported by Windows 10 since the Anniversary Update, doesn't work with Qt. When used in a Qt/QML application, these fonts are only drawn in black and white.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Windows,,,,,,"0|i0ju1j:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"21 Nov '18 13:25;esabraha;Qt actually uses DirectWrite both to detect if the fonts are color fonts and to draw them. Perhaps it is only the detection that needs to be extended to manually detect the SVG-based fonts.","02 Oct '19 08:47;rivierakid;This still not works correctly in Qt 5.12.5","04 Apr '20 09:43;attisan;still an issue :( (in 5.14.1)",,,,,,,,,,,,,,,,,,,
OpenSSL packages also for offline installer,QTBUG-83290,296656,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,releaseteam,poikelin,poikelin,03 Apr '20 10:52,03 Apr '20 10:54,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Packaging & Installer,,,,0,Reported_by_support_standard,,,"OpenSSL libraries could probably be added to offline installer as well.

Or perhaps better would be to have a separate download  for OpenSSL binaries",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0nxyn:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Expose QQuickItemPrivate::isTabFence to the public API,QTBUG-83266,296611,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt.team.quick.subscriptions,tonygluk,tonygluk,02 Apr '20 11:24,02 Apr '20 11:24,18 Feb '21 09:41,,5.13.2,,,,,,,,,,,,,,,,,,,,,,Quick: Core Declarative QML ,,,,0,,,,"""Tab fence"" concept can be very useful for structuring the UI and writing custom controls. There're 2 places in my current app where I would use it if it was an option. It makes perfect sense to expose `isTabFence` as a part of `QQuickItem::Flags`, just like `ItemIsFocusScope`.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0nxpj:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
QCompleter is not available as list for Ui Automation tool.,QTBUG-83260,296593,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,,irfan.omair@digia.com,irfan.omair@digia.com,02 Apr '20 08:45,02 Apr '20 08:46,18 Feb '21 09:41,,5.12.0,,,,,,,,,,,,,,,,,,,,,,GUI: Complex Input methods,,,,0,Reported_by_support_standard,,,"In Later versioh of Ot (after 5.9) QCompleter List is not available in UI Automation tool.

 

Steps to reproduce.

 

1. Build and run Custom Completer Example from Qt Creator examples library.

2. Run Inspect.exe (Tool from Windows SDK, located in c:\Program Files (x86)\Windows Kits\10\bin\\{version}\x64\inspect.exe). This tool allow to inspect UI Automation fields in Windows applications.

 

Actual result:

in 5.9.5 popup of completer is 'list' and all of list elements are available

in 5.12.4 / 5.14.0 popup of completer is 'pane' and no elements available

Also it was rechecked in the latest 5.14.0 and still popup not discoverable as list.

 

Attached is the screen recording",,,,,,,,,,,,,,,,,,,"02 Apr '20 08:46;irfan.omair@digia.com;2020-03-27 11-49-19 (2).mkv;https://bugreports.qt.io/secure/attachment/93490/2020-03-27+11-49-19+%282%29.mkv",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Windows,,,,,,"0|i0nxlr:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Cache class info to speed up connection,QTBUG-83194,296396,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,milianw,msarehn,msarehn,31 Mar '20 10:11,31 Mar '20 14:12,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,WebChannel,,,,0,,,,"As of now, QMetaObjectPublisher always re-populates the JSON Object describing an object when a client connects. This process is rather expensive and hits hard when exporting a large number of objects. In our software, QWebChannel is the main remoting interface to a rather complex application (exporting up to about 50 objects) running on limited hardware (i.MX53 based).
 When connecting to the WebChannel server it can easily take up to 15 seconds before the whole initialization message is built and sent.

This could easily be fixed by building the class info once (including everything except current property values) and storing it in a cache keyed by the QMetaObject.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0nwh3:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"31 Mar '20 10:47;milianw;That sounds pretty excessive - how large are these objects? 50 does not sound like a lot to me - it would mean each serialization takes ~300ms. Are you sure it's on-CPU time that's the culprit, i.e. did you profile it with perf or similar? Can you share the record?

Don't get me wrong: I'm all for improving performance and adding a cache could definitely be done. But in the projects where I used QtWebChannel the serialization was never an issue, it was always updating the data. But a lot has happened since then, so maybe we ""regressed"" in performance somewhere.

Ideally, could you create a benchmark or similar that exhibits the issue such that we can use that as a basis to improve upon?

Thanks","31 Mar '20 14:12;msarehn;The objects vary in their size; the biggest one has about about 70 properties. Also, the objects are nested within each other, altough I doubt that this is a problem.

I haven't done any profiling yet; that's the next thing on my list.

Just to give another quickly obtained number: When running the application with simulated hardware backends in a Linux VM (so we can be sure that I/O to hardware isn't a problem), QWebChannel spends about 550ms in QMetaObjectPublisher::initializeClient(). 550ms sounds like an awful lot of time, given that the VM is backed by a reasonably modern Core i5.

But yes, I'll do some profiling and give you the numbers (and also the benchmark if I find the time)",,,,,,,,,,,,,,,,,,,,
ensureCursorVisible() should vertically center the cursor in the view,QTBUG-83146,296268,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,esabraha,bhaller,bhaller,27 Mar '20 15:23,30 Mar '20 10:31,18 Feb '21 09:41,,5.9.8,,,,,,,,,,,,,,,,,,,,,,GUI: Text handling,,,,0,,,,"I'd say the behavior of ensureCursorVisible() is not very helpful; from the user's perspective, it unpredictably puts the cursor at either the very top or the very bottom of the visible area, and the user can't really guess which, so they then have to do a little visual hunt for where the cursor has ended up. This is particularly annoying if the cursor is just an insertion point. I'd suggest that it should put the cursor at the vertical center of the view, not the top or bottom, when possible, making it more predictable, easier to find visually, and also more useful to the user, since the user will typically want to see the cursor in the context of the surrounding lines above and below.

This bug was split out from QTBUG-83105, by request.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0nvpr:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
qHash for QSharedPointer not mentioned in the documentation,QTBUG-83134,296246,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,docteam,parksprojets,parksprojets,27 Mar '20 11:01,27 Mar '20 11:01,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Documentation,,,,0,,,,"Qt has a *qHash* implementation for *QSharedPointer* (defined in *qsharedpointer_impl.h*), but it is not mentioned in either the *QHash* documentation page or *QSharedPointer* page.

It would be nice if it was mentioned in the doc, otherwise you need to do some experimentations to know if you can hash a *QSharedPointer*.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0nvkv:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
QML Repeater and Instantiator should be allowed to create items for DefaultProperty list properties,QTBUG-83067,296120,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt.team.quick.subscriptions,andrhans,andrhans,25 Mar '20 10:47,25 Mar '20 10:47,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Quick: Core Declarative QML ,,,,0,,,,"QML Repeater is very useful for creating items, and Instantiator for creating objects. It would be nice if these could be used to create elements that are passed to a DefaultProperty declared list of items or objects.
{code:java}
ItemWithDefaultListProperty {
    Instantiator {
        model: 3
        CustomElement { }
    }
}{code}
Given this C++ header:
{code:java}
class ItemWithDefaultListProperty : public QQuickItem
{
    Q_PROPERTY(QQmlListProperty<CustomElement> elements READ elements)
    Q_CLASSINFO(""DefaultProperty"", ""elements"")
    Q_OBJECT
public:
...{code}
The issue is that when using an instantiator in this way, the instantiator itselfs is assigned to the default property, instead of the elements it creates. So the resulting QML syntax error is one of wrong type assignment...",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0nutj:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Make able to disable update of accessibility focus on QWidget::setFocus(),QTBUG-82941,295771,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,smd,pvarga,pvarga,18 Mar '20 12:29,25 Mar '20 09:20,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,GUI: Accessibility (a11y),,,,0,,,,"This focus accessibility update is disabled for menus: https://codereview.qt-project.org/c/qt/qtbase/+/3021                                                                                                                                                                                          
A widget with a custom QAccessibleInterface may also update the focus manually.                                                                                                                                                                                                  
                                                                                                                                                                                                                                                                                 
For example, in case of QtWebEngine, the accessibility focus should be set to an HTML element what doesn't have corresponding QWidget. QWidget::setFocus() sets the accessibility focus on the QWebEngineView and this causes issues on Windows: https://bugreports.qt.io/browse/QTBUG-82862 ",,,,,,,,,,,,,,,,,,QTBUG-82862,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0nsun:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add support for ARM64 platforms on Windows + Linux,QTBUG-83010,295963,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,laknoll,andysh,andysh,23 Mar '20 06:47,25 Mar '20 09:17,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Other,,,,1,Reported_by_support_standard,,,Add support for ARM64 platforms on Windows + Linux,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0ntwf:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"23 Mar '20 08:17;laknoll;What is this bug report about? We do support arm64 since quite a while.","23 Mar '20 08:33;andysh;It's not clear that it is available for Windows and Linux desktops though, if that is the case then all we need to is to update the supported platforms page.","23 Mar '20 10:43;laknoll;Windows desktop is certainly untested. Linux should be ok, but we're not usually testing X11 on arm neither.","23 Mar '20 10:54;andysh;Well if we reasonably expect it to work and that then we can add it as a supported configuration, but since it is not tested in CI then it will not be marked as such and leave it at that.","25 Mar '20 09:17;liaqi;For Linux, which has priority between X11/xcb and wayland? At least I have seen Fedora 11 chose GNOME on Wayland as default. This is also an issue for x86/x86_64.",,,,,,,,,,,,,,,,,
Add a geometryChanged signal to QQuickItem,QTBUG-83050,296080,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt.team.quick.subscriptions,mitch_curtis,mitch_curtis,24 Mar '20 14:08,24 Mar '20 15:38,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Quick: Core Declarative QML ,,,,0,,,,"This would allow us to add a geometryChanged signal as a public API (item change listeners are private) for listening to geometry changes in an item without listening to all individual x/y/width/height properties. For applications that are interested in any change to the item's geometry, having one signal saves 3 connections.

For more discussion about this, see QTBUG-82994.",,,,,,,,,,QTBUG-82994,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0nukn:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"24 Mar '20 14:23;mitch_curtis;Reminder from QTBUG-82994 for if this change ever gets implemented... this is a suggestion from Volker:

{code}
// Deliberate left as virtual and final in order to give compile
// errors for users porting to Qt 6, as geometryChanged was not a signal in Qt 5.
virtual void geometryChanged() final;
{code}","24 Mar '20 15:38;srutledg;I think it goes well with the idea of adding geometry as a property; then of course it needs a notifier.",,,,,,,,,,,,,,,,,,,,
Be able to specify an environment variable that is used for looking up qtaccount.ini/qtlicenses.ini,QTBUG-82920,295697,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,releaseteam,andysh,andysh,17 Mar '20 10:44,17 Mar '20 10:44,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Packaging & Installer,,,,0,,,,"Be able to specify an environment variable that is used for looking up qtaccount.ini + qtlicenses.ini, this is so that it is possible to have 2 separate accounts on the same machine if this is needed. It can operate in the same manner as QT_LICENSE_FILE does in this regard.

This is especially useful if you are working on an open source project and don't want to accidently mix it with the commercial one.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0nshb:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Clearing back history of WebView,QTBUG-82857,295308,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,stromme,poikelin,poikelin,12 Mar '20 14:16,12 Mar '20 14:21,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,WebView,,,,0,Reported_by_support_standard,,,"Sometimes it makes sense to prevent from going back to previous page. For example, after showing a payment view in WebView, you would want to prevent users from accidentally going back to the payment page by accident, but you would still need there to be a back button for other pages shown there.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0nrkf:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Bluetooth Low Energie - Add function to get if device is connectable or not,QTBUG-82741,294968,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,ablasche,michaelliesenberg,michaelliesenberg,06 Mar '20 15:03,10 Mar '20 08:49,18 Feb '21 09:41,,5.13,,,,,,,,,,,,,,,,,,,,,,Connectivity: Bluetooth,,,,0,,,,"Missing function on QT Bluetooth to get device connectable or not.

On Android and iOS there is a function that returns if device is connectable.

 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0npmn:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
QtScXML module does not export dependency on QML,QTBUG-82773,295064,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,jkobus,rweickelt,rweickelt,09 Mar '20 14:44,09 Mar '20 14:45,18 Feb '21 09:41,,5.15.0 Beta1,,,,,,,,,,,,,,,,,,,,,,XML: SCXML,,,,0,,,,"libQtScXml links against libQtQml:
{noformat}
rw@rw-x220 lib$ ldd libQt5Scxml.so 
libQt5Qml.so.5 => /opt/Qt/5.12.3/gcc_64/lib/./libQt5Qml.so.5
libQt5Network.so.5 => /opt/Qt/5.12.3/gcc_64/lib/./libQt5Network.so.5
libQt5Core.so.5 => /opt/Qt/5.12.3/gcc_64/lib/./libQt5Core.so.5
...{noformat}
 
 But this dependency is not exported (from QTPATH/mkspecs/modules/qt_lib_scxml.pri):
{noformat}
QT.scxml.depends = core
{noformat}
qml is missing here. Thus, Qbs does not correctly set up the dependencies of the QtScXml module.

This bug is present at least since Qt 5.12, but it is hidden in projects having already a dependency on qml.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0nq4n:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[UWP]: Add support for grabWindow(),QTBUG-78730,285535,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,,andysh,andysh,24 Sep '19 14:41,06 Mar '20 10:37,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,QPA,,,,0,Reported_by_support_standard,,,"[UWP]: Add support for grabWindow(), this should be possible via the Windows.Graphics.Capture API which was added in Windows 10 v1803.

https://docs.microsoft.com/en-us/windows/uwp/audio-video-camera/screen-capture",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0m8rz:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
QtQuick - Need an image animator for transition between states,QTBUG-81292,291422,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,w00t,jeanmilost,jeanmilost,10 Jan '20 12:20,06 Mar '20 08:59,18 Feb '21 09:41,,5.13.2,,,,,,,,,,,,,,,,,,,,,,Quick: Other,,,,0,,,,"With Qt Quick, I created a custom button which looks like that:

[!https://i.stack.imgur.com/LFBQY.png!|https://i.stack.imgur.com/LFBQY.png]

This button also contains several states (default, hover, pressed), and the transition between each states is animated. I found a way to animate each properties easily with the Qt Quick engine, except for the image one. Indeed, I want to animate the image transition, by performing a crossfade between states.

However I couldn't found a such animator for images. The only way I found was to add 3 images to my button, one for each states, and to animate their respective opacity.

Below is the code for my buttons:
{code:java}
Button
{
    property bool hoveredBtn: false
    property bool pressedBtn: false

    id: btAnimStateDemo
    height: 40
    anchors.right: parent.right
    anchors.rightMargin: 5
    anchors.left: parent.left
    anchors.leftMargin: 5
    anchors.top: parent.top
    anchors.topMargin: 290
    state: ""DEFAULT""

    // the button background
    background: Rectangle
    {
        id: btAnimStateDemoBg
        anchors.fill: parent
    }

    // the button text
    Text
    {
        id: btAnimStateDemoText
        text: qsTr(""A button showing animated states (default, hovered, pressed)"")
        renderType: Text.NativeRendering
        font.bold: true
        horizontalAlignment: Text.AlignHCenter
        verticalAlignment: Text.AlignVCenter
        anchors.fill: parent
    }

    Image
    {
        id: btAnimStateDemoDefaultImage
        width: 30
        height: 30
        anchors.left: parent.left
        anchors.leftMargin: 5
        anchors.bottom: parent.bottom
        anchors.bottomMargin: 5
        anchors.top: parent.top
        anchors.topMargin: 5
        opacity: 1.0
        source: ""Resources/Palette.svg""
    }

    Image
    {
        id: btAnimStateDemoHoverImage
        width: 30
        height: 30
        anchors.left: parent.left
        anchors.leftMargin: 5
        anchors.bottom: parent.bottom
        anchors.bottomMargin: 5
        anchors.top: parent.top
        anchors.topMargin: 5
        opacity: 0.0
        source: ""Resources/Smile.svg""
    }

    Image
    {
        id: btAnimStateDemoPressedImage
        width: 30
        height: 30
        anchors.left: parent.left
        anchors.leftMargin: 5
        anchors.bottom: parent.bottom
        anchors.bottomMargin: 5
        anchors.top: parent.top
        anchors.topMargin: 5
        opacity: 0.0
        source: ""Resources/Woman.svg""
    }

    // the component state array
    states:
    [
        State
        {
            name: ""DEFAULT""
            PropertyChanges { target: btAnimStateDemoBg; color: ""green""}
            PropertyChanges { target: btAnimStateDemoBg; radius: 4}
            PropertyChanges { target: btAnimStateDemoDefaultImage; opacity: 1.0}
            PropertyChanges { target: btAnimStateDemoHoverImage; opacity: 0.0}
            PropertyChanges { target: btAnimStateDemoPressedImage; opacity: 0.0}
        },
        State
        {
            name: ""HOVERED""
            PropertyChanges { target: btAnimStateDemoBg; color: ""red""}
            PropertyChanges { target: btAnimStateDemoBg; radius: 10}
            PropertyChanges { target: btAnimStateDemoDefaultImage; opacity: 0.0}
            PropertyChanges { target: btAnimStateDemoHoverImage; opacity: 1.0}
            PropertyChanges { target: btAnimStateDemoPressedImage; opacity: 0.0}
        },
        State
        {
            name: ""PRESSED""
            PropertyChanges { target: btAnimStateDemoBg; color: ""blue""}
            PropertyChanges { target: btAnimStateDemoBg; radius: 15}
            PropertyChanges { target: btAnimStateDemoDefaultImage; opacity: 0.0}
            PropertyChanges { target: btAnimStateDemoHoverImage; opacity: 0.0}
            PropertyChanges { target: btAnimStateDemoPressedImage; opacity: 1.0}
        }
    ]

    // the matching transitions between states
    transitions:
    [
        Transition
        {
            from: ""*""; to: ""DEFAULT""
            ColorAnimation { property: ""color""; easing.type: Easing.Linear; duration: 1000 }
            NumberAnimation { properties: ""radius, opacity""; easing.type: Easing.Linear; duration: 1000 }
        },
        Transition
        {
            from: ""*""; to: ""HOVERED""
            ColorAnimation { property: ""color""; easing.type: Easing.Linear; duration: 1000 }
            NumberAnimation { properties: ""radius, opacity""; easing.type: Easing.Linear; duration: 1000 }
        },
        Transition
        {
            from: ""*""; to: ""PRESSED""
            ColorAnimation { property: ""color""; easing.type: Easing.Linear; duration: 1000 }
            NumberAnimation { properties: ""radius, opacity""; easing.type: Easing.Linear; duration: 1000 }
        }
    ]

    // the mouse area which will apply the correct state in relation to the current mouse status
    MouseArea
    {
        anchors.fill: parent
        hoverEnabled: true

        onEntered: {btAnimStateDemo.state = ""HOVERED""; btAnimStateDemo.hoveredBtn = true;}
        onExited: {btAnimStateDemo.state = btAnimStateDemo.pressedBtn ? ""PRESSED"" : ""DEFAULT""; btAnimStateDemo.hoveredBtn = false;}
        onPressed: {btAnimStateDemo.state = ""PRESSED""; btAnimStateDemo.pressedBtn = true;}
        onReleased: {btAnimStateDemo.state = btAnimStateDemo.hoveredBtn ? ""HOVERED"" : ""DEFAULT""; btAnimStateDemo.pressedBtn = false;}
    }
}
{code}
The above code works well, and reaches the purpose I planned, but is a little complicated from my point of view. It would be wonderful if an animator like {{NumberAnimation}} or {{ColorAnimation}} would exist for the images, but I found none.
 It would be possible to add a such animator? (And eventually allow this animator to support several type of transition effects, like crossfade, morphing, ..., or even custom transitions?)

*NOTE* this issue is also followed here:

[https://stackoverflow.com/questions/59667136/qt-quick-what-is-the-best-way-to-animate-an-image-transition-while-component-s]","Windows 10 Pro 64 bit, version no. 1809. Computer Intel(R) Core(TM) i7-6700K CPU @ 4.00GHz, 16.0 GB RAM",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0n6k7:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
$PLATFORM_deployqt scripts should have a --auto-qrc-qml option,QTBUG-80548,289747,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,,jasonapk,jasonapk,04 Dec '19 22:03,06 Mar '20 08:57,18 Feb '21 09:41,,5.13.2,,,,,,,,,,,,,,,,,,,,,,Build tools: macdeployqt,Build tools: windeployqt,,,1,,,,"Reworded from the interest mailing list:
It would be nice if the deploy script would scan the  project's .qrc files and auto add all the QML files(-auto-qrc-qml flag). That would be a preprocessing that would scan the qrc files and invoke the command again with the filled --qmldir or --qml. That would be fairly easy to even make such a script that would inject those before calling the windeployqt.

In fact, I would invert the switch, make -auto-qrc-qml the default and have an option to disable it.

Question: does this need to include .js files too?

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0mwy7:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"05 Dec '19 04:26;kkohne;The {{*deployqt}} tools are right agnostic to the build system - that is, they don't scan {{.pro}} or {{CMakeFiles.txt}} files, which would be required to find the {{.qrc}} files.

Anyhow, the build system does know about the {{.qrc}} files; we could provide e.g. a CMake function that does call {{*deployqt}} with the right arguments (including paths to all .qml or .qrc files that are included in the target).

So from the viewpoint of the {{*deployqt}} tools, all they need to support this is a way to specify single .qml files or .qrc files as input.","05 Dec '19 19:35;jeromegodboutamotus;Could a pre launcher script be made available that would do just that, scan the solution and fill the --qml and --qmldir and call the proper *deployqt script? That sound fairly easy to do and could be added aside from the deploy script.","05 Dec '19 20:03;jasonapk;I think Kai is saying that it can be done via qmake which generate a ""make deploy"" target, which the deployqt with the right options specifying .qrc amd qml files, and invoke it?",,,,,,,,,,,,,,,,,,,
Allow developer to completely disable touch events for Apple tvOS,QTBUG-72461,271074,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,,steve.k.chiu,steve.k.chiu,11 Dec '18 05:47,06 Mar '20 08:45,18 Feb '21 09:41,,5.12.0,,,,,,,,,,,,,,,,,,,,,,QPA,,,,0,,,,"We are trying to port some apps to Apple tvOS, the process went well except event processing.

It appears any tap on the touch area of the remote control would translate into key event (up/down/left/right) and touch events.

The touch events causes more trouble than it worth, ListView / Popup no long work properly with the translated Touch/Mouse event, because the first tap is always on center on screen, and it may hit any UI item in that way.

Our app is already working good on keys, it works great on Android with remote control, thus it would be great to completely disable the touch events on tvOS (an environment variable would be fine).

Any apps want to receive touch events should be able to use Input Handler (I think it is using other event dispatcher, no?)

 ","Apple tvOS 12.1

Qt 5.12",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,iOS/tvOS/watchOS,,,,,,"0|i0jzlr:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"11 Dec '18 10:04;vestbo;Adding a global app event filter to drop those touch events should work as a workaround I think.",,,,,,,,,,,,,,,,,,,,,
Way for Qt to store username and password in a safe way.,QTBUG-82691,294880,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,laknoll,tero.pelkonen,tero.pelkonen,05 Mar '20 12:46,05 Mar '20 12:46,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Other,,,,0,reported_by_support_standard,,,User has requested a feature to Qt to store usernames and passwords safely.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0np5j:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[Qt6] Allow properties to be made readonly at runtime.,QTBUG-82664,294770,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt.team.quick.subscriptions,adrian.gabureanu,adrian.gabureanu,04 Mar '20 09:39,04 Mar '20 09:39,18 Feb '21 09:41,,6.0,,,,,,,,,,,,,,,,,,,,,,QML: Declarative and Javascript Engine,,,,0,,,,"A readonly binding cannot be broken. The value of the property will be exclusively modified by the binding evaluation engine. It will act as an guard against broken bindings.
{code:xml|title=Possible Syntax => Qt.readonlyBinding(..)}
	
property int a: 12
property int b: a

Component.onCompleted: {
 console.log(""Value of b: "",b); // Value of b: 12
 b = Qt.readonlyBinding( () => a+20 );
 b = 50;  // TypeError: Cannot assign to readonly property ""b""
 console.log(""Value of b: "",b); // Value of b: 32
 
 myComponent.createObject(root,{ ""height"": Qt.readonlyBinding( () => root.height/10 ), ""width"": Qt.readonlyBinding( () => root.width/10 ) });
}
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0non3:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Clear checked in QButtonGroup,QTBUG-82641,294716,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt.team.quick.subscriptions,tero.pelkonen,tero.pelkonen,03 Mar '20 11:05,03 Mar '20 11:17,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Widgets: Widgets and Dialogs,,,,0,reported_by_support_standard,,,"QButtonGroup Class could have a function that would clear out the selections or setCheckedId() which could be given value -1 if none of the buttons are selected.

 

User use case:

QButtonGroup has two checkboxes added. Group is wanted to keep exclusive. Is one checkbox button is clicked twice the group should be unchecked.

Current example workaround attached.",,,,,,,,,,,,,,,,,,,"03 Mar '20 11:04;tero.pelkonen;CheckButtonGroup.zip;https://bugreports.qt.io/secure/attachment/92587/CheckButtonGroup.zip",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0nobr:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Update function for Fonts after substitution.,QTBUG-82478,294391,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,esabraha,tero.pelkonen,tero.pelkonen,26 Feb '20 07:42,28 Feb '20 13:37,18 Feb '21 09:41,,5.12.7,5.13.2,5.14.0,,,,,,,,,,,,,,,,,,,,GUI: Font handling,,,,1,reported_by_support_standard,,,"User has requested an update function for Qt application after substituting Fonts.

It could be similar as QQmlEngine::retranslate() but for substituted fonts.

Customer use case example has been attached and explanation:

""

_Download the following fonts and unzip them in your ""~/.fonts"" Linux_
_folder:_
_* https://noto-website-2.storage.googleapis.com/pkgs/NotoSans-hinted.zip_
_* https://noto-website-2.storage.googleapis.com/pkgs/NotoSansCJK-_
_Black.ttc.zip_

_Start the application. You will send 3 texts: first text must change according_
_to the substitution and the 2 other texts are for reference._

_Here what happened:_
_* in ExposedObject constructor, I create a first font substitution from_
_""Noto Sans ExtCond Blk"" to the japanese variant of the Noto Sans_
_CJK font: ""Noto Sans CJK JP Black""_
_* when I press a key in qml app, I change the substitution from JP to SC and_
_I force the refresh of the text with a binding_
_* if you define QSG_RENDER_LOOP to ""threaded"" or do not define it,_
_it works_
_* if you define QSG_RENDER_LOOP to ""basic"", it fails applying the_
_substitution_

_You can see in function `QFontPrivate::engineForScript(int script)` that the_
_'engineData' is 'unref' and created again if the fontCacheId do not match the_
_fontCacheId of the current thread._

_With the threaded render loop, when I press on a key, the render loop calls_
_this function with a engineData with the wrong fontCacheId, so it creates a_
_new engineData with correct fallback families data._

_With the basic render loop, when I press on a key, the engineData has a_
_correct fontCacheId, so it does not create a new engineData with correct_
_fallback families data. It keeps the old fallback families data and continues_
_displaying with the wrong font._

_Even if I do not use the basic render loop with my EGLFS application on my_
_embedded linux target, I have very weird behaviors with the substitution_
_mechanism which is probably due to the asynchronous work with the threaded_
_render loop._

""",,,,,,,,,,,,,,,,,,,"26 Feb '20 07:40;tero.pelkonen;test_font_substitution.zip;https://bugreports.qt.io/secure/attachment/92412/test_font_substitution.zip","28 Feb '20 13:33;agroyer;test_font_substitution_v2.tar.gz;https://bugreports.qt.io/secure/attachment/92501/test_font_substitution_v2.tar.gz",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0nmfr:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"28 Feb '20 13:37;agroyer;Here is another use case with a singleton qml Theme file.  [^test_font_substitution_v2.tar.gz] 

With a singleton qml Theme file, after a font substitution call during the lifetime of the product, the substitution is not applied for newly created Text qml elements since the font are not re-created because of the singleton methodology.
",,,,,,,,,,,,,,,,,,,,,
"Include option for error bars in QtCharts (line series, scatter series, etc.)",QTBUG-82537,294470,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,e0348803,ringlery,ringlery,26 Feb '20 16:37,26 Feb '20 16:37,18 Feb '21 09:41,,5.15.0 Alpha,,,,,,,,,,,,,,,,,,,,,,Charts,,,,0,,,,"An option to include error bars (in both dimensions) of 2D series would be incredibly useful, particularly in scientific plots (see attachment for example).

!DT1_vs_DT7_eff.png!",,,,,,,,,,,,,,,,,,,"26 Feb '20 16:35;ringlery;DT1_vs_DT7_eff.pdf;https://bugreports.qt.io/secure/attachment/92435/DT1_vs_DT7_eff.pdf","26 Feb '20 16:37;ringlery;DT1_vs_DT7_eff.png;https://bugreports.qt.io/secure/attachment/92434/DT1_vs_DT7_eff.png",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0nmxb:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Adding a property to set flicking velocity ,QTBUG-82479,294393,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt.team.quick.subscriptions,nagrohn,nagrohn,26 Feb '20 07:51,26 Feb '20 08:59,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Quick: Core Declarative QML ,,,,0,reported_by_support_standard,,,"This is about Flickable QML component. 
     
Currently, the amount of scroll (i.e. velocity) can be set by changing maximumFlickVelocity property.
If you change maximumFlickVelocity to 10, 100, 1000.., the Flick velocity increases accordingly.
    
However, the velocity no longer seems to change over 10000.
That is, the result of setting 10000 and 10000000 look the same.
    
The property requested here enables the app to control the maximum of velocity



",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0nmg7:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add toPlainText method to QQuickText,QTBUG-82450,294314,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt.team.quick.subscriptions,dkdai,dkdai,24 Feb '20 22:38,25 Feb '20 22:21,18 Feb '21 09:41,,5.14.1,,,,,,,,,,,,,,,,,,,,,,Quick: Core Declarative QML ,,,,0,,,,"Provide a way to check the plain text characters of qquicktext, excluding characters that are markup. Ideally exposing something like QTextDocument::toPlainText. Our use case is to truncate certain text fields based on a max character count.

A not so nice workaround is to use a parallel QTextDocument instance, but this would only yield correct results in case of RichText, not in case of StyledText:

{code}
doc = QTextDocument()
doc.setHtml(markupText)
text = doc.toPlainText()
{code}
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0nm0f:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add search filter box for fonts,QTBUG-82467,294365,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt.team.quick.subscriptions,alexde,alexde,25 Feb '20 15:00,25 Feb '20 15:03,18 Feb '21 09:41,,5.14.1,,,,,,,,,,,,,,,,,,,,,,Widgets: Widgets and Dialogs,,,,1,,,,"Having hundreds of fonts including variants installed, makes looking for a specific one very cumbersome:

a) One can scroll to a font name.
b) One can blindly type it. 

Therefore I suggest to implement 

c)  a search filter box. :)",KDE Plasma,,,,,,,,,,,,,,,,,,"25 Feb '20 15:02;alexde;Fonts_Dialog.png;https://bugreports.qt.io/secure/attachment/92401/Fonts_Dialog.png",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0nmav:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
QColor lighter and darker methods do not have color model specified in naming,QTBUG-82296,293761,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,vgt,aa13q,aa13q,18 Feb '20 14:47,25 Feb '20 10:58,18 Feb '21 09:41,,4.3.5,4.4.3,4.5.3,4.6.3,4.7.4,4.8.x,5.1.1,5.10,5.11,5.12,5.13,5.14,5.15,5.2.1,5.3.2,5.4.2,5.5.1,5.6,5.7,5.8,5.9,,GUI: Painting,Quick: Core Declarative QML ,,,0,,,,"[QColor|https://doc-snapshots.qt.io/qt5-dev/qcolor.html] has {{darker}} and {{lighter}} methods since Qt4.3, and my hypothesis is that their naming is not intuitive enough.

([Slightly related issue|https://bugreports.qt.io/browse/QTBUG-73129])

In my opinion, contradictory is here in the naming because the word {{lighter}} implies HSL (lightness) color model usage.

But [the actual methods utilize the HSB palette|https://code.woboq.org/qt5/qtbase/src/gui/painting/qcolor.cpp.html#2812] (aka HSV), which is not equivalent to HSL.

To paraphrase, we have darker and lighter methods that work in HSB (brightness) not HSL (lightness) palette. As expected from HSB, we are getting a wildly bright color (for example, acid green) when twisting the input parameter to the maximum ceteris paribus.

At the same time, when we are talking about HSL (lightness) color model, it is expected that twisting the input parameter to the maximum leads to white color ceteris paribus.

Does it make sense to propose re-wording the methods? �

Similar to the other QColor naming, for the old ones ({{darker}} and {{lighter}}) give new names like {{hsvDarker}} and {{hsvBrighter}} saving the current logic. If my reasoning is right, it also makes sense to propose new {{hslDarker}} and {{hslLighter}} methods.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0njhb:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"19 Feb '20 18:10;aa13q;Provided CR request: [https://codereview.qt-project.org/c/qt/qtbase/+/291251]

Future work could be to fix wrappers at qtdeclarative too (./src/quick/util/qquickglobal.cpp) and qtquick3d probably.","21 Feb '20 13:08;vgt;Intersting!

However I disagree that the words lighter/darker imply color model: they have perfectly well known everyday meanings. They were originally introduced, I believe, primarily to work on rgb colors, as a handy thing when doing widget palettes and gui themes/styles.

So, it may well be that it can be useful to add new HSL and HSV specific methods (and to help judge on that, it would be helpful to provide a test app that demonstrates their use and effect). But I do not see a good enough reason to force all existing code that uses the existing methods to have to change because of that. ","25 Feb '20 10:58;aa13q;Thank you for the fast feedback,  Eirik!
I agree that my initial statement (about the words lighter/darker should imply the color model) is not right or at least is not clear. I also agree that the current method deprecation is not reasoned enough.
I'm going to update the code review request to remove the deprecation keywords. And I'm going to provide the example where HSL and HSV specific methods could be helpful (I'm going to provide a minimal application, where I'm trying to control the contrast of the text areas backgrounds).",,,,,,,,,,,,,,,,,,,
Be able to get the TableView's column width information ,QTBUG-82436,294250,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,richard,andysh,andysh,24 Feb '20 10:04,24 Feb '20 12:21,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Quick: Other,,,,1,Reported_by_support_standard,,,"Be able to get the TableView's column width information, this is so that when you are making a header you don't have to depend on using a columnWidthProvider or calculating the implicitWidth yourself if you don't wish to use this approach.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0nlmn:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"24 Feb '20 10:26;srutledg;They should try HeaderView in 5.15.","24 Feb '20 11:27;andysh;Is there docs for that somewhere? It sounds viable from that name alone at least :)","24 Feb '20 11:58;srutledg;https://doc-snapshots.qt.io/qt5-5.15/qml-qtquick-controls2-horizontalheaderview.html and https://doc-snapshots.qt.io/qt5-5.15/qml-qtquick-controls2-verticalheaderview.html

So far there are still some features missing though: resizing by dragging, and clicking to sort, at least.  It remains to be seen how easy it will be for applications to add such features for themselves, since this is brand-new, just barely made the feature freeze deadline, and hasn't been used much yet.

I was trying to prototype such features a while back; https://github.com/ec1oud/qps/blob/master/qtquick/content/SortableColumnHeading.qml is what I came up with at the time.  It might be possible to develop such an example with the new header views, but we didn't get that far yet.","24 Feb '20 12:20;andysh;Thanks, I was looking in the QtQuick docs for it which is why I did not find it. I think this would at least provide the use case as it would make it possible to have the header resize and so on and being a subclass of TableView then it has the delegate approach, so the information is obtainable then.

That said, it would still be nice to have it available from TableView on the offchance you are doing your own header entirely not based on TableView.",,,,,,,,,,,,,,,,,,
Allow the handling of mouse/touch events in a direction that the SwipeView is not monitoring to be passed on to the item underneath,QTBUG-80761,290223,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt.team.quick.subscriptions,andysh,andysh,13 Dec '19 07:20,24 Feb '20 07:55,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Quick: Controls 2,,,,1,Reported_by_support_standard,,,Allow the handling of mouse/touch events in a direction that the SwipeView is not monitoring to be passed on to the item underneath. That way if the SwipeView is in a Flickable then vertical scrolling can still occur if the SwipeView only cares about horizonal swipes.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0mznb:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"23 Feb '20 15:32;dhess;I've also run into this.

Note in Qt 5.13.2, it appears to be ok if you use the mouse to drag SwipeView and the SwipeView is set to allow the orthogonal direction. However, with two finger scrolling events, the orthogonal event never passes to the flickable.","24 Feb '20 07:55;srutledg;Please provide sample QML that demonstrates what you are wishing for.

By two-finger scroll, you mean the QWheelEvents that you get from the touchpad / trackpad, right?
",,,,,,,,,,,,,,,,,,,,
collapseRecursively and collapseToDepth missing in QTreeView,QTBUG-82353,293868,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt.team.quick.subscriptions,uiohbgq,uiohbgq,19 Feb '20 16:59,23 Feb '20 10:45,18 Feb '21 09:41,,5.14.0 RC2,,,,,,,,,,,,,,,,,,,,,,Widgets: Itemviews,,,,0,,,,"QTreeView offers expandAll and inversely collapseAll.

 

It also offers expandToDepth and expandRecursively, however, the inverse methods collapseToDepth and collapseRecursively are missing.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0nk3r:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"23 Feb '20 10:45;chehrlic;Can you provide a patch for it?",,,,,,,,,,,,,,,,,,,,,
Make qml layouts restrict parent window from being resized smaller than layout minimum size,QTBUG-82366,293951,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt.team.quick.subscriptions,miikapernu,miikapernu,20 Feb '20 09:09,20 Feb '20 13:08,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Quick: Layouts,,,,0,Reported_by_support_standard,,,"*Current behavior:*

Window with a layout can be resized smaller than the minimum size of the layout by default. This has to be changed manually.

{code}
import QtQuick 2.12
import QtQuick.Window 2.12
import QtQuick.Layouts 1.12

Window {
    visible: true
    width: 640
    height: 480
    title: qsTr(""Hello World"")

    RowLayout{
        id: layout
        anchors.fill: parent

        Rectangle{
            color: ""red""

            Layout.minimumWidth: 100
            Layout.minimumHeight: 100
        }

        Rectangle{
            color: ""green""

            Layout.minimumWidth: 100
            Layout.minimumHeight: 100
        }

        Rectangle{
            color: ""blue""

            Layout.minimumWidth: 100
            Layout.minimumHeight: 100
        }
    }
}
{code}

*Desired behavior:*

Window with a layout automatically considers the layout size constraints and prevents Window from being resized smaller than the contained layout minimum size.",,,,,,,,,,,,,,,,,,,"20 Feb '20 09:40;miikapernu;qtbug82366.zip;https://bugreports.qt.io/secure/attachment/92223/qtbug82366.zip",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0nkjb:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"20 Feb '20 09:27;mitch_curtis;Can you please provide a code example?","20 Feb '20 09:41;miikapernu;[~mitch_curtis] attached a simple example","20 Feb '20 09:56;mitch_curtis;Doing this would require Window to ""know about"" Layouts. Not to mention that you can have several top-level layouts if you wanted to, so it's not clear which one Window should use in that case.
","20 Feb '20 12:27;declan;How about doing it like the QWidget Layouts? They work better it seems, however they're accomplishing it behind the scenes","20 Feb '20 13:08;mitch_curtis;I'm not sure how widgets does it internally. Maybe [~smd] knows and can comment about that. However, I do know that in widgets there is a single layout per window, so it's much easier there.

I see that QWindow already has API for minimum size etc.:

https://doc.qt.io/qt-5/qwindow.html#minimumSize

So we could just expose those properties to QML.

",,,,,,,,,,,,,,,,,
Expose A Way To Draw Elided Item Text with QStyle,QTBUG-82359,293900,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,esabraha,elveatles,elveatles,20 Feb '20 03:09,20 Feb '20 03:09,18 Feb '21 09:41,,5.14.1,,,,,,,,,,,,,,,,,,,,,,GUI: Font handling,GUI: Look'n'Feel,GUI: Painting,GUI: Text handling,0,,,,"There seems to be no easy way to draw elided item text inside of a QStyledItemDelegate with QStyle. If all I want to do is draw text in a tree/table view cell exactly as the default implementation would, but just change the position or width of the text, it requires a TON of boilerplate code to get that working.

 

I tried copying the source code for the default implementation of [QStyledItemDelegate::paint|https://code.woboq.org/qt5/qtbase/src/widgets/itemviews/qstyleditemdelegate.cpp.html#_ZNK19QStyledItemDelegate5paintEP8QPainterRK20QStyleOptionViewItemRK11QModelIndex], but even this resulted in a dead-end. This method calls [QStyle::drawControl|https://code.woboq.org/qt5/qtbase/src/widgets/styles/qcommonstyle.cpp.html#2312] with the QStyle::CE_ItemViewItem case. This then calls d->viewItemDrawText(p, vopt, textRect); The problem with that is it's calling private code. I don't have any way of drawing the text using the Qt way other than messing with Qt internals or copying source code which can become outdated with a new Qt release.

 

Please expose a way to simply draw elided text for a tree/table view item.","Windows 7

Python 2.7

PySide2/PySide/PyQt5/PyQt4",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0nk9r:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
qchart axis enhancement,QTBUG-81984,293125,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,e0348803,streamer,streamer,09 Feb '20 14:47,17 Feb '20 15:22,18 Feb '21 09:41,,5.12.6,,,,,,,,,,,,,,,,,,,,,,Charts,,,,1,,,,"QValueAxis and QCategoryAxis automatically change axis labels to something like ""23.."" or ""..."" if number of ticks is larger than 15 or 20.   It is not the right way to reformat the tick label on the basis of number of ticks.  It is because if the chart window is large, there is enough space to display large amount of tick labels.   The correct way is to check the space between ticks.

 

QCategoryAxis only takes unique labels.   If the label already exists, it will be ignore.  Duplicate labels should be allowed.   Axis is used to display a label.  The label can be anything.  It does not have be unique.       One example is timestamp.   Because QDateTimeAxis does not support discrete timestamps.  Users have to use QCategoryAxis. Users can print timestamp as ""Month/Day/Year"", ""Month/Day"",  or ""Hour:Minute"".  Even though timestamps are all unique, there can be duplicate labels.  Users may choose to print year only when there is a year change between ticks.  

 

It would be nice to add an index to QCategoryAxis so that each label can customized individually.  The index will the index of the data series.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0nfpj:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Qt Designer :  Add QStackedLayout / QStackWidget::StackingMode,QTBUG-82239,293567,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,kleint,doug_rogers,doug_rogers,16 Feb '20 18:10,17 Feb '20 08:07,18 Feb '21 09:41,,5.14.1,,,,,,,,,,,,,,,,,,,,,,Tools: Designer,,,,0,,,,"Please add QStackLayout to QtCreator and Designer.  QStackWidgets is part of the tools, but there is no access to the layout to change its function.  Specifically, I wish to change the stack mode of the QStackWidgets item.  Alternatively, access to QStackLayout could be provided in the QStackWidget class.",Windows x64,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Windows,,,,,,"0|i0nidj:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Make it possible to position a BottomEdge Drawer above the footer (or elsewhere),QTBUG-82170,293526,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,mitch_curtis,srutledg,srutledg,14 Feb '20 12:36,14 Feb '20 12:36,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Quick: Controls 2,,,,0,,,,"See attached.  The Drawer is attached to the bottom edge of the window, and opens in a way that covers up content in the footer; but it might be nice to be able to change its y position so that it covers the contentItem but not the footer.  

Setting y doesn't work.  Changing parent to contentItem makes it disappear.
",,,,,,,,,,,,,,,,,,,"14 Feb '20 12:36;srutledg;Screenshot 2020-02-14 at 13.36.42.png;https://bugreports.qt.io/secure/attachment/92068/Screenshot+2020-02-14+at+13.36.42.png","14 Feb '20 12:36;srutledg;bottomDrawer.qml;https://bugreports.qt.io/secure/attachment/92067/bottomDrawer.qml",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0ni4f:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Make it possible to have finer control over font substitution,QTBUG-82160,293498,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,esabraha,andysh,andysh,14 Feb '20 06:26,14 Feb '20 06:26,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,GUI: Font handling,,,,1,Reported_by_support_standard,,,"Currently font substitution is done purely on family name, so if that family does not exist then it falls back to another family. What is requested is that it takes the style name into account as well, so if the family + style does not exist then it is possible to provide a different substitution to fall back to a different family + style. For example:

If Noto Sans with Condensed Black does not exist then it could be substituted with Noto Sans CJK JP with Black.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0nhy7:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Be able to have an event automatically propagate up to a parent state machine if it is not handled by the child state machine,QTBUG-82141,293464,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,jkobus,andysh,andysh,13 Feb '20 13:05,13 Feb '20 13:05,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,XML: SCXML,,,,0,Reported_by_support_standard,,,Be able to have an event automatically propagate up to a parent state machine if it is not handled by the child state machine. Currently this needs to be done manually if the child state machine is unchanged by the event. ,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0nhr3:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Extend QObjectPicker::entered/exited to include the pick event so that the viewport it is entering/exiting can be obtained,QTBUG-82118,293424,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,seanharmer,andysh,andysh,13 Feb '20 06:18,13 Feb '20 06:18,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Qt3D,,,,0,Reported_by_support_standard,,,Extend QObjectPicker::entered/exited to include the pick event so that the viewport it is entering/exiting can be obtained,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0nhi7:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Smarter mouse motion event compression in Qt ,QTBUG-82056,293346,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,srutledg,ts,ts,12 Feb '20 10:35,12 Feb '20 10:36,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,"GUI: Basic Input System (keyboard, mouse, touch)",,,,0,,,,"QTBUG-44964 added AA_CompressHighFrequencyEvents, but it is not a very good solution as applications frequently do not want to process events at full frequency, but would like to receive information about the full motion of the mouse pointer. The solution is to compress the delivery of mose motion events, but include information about the compressed motion events by adding API like this:
{code:java}
class QMouseEvent : public QInputEvent {
public:
    ...
    QList<QPoint> compressedPositions();
    QList<QPoint> compressedGlobalPositions();
    ...
};
{code}
I suggested the same in a comment on QTBUG-44964 but since it could not easily be added without breaking the ABI, it never got any further. I am adding this issue now to have it considered for Qt 6.",,,,,,,,,,,,,,,QTBUG-44964,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0nh0v:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Pen styles support for Qt Charts in OpenGL mode,QTBUG-81960,293060,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,e0348803,poikelin,poikelin,07 Feb '20 12:03,10 Feb '20 08:32,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Charts,,,,2,Reported_by_support_standard,,,"OpenGL mode does not support pen styles, such as dash line. These would be technically possible though.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0nfcn:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"10 Feb '20 08:31;asperamanca;I have a use case where charts are not performing well enough with OpenGL disabled (too many vertices), but where curves still need to be able to display dashed lines, e.g. to mark a change of status behind the underlying data. As it is now, I cannot use Charts for this use case, because it either performs badly, or it does not offer dashed lines.

Back in the day, with OpenGL 1.1, I solved this by creating a series of quads tuned to the current resolution of the drawing area, and remembering the ""painting"" or ""not painting"" state beyond single vertices. That way, I could reliably draw dashed lines of any width required with any dash length (theoretically also custom dash) even over clusters of points. It ran fluently with 100k vertices and hardware acceleration disabled.",,,,,,,,,,,,,,,,,,,,,
Allow configuring a global QTestLib timeout,QTBUG-81979,293118,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,macadder,mitch_curtis,mitch_curtis,08 Feb '20 13:46,08 Feb '20 13:47,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Testing: qtestlib,,,,0,,,,"Currently 5000 ms is hard-coded in various places in qtestlib. In addition to that, qtestlib will actually double that value in order to check if a longer timeout value would be required and inform the user of it. So, each time QTRY_VERIFY/QTRY_COMPARE times out, it takes a full 10 seconds to do so.

That might be fine for whatever cases it was originally written for, but in the majority of my tests, it's just wasting my time. In most cases I do actually need to wait for it to finish because I don't know which check it failed for if I kill the test manually.

I would like to be able to configure the default value once (e.g. a Qt configure argument) and special-case the longer waits manually with QTRY_VERIFY_WITH_TIMEOUT, so that my code isn't full of QTRY_VERIFY_WITH_TIMEOUT calls, as QTRY_VERIFY_WITH_TIMEOUT is a very long name. :) Note that an application argument would be kinda annoying, as it would have to be set every time someone sets their project up in Creator. Another possibility would be a static setter in e.g. QTest.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0nfnz:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[Accessibility] QtQuick Controls 1.0 TreeView: the Accessibility tree needs to match the parent-child hierarchy of the tree (not a flat list),QTBUG-81920,292929,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,frederik,cosminp,cosminp,06 Feb '20 01:29,06 Feb '20 01:29,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,GUI: Accessibility (a11y),,,,0,,,,"The Accessibility tree of a TreeView shows up as a flat list instead of the reflecting the actual tree.

This is a result of TreeView being built on top a ListView.

A possible fix would involve overloading the functionality in QAccessibleQuickItem to filter the children() of TreeItem to the children object in the TreeView instantiator that are children of the given TreeItem in the tree model hierarchy. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,macOS,Windows,,,,,"0|i0nen3:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Keeping the screen active during periods of user inactivity,QTBUG-81907,292904,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,laknoll,hyperquantum,hyperquantum,05 Feb '20 13:32,05 Feb '20 15:00,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Other,,,,1,,,,"Some kinds of applications, like presentation software or audio/video players, require the display to be kept active during long periods without user input. But most systems will turn off the display or go to sleep when they detect no keyboard/mouse activity for some time, in order to conserve power. So an application must be able to inform the system that it is active even during times without user interaction.
h3. Proposal:

Add an API that allows a GUI application to prevent the screen from turning off or the screensaver from kicking in due to user inactivity. The application must be able to turn on or off this functionality when appropriate.

On Windows, this API could use {{SetThreadExecutionState}} behind the scenes.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0neif:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"05 Feb '20 14:18;ibrewster;On Linux, I ended up using a combination of `xset` commands for this, and on MacOS X the `caffeinate` command to accomplish this, meaning that I also had to tailor my code depending on which OS I was running on. Not saying that was the best approach - there may be system C API's I could have called instead, for example, rather than just running external commands.","05 Feb '20 15:00;hyperquantum;I did not really look into an implementation for Linux yet, but a quick search turned up this:

https://stackoverflow.com/questions/31498114/how-to-programmatically-prevent-linux-computer-from-sleeping-or-turning-on-scree

 ",,,,,,,,,,,,,,,,,,,,
Enhancing Qt Lottie functionality,QTBUG-81838,292791,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,reworled,kwpark,kwpark,04 Feb '20 08:34,04 Feb '20 08:34,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Lottie,,,,1,,,,"There are some inquiries from the customer about Lottie-Qt functionalities.

Since we are not supporting all the BodyMovin specification, they are asking the plan on how much they can utilize the BodyMovin animation depending on their timeline.

Also, most of the customers in contact are woking on embedded system so Lottie-Qt working with SW rendering makes them questionable on using it.

Based on this background, like to raise the item
 * The plan to improve the Lottie-Qt to fulfill more Bodymovin sepcifications
 * Would it be possible to make Lottie-Qt working on HW rendering, if so, any plans

Please fill free to share the ideas or questions regarding on more backgrounds.

 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0ndtz:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Allow more control over what is downloaded for a Qt release,QTBUG-81799,292693,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,releaseteam,mitch_curtis,mitch_curtis,02 Feb '20 15:36,02 Feb '20 15:36,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Packaging & Installer,,,,0,,,,"It would be nice to be able to download only what is necessary to build an application (e.g. headers and libraries). Currently documentation and examples are downloaded and there's no way to avoid it. On slow connections this is a bit painful.

What I'm proposing is having check boxes under each release:

* Headers, libraries, etc.
* Examples
* Documentation",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0ndbb:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
bits() and constBits() could mention padding bytes due to alignment,QTBUG-81748,292541,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,vgt,poikelin,poikelin,29 Jan '20 16:40,31 Jan '20 19:22,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Documentation,Image formats,,,1,Reported_by_support_standard,,,"scanLine() has a note about alignment:
https://doc.qt.io/qt-5/qimage.html#scanLine

This could be added to bits() and constBits() too that currently don't say much:
https://doc.qt.io/qt-5/qimage.html#bits

This can lead to surprises if one assumes it contains continuous pixel data.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0ncfj:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"31 Jan '20 19:22;dg0yt;There are no padding bytes... bits() is documented to be equivalent to scanline(0).",,,,,,,,,,,,,,,,,,,,,
Make it possible to change the aspect ratio for a SVG based icon,QTBUG-81529,291944,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt.team.quick.subscriptions,andysh,andysh,20 Jan '20 10:15,30 Jan '20 02:29,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,GUI: Look'n'Feel,Quick: Controls 2,,,0,Reported_by_support_standard,,,"n QtSVG a feature was reverted and indicated to be an opt-in in order to make it possible to keep the aspect ratio when it is rendered (see 3e2823a147b2dca492fece187facfe39f4d33bed in QtSVG - https://codereview.qt-project.org/c/qt/qtsvg/+/286086/3).


Since this feature will be opt-in when a SVG file is rendered, then it would be good if this can be supported by icon rendering so that if the format supports it (such as SVG) then it would pass this on to the renderer. 


This would be relevant both in Qt GUI for QIcon and Qt Quick Controls 2 too for the icon property usage.",,,,,,,,,,,,,,,QTBUG-81008,,,,"28 Jan '20 06:23;miketrahearn;IconScalingTest.zip;https://bugreports.qt.io/secure/attachment/91555/IconScalingTest.zip",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0n93b:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"30 Jan '20 02:29;miketrahearn;Workaround to create an ICON using svg, color it in, AND control its sizing policy.

{code}
import QtQuick.Controls.impl 2.12

ColorImage {
        width: 16
        height: 16

        fillMode: ColorImage.PreserveAspectFit // ensures that if an SVG is not a SQUARE, it will try to be as big as 16x16 without stretching.

        source: ""some path to an svg""
        color: ""red"" // you can change the color freely here. It works the same as IconLabel from the same module.
}
{code}",,,,,,,,,,,,,,,,,,,,,
Add a pageable TableView,QTBUG-81682,292386,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt.team.quick.subscriptions,andysh,andysh,27 Jan '20 08:43,27 Jan '20 11:12,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Quick: Controls 2,,,,0,Reported_by_support_standard,,,"Add a pageable TableView, this would be something that could show a defined number of results in a TableView, such as 20, and then offer pages to go through the rest of the entries in the TableView. An example of this is at:

https://demos.telerik.com/kendo-ui/grid/index",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0nbjb:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"27 Jan '20 09:12;richard;I think this is functionality that can/should be done by creating a proxy model that feeds TableView with a specified number of rows at a time. TableView itself doesn't need any changes, I think. We could offer such a proxy model / wrapper control with QtQuickControls.

That being said, paging table sections this way is IMO very HTML-ish, as a simple technique to avoid loading too much data in one go. And QAIM already has an API that lets you avoid loading more data than what is shown in the view without the need to show ""pages"" in the UI ([https://doc.qt.io/qt-5/qtwidgets-itemviews-fetchmore-example.html]).","27 Jan '20 11:12;andysh;Granted, using QAIM can be used to avoid reading all the data, but from a look and feel point of view then having a means to cycle through pages and to skip ahead would be nice. But it also depends on QAIM being used here which means customizing the model entirely too.

At the very least, it makes for a cool example which would make it easy for people to drop in for those who wanted this.",,,,,,,,,,,,,,,,,,,,
rename positioners to long names Flow -> FlowPositioner,QTBUG-81267,291364,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt.team.quick.subscriptions,tjenssen,tjenssen,09 Jan '20 13:20,27 Jan '20 11:01,18 Feb '21 09:41,,5.14.0 RC2,,,,,,,,,,,,,,,,,,,,,,Quick: Core Declarative QML ,,,,0,,,,"layouts already following this: ColumnLayout, GridLayout, RowLayout

so why are the positioners are different and can we have them with long names in Qt 6

In the QtQuickDesigner we create ids out of these names and in case of Flow it would be flow - which we blacklist to not confuse the user and the program because that is also often a property name.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0n67r:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"09 Jan '20 15:15;srutledg;It might make sense in retrospect, but is it worth the trouble to make users change these in all existing QML code?  We are trying to keep source compatibility as much as possible in Qt 6.  But if we want to change it in Qt 6, we should add the new names now in 5.15, and deprecate the old ones, right?","09 Jan '20 15:27;fabiankosmale;[~srutledg] Not sure whether its a good idea, but I think you can register the same class under both names, and document that the old names are just an alias. That would keep source compatibility, but new code could use the clearer names.","27 Jan '20 11:01;mitch_curtis;{quote}
so why are the positioners are different
{quote}
The positioners were written first. The layout types would have had to distinguish themselves to avoid requiring users to import the module into a namespace to avoid name clashes.

{quote}
In the QtQuickDesigner we create ids out of these names and in case of Flow it would be flow - which we blacklist to not confuse the user and the program because that is also often a property name.
{quote}
I'm a bit confused by this - is this an argument for changing the names, and if so, how? What's the ideal situation and how would that come about by renaming them? Could designer just name them ""flowPositioner"" instead?",,,,,,,,,,,,,,,,,,,
Add Qt Linguist standalone tool to the online installer,QTBUG-81549,291991,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,releaseteam,tpyssysa,tpyssysa,21 Jan '20 07:29,27 Jan '20 06:47,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Packaging & Installer,,,,0,,,,"We offer Qt Linguist as a standalone tool, as creating translations does not require installation of the whole Qt.

Let's add Qt linguist to Qt Online Installer as well. It should be available similarly to design tools, which can be installed and used without installing all Qt libraries as well. This would also improve Qt for MCU developer journey, as Qt for MCU users would benefit installing Qt Linguist from the same place, where they get other MCU tools and libraries. However, still they have no need to install whole Qt. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,QTIFW-1335,9223372036854775807,,,,,,,,,"0|i0n9db:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"26 Jan '20 21:56;ylopes;Having it as part of the Qt Creator installation would be an improvement, but still not completely ideal. The main reasoning here is that translators do not need any other Qt tools or libraries. 

Is the GUI part of Qt Linguist tied to a particular Qt version? (Do you need to use Qt Linguist 5.12 if your application is based on Qt 5.12?) If it is, that could be a problem to release it separately.","27 Jan '20 06:47;andysh;No, you can use any version really, though Qt 6 might change some things, so the version that I released some time back is working fine and will continue to do so throughout the Qt 5 series.",,,,,,,,,,,,,,,,,,,,
TableView: Utilize the headerData() if there is any from a C++ model for the header of the table,QTBUG-81603,292195,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,w00t,andysh,andysh,23 Jan '20 08:37,23 Jan '20 08:37,18 Feb '21 09:41,,5.14.0,,,,,,,,,,,,,,,,,,,,,,Quick: Other,,,,1,Reported_by_support_standard,,,Utilize the headerData() if there is any from a C++ model for the header of the TableView,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0naf3:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Please add a nicer way to return errors,QTBUG-81512,291919,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,thiago,lamefun,lamefun,19 Jan '20 04:57,19 Jan '20 04:57,18 Feb '21 09:41,,5.14.0,,,,,,,,,,,,,,,,,,,,,,Core: Other,,,,0,,,,"There are libraries like [this|https://github.com/TartanLlama/expected], [this|https://www.boost.org/doc/libs/1_72_0/libs/outcome/doc/html/index.html] or [this|https://github.com/ned14/outcome], but I'd like to use something officially supported and endorsed by Qt. What it could look like:
{code:cpp}
QExpected<QByteArray, QString> readFile(const QString &path)
{
    QFile file(path);
    if (!file.open(QIODevice::ReadOnly)) {
        return qUnexpected(file.errorString());
    }
    auto result = file.readAll();    
    if (file.error() != QFileDevice::NoError) {        
        return qUnexpected(file.errorString());   
    }
    return result;
}

auto result = readFile(path);
if (result) {
    qDebug() << result.value();
} else {
    qDebug() << result.error();
}
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0n8xz:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Support GL_PRIMITIVE_RESTART_FIXED_INDEX,QTBUG-81319,291471,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,seanharmer,poikelin,poikelin,13 Jan '20 06:27,13 Jan '20 06:29,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Qt3D,,,,1,Reported_by_support_standard,,,"OpenGL ES doesn't support GL_PRIMITIVE_RESTART, but GL_PRIMITIVE_RESTART_FIXED_INDEX is available in OpenGL ES 3+.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0n6un:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Adding warnings if graphicsApiFilter()->setMajorVersion() and graphicsApiFilter()->setMinorVersion() are not ,QTBUG-81282,291402,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,seanharmer,tero.pelkonen,tero.pelkonen,10 Jan '20 07:54,10 Jan '20 07:54,18 Feb '21 09:41,,5.14.0,,,,,,,,,,,,,,,,,,,,,,Qt3D,,,,0,reported_by_support_standard,,,"User has informed us that he has several application that do work with Qt 5.10/12/13 but on 5.14 they stopped working.

He found out that he needed to add:

 
{code:java}
QTechnique->graphicsApiFilter()->setMajorVersion(3);
QTechnique->graphicsApiFilter()->setMinorVersion(2);{code}
 

to his code to make it work.

This was not required before.

Could a warning be added if setMajorVersion() and setMinorVersion() have not been set?

 

Example project has been added.

FlatColorMaterial.cpp needs to have
{code:java}
  m_flatColorGL3Technique->graphicsApiFilter()->setMajorVersion(3);
  m_flatColorGL3Technique->graphicsApiFilter()->setMinorVersion(2);
{code}
in order to work on 5.14",,,,,,,,,,,,,,,,,,,"10 Jan '20 07:54;tero.pelkonen;INC-1315844.zip;https://bugreports.qt.io/secure/attachment/90974/INC-1315844.zip",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0n6fr:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
qtdeviceutilities/timedatesettings: Use regex in TimezoneFilterModel,QTBUG-81253,291320,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,teemu.holappa,gvkalra,gvkalra,09 Jan '20 07:30,09 Jan '20 08:21,18 Feb '21 09:41,,5.15,,,,,,,,,,,,,,,,,,,,,,Device Creation,Device Creation: Device Utilities,,,0,,,,"Hi,

 

In the current implementation of *timedatesettings*, it is difficult to filter timezones.

(e.g., Just filtering out *Asia + America* or *Asia + America + Europe* etc).

 

The reason is that the filter is treated as a string,

and roles are compared with role.contains() a filter or not. *That's not so flexible.*

 

As a suggestion, can we modify m_filter to be a *QRegularExpression*?

The patchset is attached to this issue. And if the suggestion is acceptable, I'll create a patchset on Gerrit.

 

The API will remain the same for the most part (loosing out on case-insensitivity):
{code:java}
@@ -67,7 +67,7 @@ bool TimezoneFilterModel::filterAcceptsRow( int source_row, const QModelIndex& s
            if (nameRole.isValid())
            {
                QString name = nameRole.toString();
-               if (name.contains(m_filter,  Qt::CaseInsensitive)) {
+               if (name.contains(m_filter)) {
                    ret = true;
                }
            }
@@ -75,7 +75,7 @@ bool TimezoneFilterModel::filterAcceptsRow( int source_row, const QModelIndex& s
            if (ret == false && countryRole.isValid())
            {
                QString country = countryRole.toString();
-               if (country.contains(m_filter,  Qt::CaseInsensitive)) {
+               if (country.contains(m_filter)) {
                    ret = true;
                }
            }
{code}
The input and output can still be *QStrings*:
{code:java}
@@ -46,12 +46,12 @@ TimezoneFilterModel::~TimezoneFilterModel()
 
 QString TimezoneFilterModel::filter() const
 {
-    return m_filter;
+    return m_filter.pattern();
 }
 
 void TimezoneFilterModel::setFilter(const QString& aFilter)
 {
-    m_filter = aFilter;
+    m_filter = QRegularExpression(aFilter);;
     emit filterChanged();
 }
{code}",,,,,,,,,,,,,,,,,,,"09 Jan '20 07:19;gvkalra;0001-timedatesettings-use-regex-as-model-filter.patch;https://bugreports.qt.io/secure/attachment/90946/0001-timedatesettings-use-regex-as-model-filter.patch",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0n60v:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Calling QCommandLineParser::addHelpOption twice shouldn't print warning,QTBUG-81219,291180,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,dfaure_kdab,mtijink,mtijink,07 Jan '20 19:11,08 Jan '20 19:07,18 Feb '21 09:41,,5.14.0,,,,,,,,,,,,,,,,,,,,,,Core: Other,,,,0,,,,"Starting with Qt 5.14, adding an option which already exists results in a warning printed to stderr. Unfortunately, calling {{QCommandLineParser::addHelpOption}} (as our application KDE Connect currently does), now results in this warning, breaking command-line autocompletion.

I suggest not printing this warning for {{addHelpOption()}} (and maybe for similar methods too): it feels as if calling it multiple times should be unneccesary but not cause issues (like warnings) either.","Arch Linux, Qt 5.14.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0n58n:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"07 Jan '20 19:16;mtijink;A bit of further investigation turns out that it doesn't break our autocompletion (which is nice), but this suggestion still seems useful to me.","07 Jan '20 23:53;thiago;David, what do you think?","08 Jan '20 08:44;dfaure_kdab;See QTBUG-74907 for the reason why this was added.

The problem in KDE is that KAboutData::setupCommandLine calls addHelpOption (since KF 5.7, not initially). So if your applicatoin calls setupCommandLine, it just shouldn't call addHelpOption. And yes I see this warning in many apps, which all have to be fixed.

We could add a bool specifically in addHelpOption itself, one layer above the addOption warning, because we know that calling addHelpOption twice is redundant and harmless (while addOption with the same name and different meanings, like in QTBUG-74907, is dangerous/confusing). But isn't it simpler to just remove one line from the application?","08 Jan '20 17:29;mtijink;bq. But isn't it simpler to just remove one line from the application?

Yes, which is why I reported this as a suggestion. Feel free to choose otherwise!","08 Jan '20 19:07;thiago;Since addHelpOption is idempotent, I wouldn't mind removing the warning...

...so long as it doesn't unduly uglify the code.",,,,,,,,,,,,,,,,,
Add option --qmljsdebugger only if build with QML module,QTBUG-81246,291254,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,thiago,EliteScience,EliteScience,08 Jan '20 15:30,08 Jan '20 15:30,18 Feb '21 09:41,,5.14.0,,,,,,,,,,,,,,,,,,,,,,Core: Other,,,,1,,,,"Since Qt5.14 (via [this commit|https://github.com/qt/qtbase/commit/341c8b9cd08c1cd863cf8581a825561a2862fce2]) an help option {{--help-all}} exists, which will be always added.

*Current behavior*:
If you develop a CUI {{--help-all}} only includes on option:
{noformat}
  --qmljsdebugger <value>     Activates the QML/JS debugger with a specified
                              port. The value must be of format
                              port:1234[,block]. ""block"" makes the application
                              wait for a connection.
{noformat}

*Expected behavior*:
* Variant 1
{{qmljsdebugger}} will be only added, in case the application a an application using QML (or using the QML module). Therefore if {{--qmljsdebugger}} is not present {{--help-all}} should not be added, as there exists no Qt option.
* Variant 2)
{{qmljsdebugger}} will be only in debug mode available, as I don't believe it is relevant to enduser
* Variant 3)
{{QCommandLineParser::addHelpOption()}} will be changed to {{QCommandLineParser::addHelpOption(bool includeQtOptions = true)}}, so the developer can decide if the user should be confronted with advanced options",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0n5mn:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Have an easy way to align vertically charts,QTBUG-81110,291035,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,e0348803,lano1106,lano1106,06 Jan '20 16:51,06 Jan '20 16:51,18 Feb '21 09:41,,5.13.2,5.14.0,,,,,,,,,,,,,,,,,,,,,Charts,,,,1,,,,"It may be desirable to align multiple charts together vertically when they share the same X Axis.

This simple desire proves out to be currently challenging when the charts's Y axis width are different.

I have documented my thoughts in the forum at:

[https://forum.qt.io/topic/109997/i-had-an-incredible-hard-time-to-align-horizontally-3-charts-qt-5-13-2]

Being able to control the Y-axis label width with:
 m_YAxis->setLabelFormat(""%6d"");
{{}}was my first reasonable attempt.

Next attempted to make the shortest plotarea chart drive the other 2 and I did stumble into a weird resizing problem. (I will open up another ticket to track the resizing issue).{{}}
{code:java}

{code}
{{}}",Linux with XFCE DE and X11 server.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Linux/X11,,,,,,"0|i0n4cv:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add support for creating pkg files,QTBUG-81094,291010,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt.team.graphics.and.multimedia,andysh,andysh,06 Jan '20 07:32,06 Jan '20 07:32,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Build tools: macdeployqt,,,,0,Reported_by_support_standard,,,Add support for creating pkg files as the Transporter app provided by Apple now only accepts pkg files for uploading to the app store,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0n47b:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
First exposure of Q3DSurface slows GUI thread,QTBUG-81067,290951,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,tokorpip,laurentgom,laurentgom,03 Jan '20 10:49,03 Jan '20 10:49,18 Feb '21 09:41,,5.13.1,,,,,,,,,,,,,,,,,,,,,,Data Visualization,,,,0,,,,"Hi

 

My QWidget UI has a Q3DSurface graph with a QSurface3DSeries containing 2500x2000 points. The problem is that the whole GUI thread is frozen (~2 sec on a modern PC) when the graph is first shown; it also freezes when I change the range of an axis.

 

After inspecting Qt code, I found that this time is all spent in SurfaceObject::setUpData, which recomputes geometry (normals, UVs, faces, ...) then sends it to the OpenGL driver.

 

I think that such a CPU intensive non-GUI task should be threaded (or threadable). I've searched through the public API, and although the private Abstract3DController class mentions a ""render thread"", I haven't seen any way to avoid performing these computations in the GUI thread.

 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Windows,,,,,,"0|i0n3w7:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Allow setting animation to paused state even if it is not running,QTBUG-81039,290894,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt.team.quick.subscriptions,jpetrell,jpetrell,01 Jan '20 18:22,02 Jan '20 09:23,18 Feb '21 09:41,,6.0,,,,,,,,,,,,,,,,,,,,,,Quick: Other,,,,0,,,,"You often want to stop animation without restarting it fully, which can be accomplished with paused property.

Unfortunately following code will lead to
{code:java}
NumberAnimation {
    running: program.state
    paused: Qt.application.active
}
{code}
following unhelpful warnings

 
{noformat}
QML NumberAnimation: setPaused() cannot be used when animation isn't running{noformat}
, forcing the developer to write boilerplate
{code:java}
NumberAnimation {
    running: program.state
    paused: running && Qt.application.active
}
{code}
While conceptually understandable not sure what is the value of coupling running and paused states so tightly together.

 

 

s

 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0n3jj:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"iPhone: create QSwipeGestures with 1 finger, not 3",QTBUG-81042,290897,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt.team.quick.subscriptions,hskoglund,hskoglund,02 Jan '20 02:58,02 Jan '20 02:58,18 Feb '21 09:41,,5.14.0,,,,,,,,,,,,,,,,,,,,,,Widgets: Gesture Support,,,,0,,,,"Hi, doing my first iOS Qt app, and today I tried swiping some QWidgets on my iPhone. While Qt's swipe gestures work fine on my Mac and Windows 10, on the phone it's really tricky to swipe with 3 fingers. Most apps use 1 finger for swipes, seems to be standard on all phones.

Turns out there's an iOS API for recognizing swipes with 1 finger (also with no churn, been the same for 10 years), and it's pretty trivial to integrate that API with Qt's existing QGesture infrastructure.

I ended up with a small .mm file with a function that I call from my QMainWindow's ctor, that registers Apple's swipe API into Qt's QUIView, and in the callback from iOS I post a matching QSwipeGesture. So now I can swipe my widgets with 1 finger on the phone :)

Would it be possible to add this functionality to Qt itself? As I said, it seems pretty easy, here's the function and the Objective-C method I inject into QUIView (you call the function with your QMainWindow's this and the swipe direction you wish to receive an event for):
{code:java}
bool registerForIOSSwipes(QWidget* w, QSwipeGesture::SwipeDirection sd)
{
// cast the widget's winId (it's our ticket into the iOS underworld)
    auto uv = reinterpret_cast<UIView*>(w->winId());

// what we really like is a ptr to Qt's UIView (QUIView)
    if (""QUIView"" != QString::fromNSString(NSStringFromClass([uv class])))
        return false;   // but it was not to be

// have a view, use a lambda to add the 4 different types of swipe gestures
    auto registerSwipe = [uv](UISwipeGestureRecognizerDirection d)
    {
    // new up an iOS gesture recognizer with required # of touches = 1 (Apple default)
        UISwipeGestureRecognizer* sgr = [[UISwipeGestureRecognizer alloc] initWithTarget:uv action:@selector(handleSwipe:)];
        [sgr setDirection:d];
        [uv addGestureRecognizer:sgr];
    };

    if (sd & QSwipeGesture::Left )
        registerSwipe(UISwipeGestureRecognizerDirectionLeft );

    if (sd & QSwipeGesture::Right)
        registerSwipe(UISwipeGestureRecognizerDirectionRight);

    if (sd & QSwipeGesture::Up   )
        registerSwipe(UISwipeGestureRecognizerDirectionUp   );

    if (sd & QSwipeGesture::Down )
        registerSwipe(UISwipeGestureRecognizerDirectionDown );

// that's all
    return true;
}

// some Objective-C red tape so we can inject our gesture recognizer function into Qt's QUIView
@interface QUIView : UIView @end    // (copied from quiview.h)

@implementation QUIView (RedTapeCategory) - (void) handleSwipe: (UISwipeGestureRecognizer*) swipe
{
// got a swipe, synthesize a swipe flavored Qt gesture event and post it
    auto sg = new QSwipeGesture;

    if (UISwipeGestureRecognizerDirectionLeft  == swipe.direction)
        sg->setSwipeAngle(180);

    if (UISwipeGestureRecognizerDirectionRight == swipe.direction)
        sg->setSwipeAngle(0);

    if (UISwipeGestureRecognizerDirectionUp    == swipe.direction)
        sg->setSwipeAngle(90);

    if (UISwipeGestureRecognizerDirectionDown  == swipe.direction)
        sg->setSwipeAngle(270);

    auto hotSpot = [swipe locationInView:self];
    sg->setHotSpot(QPointF(hotSpot.x,hotSpot.y));

// bon voyage
    qApp->postEvent(qApp->activeWindow(),new QGestureEvent(QList<QGesture*>{sg}));
}
@end
{code}
Then in my app I receive a normal QSwipeGesture event, say with code like this:
{code:java}
bool MainWindow::event(QEvent *event)
{
    if (event->type() != QEvent::Gesture)
        return QWidget::event(event);

    auto e = static_cast<QGestureEvent*>(event);
    auto g = e->gesture(Qt::SwipeGesture);
    if (nullptr == g)
        return QWidget::event(event);

    auto s = static_cast<QSwipeGesture*>(g);
    qDebug() << s->hotSpot() << s->horizontalDirection() << s->verticalDirection() << ""Z"";

    return true;
}
{code}
(I've trimmed some error checking and skipped the #includes/#imports)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,iOS/tvOS/watchOS,,,,,,"0|i0n3k7:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Axis with offsets inside the chart,QTBUG-80932,290669,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,e0348803,poikelin,poikelin,20 Dec '19 10:24,20 Dec '19 10:25,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Charts,,,,0,Reported_by_support_standard,,,Please see attached image. Multiple series sharing one Y axis and each with their own X axis near the line inside the chart itself.,,,,,,,,,,,,,,,,,,,"20 Dec '19 10:24;poikelin;Multiple Axes.PNG;https://bugreports.qt.io/secure/attachment/90635/Multiple+Axes.PNG",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0n29z:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
support both chart item clicked signal and rubber band in chartview at the same time ,QTBUG-80921,290639,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,e0348803,streamer,streamer,19 Dec '19 22:42,19 Dec '19 22:42,18 Feb '21 09:41,,5.12.6,,,,,,,,,,,,,,,,,,,,,,Charts,,,,0,,,,"If rubber band is enabled in chartview,  clicked and pressed  signals are connected to double clicked signal.  A single click won't create the clicked signal to the chart item that is at the mouse position.   It would be nice to support both single click and rubber band as the same time.  If left mouse button is pressed  and there is no mouse movement, at the time the mouse button is released,  a clicked signal should be sent to the chart item that is at the mouse position.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Linux/X11,,,,,,"0|i0n23b:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Add best pratices examples on ""Class"" documentation page",QTBUG-80917,290631,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,docteam,roussinm,roussinm,19 Dec '19 15:59,19 Dec '19 15:59,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Documentation,,,,0,,,,"I would like to be able to find examples of code on how to use the QEventLoop correctly and how not to use it incorrectly at the QEventLoop page. Even If I search for ""QEventLoop examples"" on google it doesn't seem to find relevant documentation.

When I look at https://en.cppreference.com/w/cpp/container/vector you see the whole documentation + examples.

There are multiple classes where I don't find examples right at the class documentation page.

I think you are the best people who can write the documentation/examples of best practices since you are the people who create the framework, instead of trying to find the information to some blog somewhere on the Internet.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0n21j:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
QBarSet: Add function to toggle visibility,QTBUG-80836,290445,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,e0348803,miikapernu,miikapernu,17 Dec '19 07:40,18 Dec '19 08:55,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Charts,,,,0,Reported_by_support_standard,,,"Currently the most convenient way to toggle barset visibility is to toggle the color between original color and QColor(""transparent"")*.*

*Suggestion*: Add a method to the class to toggle the visibility without the need to change the colors manually. Example: QBarSet::setVisible(bool visible = true).",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0n0xr:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
qchartview performance,QTBUG-80852,290497,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,e0348803,streamer,streamer,17 Dec '19 14:22,17 Dec '19 14:39,18 Feb '21 09:41,,5.12.6,,,,,,,,,,,,,,,,,,,,,,Charts,,,,1,,,,"qchartview repaints the chart every time there is an update.  This is not the efficient way to handle a chart with large amount of dynamic data that is generated at very high rate.   The speed slows down significantly when data set gets large.

Even though I am quite sure, it looks like qchartview always redraws the entire chart instead of just the region that is visible.  I might be wrong.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0n193:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
qchart boundary rectangle,QTBUG-80853,290499,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,e0348803,streamer,streamer,17 Dec '19 14:28,17 Dec '19 14:28,18 Feb '21 09:41,,5.12.6,,,,,,,,,,,,,,,,,,,,,,Charts,,,,0,,,,"qchart does not support boundary rectangle.  It relies on axis grid lines to draw the boundary rectangle.  If one of the axis is hidden,   you won't see a complete chart boundary rectangle.   It would be better if qchart can provide a way to draw the boundary rectangle independently(i.e.  set pen and brush, hide )",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0n19j:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
qchartview scroll,QTBUG-80851,290496,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,e0348803,streamer,streamer,17 Dec '19 14:17,17 Dec '19 14:17,18 Feb '21 09:41,,5.12.6,,,,,,,,,,,,,,,,,,,,,,Charts,,,,0,,,,"Even though qchartview supports scroll bar, it actually does not do anything.  Instead of scrolling chart data points, it scrolls the entire widget.    The valueChanged signal is connected to the widget.    In order to get scroll bar work, valueChanged should be disconnected first and then connected to a subclassed qchartview.  qchartview does not provide a way to scroll chart.  ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0n18v:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add support for QOpenGLDebugLogger with OpenGL ES based formats,QTBUG-80838,290449,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,lagocs,andysh,andysh,17 Dec '19 08:13,17 Dec '19 08:13,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,GUI: OpenGL,,,,0,Reported_by_support_standard,,,Add support for QOpenGLDebugLogger with OpenGL ES based formats. Currently it will only work with OpenGL based formats and not OpenGL ES based ones although it seems that it is possible to debug these in pretty much the same manner if the extension is available. It just requires setting it to look for the other functions instead.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0n0yn:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Support CSS classes in QTextFormat,QTBUG-80837,290446,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,esabraha,jrkleemann,jrkleemann,17 Dec '19 07:45,17 Dec '19 07:45,18 Feb '21 09:41,,5.13.2,,,,,,,,,,,,,,,,,,,,,,GUI: Text handling,,,,0,,,,"Class attributes already work, but there does not seem to be a way to actually set classes.

QTextFormat should have a Property ""CssClass"", so you can set the class via
{code:java}
setProperty(QTextFormat::CssClass, <classname>);
{code}
One usecase for css-classes would be Word-Style format templates, that will affect previously formatted text. Or you could use different classes on different platforms.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0n0xz:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add a pixel metric to allow changing of the spacing used between the icon and text in a tabbar tab,QTBUG-76341,279838,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt.team.quick.subscriptions,andysh,andysh,12 Jun '19 13:10,14 Dec '19 09:03,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Widgets: Styles,,,,0,Reported_by_support_standard,,,"Add a pixel metric to allow changing of the spacing used between the icon and text in a tabbar tab. This will make it easier to control how much space is used, especially for small tabs instead of hardcoding this value",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0lcmn:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"12 Jun '19 13:13;bleze;Also a way to handle hpadding as it is kind of static and only text gets cropped when space could be used for icon+text.",,,,,,,,,,,,,,,,,,,,,
"ListView highlight should support rendering between ""layers"" of a delegate",QTBUG-80710,290110,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt.team.quick.subscriptions,mbrasser,mbrasser,11 Dec '19 22:08,11 Dec '19 22:08,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Quick: Core Declarative QML ,,,,0,,,,"Currently a ListView highlight must appear either completely under or completely over a delegate. That makes it difficult for delegates that are designed with both a foreground and background. For example, the following is intended to show the highlight over the background Rectangle, but under the foreground Text (so the Text always appears white):
{code:java}
import QtQuick 2.14

ListView {
    width: 400
    height: 400
    spacing: 2
    model: 10
    delegate: Item {
        width: parent.width
        height: 50

        // background
        Rectangle {
            anchors.fill: parent
            color: ""steelblue""
        }

        // foreground
        Text {
            anchors.centerIn: parent
            color: ""white""
            text: ""Item "" + model.index
        }

        TapHandler { onTapped: currentIndex = model.index }
    }

    // this highlight should appear over the delegate background, but under the delegate foreground
    highlight: Rectangle {
        color: ""#80FF0000""
        z: 2
    }
}{code}
 

While this could be addressed at the view level, it might be interesting to support more generically as well. For example, I could imagine API like:
{code:java}
Item {
    width: 400
    height: 400
    
    Rectangle {
        RenderLayer.target: ""foregroundLayer""
    }
    
    Rectangle {
        RenderLayer.target: ""backgroundLayer""
    }

    RenderLayer { name: ""backgroundLayer"" }
    RenderLayer { name: ""foregroundLayer"" }
} {code}
where any item could receive transforms, etc from the normal parent chain, but a custom, ""global z value"" based on RenderLayer.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0mz33:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add Rotate cursor,QTBUG-80630,289938,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt.team.quick.subscriptions,ebartek,ebartek,09 Dec '19 14:39,11 Dec '19 14:37,18 Feb '21 09:41,,5.12.5,,,,,,,,,,,,,,,,,,,,,,GUI: Look'n'Feel,,,,0,,,,"Please consider adding a Rotate icon/cursor to enum Qt::CursorShape.

This is one of the most important icon/cursor in the current world of mobile and responsive applications. 

Is it possible for you to add Rotate cursor to enum Qt::CursorShape ?

Here are examples: [https://www.google.pl/search?q=rotate+object+icon&source=lnms&tbm=isch&sa=X&ved=2ahUKEwi78NeK5ajmAhUJTawKHZx0AgUQ_AUoAXoECAsQAw&biw=1730&bih=946&dpr=1.11] 

 

 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0my3z:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"11 Dec '19 14:37;mitch_curtis;{quote}
This is one of the most important icon/cursor in the current world of mobile and responsive applications. 
{quote}
Can you give an example of a concrete use case that you have in mind for it?

I would not imagine mouse cursors being used at all in mobile applications.",,,,,,,,,,,,,,,,,,,,,
Allow custom icons for QLineSeries,QTBUG-80643,289955,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,e0348803,tim_rydell,tim_rydell,09 Dec '19 18:25,09 Dec '19 18:25,18 Feb '21 09:41,,5.9.1,,,,,,,,,,,,,,,,,,,,,,Charts,,,,0,,,,"The QLineSeries currently only allows the user to select from a small number of predefined icons for each point. Request support for custom icons, as are allowed in QScatterSeries.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Linux/X11,,,,,,"0|i0my7j:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
New setting for scrollbars not to overlap with other scrollbars.,QTBUG-80632,289942,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt.team.quick.subscriptions,tero.pelkonen,tero.pelkonen,09 Dec '19 15:02,09 Dec '19 15:07,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Quick: Core Declarative QML ,,,,1,reported_by_support_standard,,,"User has requested to have new setting on scrollbar type.

Setting would stop scrollbar from overlapping with other scrollbars.

This setting should stop scrollbars from overlapping each other by default in Flickable.",,,,,,,,,,,,,,,,,,,"09 Dec '19 15:06;jpalbert;TableViewProvider.zip;https://bugreports.qt.io/secure/attachment/90004/TableViewProvider.zip",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0my4v:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"09 Dec '19 15:07;jpalbert;Example code provided :)",,,,,,,,,,,,,,,,,,,,,
Non-sparse model operations,QTBUG-80601,289883,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,dfaure_kdab,joshdreamland,joshdreamland,07 Dec '19 23:49,07 Dec '19 23:49,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Core: Item Models,,,,0,,,,"Our project implements QAbstractItemModel and is plagued by {{QSortFilterProxyModel: inconsistent changes reported by source model}} errors.

The reason is that we are trying to implement efficient sparse removal operations on a dense storage container. Right now, Qt seems to assume that if I trigger N beginRemoveItems, I will proceed to trigger N endRemoveItems, and each individual removal will leave the system exactly in the same state as if I had instead issued one at a time, back to front. This is not the case.

Instead, our model performs a swap of each range to be removed with elements ahead that will not be removed. When the loop completes, all remaining elements from the last deleted range are swapped backward as well, leaving the deleted elements at the end of the array. We then truncate the list, deleting the unwanted rows.

Since all deletion happens at once, QSortFilterProxyModel complains that the rest of the data isn't where it was expected to be.

One solution would be to actively support sparse removal operations, if not by changing the behavior of beginRemoveRows (when called in succession), then by adding a new operation for it.

If adding a sparse delete would be too specific, perhaps we could tackle the more immediate problem and support a range swap operation, instead—Using MoveRows for this only works when the swapped ranges overlap, so I would need an actual swap operation to cover this use case.

Anyway, thanks for your time. Please let me know if I've missed something.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0mxrz:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Wrap text in tags like pre when explicit width is set,QTBUG-80599,289881,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt.team.quick.subscriptions,deepbluev7,deepbluev7,07 Dec '19 11:48,07 Dec '19 11:48,18 Feb '21 09:41,,5.13.2,,,,,,,,,,,,,,,,,,,,,,Quick: Core Declarative QML ,,,,0,,,,"
When you have rich text in a Text element (and variations), text inside a tag like <pre> isn't wrapped. While this is can be considered expected behavior, since a <pre> tag contains pre-formatted text, this often leads to text leaving the bounds of Text element, often even leaving the window. I would expect there to be some kind of switch in Text-like components to wrap every text to be contained inside of it. This only seems to be an issue with Text.RichText, StyledText seems to actually wrap. Since I need to render text from external sources, like Reddit or other sites that format their comments as html, I need to currently replace every {{<pre>}} tag with {{<pre style=""white-space: pre-wrap>}}, which is error prone and because I need some features not available in StyledText, I need to use RichText.

Example code:

{code}
import QtQuick 2.2

Text {
 width: 200
 wrapMode: Text.Wrap
 textFormat: Text.RichText
 text: ""<pre>This is a very long text in a pre tag</pre>""
}
{code}
 

Could something be added to force the text content to respect the width specified or is that maybe even a bug in the rich text support?

Alternatively, is there a way to optionally add horizontal scrollbars, when a pre text makes the actual text wider than the specified width?

Thank you,
 Nico","This seems to affect every platform, i.e. Windows, Linux and even SailfishOS, although that probably doesn't count as an official platform.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0mxrj:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Provide a way to make ListView wrap,QTBUG-78271,284528,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt.team.quick.subscriptions,mitch_curtis,mitch_curtis,13 Sep '19 09:12,05 Dec '19 21:16,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Quick: Core Declarative QML ,,,,1,,,,"If ListView had a wrap property, we could get rid of hacks that we do in qtquickcontrols2 for a wrapping Tumbler:

* https://code.qt.io/cgit/qt/qtquickcontrols2.git/tree/src/quicktemplates2/qquicktumbler.cpp?id=188a2210348461b3060eddd5c9368759d93d40c6
* https://code.qt.io/cgit/qt/qtquickcontrols2.git/tree/src/quickcontrols2/qquicktumblerview.cpp?id=188a2210348461b3060eddd5c9368759d93d40c6
* https://code.qt.io/cgit/qt/qtquickcontrols2.git/tree/src/imports/controls/Tumbler.qml?id=188a2210348461b3060eddd5c9368759d93d40c6#n59

It would also allow SwipeView to support wrapping for free:

https://bugreports.qt.io/browse/QTBUG-56422",,,,,,,,,,,,,,,QTBUG-63217,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0m3jz:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"13 Sep '19 10:59;srutledg;As opposed to making PathView do what you need?  I wonder which is harder.","13 Sep '19 11:22;mitch_curtis;That's also an option, but PathView is way more difficult to use. I would prefer ListView having the feature because it's more user-friendly.","09 Oct '19 12:01;srutledg;And for QTBUG-50027 you'd be able to control whether to wrap or not wrap?","09 Oct '19 12:20;mitch_curtis;Yeah.","05 Dec '19 21:16;mbrasser;This would also be useful for GridView (and the converse for PathView)",,,,,,,,,,,,,,,,,
Make examples installation opt-out in Qt Maintenance Tool,QTBUG-80561,289777,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,releaseteam,thebootroo,thebootroo,05 Dec '19 11:58,05 Dec '19 12:00,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Packaging & Installer,,,,1,,,,"I'm a long long time Qt developer and I really don't need the examples and demo when I install the SDK, but they are mandatory included in the base package, which is taking enormous amount of disk space when one have to keep several version of Qt for several targets installed a same time on the same dev machine.
What I would need is the ability to opt-in or opt-out the installation of the examples and demos for each Qt version that I install, just like any other non-essential sub-package.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Linux/X11,macOS,Windows,,,,"0|i0mx4n:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
QML ChartView: Remove axis on removeSeries,QTBUG-80486,289620,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,e0348803,pavloponomarov,pavloponomarov,03 Dec '19 07:06,03 Dec '19 07:06,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Charts,,,,0,,,,"ChartView::setAxisX and ChartView::setAxisY would check if old axis for series is still needed and if it is not it will permanently remove it.

ChartView::removeSeries only removes serie without checking axis, which is incosistent",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0mw6v:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Remote object compiler produces code cppcheck does not like,QTBUG-80479,289595,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,bstottle,bobstaff147,bobstaff147,02 Dec '19 20:10,02 Dec '19 20:10,18 Feb '21 09:41,,5.13.2,,,,,,,,,,,,,,,,,,,,,,Remote Objects,,,,0,,,,"The generated code causes these cppcheck errors, the attach patch for repc  fixes this.

license/lib/rep_LicenseState_replica.h:48:10: warning: Virtual function 'initialize' is called from constructor 'LicenseStateReplica()' at line 29. 
Dynamic binding is not used. [virtualCallInConstructor] 
    void initialize() override 
         ^ 
license/lib/rep_LicenseState_replica.h:29:54: note: Calling initialize 
    LicenseStateReplica() : QRemoteObjectReplica() \{ initialize(); } 
                                                     ^ 
license/lib/rep_LicenseState_replica.h:48:10: note: initialize is a virtual function 
    void initialize() override 
         ^ 
license/lib/rep_NetworkLicense_replica.h:59:10: warning: Virtual function 'initialize' is called from constructor 'NetworkLicenseReplica()' at line 
38. Dynamic binding is not used. [virtualCallInConstructor] 
    void initialize() override 
         ^ 
license/lib/rep_NetworkLicense_replica.h:38:56: note: Calling initialize 
    NetworkLicenseReplica() : QRemoteObjectReplica() \{ initialize(); } 
                                                       ^ 
license/lib/rep_NetworkLicense_replica.h:59:10: note: initialize is a virtual function 
    void initialize() override 
         ^ 
license/lib/rep_LicenseState_replica.h:42:5: style: Class 'LicenseStateReplica' has a constructor with 1 argument that is not explicit. [noExplicitC
onstructor] 
    LicenseStateReplica(QRemoteObjectNode *node, const QString &name = QString()) 
    ^ 
license/lib/rep_NetworkLicense_replica.h:53:5: style: Class 'NetworkLicenseReplica' has a constructor with 1 argument that is not explicit. [noExpli
citConstructor] 
    NetworkLicenseReplica(QRemoteObjectNode *node, const QString &name = QString())",,,,,,,,,,,,,,,,,,,"02 Dec '19 20:09;bobstaff147;repc.patch;https://bugreports.qt.io/secure/attachment/89734/repc.patch",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Linux/X11,,,,,,"0|i0mw27:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Inserting an <HR> tag into QTextDocument does Bad Things,QTBUG-80473,289582,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,esabraha,bhaller,bhaller,02 Dec '19 16:07,02 Dec '19 16:14,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,GUI: Text handling,,,,0,,,,"I want to put together a QTextDocument from multiple QTextDocumentFragments, separated by horizontal rules represented by <HR>. Something like this (as an ASCII mock-up):

foo
-------
bar
-------
baz

My attempt to do this (using insertText() instead of insertFragment() for now, to try to get the basic scheme working, but the same thing happens with insertFragment()) looks like this:

QTextEdit *textedit = ui->descriptionTextEdit;
QTextDocument *textdoc = textedit->document();

textedit->clear();

QTextCursor insertion(textdoc);
insertion.movePosition(QTextCursor::Start, QTextCursor::MoveAnchor);

insertion.insertText(""foo"");
insertion.insertBlock();
insertion.insertHtml(""<HR>"");
insertion.insertBlock();
insertion.insertText(""bar"");
insertion.insertBlock();
insertion.insertHtml(""<HR>"");
insertion.insertBlock();
insertion.insertText(""baz"");

qDebug() << textdoc->toHtml();

The results from this are truly bizarre. You can see a screenshot at stackoverflow at https://stackoverflow.com/questions/59009040/assembling-a-qtextdocument-from-fragments.  As you can see, I requested two <HR> tags but I got five horizontal rules! The HTML for the QTextDocument is bizarre too (I've added a couple of newlines to make it more readable):

<!DOCTYPE HTML PUBLIC \""-//W3C//DTD HTML 4.0//EN\"" \""http://www.w3.org/TR/REC-html40/strict.dtd\"">
<html>
<head><meta name=\""qrichtext\"" content=\""1\"" />
<style type=\""text/css\"">
p, li { white-space: pre-wrap; }
</style></head>
<body style=\"" font-family:'.SF NS Text'; font-size:13pt; font-weight:400; font-style:normal;\"">
<p style=\"" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"">foo</p>
<p style=\"" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"">bar</p>
<p style=\"" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"">baz</p>
</body></html>

There is no sign of my <HR> tags in the HTML at all. With slightly different strategies – called insertBlock() only before the <HR> insertions, or only after them, or not at all – I get variations on this theme; sometimes bar and baz are not visible in the HTML output, but the abundance of <HR> tags are, instead. For example, if I change the insertion code to this:

insertion.insertText(""foo"");
//insertion.insertBlock();
insertion.insertHtml(""<HR>"");
insertion.insertBlock();
insertion.insertText(""bar"");
//insertion.insertBlock();
insertion.insertHtml(""<HR>"");
insertion.insertBlock();
insertion.insertText(""baz"");
then I get a result that has four horizontal rules in the visible rendering in my app, and has this HTML output:

<!DOCTYPE HTML PUBLIC \""-//W3C//DTD HTML 4.0//EN\"" \""http://www.w3.org/TR/REC-html40/strict.dtd\"">
<html><head><meta name=\""qrichtext\"" content=\""1\"" />
<style type=\""text/css\"">
p, li { white-space: pre-wrap; }
</style></head>
<body style=\"" font-family:'.SF NS Text'; font-size:13pt; font-weight:400; font-style:normal;\"">
<p style=\"" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"">foo</p>
<hr />
<hr />
<hr />
<hr />
</body></html>

Note that bar and baz are not visible in the HTML output, although they do render visibly in the app.

But in no permutation of the code that I have found do I get what I want. It looks like I am putting QTextDocument into some kind of internally inconsistent or confused state.  I don't know whether there is a ""right"" way to do this – my stackoverflow question has gotten no good answer yet – but it seems like my attempts above clearly indicate a bug in QTextDocument, in any case.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0mvzz:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"02 Dec '19 16:14;bhaller;Sorry, this should be marked as a bug, not a suggestion; I don't seem to be able to change that by editing this bug, however.",,,,,,,,,,,,,,,,,,,,,
Add a way to change QTextEdit's line-breaking algorithm,QTBUG-80471,289580,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,esabraha,bhaller,bhaller,02 Dec '19 16:02,02 Dec '19 16:02,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,GUI: Text handling,,,,0,,,,"I want to change QTextEdit's line-breaking algorithm so that text I'm displaying that is not English (it's code, in fact) gets wrapped in a better way. The definition of what a ""word"" is in Qt may be well-suited for human languages, but it is not well-suited for code, and so long lines of code end up getting wrapped at really bad places. For example, this single line of code:

- (void)setRecombinationRate(numeric rates, [Ni ends = NULL], [string$ sex = ""*""])

gets wrapped by QTextEdit, in a narrow window, to this:

-
 (void)setRecombinationRate(numeri
c rates, [Ni ends = NULL], [string
$ sex = ""*""])

I would like to tailor the line-breaking algorithm to achieve something more like this:

- (void)setRecombinationRate(
numeric rates, [Ni ends = NULL], 
[string$ sex = ""*""])

I have done much the same thing in Cocoa with an override of -lineBreakBeforeIndex:withinRange: in a subclass of NSTextStorage; but there seems to be no comparable place for me to override the default behavior in Qt.

Note that I know you can customize Qt's layout so that text flows around obstacles within the QTextEdit; that is not what I'm asking about.  :->",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0mvzj:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Make QSvgRenderer internals more accessible ,QTBUG-80442,289513,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,,mkam,mkam,29 Nov '19 15:16,29 Nov '19 15:16,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,SVG Support,,,,0,,,,"Since QSvgRenderer must parse the SVG, it would be useful to provide a more complete API for querying the SVG DOM. As it is, programs can query the existence of elements by id, get their bounding box, the document viewbox, and little more. Beyond that, a separate XML parser must be used to get information which MUST be readily available within QSvgRenderer, such as:
 * a list of element IDs
 * the document stylesheet
 * element/s at co-ordinate
 * element classes

And DOM manipulations, such as:
 * Excluding elements from a render (visibility)
 * Modifying stylesheets
 * Modifying attributes",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0mvl3:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
TextEdit should support Text.StyledText,QTBUG-80354,289256,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt.team.quick.subscriptions,roussinm,roussinm,26 Nov '19 17:27,29 Nov '19 08:38,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Quick: Core Declarative QML ,,,,0,,,,"Text item supports the `formatText: Text.StyledText`, but for some reason [TextEdit doesn't support it|https://doc.qt.io/qt-5/qml-qtquick-textedit.html#textFormat-prop]. 

We have to use RichText and this causes performance problems. It tends to be slow to render and we are only using the subset of what StyledText is compatible with.

",,,,,,,,,,,,,,,,,,,"28 Nov '19 22:32;roussinm;main.qml;https://bugreports.qt.io/secure/attachment/89636/main.qml",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0mu3z:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"27 Nov '19 09:00;mitch_curtis;Please provide an example that reproduces the problem. It should be enough to provide main.qml.","28 Nov '19 22:32;roussinm;[~mitch_curtis] Added a QML example.","29 Nov '19 08:38;mitch_curtis;We just use what TextEdit provides, so this is really about TextEdit.",,,,,,,,,,,,,,,,,,,
QThread: use SetThreadDescription to set the thread name when available,QTBUG-80317,289176,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,thiago,rthompson,rthompson,25 Nov '19 15:06,26 Nov '19 16:31,18 Feb '21 09:41,,5.12.6,,,,,,,,,,,,,,,,,,,,,,Core: Threads,,,,0,,,,"Currently QThread throws a 'magic' exception to set the thread name.
This method only works if the debugger is already attached when the thread starts.

Windows 10 version 1607 added a new API pair [SetThreadDescription()|[https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-setthreaddescription]] and GetThreadDescription() to set and get thread names.

A thread name set via this API is readable if the debugger is attached after the thread has started, and is also stored in xperf (WPA) and similar post-mortem debugging tools.

Example code that could be inserted into void qt_set_thread_name(HANDLE threadId, LPCSTR threadName):

 
{code:java}
// Find function pointer for Win10 1607 version
// Kernel32 will definitely be loaded so directly ask for the handle
 typedef ::HRESULT(WINAPI* SetThreadDescription)(::HANDLE hThread, ::PCWSTR lpThreadDescription);
 auto set_thread_description_func = reinterpret_cast<SetThreadDescription>(::GetProcAddress(::GetModuleHandle(L""Kernel32.dll""), ""SetThreadDescription""));
 if (set_thread_description_func)
 {
 // Convert to WCHAR
 const size_t WCHARBUFSIZE = 100; // Arbitrary limit, thread names should be short
 wchar_t wszDest[WCHARBUFSIZE] = {};
 MultiByteToWideChar(CP_UTF8, MB_PRECOMPOSED, threadName, -1, wszDest, WCHARBUFSIZE);
 set_thread_description_func(::GetCurrentThread(), wszDest);
 return;
 }

// Otherwise set name via magic exception...{code}
 ",Windows 10 version 1607 and newer.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Windows,,,,,,"0|i0mtof:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add an orientation option for QDial,QTBUG-80337,289185,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt.team.quick.subscriptions,britfox,britfox,25 Nov '19 16:55,26 Nov '19 15:14,18 Feb '21 09:41,,5.13,,,,,,,,,,,,,,,,,,,,,,Widgets: Widgets and Dialogs,,,,0,,,,"Hello,

 

It would be useful to add an 'orientation' option for QDial since 'Horizontal' and 'Vertical' values are obviously not enough for the dials...

This option would override the QAbstractSlider one.

 

Values like 'North', 'South', 'East', 'West' would be good enough.

 

Thank you.",,,,,,,,,,,,,,,,,,,"26 Nov '19 14:49;britfox;dials.png;https://bugreports.qt.io/secure/attachment/89553/dials.png",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0mtqf:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"26 Nov '19 09:53;mitch_curtis;{quote}
It would be useful to add an 'orientation' option for QDial since 'Horizontal' and 'Vertical' values are obviously not enough for the dials...
{quote}
Why are they ""obviously not enough""? 

{quote}
Values like 'North', 'South', 'East', 'West' would be good enough.
{quote}
How would they work?","26 Nov '19 14:51;britfox;I mean that 'Horizontal' and 'Vertical' values make sense for sliders.
 But since the dials are circular, they can be oriented differently.

It could work like that:
 !dials.png|thumbnail!","26 Nov '19 15:14;mitch_curtis;Great, thanks for the diagram, that helps.",,,,,,,,,,,,,,,,,,,
Qt Designer: I would like to suggest the ability to tabify dock widgets in the UI form,QTBUG-80289,289114,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,kleint,joe459,joe459,24 Nov '19 18:28,25 Nov '19 08:28,18 Feb '21 09:41,,5.14.0 Beta3,,,,,,,,,,,,,,,,,,,,,,Tools: Designer,,,,0,,,,"Currently, dock widgets are not tabifiable in Qt Designer. This makes it very difficult to visualize and create multiple docks in a main window that are to be tabified. I am using Qt 5.13.1 in Microsoft Visual Studio.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0mtb3:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
return QCommandLineOptions,QTBUG-80270,289089,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,thiago,fmercury,fmercury,22 Nov '19 22:27,22 Nov '19 22:28,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Core: I/O,,,,0,,,,"I use QCommandLineParser by using the function 
{code:java}
addOption({{""f"", ""folder"" }, ""Path to folder"" , ""path"" });

addOption({{""s"", ""size"" }, ""Size"" , ""size"" });
{code}
and other options with different syntaxes.

 

It would be beneficial in some situations to get access later in the script to (a copy of) the private variable of the class containing the final list of CLI options, namely
{code:java}
QList<QCommandLineOption> commandLineOptionList;{code}
see [https://code.woboq.org/qt5/qtbase/src/corelib/tools/qcommandlineparser.cpp.html#QCommandLineParserPrivate::commandLineOptionList]

e.g. with a public function like these:
{code:java}
QList<QCommandLineOption> getOptionList() { return commandLineOptionList};{code}
 

Thanks.

 

 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0mt5j:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add an appendData() function to make it easier to append data to the buffer,QTBUG-72619,271375,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,seanharmer,andysh,andysh,17 Dec '18 10:53,18 Nov '19 22:30,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Qt3D,,,,1,Reported_by_support_standard,,,"Add an appendData() function to make it easier to append data to the buffer, this saves having to do it manually then by getting the original QByteArray and then adding to the end of it before resetting it.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0k1gf:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"12 Nov '19 13:22;ibdm-a;May be the bug description is not clear enough. 
Here's some more detailed explanation.

This bugreport was created by reason of the support request INC-1242913.
What was meant, was to extend the class Qt3DRender::QBuffer by the new 
method appendData(const QByteArray &bytes); for scenarios with growing 
data and no knowledge about the maximum data size.

Qt3DRender::QBuffer::setData() always replaces the complete data buffer, which is not very efficiently!

 ","18 Nov '19 21:43;lukegluke;By the way, there is updateData function. Take a look.
It is more efficient to preallocate buffer and then updateData.

https://bugreports.qt.io/browse/QTBUG-50720
Also maybe useful: https://bugreports.qt.io/browse/QTBUG-60429

 ","18 Nov '19 22:14;ibdm-a;As I said we have no knowledge about the maximum data size. Even if we use the updateData method we may run into situations, were the size of the preallocated buffer has to be increased (without uploading it completely again). For exactly this situation the requested method is intended for. 
","18 Nov '19 22:30;lukegluke;I had exactly situations, I just preallocate another buffer if needed.
I'm not argue with appendData(), but at last there is glBufferData and glBufferSubData, there is no append as far as I know.",,,,,,,,,,,,,,,,,,
Don't have fcitx IM plugin in latest Qt Creator release,QTBUG-80155,285467,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,releaseteam,hnlyxacj@sina.com,hnlyxacj@sina.com,24 Sep '19 03:01,18 Nov '19 10:45,18 Feb '21 09:41,,5.12,,,,,,,,,,,,,,,,,,,,,,Packaging & Installer,,,,0,,,,"Qt Creator release doesn't include any other non-official input method plugin, such as fcitx. The users need to build their own. Is it possible to include them in next release?

PATH:

    Qt5_13_1/Tools/QtCreator/lib/Qt/plugins/platforminputcontexts

 

文件名

libfcitxplatforminputcontextplugin.so",Ubuntu 系统下任意环境,,,,,,,,,,,,,,QTBUG-63574,,,,"24 Sep '19 03:00;hnlyxacj@sina.com;libfcitxplatforminputcontextplugin.so;https://bugreports.qt.io/secure/attachment/87527/libfcitxplatforminputcontextplugin.so",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,Other,,,,,"0|i0m8e7:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"18 Nov '19 10:41;liaqi;fcitx is not sougou(搜狗). see https://fcitx-im.org/wiki/Fcitx .",,,,,,,,,,,,,,,,,,,,,
Research doc tooling in other projects,QTBUG-74790,276275,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,docteam,paulwicking,paulwicking,28 Mar '19 13:05,18 Nov '19 06:31,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Documentation,,,,0,DocWorkshop03.19,,,"E.g. Clang, Python, Rust, Boost, Django, SUSE, etc.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,QTBUG-71493,9223372036854775807,,,,,,,,,"0|i0ksd3:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"02 Apr '19 21:03;dourouc05_;I've done a bit of research myself about this, here is what I can tell you right now (if I find other notes back, I'll update).
 * [PostgreSQL|https://www.postgresql.org/docs/] uses [DocBook|https://github.com/postgres/postgres/tree/master/doc/src/sgml] (an old version, based on SGML, i.e. pre-XML). As far as I can tell, they're using [DSSSL style sheets|https://github.com/docbook/dsssl]. They're completely obsolete (now, DocBook is just XML; the DSSSL language is obsolete and replaced by XSLT, which is still currently developed; the ""official"" style sheets have been replaced by two versions: one [XSLT 1.0|https://github.com/docbook/xslt10-stylesheets] and another [XSLT 2.0|https://github.com/docbook/xslt20-stylesheets]).
 They have translations of the documentation, and multiple formats (HTML, PDF; Man also, at least for the French translation).
 * RedHat/Fedora seem to be great fans of DocBook, although that is changing. For a long time, they have been developing [Publican|https://sourceware.org/publican/] (funnily enough, it seems [they made a switch from AsciiDoc|https://github.com/asciidoctor/asciidoctor/wiki/Convert-Asciidoc-to-Docbook-for-use-with-Publican]); on top of this, I understood that RedHat is using Drupal on top of Publican for publishing the generated documentation. Now, they are developing [Antora|https://antora.org/], based on AsciiDoc. 
  With both, they have translations and multiple output formats. 
 * [LFS|http://www.linuxfromscratch.org/] is using DocBook, publication is performed with the standard XSL style sheets. While not really code, they have the same problem of semantics as Qt docs. 
 * PHP is using DocBook to write everything ([phpdoc|https://svn.php.net/viewvc/phpdoc/]), an old SGML variant. They natively handle translations, everything is hosted in an SVN repo ([they are migrating it to Git|https://wiki.php.net/doc/git]). Edition is performed online, with a dedicated tool, [PhD O.E.|https://edit.php.net/] (meaning you need a PhD to understand the basic?), which includes peer review. Publication is done with [custom PHP code|https://wiki.php.net/doc/phd], not standard tools, and they only target online (HTML). 
 * KDE is very similar to PHP, with a [DocBook base|https://community.kde.org/Get_Involved/documentation] and [a custom tool chain|https://l10n.kde.org/docs/tools.php].","03 Apr '19 07:15;leenam;Some tools used for building and documenting APIs presented at tcom world conference in October 2018:
 * OpenAPI initiative ([https://www.openapis.org/]) - The OpenAPI Initiative (OAI) was created by a consortium of forward-looking industry experts who recognize the immense value of standardizing on how REST APIs are described. Might be more suitable for REST APIs:
 ** ReDoc ([https://redoc.ly/]) - ReDoc provides a simple, OpenAPI spec compliant way of delivering attractive, interactive, responsive and up to date documentation that can be deployed anywhere, including integration into your existing continuous integration, and API lifecycle. 
 ** Swagger ([https://swagger.io/]) - Apparently called OpenAPI now.
 ** Stoplight.io ([https://stoplight.io/]) - Combines OpenAPI Specifications (formerly known as Swagger) with Markdown to create searchable, internal and external API documentation.
 * DAPS (DocBook Authoring and Publishing Suite) used by OpenSUSE and seems to be only available on Linux: [https://opensuse.github.io/daps/]","03 Apr '19 14:00;paulwicking;A suggestion from a comment on the blog was to interface Sphinx with output from clang-doc and styling the output for Qt. I _think_ that belongs to this issue :)",,,,,,,,,,,,,,,,,,,
Add an utility that calculates the screen-space position of an entity,QTBUG-80074,288563,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,seanharmer,peppe,peppe,15 Nov '19 10:52,15 Nov '19 10:52,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Qt3D,,,,0,,,,"Sometimes it would be nice to know the position in screen space of a given entity. (For simplicity, let's say, an entity's origin in model space).

At the moment this is complicated if not impossible: one has to manually track the entire entity tree of entities and combine their transformations. Animations complicate things even further, requiring communication to the frontend of their changes.

This could be solved with a convenience element that does all the magic for the user and just has a readonly property containing the desidered result. Something like


{code}
ScreenSpaceMapper {
  entity: someEntity
  camera: someCamera // or camera selector? well...
  viewport: someViewport // ditto
  
  onScreenSpacePositionChanged: console.log(""new pos is"", screenSpacePosition)
}
{code}

Such position could be then used to put QQ2 items overlays and so on.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0mpyf:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Automatic window slide up on keyboard open should be optional,QTBUG-80024,288358,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt.team.quick.subscriptions,h00bs,h00bs,13 Nov '19 09:32,13 Nov '19 09:32,18 Feb '21 09:41,,5.13.2,,,,,,,,,,,,,,,,,,,,,,Quick: Core Declarative QML ,,,,0,,,,"If a textfiel or a similar input element gets focused, and Qt determines that it would be hidden by the opening keyboard, the whole window is moved upwards automatically.

This might make sense in various scenarios, but it also causes a lot of unwanted side-effects. Usually only the content of a page should move up and not the navigation bar, which is then no longer visible, which is very odd for mobile apps. Also positioing items like a floating action bar above the keyboard is impossible, cause you never know if the window is currently moved up and by how much, to adapt the position of the floating button relative to the bottom of the window (to respect the open keyboard).

The developer should have the choice if this automatic window positioning feature should be used, or if he wants to handle it himself. Furthermore the QML window does not seem to reflect the repositioning in any of its properties, like ""y"". So currently, correct me if I am wrong, there seems to be no way for the developer to know if the window was shifted up or not.

The functionality that is responsible for moving the window seems to be deep down in the core and the only ""solution"" to avoid it that I found so far is a very dirty hack: [https://stackoverflow.com/questions/34716462/ios-sometimes-keyboard-pushes-up-the-whole-qml-page/41844127#41844127]",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Android,iOS/tvOS/watchOS,,,,,"0|i0moun:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
The dynamic listview example should allow scrolling outside of visible area,QTBUG-79908,288139,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,w00t,DanielSt,DanielSt,09 Nov '19 15:02,09 Nov '19 15:06,18 Feb '21 09:41,,5.13.2,,,,,,,,,,,,,,,,,,,,,,Quick: Other,,,,0,,,,"The dynamic list view example's scrolling is limited to the visible area of the list view:
https://doc.qt.io/qt-5/qtquick-tutorials-dynamicview-dynamicview3-example.html

The example should be extended with the code between the ""NEW CODE START/END"" tags (or a property so that the ""view"" item is not referenced from the delegate) so that full scrolling is possible:


{code:java}
import QtQuick 2.0
import QtQml.Models 2.1
//![0]
Rectangle {
    id: root

    width: 300; height: 400

    Component {
        id: dragDelegate

        MouseArea {
            id: dragArea

            property bool held: false

            anchors { left: parent.left; right: parent.right }
            height: content.height

            drag.target: held ? content : undefined
            drag.axis: Drag.YAxis

            onPressed: held = true
            onReleased: held = false
            
            // NEW CODE START
            property int lastY: 0
            property bool moveDown: false

            onMouseYChanged: {
                moveDown = lastY < y;
                lastY = y;
            }
            // NEW CODE END

            Rectangle {
                id: content
//![0]
                anchors {
                    horizontalCenter: parent.horizontalCenter
                    verticalCenter: parent.verticalCenter
                }
                width: dragArea.width; height: column.implicitHeight + 4

                border.width: 1
                border.color: ""lightsteelblue""

                color: dragArea.held ? ""lightsteelblue"" : ""white""
                Behavior on color { ColorAnimation { duration: 100 } }

                radius: 2
//![1]
                Drag.active: dragArea.held
                Drag.source: dragArea
                Drag.hotSpot.x: width / 2
                Drag.hotSpot.y: height / 2
//![1]
                states: State {
                    when: dragArea.held

                    ParentChange { target: content; parent: root }
                    AnchorChanges {
                        target: content
                        anchors { horizontalCenter: undefined; verticalCenter: undefined }
                    }
                }

                Column {
                    id: column
                    anchors { fill: parent; margins: 2 }

                    Text { text: 'Name: ' + name }
                    Text { text: 'Type: ' + type }
                    Text { text: 'Age: ' + age }
                    Text { text: 'Size: ' + size }
                }
//![2]
            }
//![3]
            DropArea {
                anchors { fill: parent; margins: 10 }

                onEntered: {
                    visualModel.items.move(
                            drag.source.DelegateModel.itemsIndex,
                            dragArea.DelegateModel.itemsIndex)

                    
                    // NEW CODE START
                    var scrollDir;
                    if (dragArea.moveDown) {
                        scrollDir = 1;
                    }
                    else {
                        scrollDir = -1;
                    }

                    view.currentIndex = dragArea.DelegateModel.itemsIndex + scrollDir;
                    // NEW CODE END
                }
            }
//![3]
        }
    }
//![2]
//![4]
    DelegateModel {
        id: visualModel

        model: PetsModel {}
        delegate: dragDelegate
    }

    ListView {
        id: view

        anchors { fill: parent; margins: 2 }

        model: visualModel

        spacing: 4
        cacheBuffer: 50

    }
//![4]
//![5]
}
//![5]
{code}
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0mnj3:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Qml Drawer could offer header/content/footer areas,QTBUG-79905,288129,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt.team.quick.subscriptions,DanielSt,DanielSt,08 Nov '19 16:35,08 Nov '19 16:35,18 Feb '21 09:41,,5.13.2,,,,,,,,,,,,,,,,,,,,,,Quick: Controls 2,,,,0,,,,The Drawer component could provide standard header/content/footer areas.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0mngv:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Please improve Qt Remote Object documentation,QTBUG-76291,279726,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,bstottle,szykcech,szykcech,08 Jun '19 19:45,08 Nov '19 13:42,18 Feb '21 09:41,,5.12.3,,,,,,,,,,,,,,,,,,,,,,Remote Objects,,,,0,,,,"Hi!

I am interested with Qt Remote Objects. There huge article which introduce with it:

[https://doc.qt.io/qt-5/qtremoteobjects-gettingstarted.html]

But the problem is that it is unclear (at least to me). My English is between B1 and B2 level - so I think it is not very bad. But I can't make clear image of Qt Remote. I have some ideas which can improve this:
 * Please make clear: Is this Qt Remote asynchronous or synchronous inter process call subsystem?!?
 * Please make UML sequence diagrams in order to show proses of establish communication, transmision and disconnect (with and without Registry variants and in Static and Dynamic mode) in simple chat app.
 * Please make UML class diagram in order to show: server site program structure and client site structure in simple chat app.

I think that will help a lot with understanding this young and promises technology.

thanks and best regards

Szyk Cech",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0lc07:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"23 Jun '19 09:35;kelteseth;Yes this would be helpful! We need more UML diagrams to get an better overview!","08 Nov '19 13:42;kdpalara;Hi [~bstottle], I can help with this. Would you happen to have a rough diagram lying around that I can work with? I do agree with the person who filed this ticket -- we are missing a diagram.",,,,,,,,,,,,,,,,,,,,
Add outputtype MERGED to Qt5RemoteObjectsMacros.cmake,QTBUG-79536,287463,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,bstottle,prandeu,prandeu,25 Oct '19 09:04,08 Nov '19 00:19,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Remote Objects,,,,2,Reported_by_support_standard,,,"This is a feature request to add a 'MERGED' option to the Qt5RemoteObjectsMacros.cmake CMake macro.

The repc compiler supports generation of combined replica/source headers with the '-o merged' command line option but this option is not available in the CMake macro in Qt5RemoteObjectsMacros.cmake.

Attached find a patch that adds this functionality to the macro.",,,,,,,,,,,,,,,QTBUG-79058,,,,"25 Oct '19 08:59;prandeu;Qt5RemoteObjectsMacros.cmake.patch;https://bugreports.qt.io/secure/attachment/88564/Qt5RemoteObjectsMacros.cmake.patch",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0mjlb:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add possibility to export generated classes,QTBUG-77524,282502,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,bstottle,poikelin,poikelin,14 Aug '19 17:21,08 Nov '19 00:19,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Remote Objects,,,,1,Reported_by_support_standard,,,"Sometimes it makes sense to build replica classes into libraries. However on Windows everything is private by default and needs to be exported (Q_DECL_EXPORT, Q_DECL_IMPORT). Currently it does not seem possible to add custom macros into generated headers.

For example, the compiler could be extended with support for adding a macro after the {{class}}:

{code}
class MY_EXPORT_MACRO SomeClass
{code}
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0ls7j:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Make REPC_SOURCE and REPC_REPLICA plural,QTBUG-79863,288037,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,bstottle,mbrasser,mbrasser,07 Nov '19 15:09,07 Nov '19 15:09,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Remote Objects,,,,0,,,,"REPC_SOURCES and REPC_REPLICAS seems like it would be more intuitive (since there can be more than one), and better in line with other variables like SOURCES and HEADERS ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0mmx3:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add API to query all available links in a Text,QTBUG-79850,288016,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt.team.quick.subscriptions,jhasse,jhasse,07 Nov '19 10:40,07 Nov '19 13:17,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Quick: Core Declarative QML ,,,,0,,,,"Currently there's linkAt(x, y) which returns if there's a link at the given coordinates. I want to get all available links though, without parsing the HTML myself and without caring about their position.

As a work-around I'm currently looping over all pixels of the Text and calling linkAt at each position.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0mmsn:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Abstract module to support Tensorflow-Lite/Keras models to run inferences on the edge,QTBUG-79847,288009,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,laknoll,dimtass,dimtass,07 Nov '19 09:05,07 Nov '19 09:05,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Other,,,,1,,,,"Since running pre-trained model inferences on the edge targets it's getting more and more common, it would be nice to simplify the integration of models from a couple of wide used frameworks (e.g. Tensorflow-Lite or Keras).

Currently there are some successful paradigms that they do that, but it would be nice if there was just an abstract object (or wrapper class) that was doing all the work in the background and it's simple to use. Also, supporting validation and analysis of the model it would be great, too.

Just dropping this here if anyone sees that's interesting to implement.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0mmr3:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
MaintenanceTool - Add or Remove components: Could show all possible components per installed version.,QTBUG-79717,287816,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,releaseteam,tero.pelkonen,tero.pelkonen,04 Nov '19 07:08,04 Nov '19 07:23,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Packaging & Installer,,,,0,reported_by_support_standard,,,"Users have requested an update to the Maintenance tools : Add or Remove components feature that it would show all possible components for each installed Qt version even if no package categories would be selected.

Other option would be that if the Maintenance tool finds versions that do not belong to LTS category it would have those categories automatically selected.

Currently if no ""Show package categories"" is selected the tool shows all installed version but not the possible components that could be installed. They appear once correct ""Show package categories"" are selected.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0mllz:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Improve display of default docker icons,QTBUG-78698,285442,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt.team.quick.subscriptions,scottpetrovic,scottpetrovic,23 Sep '19 12:43,03 Nov '19 14:30,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,GUI: Look'n'Feel,,,,0,,,,"This is kind of minor, but I think it would be a good usability improvement. I have noticed at least two applications that are using these icons for the dockers. The current icons are quite difficult to read in the current state. Is there any way to improve the design?

There might be others, but I specifically see the ""float"" and the ""close"" icons that could be improved.

One solution might just be to remove that box that goes around the icon images. The images are quite small, so it makes it difficult to read the contents inside.

 

I attached a couple applications that are currently using these. I pointed the area out in the Krita application screenshot.

 ",I am seeing it on Windows 10 x64 right now with the applications. I know at least Krita is using a pretty up to date version of Qt5.,,,,,,,,,,,,,,,,,,"03 Nov '19 14:28;scottpetrovic;close.xpm;https://bugreports.qt.io/secure/attachment/88798/close.xpm","23 Sep '19 12:40;scottpetrovic;krita-screenshot.jpg;https://bugreports.qt.io/secure/attachment/87511/krita-screenshot.jpg","23 Sep '19 12:37;scottpetrovic;olive-editor.jpg;https://bugreports.qt.io/secure/attachment/87512/olive-editor.jpg","03 Nov '19 14:28;scottpetrovic;restore.xpm;https://bugreports.qt.io/secure/attachment/88797/restore.xpm",,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0m88n:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"03 Nov '19 14:30;scottpetrovic;I attached a couple of updated XPM files for the data that would need to be updated. I am not positive, but I think the Windows OS is using the qfusionstyle.cpp file found in the ""src/widgets/styles"" folder.

 

I haven't gotten any feedback or comment on this ticket. If there is another place these requests need to go...let me know.",,,,,,,,,,,,,,,,,,,,,
SVG QIcon rendered to SVG gets rasterized,QTBUG-79647,287678,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,,uiohbgq,uiohbgq,30 Oct '19 17:35,30 Oct '19 17:35,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,SVG Support,,,,0,,,,"I want to export a table/tree/... widget to SVG and use QWidget::render for that on a painter on a QSvgGenerator. Many parts are rendered nicely scalable but not so the expanded icon. Here is a screenshot from the SVG as opened in Inkscape:

!Selection_204.png!

So, my idea was to replace the standard icon with a SVG icon but I found out that QIcon does in no way support rendering to vector scalable outputs. My source codes are attached. Here is the zoomed screenshot of the exported SVG when the expand icon was replaced with a circle and another QIcon was rendered below Child 1:

!Selection_205.png!

This is what I would expect the zoomed output in inkscpae to look like:

!Selection_206.png!",,,,,,,,,,,,,,,,,,,"30 Oct '19 15:37;uiohbgq;Selection_204.png;https://bugreports.qt.io/secure/attachment/88704/Selection_204.png","30 Oct '19 17:32;uiohbgq;Selection_205.png;https://bugreports.qt.io/secure/attachment/88703/Selection_205.png","30 Oct '19 17:34;uiohbgq;Selection_206.png;https://bugreports.qt.io/secure/attachment/88702/Selection_206.png","30 Oct '19 17:35;uiohbgq;circle.svg;https://bugreports.qt.io/secure/attachment/88700/circle.svg","30 Oct '19 17:35;uiohbgq;main.cpp;https://bugreports.qt.io/secure/attachment/88699/main.cpp","30 Oct '19 17:35;uiohbgq;qmake.pro;https://bugreports.qt.io/secure/attachment/88698/qmake.pro","30 Oct '19 17:35;uiohbgq;resources.qrc;https://bugreports.qt.io/secure/attachment/88697/resources.qrc","30 Oct '19 17:35;uiohbgq;table.svg;https://bugreports.qt.io/secure/attachment/88701/table.svg",,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0mku7:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Document that the file url is different on windows and linux,QTBUG-79034,286251,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt.team.quick.subscriptions,autoantwort,autoantwort,07 Oct '19 00:29,30 Oct '19 07:26,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Quick: Dialogs,,,,0,,,,"The FileDialog in the QtQuick.Dialogs package has a property fileUrl containing the selected file by the user. On Windows the property has a value of {{file:///...}} and on linux {{file://...}}. So you have to handle this different on different operation systems, but this is not documented anywhere. A note saying that the 'prefix' is different on windows and linux would be cool.

I see that there are the functions {{pathToUrl}} and {{urlToPath}} which do the right thing, but they are not documented! 
A documentation for the function {{addSelection(?)}} would also be nice.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0md0f:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"29 Oct '19 16:42;kdpalara;[~kleint] Hi, do you think this ticket is worth fixing? If yes, would you be willing to review the patch?","29 Oct '19 18:01;kleint;A link to  QUrl QUrl::fromLocalFile(const QString &localFile) could be added which has some explanation. Other than that, the number of slashes may vary for /absolute_file,  relative_file, a:\windows:file, \\windows_server\path, etc etc, so, I fail to see where the problem is?","30 Oct '19 07:06;kdpalara;OK, I can make that link.

But there's a mention of pathToUrl() and urlToPath() not being documented?
also addSelection()? Is that worth documenting?","30 Oct '19 07:26;kleint;yes, absolutely, pathToUrl() and urlToPath()  are important helpers for this",,,,,,,,,,,,,,,,,,
QBluetooth support for nordic nrf52 sdk recommended,QTBUG-79574,287535,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,ablasche,sherifomran,sherifomran,28 Oct '19 12:28,28 Oct '19 12:28,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Connectivity: Bluetooth,,,,0,,,,"The QBluetooth component is very nice and it works fine in linux using alsa, but i need to put the developed program onto a nordic chip which uses the nordic sdk for bluetooth low energy operation, it would a nice idea to support their sdk, a more interesting feature would be also to support the TI Chip using their sdk.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0mk1b:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
qss issue with special characters (161 to 255),QTBUG-79535,287462,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt.team.quick.subscriptions,erict,erict,25 Oct '19 09:02,25 Oct '19 09:02,18 Feb '21 09:41,,5.12.5,,,,,,,,,,,,,,,,,,,,,,Widgets: Style Sheets,,,,0,,,,"As first encounted by [https://forum.qt.io/topic/55274/solved-qss-with-special-characters/10]

qssscanner seems to not handle correctly special characters (from 161 to 255) like 'é' which may be present in some filenames/(url?), where they must be escaped.

 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Windows,,,,,,"0|i0mjl3:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Extend coordinate.toString() to allow passing the format value too,QTBUG-79393,287244,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,paangele,andysh,andysh,22 Oct '19 12:46,22 Oct '19 12:46,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Location,,,,1,Reported_by_support_standard,,,Extend coordinate.toString() to allow passing the format value too. Currently it is only possible to call toString() and it will use the default format from QML. It would be nice to have the options available as available on the C++ side.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0mi9r:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Consider implementing the new MODBUS Security Protocol,QTBUG-79334,287101,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,heimrich,aha_1980,aha_1980,19 Oct '19 11:25,19 Oct '19 11:26,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,SerialBus: MOD Bus,,,,1,,,,"http://www.modbus.org/docs/MB-TCP-Security-v21_2018-07-24.pdf
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0mhev:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
QText2DEntity control,QTBUG-79320,287048,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,seanharmer,avttrue,avttrue,18 Oct '19 10:05,18 Oct '19 10:05,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Qt3D,,,,1,,,,"It is not possible to fit the QText2DEntity into the specified dimensions (Height and width). The font size somehow adjusts the size of the entity, but in a non-obvious way.
You cannot to fix an object in the root QEntity (detach from the camera movement). 
See small example.",,,,,,,,,,,,,,,,,,,"18 Oct '19 10:02;avttrue;main.cpp;https://bugreports.qt.io/secure/attachment/88353/main.cpp","18 Oct '19 10:02;avttrue;test.pro;https://bugreports.qt.io/secure/attachment/88352/test.pro",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0mh3b:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Qt Assistant is poorly integrated with KDE dark theme,QTBUG-79303,287005,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,jkobus,szykcech,szykcech,17 Oct '19 16:15,17 Oct '19 16:17,18 Feb '21 09:41,,5.13.1,,,,,,,,,,,,,,,,,,,,,,Tools: Assistant,,,,0,,,,Qt Assistant is poorly integrated with KDE dark theme. One picture can mean more than thousand words so please look to attachment.," szyk  ~  uname -a 
Linux optiplex-760 5.2.13-1 #1 SMP PREEMPT Fri Sep 6 16:40:51 UTC 2019 x86_64 GNU/Linux 
 szyk  ~  lsb_release -a 
LSB Version:    1.4 
Distributor ID: KaOS 
Description:    KaOS 
Release:        rolling 
Codename:       n/a",,,,,,,,,,,,,,,,,,"17 Oct '19 16:17;szykcech;Screenshot_20191017_181650.png;https://bugreports.qt.io/secure/attachment/88337/Screenshot_20191017_181650.png",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Linux/X11,,,,,,"0|i0mgtr:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ItemDelegate icon does not take space while loading,QTBUG-79229,286727,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt.team.quick.subscriptions,flaviotordini,flaviotordini,15 Oct '19 10:08,15 Oct '19 10:09,18 Feb '21 09:41,,5.14.0 Beta 1,,,,,,,,,,,,,,,,,,,,,,Quick: Controls 2,,,,0,,,,"When using ItemDelegate in a ListView with a ""slow"" loading icon, the latter does not occupy space. Text is laid out like no icon is set and then moved right when the icon is ready. This is of course wrong and ugly to see in a list.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0mfq7:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Be able to open a specific SQLite database with the local storage plugin,QTBUG-79228,286710,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,w00t,andysh,andysh,15 Oct '19 06:58,15 Oct '19 06:58,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Quick: Other,,,,0,Reported_by_support_standard,,,"Be able to open a specific SQLite database with the local storage plugin. Currently it is only possible to open one that it determines the name for you, having a means to open an existing one created externally would be useful to have as well.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0mfmn:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Provide a cross-platform API for selecting a file in the OS shell,QTBUG-79226,286704,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt.team.quick.subscriptions,smokris,smokris,14 Oct '19 21:23,14 Oct '19 23:38,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,GUI: Look'n'Feel,,,,0,,,,"It would be nice to have an API to open a window in _Windows Explorer_ or _macOS Finder_ or _GNOME Nautilus_ or _KDE Dolphin_ and select a particular file or files.

Qt Creator already implements this in [{{FileUtils::showInGraphicalShell}}|https://github.com/qt-creator/qt-creator/blob/734b9097c7d40161b5a19bded7e22418bb7afcb7/src/plugins/coreplugin/fileutils.cpp#L67]; perhaps it could be moved upstream to {{QDesktopServices}}?

(I realize you can already use {{QDesktopServices::openUrl}} to open a folder in the desktop file manager, but then the user has to find and select the file in that folder, which can be tedious.)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0mflb:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
QLowEnergyServiceData::addCharacteristic,QTBUG-79179,286634,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,ablasche,sherifomran,sherifomran,13 Oct '19 21:45,13 Oct '19 21:45,18 Feb '21 09:41,,5.13.1,,,,,,,,,,,,,,,,,,,,,,Connectivity: Bluetooth,,,,0,,,,"It seems that the serviceData does not accept except 1 characteristic in one service.

 

I tried the following code

 
h4.  
h4. QLowEnergyAdvertisingData leAdd;
 leAdd.setDiscoverability(QLowEnergyAdvertisingData::DiscoverabilityGeneral);
 leAdd.setLocalName(""SensorServer"");
 leAdd.setIncludePowerLevel(true);
h4. QList<QBluetoothUuid> servicesList;
 servicesList.append(QBluetoothUuid::EnvironmentalSensing);
 leAdd.setServices(servicesList);
h4. QLowEnergyCharacteristicData chData, ipData;
 chData.setUuid(QBluetoothUuid::TemperatureMeasurement);
 chData.setValue(QByteArray(21,0)); //reset all the characteristic field
 chData.setValueLength(2,21); //length of the characteristic from 2 to 21 bytes - maximum character length of a characteristics
 chData.setProperties(QLowEnergyCharacteristic::WriteNoResponse | QLowEnergyCharacteristic::Write);
 const QLowEnergyDescriptorData descriptorData(QBluetoothUuid::ClientCharacteristicConfiguration, QByteArray(2, 0));
 chData.addDescriptor(descriptorData);
h4. ipData.setUuid(QBluetoothUuid::GlucoseMeasurement);
 ipData.setValue(QByteArray(21,0)); //reset all the characteristic field
 ipData.setValueLength(2,21); //length of the characteristic from 2 to 21 bytes - maximum character length of a characteristics
 ipData.setProperties(QLowEnergyCharacteristic::Read);
 const QLowEnergyDescriptorData ipdescriptorData(QBluetoothUuid::ClientCharacteristicConfiguration, QByteArray(2, 0));
 ipData.addDescriptor(ipdescriptorData);
h4. 
 QLowEnergyServiceData serviceData;
 serviceData.setUuid(QBluetoothUuid::Temperature);
 serviceData.setType(QLowEnergyServiceData::ServiceTypePrimary);
 serviceData.addCharacteristic(chData);
h4. serviceData.setUuid(QBluetoothUuid::GlucoseMeasurement);
 serviceData.setType(QLowEnergyServiceData::ServiceTypePrimary);
 serviceData.addCharacteristic(ipData);
h4. 
 controller = QLowEnergyController::createPeripheral();

 

 

but the first characteristic chData is added while the second ipData is not.

 

 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Linux/X11,,,,,,"0|i0mf6v:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
QBluetooth BLE lacking example as server with custom characteristics,QTBUG-79175,286624,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,ablasche,sherifomran,sherifomran,13 Oct '19 04:50,13 Oct '19 04:50,18 Feb '21 09:41,,5.14.0 Beta 1,,,,,,,,,,,,,,,,,,,,,,Connectivity: Bluetooth,,,,0,,,,"The current bluetooth low energy examples are nice but not complete. We have the heart rate server example, but the server uses built in Uuid and is not well written. If one wants to extend this example to say 2 new services with 4 characteristics, there are a plenty to write and search how to do it, which is not easy.

I suggest to offer this as an example",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0mf4n:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Allow to disable the installation of the documentation and examples,QTBUG-79035,286231,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,installerteam,littlewhite,littlewhite,05 Oct '19 12:44,07 Oct '19 04:26,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Packaging & Installer,,,,0,,,,"It would be nice to be able to not install the documentation (and examples) in space constrained environment. Indeed, these folders can become huge and are not often use in some cases :
 * devs are really often always connected and it can be quicker to google something than using the offline documentation
 * examples are not that used in in progress project.

I let to you if these should be installed be default of not, my demand is on adding these two as modules/components meaning that they would become easily installable/uninstallable. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0mcvz:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Extend QCoreApplication::sendPostedEvents() to take a millisecond parameter to indicate the maximum time to send the posted events,QTBUG-78992,286141,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,thiago,andysh,andysh,03 Oct '19 13:36,03 Oct '19 20:44,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Core: Event loop,,,,0,Reported_by_support_standard,,,Extend QCoreApplication::sendPostedEvents() to take a millisecond parameter to indicate the maximum time to send the posted events. Similar to how processEvents() works so it does not inadvertently block if this is running via plugin to a non Qt based application for example.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0mccf:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"03 Oct '19 15:00;thiago;sendPostedEvents() does not block. The only reason why it would take measurable time is if the event handlers do. Is that what you want to limit?","03 Oct '19 19:25;andysh;Effectively yes, just in case there is a number of these events pending and there is a need to wait with the rest if the handler (for whatever reason) took a bit of time.","03 Oct '19 20:25;thiago;Maybe instead a simple {{sendOnePostedEvent}} and let the caller decide if they want to do more?","03 Oct '19 20:44;andysh;Sounds reasonable to me",,,,,,,,,,,,,,,,,,
Improve visual appearance of tutorial icons,QTBUG-78921,285943,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,paulwicking,tpyssysa,tpyssysa,01 Oct '19 19:53,02 Oct '19 15:09,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Documentation,,,,0,,,,"The tutorial thumbnails could contain more images, but just an image for 3 different categories: tutorial, video tutorial, and talk. There is no any structure or hierarchy in the tutorials. A similar UI control to use tags would be easier than reading tags under each tutorial. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,QTBUG-81857,9223372036854775807,,,,,,,,,"0|i0mb6v:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"02 Oct '19 04:17;paulwicking;[~tpyssysa] I'm not sure if you want more images OR three ""category images"". What do you have in mind when you write ""use tags""?","02 Oct '19 07:54;leenam;If you mean the functionality and the icons in Qt Creator Welcome mode Tutorials tab, this should be a QTCREATORBUG. 

The Tutorials tab contents come from an XML file, where we can add tags, text, and images. The tags can be filtered at the top.

I introduced the three categories to get some structure to the page, where we can list any URLs. Currently, we have these three kinds of contents linked from the page:

1) tutorial = help topic

2) video tutorial = video about a feature in Qt Creator or an example somehow related to Qt Creator

3) talk = a talk at a Qt event

It is relatively easy to implement a new structure using images (we'll just need the images). The hard part is to decide what we need and how the content available should be structured.

Do you already have a concrete idea of how you would like the current content structured? One way would be to use images for solutions or tools, such as a automotive, automation, Qt Creator, Qt Quick Designer, but that will become really fragmented fast.

 ","02 Oct '19 15:08;leenam;The Tutorials page is constructed by using the data in the \qtcreator\src\plugins\qtsupport\qtcreator_tutorials.xml file, which currently has the following elements:

<?xml version=""1.0"" encoding=""utf-8""?>

<instructionals module=""Qt"">

<tutorials>

<tutorial imageUrl="":qtsupport/images/icons/tutorialicon.png"" difficulty="""" docUrl=""qthelp://org.qt-project.qtcreator/doc/creator-build-example-application.html"" projectPath="""" name=""Help: Building and Running an Example"">

<description><![CDATA[Testing that your installation is successful by opening an existing example application project.]]></description>

<tags>qt creator,build,compile,help</tags>

</tutorial>

So, we have an image, a URL, a title, a description, and tags. I assume we could add more elements.

 ","02 Oct '19 15:09;leenam;There is a commit somewhere in Gerrit with comments, if someone can find it :).",,,,,,,,,,,,,,,,,,
Investigate whether it is possible to workaround the problem of binding nvarchar(max) variables that are bigger than 127 characters,QTBUG-78931,285978,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,mabrand,andysh,andysh,02 Oct '19 08:36,02 Oct '19 08:36,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,SQL Support,,,,0,Reported_by_support_standard,,,"Investigate whether it is possible to workaround the problem of binding nvarchar(max) variables that are bigger than 127 characters. 

https://docs.microsoft.com/en-us/sql/odbc/reference/develop-app/sending-long-
data?view=sql-server-2017

might give some pointers here on how to do it.",,,,,,,,,,,,,,,,,,,"02 Oct '19 08:36;andysh;qtbug78931.tar.gz;https://bugreports.qt.io/secure/attachment/87793/qtbug78931.tar.gz",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0mben:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Qtextedit should provide an API for retrieving an anchor text position,QTBUG-78927,285961,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,esabraha,medoc92,medoc92,02 Oct '19 07:57,02 Oct '19 07:57,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,GUI: Text handling,,,,0,,,,"QTextEdit provides the scrollToAnchor() method to make an anchor visible. As far as I can see, there is no way to retrieve the text segment covered by the anchor, or to set the selection to the anchor contents if any. This would be useful to, for example, highlight the anchor position after scrolling.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0mbav:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Show explicitly the value of an example,QTBUG-78920,285942,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,paulwicking,tpyssysa,tpyssysa,01 Oct '19 19:49,01 Oct '19 19:49,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Documentation,,,,0,Documentation,,,"Some examples have a lot of widget code, even though the UI or widgets are not relevant at all. Migrate example UIs, where widgets are irrelevant, to QML. Migrate examples from custom QML components to Qt Quick Controls. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,QTBUG-81857,9223372036854775807,,,,,,,,,"0|i0mb6n:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Improve personal relevance of Qt examples,QTBUG-78919,285941,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,paulwicking,tpyssysa,tpyssysa,01 Oct '19 19:46,01 Oct '19 19:46,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Documentation,,,,0,Documentation,,,"Evaluators could be shown industry-specific examples or tutorials. Rather than asking any question, could we use tags. At least, tags and targets should be selectable in a similar control on the top left corner. It's perhaps not very intuitive that tags are actually buttons. Although we had a smaller number of examples/tutorials visible at a time, we could still show different examples. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,QTBUG-81857,9223372036854775807,,,,,,,,,"0|i0mb6f:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Reduce the number of examples ,QTBUG-78917,285939,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,paulwicking,tpyssysa,tpyssysa,01 Oct '19 19:27,01 Oct '19 19:41,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Documentation,,,,0,Documentation,,,"As a user, it would be easier to pick from 3 than 50 examples/tutorials. We have a large number of examples/tutorials, from which evaluators can choose. However, which ones should evaluators pick up. Currently, we highlight some examples, but it is still difficult for the evaluator to pick up the most relevant ones. We should show only a few most relevant examples/tutorials and have a button/UI control to show more of them.

We would need to set priorities for the examples in Qt. The priority could be based on the usage frequency from our online doc stats or Qt telemetry. Or if we have a similar example with a widget and QML UI, the latter one would have higher priority.",,,,,,,,,,QTBUG-70781,QTBUG-78918,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,QTBUG-81857,9223372036854775807,,,,,,,,,"0|i0mb5z:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Qt Charts: Handle opacity values even with openGL accelerated series,QTBUG-78845,285779,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,e0348803,miikapernu,miikapernu,30 Sep '19 08:46,30 Sep '19 08:49,18 Feb '21 09:41,,5.12.4,,,,,,,,,,,,,,,,,,,,,,Charts,,,,2,Reported_by_support_standard,,,"Currently changing opacity via QAbstractSeries::setOpacity works as long as the same series doesn't have it's property useOpenGL set to true. Changing useOpenGL to true will result in opacity values set to be ignored.

Suggestion: make the opacity to work even when useOpenGL is set to true.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0ma87:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Expose connman API for saving and forgetting networks,QTBUG-77677,282809,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,teemu.holappa,karimpinter,karimpinter,19 Aug '19 14:07,26 Sep '19 18:06,18 Feb '21 09:41,,5.13.0,,,,,,,,,,,,,,,,,,,,,,Device Creation: Device Utilities,,,,2,Reported_by_support_standard,,,It would be nice if there would be an API in the Device Utilities to save and forget networks,Boot2Qt,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,QTBUG-77774,9223372036854775807,,,Linux/Other display system,,,,,,"0|i0lton:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"20 Sep '19 12:51;amorgan;There is the ability to forget a network, but no way to know through the QML API if the network is already saved.

 

Adding this feature would be extremely helpful.","26 Sep '19 18:06;amorgan;Looking further into the connman documentation, parsing the services string would provide this information:

[https://01.org/connman/documentation]

""_The symbols in the output above are: '*' favorite (saved) network, 'A' autoconnectable, 'O' online and 'R' ready. If no letter is shown in the O/R column, the network is not connected. In addition, temporary states include 'a' for association, 'c' configuration and 'd' disconnecting. When any of these three letters are showing, the network is in the process of connecting or disconnecting._""

 

If the string has * at the beginning it is a favorite network, if this can be exposed as part of the services object in QML, that would resolve this feature.",,,,,,,,,,,,,,,,,,,,
Add new property to QAbstractSeries to allow hiding a series in the legend of a QChartView,QTBUG-75481,277706,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,e0348803,aamann,aamann,26 Apr '19 15:56,25 Sep '19 06:04,18 Feb '21 09:41,,5.12.3,,,,,,,,,,,,,,,,,,,,,,Charts,,,,1,Reported_by_support_standard,,,"The legend for a chart view currently is an all-or-nothing deal, it is not possible to specify on a per-series basis whether a series should be visible in the legend.

There are uses cases (e.g., showing a fit through data) where certain series should not be visible in the legend - adding an additional 'visibleInLegend' property to the QAbstractSeries would add flexibility that is currently missing in QML.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0l0rb:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
add a resize method on QWidget that resizes to a percentage of the screen,QTBUG-77001,281167,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt.team.quick.subscriptions,DidgetMaster,DidgetMaster,10 Jul '19 20:21,22 Sep '19 09:38,18 Feb '21 09:41,,6.0,,,,,,,,,,,,,,,,,,,,,,GUI: Window management,,,,0,,,,"if there was a resize(qreal) method on the QWidget class then

resize(.75); 

would be a quick, convenient way to accomplish the following:

resize(QApplication::primaryScreen()->availableSize() * .75);",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0lkjb:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Support OpenType font features through fontconfig,QTBUG-78645,285336,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,esabraha,cspiegel,cspiegel,20 Sep '19 17:06,20 Sep '19 17:06,18 Feb '21 09:41,,5.13.1,,,,,,,,,,,,,,,,,,,,,,GUI: Font handling,,,,3,,,,"Fontconfig supports [OpenType features|https://typofonderie.com/font-support/opentype-features/], but it looks like Qt does not handle this.  As a concrete example, create a file called ~/.config/fontconfig/conf.d/00-features.conf with the following:

 
{{<?xml version=""1.0""?>}}
{{<!DOCTYPE fontconfig SYSTEM ""fonts.dtd"">}}
{{<fontconfig>}}
{{    <match target=""font"">}}
{{        <test name=""family"">}}
{{            <string>Source Code Pro</string>}}
{{        </test>}}
{{        <edit name=""fontfeatures"" mode=""assign_replace"">}}
{{            <string>zero</string>}}
{{        </edit>}}
{{    </match>}}
{{</fontconfig>}}

Explanation:

The font [Source Code Pro|https://github.com/adobe-fonts/source-code-pro] has, by default, a dotted zero. But the font includes the ""zero"" OpenType feature which provides a slashed zero instead. The fontconfig rule above will enable the zero feature for Source Code Pro.

This works in Pango-based applications, but does not appear to work in Qt. Pango applications get the slashed zero, but Qt applications still get a dotted zero.

It'd be great if Qt could support OpenType features via fontconfig.",Fontconfig version 2.13.1.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Linux/X11,,,,,,"0|i0m7l3:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Implement API for stopping and starting network scan,QTBUG-77678,282810,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,teemu.holappa,karimpinter,karimpinter,19 Aug '19 14:10,20 Sep '19 12:55,18 Feb '21 09:41,,5.13.0,,,,,,,,,,,,,,,,,,,,,,Device Creation: Device Utilities,,,,2,Reported_by_support_standard,,,It would be nice if device utilities would have an API for stopping and starting network scan.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,QTBUG-77774,9223372036854775807,,,Linux/Other display system,,,,,,"0|i0ltov:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"20 Sep '19 12:55;amorgan;There is no way to control how scanning behaves through the QML API. There is a scan method for the wifi, but doesn't appear to change behavior.

 

This request was influenced by running into a bug that sometimes the wifi networks will not show unless the wifi interface is powered off then back on. Unfortunately it seems intermittent and only occurs sometimes after the device is on for a while, even after a device powercycle.",,,,,,,,,,,,,,,,,,,,,
Add Qt Quick Controls 2 horizontal SpinBox,QTBUG-78568,285241,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt.team.quick.subscriptions,DanielSt,DanielSt,20 Sep '19 07:55,20 Sep '19 07:55,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Quick: Controls 2,,,,0,,,,A orientation property for the SpinBox for selecting horizontal or vertical orientation of the buttons would be useful.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0m707:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Publish QDirSortItemComparator,QTBUG-78305,284591,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,dfaure_kdab,msdobrescu,msdobrescu,16 Sep '19 06:55,16 Sep '19 15:05,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Core: Item Models,,,,0,,,,"Please make the QDirSortItemComparator public.
It could be used for custom sort of paths or punctual paths comparisons in some cases.
My purpose is to use it in the KDE project for certain operations without re-writing/duplicating the code.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0m3xz:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Possibility to open Androids default web browser from WebView via link.,QTBUG-78259,284502,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,stromme,tero.pelkonen,tero.pelkonen,12 Sep '19 12:53,12 Sep '19 12:59,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,WebView,,,,0,Reported_by_support_standard,,,WebView does not support currently opening Androids default browser separately via link.  This would be useful feature for some users.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Android,,,,,,"0|i0m3e7:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"QStandardPaths: add ""Public"" and ""Templates"" standard directories",QTBUG-78092,284145,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,dfaure_kdab,gb_2,gb_2,06 Sep '19 16:24,06 Sep '19 17:14,18 Feb '21 09:41,,5.12.4,5.13.1,5.14.0,,,,,,,,,,,,,,,,,,,,Core: I/O,,,,0,,,,XDG_TEMPLATES_DIR and XDG_PUBLICSHARE_DIR are missing for Unix/Linux and should be added so we can use them for example here: https://lxr.kde.org/source/frameworks/kio/src/core/kioglobal_p.cpp,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Linux/Wayland,Linux/X11,,,,,"0|i0m1bb:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
EGLFS OpenWFD window creation causes fatal error if display config isn't available ,QTBUG-77301,281945,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,kiollila,ibychkov,ibychkov,02 Aug '19 12:52,03 Sep '19 13:51,18 Feb '21 09:41,,5.12.4,,,,,,,,,,,,,,,,,,,,,,QPA: EGLFS,,,,0,,,,"A patch to support two native windows (QWindow) in one QGuiApplication application was provided by Qt (look at the attachment).

It works if an appropriate display configuration (OpenWF device, port, pipeline) is available on system. But in case of the display configuration doesn't exists on the system a code from patch causes fatal error and application stops working.

Suggest to handle this case as just returning the error and let the application itself to decide how to handle it.",,,,,,,,,,,,,,,,,,,"02 Aug '19 12:35;ibychkov;cluster_hw_layer.patch;https://bugreports.qt.io/secure/attachment/85887/cluster_hw_layer.patch",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Integrity,,,,,,"0|i0lp2f:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Please add a method for QChart or QChartsView to fill a part below a series,QTBUG-75905,278692,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,e0348803,gaoyichuan,gaoyichuan,19 May '19 03:03,29 Aug '19 21:00,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Charts,,,,1,,,,"I'd like a method to fill a part of my chart for some visualization like this (the blue part):

!https://i.stack.imgur.com/D2O3j.jpg!

Currently, it seems there are no solutions for this purpose, thanks a lot if you can add this method! ",I'm using Qt 5.12.3 on Arch Linux.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0l64n:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"29 Aug '19 21:00;fgsdbudwin;You should be able to add an AreaSeries to your ChartView to represent the shaded area [https://doc.qt.io/qt-5/qml-qtcharts-areaseries.html]",,,,,,,,,,,,,,,,,,,,,
Expose MAC address to NetworkSettingsIP* Components,QTBUG-77788,283060,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,teemu.holappa,karimpinter,karimpinter,23 Aug '19 06:09,23 Aug '19 06:10,18 Feb '21 09:41,,5.13.0,,,,,,,,,,,,,,,,,,,,,,Device Creation: Device Utilities,,,,0,Reported_by_support_standard,,,Expose MAC address to NetworkSettingsIP* so it can be used for adding the device to whitelist or for filtering.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Linux/Other display system,,,,,,"0|i0lv5j:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Support for transient parents by xdg-foreign protocol,QTBUG-73801,273886,Suggestion,Open,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,johanhelsing,avolkov,avolkov,13 Feb '19 13:48,20 Aug '19 09:35,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,QPA: Wayland,,,,3,,,,"Need a possibility to create a representation of an imported window (surface) by QWindow::fromWinId(WId id), where ""id"" is a string.

""set_parent_of"" request then can be used to implement support for QWindow::setTransientParent() method.

https://cgit.freedesktop.org/wayland/wayland-protocols/tree/unstable/xdg-foreign

This can be used in xdg-desktop-portal-kde: https://cgit.kde.org/xdg-desktop-portal-kde.git/tree/src/utils.cpp",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0kg7z:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Consider adding an image cropper control to Qt Quick Controls 2,QTBUG-77655,282763,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt.team.quick.subscriptions,daljit97,daljit97,18 Aug '19 11:02,18 Aug '19 11:07,18 Feb '21 09:41,,5.12.0,5.13.0,,,,,,,,,,,,,,,,,,,,,Quick: Controls 2,,,,0,,,,"Consider adding a Qt Quick Controls 2 component that helps cropping images in QML. On Android and iOS there are  several third party libraries that allows you to do this. For example, look here [https://github.com/ArthurHub/Android-Image-Cropper.] Microsoft provides a ImageCropper XAML control to achieve this and make up for the lack of third party libraries [https://docs.microsoft.com/en-us/windows/communitytoolkit/controls/imagecropper]

Image cropping is a very common task, especially on touch screen devices, and it would be great that Qt included a standard implementation that simplify the process. Currently, in order to achieve this one has to use a combination of MouseAreas, PinchAreas and Flickable, and it is harder to implement than it would seem like. I think Microsoft's implementation is great and Qt should mimic it. The control should be implemented in C++ and be integrable with a QML Image.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0ltev:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Allow Q3DCamera rotation also on Z axis,QTBUG-74720,276147,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,tokorpip,miikapernu,miikapernu,26 Mar '19 13:58,16 Aug '19 15:33,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Data Visualization,,,,1,Reported_by_support_standard,,,"Current behavior:
 * Possible to rotate along x and y axis

Desired behavior:
 * Possible to rotate along x, z and y axis",,,,,,,,,,,,,,,,,,,"16 Aug '19 15:23;smurphy;1200px-Coord_planes_color.svg.png;https://bugreports.qt.io/secure/attachment/86341/1200px-Coord_planes_color.svg.png",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0krlj:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"16 Aug '19 15:33;smurphy;This bug was generated from a support request I initiated. I'm trying to display 3D data to an audience that primarily has a math/science background. For this audience, they typically think of 3D data with the following screen orientation, where +z is oriented vertically ""up"":

!1200px-Coord_planes_color.svg.png|width=328,height=274!

 

There does not seem to be an easy way to implement this orientation using Q3DSurface, which appears to lock the +y axis in the ""up"" direction",,,,,,,,,,,,,,,,,,,,,
Qt3D QBuffer memory optimization,QTBUG-77534,282520,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,seanharmer,skenyon,skenyon,15 Aug '19 07:24,16 Aug '19 05:16,18 Feb '21 09:41,,5.12.1,,,,,,,,,,,,,,,,,,,,,,Qt3D,,,,0,,,,"It seems that regardless of whether you use QBuffer's setData() or setDataGenerator(), somewhere a copy is made of a QByteArray to m_data. Is this necessary?

Use case: Professional desktop app that loads triangle meshes that can get very large. A lot of memory is wasted because there's a copy of the mesh data loaded in a proprietary storage for the application and when that's transferred to Qt3D's vertex buffers, now there's also a copy in the QByteArray in the buffer that is impossible to delete via the API.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Linux/X11,macOS,Windows,,,,"0|i0lsbj:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"16 Aug '19 05:16;skenyon;I.e. is it absolutely necessary to have a copy in the Render Buffer?",,,,,,,,,,,,,,,,,,,,,
Would it be feasible to modify the Qt widget system to reduce dependency on internal private classes such as QPrivateWidget?,QTBUG-77626,282628,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt.team.quick.subscriptions,rudolf@pobox.com,rudolf@pobox.com,15 Aug '19 15:41,15 Aug '19 15:41,18 Feb '21 09:41,,5.12.4,,,,,,,,,,,,,,,,,,,,,,Widgets: Layout,,,,0,,,,"Thanks as ever for Qt, which is excellent. Further to the Qt6 blog post and request for broad-brush suggestions:

When attempting to modify Qt widgets for specific situations, it is often very hard to proceed into complex territory because the code depends on special private classes. For example, my attempt to write a new QScrollArea failed as follows:
 * one can rewrite QScrollArea and QScrollAreaPrivate;
 * and then QAbstractScrollArea and QAbstractScrollAreaPrivate;
 * but QAbstractScrollAreaPrivate notes that it has ""friend class QWidgetPrivate;"" and in qwidget.cpp we see that QWidgetPrivate has special handling for QAbstractScrollArea.

Therefore, it sometimes becomes impossible to make modified versions of parts of the widget/layout system because they are tightly integrated with private classes.

I quite understand if the private class system is necessary (e.g. for speed, binary compatibility, or some other library-related reason) – but is it? Could these sorts of private classes, in a future Qt6, be integrated into the public versions, so that developers can extend them more easily and have the Qt framework talk to them via their virtual functions?",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0lszj:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Suggest new or modified layouts that handle heightForWidth better,QTBUG-77625,282627,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt.team.quick.subscriptions,rudolf@pobox.com,rudolf@pobox.com,15 Aug '19 15:30,15 Aug '19 15:30,18 Feb '21 09:41,,5.12.4,,,,,,,,,,,,,,,,,,,,,,Widgets: Layout,,,,0,,,,"Thanks as ever for Qt, which is excellent. Further to the Qt6 blog post and request for suggestions:

In Qt 5 I have found it hard to (a) create labels that word-wrap their text, and (b) prefer to be wide rather than tall, and (c) are handled gracefully by Qt layouts such as QVBoxLayout, QHBoxLayout, QGridLayout, and FlowLayout, such that parents resize appropriately for their children.

Previous discussion is at [https://stackoverflow.com/questions/14238138/heightforwidth-label] , which remains relevant.

I'd like to suggest it for Qt6. This is operational and suggested code is at [https://github.com/RudolfCardinal/camcops/tree/master/tablet_qt]

... specifically,
 * common/gui_defines.h
 * lib/margins.*
 * lib/sizehelpers.*
 * layouts/*
 * widgets/basewidget.*
 * widgets/labelwordwrapwide.*
 * widgets/verticalscrollarea.*

(also attached).

all the best,

Rudolf Cardinal.

 ","Qt5 for Linux, Android, or Windows.",,,,,,,,,,,,,,,,,,"15 Aug '19 15:27;rudolf@pobox.com;basewidget.cpp;https://bugreports.qt.io/secure/attachment/86304/basewidget.cpp","15 Aug '19 15:27;rudolf@pobox.com;basewidget.h;https://bugreports.qt.io/secure/attachment/86288/basewidget.h","15 Aug '19 15:27;rudolf@pobox.com;boxlayouthfw.cpp;https://bugreports.qt.io/secure/attachment/86295/boxlayouthfw.cpp","15 Aug '19 15:27;rudolf@pobox.com;boxlayouthfw.h;https://bugreports.qt.io/secure/attachment/86294/boxlayouthfw.h","15 Aug '19 15:27;rudolf@pobox.com;flowlayouthfw.cpp;https://bugreports.qt.io/secure/attachment/86291/flowlayouthfw.cpp","15 Aug '19 15:27;rudolf@pobox.com;flowlayouthfw.h;https://bugreports.qt.io/secure/attachment/86292/flowlayouthfw.h","15 Aug '19 15:27;rudolf@pobox.com;gridlayouthfw.cpp;https://bugreports.qt.io/secure/attachment/86289/gridlayouthfw.cpp","15 Aug '19 15:27;rudolf@pobox.com;gridlayouthfw.h;https://bugreports.qt.io/secure/attachment/86287/gridlayouthfw.h","15 Aug '19 15:26;rudolf@pobox.com;gui_defines.h;https://bugreports.qt.io/secure/attachment/86309/gui_defines.h","15 Aug '19 15:27;rudolf@pobox.com;hboxlayouthfw.cpp;https://bugreports.qt.io/secure/attachment/86305/hboxlayouthfw.cpp","15 Aug '19 15:27;rudolf@pobox.com;hboxlayouthfw.h;https://bugreports.qt.io/secure/attachment/86303/hboxlayouthfw.h","15 Aug '19 15:27;rudolf@pobox.com;labelwordwrapwide.cpp;https://bugreports.qt.io/secure/attachment/86306/labelwordwrapwide.cpp","15 Aug '19 15:27;rudolf@pobox.com;labelwordwrapwide.h;https://bugreports.qt.io/secure/attachment/86301/labelwordwrapwide.h","15 Aug '19 15:27;rudolf@pobox.com;layouts.h;https://bugreports.qt.io/secure/attachment/86290/layouts.h","15 Aug '19 15:27;rudolf@pobox.com;margins.cpp;https://bugreports.qt.io/secure/attachment/86296/margins.cpp","15 Aug '19 15:27;rudolf@pobox.com;margins.h;https://bugreports.qt.io/secure/attachment/86307/margins.h","15 Aug '19 15:27;rudolf@pobox.com;qtlayouthelpers.cpp;https://bugreports.qt.io/secure/attachment/86299/qtlayouthelpers.cpp","15 Aug '19 15:27;rudolf@pobox.com;qtlayouthelpers.h;https://bugreports.qt.io/secure/attachment/86308/qtlayouthelpers.h","15 Aug '19 15:27;rudolf@pobox.com;sizehelpers.cpp;https://bugreports.qt.io/secure/attachment/86302/sizehelpers.cpp","15 Aug '19 15:27;rudolf@pobox.com;sizehelpers.h;https://bugreports.qt.io/secure/attachment/86300/sizehelpers.h","15 Aug '19 15:27;rudolf@pobox.com;vboxlayouthfw.cpp;https://bugreports.qt.io/secure/attachment/86310/vboxlayouthfw.cpp","15 Aug '19 15:27;rudolf@pobox.com;vboxlayouthfw.h;https://bugreports.qt.io/secure/attachment/86285/vboxlayouthfw.h","15 Aug '19 15:27;rudolf@pobox.com;verticalscrollarea.cpp;https://bugreports.qt.io/secure/attachment/86298/verticalscrollarea.cpp","15 Aug '19 15:27;rudolf@pobox.com;verticalscrollarea.h;https://bugreports.qt.io/secure/attachment/86293/verticalscrollarea.h","15 Aug '19 15:27;rudolf@pobox.com;verticalscrollareaviewport.cpp;https://bugreports.qt.io/secure/attachment/86286/verticalscrollareaviewport.cpp","15 Aug '19 15:27;rudolf@pobox.com;verticalscrollareaviewport.h;https://bugreports.qt.io/secure/attachment/86297/verticalscrollareaviewport.h",,,,,,9223372036854775807,,,All,,,,,,"0|i0lszb:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
QImageReader should support incremental loading of large images,QTBUG-77475,282416,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,vgt,ssokolow,ssokolow,14 Aug '19 07:32,14 Aug '19 07:33,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Image formats,,,,0,,,,"Since at least the GTK+ 2.x era, {{GdkPixbufLoader}}'s {{area-prepared}} and {{area-updated}} signals, have enabled a form of asynchronous image loading which allows users of tools like GQView (now Geeqie) to see and react to the parts of an image that _have_ loaded before the load process finishes.

(This is very useful for using a scroll wheel to scrub through a collection of images because, not only does it allow the user to make judgments based on a partially loaded image, it also allows the UI to avoid feeling janky if they are rapidly scrolling through a set of images as a means of approximating PgUp/PgDown motion using the mouse and they encounter an unusually large image. Both things Gwenview, KDE's closest equivalent to GQView, has historically suffered from.)

The closest equivalent that I've been [able to find|https://wiki.qt.io/Loading_Large_Images] in Qt is the ability for QImageReader backends to clip the image as part of the loading process, which has much less format support than GdkPixbufLoader appears to support and is inherently going to be heavier than periodically dispatching a signal containing a reference to the QImage that's in the process of having its backing store populated.

(Though I did find evidence of interest in going back [at least to 2009|https://lists.qt-project.org/pipermail/qt-interest-old/2009-June/007897.html].)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0lron:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Scene3D as texture provider,QTBUG-77396,282217,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,seanharmer,mbrasser,mbrasser,08 Aug '19 15:02,08 Aug '19 15:09,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Qt3D,,,,0,,,,"Providing a QSGTextureProvider from Scene3D should allow it to be used by ShaderEffect (including QtGraphicalEffects) without an additional FBO.

There are a few things that make this potentially more difficult:
* vertical flip (the texture used is vertically flipped from what ShaderEffect expects)
* no premultiplied alpha (currently Scene3D handles this in the shader; maybe a texture provider would only work when Scene3D had opaque content?)

This might also require the texture provided to be a QSGDynamicTexture subclass for updates to work properly.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0lqhz:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
QT Purchasing does not offer reciept number of old purchase,QTBUG-76665,280480,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,esabraha,sherifomran,sherifomran,25 Jun '19 16:26,08 Aug '19 01:12,18 Feb '21 09:41,,5.13.0 RC 3,,,,,,,,,,,,,,,,,,,,,,Purchasing,,,,0,,,,there is no way in qt purchasing to load the receipt number of a product that was purchased or the receipt data,"win

mac

all os",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0lgg7:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"31 Jul '19 14:01;Harald Meyer;In macOS/iOS you can use the QInAppTransaction::orderId() method for getting the transactionIdentifier. On Android the orderId() returns the orderId from the billing interface but there is no way to get the purchaseToken yet (this should be changed).

The way how receipt data is collected differs again:

In iOS you have to do it this way: [https://developer.apple.com/documentation/storekit/in-app_purchase/validating_receipts_with_the_app_store] . Although Apple offers a verification server, it is recommended to use your own web server for validation.

In Android you have to fetch the receipt data using the purchaseToken and your own web server which communicates with the Google servers over REST.","31 Jul '19 17:19;Harald Meyer;The purchase token will be exposed as a platform property with the patch from here: QTBUG-49606.","04 Aug '19 21:43;sherifomran;[~Harald Meyer]: In Mac OS there are two methods of installing the software, either purchasing through appstore or from outside the appstore. Would QInAppTransaction::orderId() produce the receipt that one can use for example for allowing only one pc to activate the software or to disallow jailbrocken apps?

can you provide an example how to call it?

 ","05 Aug '19 04:18;Harald Meyer;If the app is purchased in the Mac App Store then you can verifying the order as described here: [https://developer.apple.com/documentation/storekit/in-app_purchase/validating_receipts_with_the_app_store]. You do not need the orderId() for this.","07 Aug '19 02:59;sherifomran;As far as i understand this is a swift code, mixing C++ with Apple Specific code needs alot of knowledge to get both (.mm and .cpp) compiling. I would appreciate if you provide an example, in which the receipt can be loaded into a C++ application in Qt. Please correct me, if i am wrong. Fetch the receipt data should be part of QtPurchasing or at least provide an example to use it, i think it is not as easy as the link says. Otherwise we need some sort of licensing mechanism to disallow simulatenous running of apps on different devices.

 ","07 Aug '19 05:03;Harald Meyer;You can open the receipt data from ""Bundle.main.appStoreReceiptURL"" using a QFile and send the data to your web server. The validation process is performed on your web server. You can try to contact someone from the Qt company and suggest that they provide a licensing server so that you do not have to run your own licensing server.","08 Aug '19 01:09;sherifomran;[~Harald Meyer]: no need for external licensing server but the process of opening Bundle.main.appstoreReciptUrl with QFile which you said is not clear to me, how to implement it in C++ using Qt. To get the ReciptUrl it is swift code !

This [link|https://stackoverflow.com/questions/27544351/how-to-use-appstorereceipturl] shows swift code but this will not run in Qt",,,,,,,,,,,,,,,
[suggestion] QtWayland.Compositor: change multi-screen behaviour,QTBUG-77317,281981,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,johanhelsing,damianatorrpm,damianatorrpm,05 Aug '19 06:03,07 Aug '19 11:05,18 Feb '21 09:41,,5.13.0,,,,,,,,,,,,,,,,,,,,,,QPA: Wayland,,,,0,,,,"Instead of each surface being on each output, it would be nice if the whole compositor is a ""space"". 
Basically what I'm proposing is the approach of 
{code:java}
            Repeater
            {
                model: shellSurfaces
                ShellSurfaceItem
                {
                    autoCreatePopupItems: true
                    shellSurface: modelData
                }
          }
{code}
to be parent-able not only to a window of an output but to the compositor itself and the shellsurfaceitem to be draggable accross WaylandOutputs.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Linux/Wayland,,,,,,"0|i0lp93:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
QPrinterInfo / QPrintDialog inconsistent name for shared network printer,QTBUG-77339,282069,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,johnlayt,sbielmann,sbielmann,06 Aug '19 08:41,07 Aug '19 07:38,18 Feb '21 09:41,,4.8.7,5.12.4,,,,,,,,,,,,,,,,,,,,,GUI: Printing,,,,0,,,,"I am not sure whether this is really a bug, or to be discussed.

On Windows 7. Having a system with 2 PC's. *PC-1* and *PC-2*.

*PC-1* has configured a printer named *MyPrinter*.

This printer is shared and used on *PC-2*.

On *PC-2*, using *QPrintDialog* I see *MyPrinter* in the *Select Printer* list. However calling *QPrinter::printerName()* on the selected printer will give me *\\PC-1\MyPrinter*

On *PC-2*, using *QPrinterInfo::availablePrinters()* with *QPrinterInfo:printerName()* I get *\\PC-1\MyPrinter*.

My use case is that I have to store the printer name in the database, another part of the application not written in Qt will then read and handle it. So my work around is to use *MSDN* *EnumPrinters()* with *level 2* where I get *pPrinterName* (the one used in Qt) and *pShareName*.

 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Windows,,,,,,"0|i0lplz:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"06 Aug '19 12:42;shausman;It sounds like what you're asking is an API that returns you the ""user readable name"" of the printer as well as (optionally) the canonical name (share name).","07 Aug '19 07:38;sbielmann;Maybe it could be useful to have access to both. At the moment Qt is not returning the user readable name, the user is not seeing *\\PC-1\MyPrinter* in print dialog windows, neither in Qt print dialog nor Windows print dialogs. It is always *MyPrinter*. And the latter is accessible as *pShareName.*",,,,,,,,,,,,,,,,,,,,
Qt3D support for double-precision floating point,QTBUG-77203,281745,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,seanharmer,skenyon,skenyon,26 Jul '19 20:37,01 Aug '19 10:19,18 Feb '21 09:41,,5.13.0,,,,,,,,,,,,,,,,,,,,,,Qt3D,,,,1,,,,"I promised a client (using Qt3D for a detailed CAD type of application) I would log a bug. They went through a lot of problems because they operate in double precision, but have to convert to float for Qt3D (and the Qt classes that uses such as QVector3D).

I saw QTBUG-8211 (although that was for the pre-KDAB Qt3D), and I understand we still want to emphasize portability and speed. However, it should be noted there are use cases for double such as the super-detailed CAD use case where both visually and camera-control wise double is better. And OpenGL / Vulkan shaders and supposedly some hardware exists that can do double floats.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Linux/X11,macOS,Windows,,,,"0|i0lnvr:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"01 Aug '19 10:19;kelteseth;This would be releavant for our usecase as well. I cannot fully disclose our product but it has to do with drawing large areas of content ( like a simple version of Berlin):)",,,,,,,,,,,,,,,,,,,,,
Qt Quick Challange,QTBUG-77261,281857,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt.team.quick.subscriptions,returnx,returnx,31 Jul '19 07:44,31 Jul '19 14:56,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Other,,,,1,,,,"Inspired by [`flutter create`|https://flutter.dev/create], I think it would be an amazing approach if QtCompany creates the QtQuick challenge to empower of Qt community. 
 Unfortunately, the flutter community is growing up very faster than the Qt community.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0lojb:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ChartView has no possibility to add a series,QTBUG-73428,273136,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,e0348803,folibis,folibis,31 Jan '19 12:57,30 Jul '19 11:18,18 Feb '21 09:41,,5.11,,,,,,,,,,,,,,,,,,,,,,Charts,,,,1,,,,"ChartView has no  possibility to manipulate series at all. It has no option to add series so it breaks all attempts to pass a series from C++, adding dynamically created series etc. There is no option to change series z order (for example to move some series to be on top). There is no possibility to remove a series from the chart without deleting the series itself. It will be nice to have all these functions.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0kblz:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"30 Jul '19 11:15;ypnos;QChart is already missing the option to reorder series. So if you want to change the order, you need to remove and re-add all series.

 

An
{code:java}
insertSeries(QAbstractSeries *series, QAbstractSeries *before){code}
method would already be a tremendous help. ",,,,,,,,,,,,,,,,,,,,,
RichText table border uses obsolete syntax,QTBUG-77213,281762,Suggestion,Open,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,esabraha,pderocco,pderocco,28 Jul '19 05:52,30 Jul '19 05:14,18 Feb '21 09:41,,5.13.0,,,,,,,,,,,,,,,,,,,,,,GUI: Text handling,,,,0,,,,"If I want a <table> to have 1-pixel grid lines in a RichText QML Text object, I need to do two things: I need to specify {{<table cellspacing=-1 style=""border-width: 1px"">}}. Neither of these is valid HTML, I believe. First of all, cellspacing is gone in HTML5, but I don't think negative values were ever really legal. Second, as far as I can tell, border-width is intended for other tags, not tables-it does bupkis in Firefox. To do this in a real browser, you have to do {{<table style=""border-spacing: 0; border-collapse: collapse;"">}} and also {{<td style=""border: solid 1px;"">}}, although this can be simplified in a stylesheet with:

table.foo \{ border-spacing: 0; border-collapse: collapse; }

table.foo td \{ border: solid 1px; }

(sorry, can't figure out how to get something with braces displayed in monospace) and then just use {{class=""foo""}} on the table. None of these styling properties seem to be supported in RichText. So if I want certain HTML text to be usable in both RichText and in a real browser, I have to include both sets of properties and the cellspacing attribute. It would be nice if this were cleaned up once and for all. The infrastructure is already there for handling composite styling selectors, and the underlying formatting parameters other than border-collapse are already there, they just need to be accessed by the proper styling properties.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0lnzj:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"29 Jul '19 09:58;esabraha;Thanks for the report!

However, it is not a goal that the subset of HTML to express rich text in Qt components is up-to-date, or even compatible, with modern HTML, so I will close this as out of scope. The Text component in Qt Quick (and similar components in Qt Widgets) are only intended to be able to display simple enhanced text, and they support a dialect of HTML as the carrier format, since this has the added convenience of being familiar to many users. 

For a fully functioning HTML5 browser, please use the Qt Web Engine module. ","29 Jul '19 18:23;pderocco;Can you just reclassify this as a suggestion, or should I resubmit it as one?","30 Jul '19 05:14;esabraha;No problem, I have reopened it as a suggestion.",,,,,,,,,,,,,,,,,,,
Add a signal to QSystemTrayIcon that indicates which message was actually clicked (in the case of more than one notification),QTBUG-77221,281779,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt.team.quick.subscriptions,andysh,andysh,29 Jul '19 09:02,29 Jul '19 09:03,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Widgets: Widgets and Dialogs,,,,0,Reported_by_support_standard,,,"Add a signal to QSystemTrayIcon that indicates which message was actually clicked (in the case of more than one notification). This is possible on macOS at least, but not from Windows from the looks of things so it would have to be only available where the system supports it.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0lo2v:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"29 Jul '19 09:03;andysh;I have a patch to implement this for macOS at least, but not sure if we want to include it because of the lack of implementation on Windows.",,,,,,,,,,,,,,,,,,,,,
Improve Flickable pressDelay logic,QTBUG-77187,281711,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt.team.quick.subscriptions,danilpinchuk,danilpinchuk,25 Jul '19 18:16,25 Jul '19 18:16,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Quick: Core Declarative QML ,,,,0,,,,"There are cases when it might be useful to deliver the events without delays: for example there could be a ListView containing items with complex content which might want to process events immediately (e.g. sliders). In that particular case it could be useful to have additional possibility to check if the target item is going to grab the input (in order to process it by its own) before delaying the input event by default for all the items.

The main idea is to preserve the feature of delayed input but also bring some flexibility by providing a method to deliver the input straight to the specific items of a Flickable or any other custom component.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0lnon:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
QtWayland.Compositor: respect mouse constraints,QTBUG-76803,280723,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,johanhelsing,damianatorrpm,damianatorrpm,30 Jun '19 17:50,25 Jul '19 08:38,18 Feb '21 09:41,,5.13.0,,,,,,,,,,,,,,,,,,,,,,QPA: Wayland,,,,1,,,,"I really like the way QtWayland.Compositors approach.

I think it is the future of the Linux Desktop.

 

It seems there are only two major functionalities missing:

1) Middle click-paste aka primary selection which I read on the LXQT mailing list that 

     this feature is already in the pipeline for Qt 5.14

2)  Games need to be able to grab the mouse pointer.
 
{code:java}
plfiorini commented 13 days ago
Probably due to missing pointer_constraints_unstable_v1 and relative_pointer_unstable_v1protocol implementations in the compositor. 
{code}
 [https://github.com/lirios/qml-xwayland/issues/4]

It wouid be nice if this can make it into Qt at some point as well.

 

3) Remote/Screenshoot/Screencast 

     Not sure if Qt is the right place to implement this though.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Linux/Wayland,,,,,,"0|i0lhv3:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"25 Jul '19 08:38;plfiorini;Can't guarantee that I will ever implement pointer constraints and relative pointer protocols, but at least I can read the specs and get familiar with them, then see if I can find the time to do it.

If someone else want to do it, please go ahead but ping me so we can coordinate.

As for remote/screenshoot/screencast I don't know if Qt is the right place.
There are wlroots protocols for that and I'm curious to see if they are better than the D-Bus protocols I have implemented in the Liri compositor. A server-side implementation may be proposed for inclusing in QtWayland.",,,,,,,,,,,,,,,,,,,,,
buttonBox object standardButtons list missing 'Run' button.,QTBUG-77180,281691,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt.team.quick.subscriptions,bglenk,bglenk,25 Jul '19 07:48,25 Jul '19 08:22,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Widgets: Widgets and Dialogs,,,,0,,,,"Using QT Designer 5.11.1 for QGIS UI layout file - not sure what version of Qt Creator.

Please consider adding 'Run' to the long list of standardButtons in the buttonBox object.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Windows,,,,,,"0|i0lnkf:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
More control on QSlider display properties,QTBUG-77131,281566,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt.team.quick.subscriptions,jellby,jellby,22 Jul '19 08:13,22 Jul '19 08:13,18 Feb '21 09:41,,5.13.0,,,,,,,,,,,,,,,,,,,,,,GUI: Look'n'Feel,Widgets: Styles,,,0,,,,"The QSlider components, in some styles (e.g. Fusion), has different background colors on the groove, usually indicating that the left part is ""active"". This may look good, but can also be misleading or convey wrong information. I'd like the option to disable this special coloring, having just a plain background as with other styles (e.g. Windows or Oxygen), and to set where the ""starting point"" should be (left, right, arbitrary inside position).

Use cases:
 * A slider that goes from -10 to 0. I'd like the color to start from the right side.
 * A slider that goes from -10 to 10. I'd like the color to start at 0.
 * A slider that sets an orientation angle (or color hue) from 0 to 360. I'd like no color, since the 0 position is arbitrary and 360 = 0.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Linux/X11,,,,,,"0|i0lmun:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Public C++ api for QML Layouts and Layout attached proeprty,QTBUG-77103,281503,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt.team.quick.subscriptions,notmart,notmart,18 Jul '19 09:58,18 Jul '19 10:36,18 Feb '21 09:41,,5.13.0,,,,,,,,,,,,,,,,,,,,,,Quick: Core Declarative QML ,,,,0,,,,"Implementing a QQuickItem in C++, especially if it does position/resize child items (so acts in some way as a layout) it should have easy access to at least the Layout attached property, to access the minimum/preferred/maximum size hints. (also directly instantiating/using one of the base layouts from there would be very useful)

 

Given that QML3 aims to make Javascript optional in QML, this would be even more necessary in Qt6",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0lmh3:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
zoomIn()/zoomOut() don't recalculate scrollbar positions,QTBUG-77038,281307,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt.team.quick.subscriptions,ploni,ploni,14 Jul '19 04:53,17 Jul '19 09:49,18 Feb '21 09:41,,5.12.2,,,,,,,,,,,,,,,,,,,,,,Widgets: Widgets and Dialogs,,,,0,,,,"I started creating an application, where I have the following:
 * QTextBrowser with a page of text in it.
 * Button to increase font point size by 2 (e.g. 26 -> 28 -> 30, etc).

What I would expect to happen is that in addition to just changing the actual font size, it should also recalculate how far into the document I have scrolled, and scroll down to the same position with the larger font size. (i.e. if I've scrolled 34% into the text, after resizing the font point size the scrollbar should move to the new 34% position, instead of remaining at its original location.)

What happens instead, is that it just changes the actual font size, but the scrollbar remains in the same position^1^, and does not follow the text to its new position.

 
----
^1^ It might not be _exactly_ the same position, but it's close enough, and certainly not where it should be.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0lldb:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"15 Jul '19 19:54;ploni;Looking at the code (https://github.com/qt/qtbase/blob/5.12/src/widgets/widgets/qtextedit.cpp#L2350-L2360), it doesn't deal with scrolling at all, just resizing the font point size.

Looking around online, I found a way to calculate the percentage:
{code:java}
double scrollPercentage = (double) scrollBar->sliderPosition() / scrollBar->maximum() * 100;
{code}
However, there's the caveat mentioned here (https://stackoverflow.com/a/24533583), which I'm not sure how to calculate.
 To scroll back to that percentage, I currently use
{code:java}
int reverse = scrollBar->maximum() * (int)scrollPercentage / 100;
{code}
but this is not accurate (possibly due to the issue I linked before) - it goes a little further than it should.",,,,,,,,,,,,,,,,,,,,,
Add a color property to BusyIndicator,QTBUG-76992,281147,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt.team.quick.subscriptions,andysh,andysh,10 Jul '19 11:44,15 Jul '19 10:20,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Quick: Controls 2,,,,0,Reported_by_support_standard,,,"Add a color property to BusyIndicator so that it can easily be used to change the color used for the indicator regardless of what style is being used underneath. The default can still be the one for each style, but making it settable would mean it can easily be changed without having to recreate the whole BusyIndicatorImpl to fit.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0lkev:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"15 Jul '19 10:20;mitch_curtis;I was going to say that I would hope we can use the palette properties for this eventually, because this kind of feature request would otherwise apply to lots of controls... but then I remembered that each style may use different colour roles for the indicator colour, so it doesn't address the issue of using multiple styles.",,,,,,,,,,,,,,,,,,,,,
Error: Unknown method return type: QRemoteObjectPendingCall,QTBUG-76893,280904,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,bstottle,jimmyzju,jimmyzju,04 Jul '19 06:11,04 Jul '19 10:04,18 Feb '21 09:41,,5.12.4,,,,,,,,,,,,,,,,,,,,,,Remote Objects,,,,0,,,,"When I add a slot with return value to rep file and pass a replica to qml, then if called the slot in qml, the qml engine complains about:

Error: Unknown method return type: QRemoteObjectPendingCall

After registering this kind of type in somewhere like main function, this problem is solved. Registering code is:

qRegisterMetaType<QRemoteObjectPendingCall>();

However, I think this should be done by the QtRO module itself, not manually by me.

Demo that reproduces this issue is attached.",,,,,,,,,,,,,,,,,,,"04 Jul '19 06:11;jimmyzju;Introduction.zip;https://bugreports.qt.io/secure/attachment/85173/Introduction.zip",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,macOS,Windows,,,,,"0|i0liyv:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add support for disable-escaping-attribute when used in as part of value-of in the XSLT,QTBUG-76865,280854,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,,andysh,andysh,02 Jul '19 20:49,02 Jul '19 20:50,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,XML: QtXmlPatterns,,,,1,Reported_by_support_standard,,,"Add support for disable-escaping-attribute when used in as part of value-of in the XSLT. This can be tested by doing:

{noformat}
xmlpatterns escape.xsl escape.xml
{noformat}",,,,,,,,,,,,,,,,,,,"02 Jul '19 20:49;andysh;escape.xml;https://bugreports.qt.io/secure/attachment/85145/escape.xml","02 Jul '19 20:49;andysh;escape.xsl;https://bugreports.qt.io/secure/attachment/85144/escape.xsl",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0linr:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Eliminate \overload from the docs,QTBUG-76551,280283,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,docteam,peppe,peppe,20 Jun '19 19:50,24 Jun '19 09:41,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Documentation,,,,0,,,,"Many overloaded functions are manually marked \overload in the docs. This results in a small snippet saying ""This is an overloaded function."" in the documentation.

With a proper code model, qdoc should be able to know if a function is overloaded without the manual tagging. This way, the tag could just be removed, and ALL overloads correctly marked as such (and not only the ones where someone added \overload).",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0lf9z:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"20 Jun '19 20:25;gbk;qdoc can already handle this by grouping the overloaded functions together in one comment and distinguishing amongst them if necessary in the comment text. But we haven't had time to remove the \overload commands and add the \fn commands. ","20 Jun '19 21:49;peppe;I'm not sure if I understand -- I dont' want to group them together, I'm questioning the usefulness of manual tagging with \overload. The ""this function is overloaded"" text could be generated automatically, that's all. The tag itself then becomes useless.","23 Jun '19 17:31;gbk;If the overloaded function is public, qdoc expects something to be said about it unless it is marked \internal. If nothing is said about the function, qdoc assumes it is an undocumented public function, which is an error. \overload was the way to avoid the error. We can't remove the comments that only have \overload, because the function would then be undocumented.","24 Jun '19 07:31;leenam;Which version should we fix the overload docs in? 5.12/5.13/dev?","24 Jun '19 09:41;gbk;I would say dev, but I guess we have to decide what to actually do. My opinion is that if only one of the overloads is documented and all the other overloads just has a comment with \overload, then the implication is that they all do the same thing and then they should be grouped together with a \fn for each signature in the single documentation comment. I don't remember how I handled the requirement that all the parameter names must be documented. I think I just relaxed that rule in this case, but there might be some further qdoc work needed there.

If more than one of the overloads is documented, then someone has to decided which comment each \fn for the overloads should go in. ",,,,,,,,,,,,,,,,,
Image: using mjpeg source URL will cause the application to allocate unlimited memory,QTBUG-76518,280207,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt.team.quick.subscriptions,njeisecke,njeisecke,19 Jun '19 13:39,19 Jun '19 13:59,18 Feb '21 09:41,,5.12.4,,,,,,,,,,,,,,,,,,,,,,Quick: Core Declarative QML ,,,,0,,,,"Using a mjpeg-Stream as a QtQuick Image source will cause the application to buffer all streamed data (to be finally killed by the OS).

Of course the QtQuick image element is not supposed to work with mjpeg data. However the underlying QQuickPixmapReader currently does not check the mime type header of the response and simply buffers all received data, without any limit.

Currently there's nothing that could be done on the application side other the pre-checking data of a user input URL before actually setting it as an Image source.

The following example demonstrates the problem using some public example stream:
{code:java}
import QtQuick 2.12
import QtQuick.Window 2.12

Window {
  visible: true
  width: 640
  height: 480
  title: qsTr(""Hello World"")

  Image {
    anchors.fill: parent
    source: ""https://webcam1.lpl.org/axis-cgi/mjpg/video.cgi""
  }
}
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0letr:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Blacklisted GPUs: Allow Fallback to software rasterizer,QTBUG-76412,280016,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,lagocs,njeisecke,njeisecke,17 Jun '19 15:19,17 Jun '19 15:19,18 Feb '21 09:41,,5.12.4,,,,,,,,,,,,,,,,,,,,,,GUI: Graphics Performance,,,,0,,,,"The GPU blacklist contains some GPUs (Intel Q965/Q963) that disable both desktopgl, and angle.

Currently the fallback seems to be opengl32sw.dll which is
 * incredibly big (15 MB)
 * incredibly slow

and thus not very attractive to be shipped as part of a product.

Is there any reason why the fallback is not the software renderer, which works quite well for QtQuick UIs?

I understand the need for a full OpenGL software rasterizer when using QGraphicEffects but most UIs should work just fine without.

Suggestion: Add a QSGRendererInterface flag like ""fallbackToSoftwareRasterizer""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Windows,,,,,,"0|i0ldnz:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
PinchHandler needs a way to limit the actions it performs,QTBUG-76380,279947,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt.team.quick.subscriptions,andre,andre,14 Jun '19 12:49,14 Jun '19 15:05,18 Feb '21 09:41,,5.12.3,,,,,,,,,,,,,,,,,,,,,,Quick: Mouse Touch and Tablet input,,,,1,,,,"PinchHander does 3 things: it manipulates rotation, scale and position. 

I think it would be good if there were a simple way to limit which of these actions is taken. There currently is a way of course by setting the target to null and then doing the operation manually, but that is not very declarative. For instance, if I wanted to make a two finger pinch *only* zoom, a three finger pinch rotate, and do dragging with a single finger only, I need manual connections for both needed PinchHandler instances. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0lda7:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"14 Jun '19 14:17;srutledg;As the docs explain, you can limit the range of all 3 things by using the minimum and maximum properties.  I.e. if you don't want to allow rotation, set minimumRotation: 0 and maximumRotation: 0.","14 Jun '19 14:28;andre;That makes the properties interfere with each other, so that does not solve the usecase described. 

If you rotate with the three fingers handler, and then zoom again with two fingers hander with has its minium and maximum rotation set to 0, the rotation set using the three finger handler is reset. That's why I requested to be able to not just constrain, but explicitly disable the three aspects.",,,,,,,,,,,,,,,,,,,,
Simpler way of modifying JSON documents,QTBUG-76382,279950,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,thiago,poikelin,poikelin,14 Jun '19 13:54,14 Jun '19 13:56,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Core: Other,,,,0,Reported_by_support_standard,,,"To modify a value inside a tree of nested objects, one has to store a copy of each object up until that tree, change the value and re-insert the objects in backward order. Deeper the value to be changed is, more complicated it becomes.

For example, with only 1 level it is already:
{code}
QJsonDocument doc = ...;
auto root = doc.object();
auto object1 = root.value(""object1"").toObject();
object1.insert(""value"", ""some value"");
root.insert(""object1"", object1);
doc.setObject(root);
{code}
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0ldav:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
PinchHandler should have a way to reset,QTBUG-76379,279946,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt.team.quick.subscriptions,andre,andre,14 Jun '19 12:44,14 Jun '19 12:48,18 Feb '21 09:41,,5.12.3,,,,,,,,,,,,,,,,,,,,,,Quick: Mouse Touch and Tablet input,,,,1,,,,"Consider the following scenario: we have an object that needs to scale, and we're using a PinchHandler for that. There is also another way for the object view to set the zoom, perhaps because of a reset button or the user selecting an object from a list to focus on. So now, the PinchHandler's scale property is no longer in sync with that of the view. We could use activeScale instead, but that value resets with each time we pinch, and so either requires manually storing the old value somewhere when the gesture ends. 

It would be great PinchHandler would gain a way to reset the current state to neutral.",,,,,,,,,,,,,,,QTBUG-68941,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0ld9z:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Enable ANGLE's OpenGL backend via QT_ANGLE_PLATFORM on Windows,QTBUG-76359,279885,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,lagocs,thokra,thokra,13 Jun '19 11:10,13 Jun '19 11:22,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,GUI: OpenGL,,,,0,,,,"Currently only three of the supported ANGLE backends are supported on Windows: D3D11, D3D9 and WARP.

While this is sufficient for most applications, sometimes it is nice to see an OpenGL trace of the GLES code running in your application for debugging puposes, especially if you're using tools like Nvidia Nsight, or if you're currently running your application on Windows, but also deploy to native GL platforms like Linux and don't want go to a VM or boot up Linux before you're able to check the GL implementation.

Having a GL trace is also very helpful if you aren't as versed in D3D as you are in OpenGL (ES) and you want to verify that your ES code provokes the expected ANGLE behavior. The alternative is to use vendor specific GLES over WGL contexts, as provided by Intel and NVidia - which we also do, but not every (major) vendor supports this on Windows. We rely heavily on ANGLE because we're effectively bound to it on Windows, when using the Emscripten build of our 3D engine in a browser and our Qt tools are currently only working on Windows.

 

The effort to do this, AFAICS, is low because one only needs to
{code:java}
// provide an additional field like
QWindowsOpenGLTester::AngleRendererOpenGL

// then adapt
QWindowsOpenGLTester
QWindowsIntegration
QWindowsEGLStaticContext

// especially use the appropriate platform for EGL when creating the platform display
EGL_PLATFORM_ANGLE_TYPE_OPENGL_ANGLE{code}
 

There are no additional dependencies that need to be shipped and the GL backend is just as viable as the D3D backends. Also, if you're building ANGLE with default settings (i.e. you don't explicitly disable the GL backend) it is deployed with Qt's ANGLE build already.

We could of course do this ourselves but I'd rather see this in the official build.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Windows,,,,,,"0|i0lcx3:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add guard predicate to QSignalTransition,QTBUG-76332,279805,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,thiago,kais,kais,12 Jun '19 05:59,12 Jun '19 05:59,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Core: State Machine,,,,0,,,,"Currently the QSignalTransition needs to be subclassed and QSignalTransition::eventTest() to be overridden in order to have a conditional transition.

This could be made easier by adding guard predicate (similar as in the QML SignalTransition.guard) to the QSignalTransition. The transition will be triggered if the guard predicate returns true.

E.g by using lambda.
{code:java}
QSignalTransition(
   sender,
   &QObject::destroyed,
   [sender] { return (sender->objectName() == ""foobar""); },
   nextState
);{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0lcgv:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Align documentation and examples installation folder with the rest of the Qt installation,QTBUG-76197,279532,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,releaseteam,rweickelt,rweickelt,04 Jun '19 19:05,11 Jun '19 11:36,18 Feb '21 09:41,,5.12.3,,,,,,,,,,,,,,,,,,,,,,Packaging & Installer,,,,0,,,,"Qt libraries, header files, other assets are installed in /opt/Qt/<VERSION>/ while documentation and examples is installed in /opt/Qt/Docs/Qt-<VERSION>/ and /opt/Qt/Examples/Qt-<VERSION>/ respectively.

Please move docs and examples into /opt/Qt/<VERSION>/ because this would be
 * more consistent
 * easier to automate

 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0lauf:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"04 Jun '19 19:07;rweickelt;Probably the root cause of QTBUG-65906.","10 Jun '19 06:30;iknd;The current way of installing docs and examples dates back to 5.0.0 times.
I'm not sure if there is any actual reason anymore for this, [~treinio], [~aksalova], [~tarjasundqvist], [~con]?

Old Qt online repositories/installers can't be altered (with any reasonable effort) but this can be considered for future packages though.","11 Jun '19 11:23;con;Afaik the reason to separate it from the _usual_ installation layout (/opt/Qt/<version>/<toolchain>), was to avoid duplication of examples & documentation for different variants of the same Qt version (msvc/mingw/android/ios etc). I don't know of any reason why it wasn't put somewhere into /opt/Qt/<version>/ though.

bq. Probably the root cause of QTBUG-65906.

I doubt it.
Actually it looks like it is just QTBUG-52386 which was fixed for the Qt 5.11.1 installer component and onwards, but the installer components for older Qt versions were left as-is.","11 Jun '19 11:36;con;bq. Probably the root cause of QTBUG-65906.

JFYI running the MaintenanceTool with {{--show-virtual-components}} and deselecting the unwanted documentation and example packages also nicely gets rid of the <Qt>/Docs/<version> and <Qt>/Examples/<version> folders for me. So while the location might not be ideal, it is not a principle issue.

bq.  but this can be considered for future packages though.

Not sure if that then not just increases the confusion if some Qt versions have their documentation & examples at other places than other Qt versions.",,,,,,,,,,,,,,,,,,
Add a QRangeSlider to Qt widgets similar to the RangeSlider in QtQuick ,QTBUG-76315,279780,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt.team.quick.subscriptions,andreas.griesser,andreas.griesser,11 Jun '19 11:13,11 Jun '19 11:29,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Widgets: Widgets and Dialogs,,,,2,,,,"There is a range slider available in Qt Quick (see: https://bugreports.qt.io/browse/QTBUG-48667) , which is not available as a Qt Widget. Can it also be implemented there, since currently the only other option I found was to build a complex custom widget.

We use this widget in our software, to crop images / 3d objects and define value ranges.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Linux/X11,Windows,,,,,"0|i0lcbb:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"11 Jun '19 11:29;mitch_curtis;That could be fun to implement, although I won't have time for it for a while...",,,,,,,,,,,,,,,,,,,,,
Add crop region to QML Item's 'grabToImage',QTBUG-76079,279228,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,w00t,beholder,beholder,28 May '19 10:59,05 Jun '19 10:01,18 Feb '21 09:41,,5.13.0 Beta3,,,,,,,,,,,,,,,,,,,,,,Quick: SceneGraph,,,,0,,,,Please add crop region to QML Item's 'grabToImage'. I had to pass ItemGrabResult back to C++ just to implement cropping. This is not only ugly but also inefficient because ItemGrabResult disallow modification of QImage it keeps. ,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0l907:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
QKeySequenceEdit does not support wheel actions / mouse buttons,QTBUG-76151,279386,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt.team.quick.subscriptions,jnqnfe,jnqnfe,02 Jun '19 10:43,03 Jun '19 07:48,18 Feb '21 09:41,,5.11,5.12.0,,,,,,,,,,,,,,,,,,,,,Widgets: Widgets and Dialogs,,,,0,,,,"In making some improvements to VLC, specifically the hotkey management, I've been considering use of QKeySequenceEdit; however, I note that this widget and QKeySequence are specifically geared towards keyboard keys and key sequences only, which is too restrictive.

Why is there no combined control and type for also capturing mouse scroll/button actions? E.g. VLC's default hotkeys for subtitle size increase/decrease ""Ctrl\+Mouse Wheel Up"" and ""Ctrl\+Mouse Wheel Down"" respectively (substitute ""Ctrl"" for ""Command"" on mac).

There is no built-in control/type for handling such combinations :(",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0l9yf:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
QComboBox::showPopup() should use `usePopup` consistently,QTBUG-76120,279327,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt.team.quick.subscriptions,rjvbertin,rjvbertin,30 May '19 14:47,30 May '19 14:47,18 Feb '21 09:41,,5.12,5.13,5.14,5.9,,,,,,,,,,,,,,,,,,,Widgets: Widgets and Dialogs,,,,0,,,,"`QComboBox::showPopup()` caches the widget's SH_ComboBox_Popup style hint very early, but does not use the cached value throughout. I don't think that value can change (except for styles that have randomisation feature?), so there shouldn't be anything against using it in all places where the style hint is checked.

 

I discovered this as a result of a crash executing the `view()->scrollTo()` instruction where for some reason the cached `style` pointer variable got corrupted (or the style somehow changed during the `showPopup()` call?!; either way undoubtedly a bug that's not in but only messes with Qt code).",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0l9lj:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
AutoFill not working on iOS TextInput,QTBUG-76094,279271,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,srutledg,kiibimees,kiibimees,29 May '19 07:07,29 May '19 14:46,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,"GUI: Basic Input System (keyboard, mouse, touch)",,,,2,,,,"Apple has a possibility to auto fill all text inputs: [Enabling Password AutoFill on a Text Input View|https://developer.apple.com/documentation/security/password_autofill/enabling_password_autofill_on_a_text_input_view?language=objc]. Most of the cases it should work out of the box, with an optional input field tagging that should make it more reliable. I tried to use ""one time code"" autofill (SMS verification code) but it doesn't work out of the box.

So I tried to tag the input field with a patch to
{noformat}
qtbase\src\plugins\platforms\ios\qiostextresponder.mm{noformat}
By adding the following tagging into ""initWithInputContext""
{code:java}
if (@available(iOS 12, *)){
   self.textContentType = UITextContentTypeOneTimeCode;
}{code}
But that didn't help either. Just in case I commented out all the other configurations in this function, to make sure that something else doesn't forbid it. But still no luck.

Does anybody have an idea what could forbid iOS to open the keyboard suggestion ""From messages"" when correctly recognized verification code comes in with SMS? I'm willing to try an test but I'm out of ideas.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,iOS/tvOS/watchOS,,,,,,"0|i0l99j:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
QImage generates warnings that can not be muted when opening JPEGs,QTBUG-76032,279087,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,vgt,ahi,ahi,24 May '19 16:34,24 May '19 17:43,18 Feb '21 09:41,,5.12,,,,,,,,,,,,,,,,,,,,,,Image formats,,,,0,,,,"When I try to load a corrupted jpeg file using QImage, QT prints the warnings through the MessageHandler. It makes it hard to catch the message in the caller's code. Also, it can pollute the console or the screen (since I redirect these warnings to a QDialog). Unfortunately there is no way to test the JPEG before opening or mute these messages.

I think the code responsible for this issue is located in qjpeghandler.cpp: my_error_exit().

One workaround would be to filter these messages in a custom MessageHandler and save them. This approach is detailed in:
https://stackoverflow.com/a/33452293/6050364
But it also has its own issues when doing it concurrently. Also, the developer needs to be aware of all the possible messages that need to be filtered.

I think QImage::loadFromData() should return the error text in a new argument, raise an exception, or save it temporarily to be accessed using another function, similarly as in ifstream.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0l85j:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Can't disable Konsole title bar branding because setCaption and setPlainCaption always append the application name,QTBUG-75535,277933,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,,rmitsukl,rmitsukl,02 May '19 08:46,21 May '19 21:11,18 Feb '21 09:41,,5.12.3,,,,,,,,,,,,,,,,,,,,,,GUI: Window management,,,,0,,,,"*+See:+* 
 [https://bugs.kde.org/show_bug.cgi?id=374083]

[https://bugs.kde.org/show_bug.cgi?id=407146]
 +*SUMMARY*+
 It's currently impossible to remove the '- Konsole' branding suffix from the Konsole title bar.

I prefer to keep my desktop as free of branding as I can. Other terminal emulators (I've checked kitty, alacritty, gnome-terminal) do not have branding in the title bar by default.

To that end, I would love it if there were an option in Konsole to remove the '- Konsole' branding after <tab title> from the title bar.

I've been informed by KDE developer Christoph Feck that this is currently impossible because setCaption and setPlainCaption always append the application name to the window title.

+*STEPS TO REPRODUCE*+
 1. Run konsole
 2. Observe '<tab title> - Konsole'

+*OBSERVED RESULT*+
 Title bar shows '<tab title> - Konsole'

*+EXPECTED RESULT+*
 Title bar shows either '<window title>' or '<tab title>' without the '- Konsole' suffix.","Arch Linux
KDE Plasma Version: 5.15.4
KDE Frameworks Version: 5.57.0
Qt Version: 5.12.3
Konsole version: git - 19.07.70",,,,,,,,,,,,,,,,,,"03 May '19 11:17;rmitsukl;konsoledebugtitle.png;https://bugreports.qt.io/secure/attachment/83588/konsoledebugtitle.png","02 May '19 08:42;rmitsukl;konsoletitlebar.png;https://bugreports.qt.io/secure/attachment/83551/konsoletitlebar.png",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Linux/X11,,,,,,"0|i0l1lz:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"03 May '19 06:34;kleint;This does not seem related to the Qt project;   there is no API named setCaption() and setPlainCaption(). For Qt, please report bugs according to  https://wiki.qt.io/Reporting_Bugs .","03 May '19 11:20;rmitsukl;Disclaimer: I'm an end user, not a KDE dev, but --

I found those functions (deprecated even then) in qt-4.8 docs. I guess the functions still exist but just aren't documented (as they are deprecated) in Qt 5. They've been replaced with setWindowTitle.

In
{code:java}
MainWindow::updateWindowCaption{code}
I replaced

 
{code:java}
setCaption(caption);{code}
 

with

 
{code:java}
QString debugTitle = QStringLiteral(""debug"");
setWindowTitle(debugTitle);{code}
 

and got ""debug – Konsole"" as my window title:

!konsoledebugtitle.png! ,

so it look like always appending the application name is indeed a Qt feature.

 ","03 May '19 11:41;rmitsukl;See above post. Apologies, I'm not familiar with this bugtracker and missed the ""provide missing info"" button.","03 May '19 11:52;kleint;QPlatformWindow::formatWindowTitle() at src/gui/kernel /qplatformwindow.cpp:552 unconditionally adds the QGuiApplication::applicationDisplayName() name as used by  src/plugins/platforms/xcb/qxcbwindow.cpp:2607 ,  src/plugins/platforms/windows/qwindowswindow.cpp:2843.

It should be sufficient to not set a display name.","03 May '19 13:11;cfeck;applicationDisplayName() defaults to the application name (process name). If we set no display name, Qt will still display (usually lowercase) application name.","03 May '19 13:13;cfeck;Also, clearing applicationDisplayName() would also affect other places where the name is shown to the user, e.g. the About dialog; seems it's not a suitable workaround.",,,,,,,,,,,,,,,,
Add QAbstractItemView hoverIndex to public API,QTBUG-75897,278672,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt.team.quick.subscriptions,viktor.kolesnyk,viktor.kolesnyk,17 May '19 15:10,19 May '19 17:56,18 Feb '21 09:41,,5.12.2,,,,,,,,,,,,,,,,,,,,,6.0,Widgets: Itemviews,,,,0,,,,"Make hover index of QAbstractItemView, that is currently hidden (i.e. {color:#800080}QAbstractItemViewPrivate::hover) {color}public available, like it is already done for currentIndex() and rootIndex().

It is currently very inconvenient with no ability to understand if there is any valid hover index or not at any point of time and app state.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0l607:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"19 May '19 17:56;chehrlic;Don't think this can be done within 5.x series.",,,,,,,,,,,,,,,,,,,,,
Improve floating point stability within Qt,QTBUG-75879,278616,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,thiago,kshegunov,kshegunov,16 May '19 22:24,16 May '19 22:26,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Core: Containers and Algorithms,GUI: Graphics Performance,,,0,,,,"A lot of places inside Qt there are custom solutions to common algebra problems, specifically many of which may and do suffer from numerical instabilities. Specifically in places where dealing with geometry and transformations. Classes, like QPointF, QLineF, QPainterPath, QGraphicsView and so on, reinvent the wheel on more than one occasion when dealing with the algebraic part of geometry calculation.

Things like solving linear systems, matrix multiplications, additions, inversions, determinants calculation and so on, are available as ready packages that are stable, efficient and well tested, there's little reason to pass on the opportunity to use such a tool in favor of custom solutions, especially without rigorous testing of the latter verifying their correctness.

Currently linear algebra is done on a case-by-case basis without conscious regard to the numerical stability. As a consequence many of the implementations suffer from instabilities for some inputs, which could be fixed by replacing the custom code with a general solution. One that provides stable and tried-and-tested algorithms and primitives. Even more so relevant as there's no reason to think that the custom code is more efficient than the optimized libraries available.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0l5nr:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Style Sheets. Font size ""em"" support",QTBUG-75865,278593,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,esabraha,viktor.kolesnyk,viktor.kolesnyk,16 May '19 11:23,16 May '19 12:07,18 Feb '21 09:41,,5.12.2,,,,,,,,,,,,,,,,,,,,,,GUI: Text handling,Widgets: Style Sheets,,,0,,,,"Qt currently supports only 'px' and 'pt' values for *font-size* Style Sheets parameter.
 This is very inconvenient for application development, when app should look similar in multiple environments with different screen resolutions, different pixel sizes of system font and different px/pt ratio.

Please find below code proposal to add this support in qcssparser.cpp, *setFontSizeFromValue()* func, at line 1128:
{code:java}
else if (s.endsWith(QLatin1String(""em""), Qt::CaseInsensitive)) {
    s.chop(2);
    value.variant = s;
    if (value.variant.convert((QVariant::Type)qMetaTypeId<qreal>())) { 
        font->setPixelSize(qRound(QFontMetrics(QFont()).height() * value.variant.toReal()));
        valid = true; 
    } 
}
{code}
 
 Proposed approach is similar to what already used in CSS parser in *lengthValueFromData* function.

Am I miss why 'em' is still not supported for font size in Qt?",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0l5in:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
QML SwipeView Animation Finished Signal,QTBUG-75836,278539,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt.team.quick.subscriptions,t-moe,t-moe,15 May '19 10:27,15 May '19 10:27,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Quick: Controls 2,,,,1,,,,"Currently there's no way for a user to know when a SwipeView page-transition has finished.

Here my example and problem:

I have a SwipeView
{code:javascript}
import QtQuick.Controls 2.4

SwipeView {
  id : swipe
 
  SelectionPage {}

}
{code}
Once the user selects something on the SelectionPage, I insert a WaitPage after the SelectionPage and trigger a page change by calling _swipe.incrementCurrentIndex()_. This results in a nice page transition effect. (To my understanding this is rendered by the underlying flickable).

After occourence of an external event the Waiting Period is over and I insert a OperationsPage after the WaitPage and I trigger the page change to the OperationsPage.

At this point I have three pages in the SwipeView: SelectionPage, WaitPage and OperationsPage

 

Now, once on the OperationsPage I would like to remove the WaitPage. So that if the user swipes back, he comes to the SelectionPage again. (if he chooses a different selection there, the WaitPage will be reinserted. if he swipes right again or chooses the same selection he comes back to the OperationsPage immediately).

My Problem is that there's no way of knowing when the WaitPage can be removed.
 If I remove the WaitPage directly after triggering a incrementCurrentIndex operation, the animation will be messed up. If I wait too long with removing the WaitPage, the animation will be over and the user can swipe back to the WaitPage instead of coming back to the SelectionPage.

The SwipeView.currentItemChanged signal is emitted in between of the page transition. Removing the WaitPage here is too early.

The SwipeView.contentItem.movementFinished signal of the underlying Flickable is only fired when the user triggers the Page change and not when it's triggered programmatically by calling incrementCurrentIndex.

I suggest adding two signals to the SwipeView:
 transitionStarted
 transitionFinished

 

Or do you propose a workaround?",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0l56v:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
UI string pixel size checking ,QTBUG-73448,273168,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,frederik,tpyssysa,tpyssysa,01 Feb '19 08:07,14 May '19 08:37,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,QML: Tooling,Testing: QuickTest,,,0,,,,"There are several ways to guarantee that localised texts fit into the available space in a QML UI:
 * Text.fontSizeMode
 * Text.elide
 * FontMetrics
 * Length variants for localised text

However, there is no automatic way to check/test, if the UI text component width is large enough to contain the text without truncation/overflow. 

Could we add this kind of a check into to phase, when we create the scene graph and layout the different UI items. There could be simple textual warnings, if truncation/overflow is detected. The idea is that the designer/developer does not have to run the UI/application and execute each and every branch to see visually, if the pixel width is correct. 

It would be beneficial, if all localized texts could be tested in one test to avoid laborious manual work. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0kbt3:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
QQuickRenderControl should provide a way to render at a custom DPI,QTBUG-75733,278261,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,w00t,jcelerier,jcelerier,09 May '19 13:29,09 May '19 13:36,18 Feb '21 09:41,,5.12.3,5.13,,,,,,,,,,,,,,,,,,,,,Quick: Other,,,,0,,,,"QQuickRenderControl currently is bound  to the app DPR.

It would be great if it allowed rendering at a custom DPI instead, not bound to the user's physical screens.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0l3kf:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"09 May '19 13:36;jcelerier;Would a patch for this be accepted ?",,,,,,,,,,,,,,,,,,,,,
"need QTextList::parentList() API; associate continuation paragraphs with list items",QTBUG-75589,278022,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,esabraha,srutledg,srutledg,04 May '19 09:50,04 May '19 09:52,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,GUI: Text handling,,,,0,,,,"When we parse something like

{code}
<ul><li>one<p>continuation</p></li><ul><li>one dot one</li></ul></ul>
{code}

it's not easy to find out that ""one dot one"" is inside the first list: you can only see that it's indented further.  (And which indent is most relevant BTW?  We store several.)  Assuming that the cursor is already on the ""one dot one"" line, I could just about solve it with code like this

{code}
        QTextCursor above(cursor);
        above.movePosition(QTextCursor::Up);
        if (above.currentList()) 
...
{code}

except that the continuation paragraph is in the way, and it has also lost track of the fact that it ""belongs to"" the first list item.

I'm trying to implement interactive changing of list nesting (as part of a general indent/outdent feature in the richtext example).

If QTextList had a parentList() accessor, it would be a start towards solving this at least some of the time: if the cursor is on a list item, and I want to outdent it, I could check that the parent list is the one that the list item should be moved into (because it's already outdented).  

But this would not solve how to indent the current list item.  You might need a new list, or you might need to move it into a list below, one that is already indented.  But now let's say the current list item also has a continuation paragraph: we would need to change its indent too, unless it already knows which list item it belongs to.  So, perhaps QTextBlock needs a parentList() accessor.

Remembering syntactic structure is mainly relevant for HTML editing; but for markdown, it might be enough to just remember the indentation, and be able to rewrite the markdown on that basis.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0l25b:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Functions for Levenshtein Distance and Longest Commom Subsequence,QTBUG-75534,277931,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,thiago,l3u,l3u,02 May '19 08:33,02 May '19 15:09,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Core: QString and Unicode,,,,1,,,,"Hi Qt devs!

I recently worked on a project where I needed string comparison via the Levenshtein Distance and displaying of the differences of string pairs based on the Longest Commom Subsequence (diff-like).

It was not too hard but also not trivial to find/write functions doing the calculation. I'm not sure if this would be in the scope of Qt, but I wondered if such a functionality would be a candidate for integration into Qt (probably directly into QString), as these algorithms seem to be univerally shareable and widely used.

I appended the code I use to calculate the Levenshtein Distance of two QStrings (which seems to be quite nicely optimized as it only caches the last column of the comparison matrix instead of calculating it as a whole first) and the Longest Commom Subsequence of two QStrings (which does the whole calculation first, but I don't know how to optimize it furtherly).

Maybe this could be of interest for you and/or other Qt users.

Cheers, Tobias",,,,,,,,,,,,,,,,,,,"02 May '19 08:23;l3u;levenshteinDistance.cpp;https://bugreports.qt.io/secure/attachment/83550/levenshteinDistance.cpp","02 May '19 08:23;l3u;longestCommonSubsequence.cpp;https://bugreports.qt.io/secure/attachment/83549/longestCommonSubsequence.cpp",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0l1lj:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"02 May '19 15:09;thiago;I don't think this is something we should have in QString.",,,,,,,,,,,,,,,,,,,,,
Add QImage::Format_Indexed16,QTBUG-75536,277939,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,vgt,bebuch,bebuch,02 May '19 10:39,02 May '19 10:39,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Image formats,,,,3,,,,"Many cameras now have a higher resolution than 8 bits. For cameras in the non-visible spectral range, color maps are usually used.

With 5.13 the image format {{QImage::Format_Grayscale16}} is added, which is a major improvement. It would also be useful to provide a corresponding indexed format.

I propose {{QImage::Format_Indexed16}}.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0l1n3:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Should specify per-subtree or per-item indentation,QTBUG-75466,277689,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt.team.quick.subscriptions,porton,porton,26 Apr '19 12:32,26 Apr '19 12:32,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Widgets: Widgets and Dialogs,,,,0,,,,"We should be able to specify the indentation for either per individual items of QTreeWidget or per ""subtrees"" (all items directly below a given item) and the root item.

See for example [this bug report|http://example.com] for example usage.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0l0nj:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Inconsistent deprecation of QModelIndex methods,QTBUG-75307,277370,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,peppe,emdek,emdek,19 Apr '19 11:36,19 Apr '19 15:32,18 Feb '21 09:41,,5.13.0 Beta2,,,,,,,,,,,,,,,,,,,,,,Core: Item Models,,,,0,,,,"The {{QModelIndex::child(int row, int column) const}} was deprecated some time ago but only in 5.13 stated to produce build warnings.
This deprecation is very troubling since there is no direct replacement, keeping pointer to the model is not always feasible and obtaining it using {{QModelIndex::model()}} requires checking if it is valid, both methods add a lot of duplicated code to silence it or dummy helper function that does exactly the same thing as this method does in the first place...
What is the point of deprecating it, since there is no obvious gain from doing so and it only forces pointless code churn?
Also, similar method, {{QModelIndex::sibling() const}},  is left as is (and even better,  it got two friends in 5.11: {{QModelIndex::siblingAtColumn() const}} and {{QModelIndex::siblingAtRow() const}}), while both are like twins, making the same sense to exist or not, making this deprecation ridiculous.
Moreover, it breaks documentation of this class:
??The model() function returns the model that the index references as a QAbstractItemModel. The child() function is used to examine items held under the index in the model. The sibling() function allows you to traverse items in the model on the same level as the index.??
","Kubuntu 18.10, 64 bit",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0kyrj:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"19 Apr '19 11:53;dfaure_kdab;Thanks for the report about the documentation being inconsistent, we'll fix this.

The replacement is model->child(...). The fact that the index might be invalid (and therefore have no model pointer) is *exactly* the reason why it was deprecated. This method basically doesn't work for getting hold of a toplevel item, while model->child(...) does work (so it's more generally applicable). Indeed it requires having a pointer to the model, but doing that is necessary anyhow, to get hold of toplevel items via the child method.

sibling() doesn't have that problem, since it doesn't make sense to ask for the sibling of ""invalid index"", unlike child().","19 Apr '19 12:02;emdek;{{QModelIndex::isValid() const}} is your friend, I still don't see good explanation, it's making usage harder for these who  know how to use it, know that checking for validity of the index is  the key.

??sibling() doesn't have that problem, since it doesn't make sense to ask for the sibling of ""invalid index"", unlike child().??
Uhm, I don't see difference here, why someone who doesn't validate indexes wouldn't do that?
","19 Apr '19 12:16;emdek;Both do similar thing internally, both return invalid index as fallback, this deprecation in this form doesn't make sense.

https://code.qt.io/cgit/qt/qtbase.git/tree/src/corelib/itemmodels/qabstractitemmodel.h?h=5.13#n457

#if QT_DEPRECATED_SINCE(5, 8)
inline QModelIndex QModelIndex::child(int arow, int acolumn) const
{ return m ? m->index(arow, acolumn, *this) : QModelIndex(); }
#endif

https://code.qt.io/cgit/qt/qtbase.git/tree/src/corelib/itemmodels/qabstractitemmodel.h?h=5.13#n447

inline QModelIndex QModelIndex::sibling(int arow, int acolumn) const
{ return m ? (r == arow && c == acolumn) ? *this : m->sibling(arow, acolumn, *this) : QModelIndex(); }
","19 Apr '19 12:32;dfaure_kdab;OK, let me try to improve upon my explanation.

With QModelIndex::sibling(), you can access ANY valid index in your model, from any valid sibling. This function works at every level of the tree.
 On the other hand, imagine a tree like
{code:java}
    top1
    top2
        child2
{code}
If you have an index for top2, you could use the now deprecated QModelIndex::child() on it to get to child2, but this method was severely limited, because there was no way to use it on *something* in order to get top1 or top2. That *something* just doesn't exist.

On the other hand with model->child({}, 1, 0), you can get hold of top2, and with model->child(top2, 0, 0) you can get to child2. So that method is better and more generic, makes your code less special-cased for toplevel items compared to other items.","19 Apr '19 13:24;peppe;OTOH: you can replace every usage of {{idx.child(row, column)}} with {{idx.model()->index(row, column, idx)}}. It's more verbose, but the important bit is that the check that {{model()}} is not nullptr is on you (and not on Qt) -- Qt keeps its API ""clean"" by not having a function that doesn't work in certain cases...","19 Apr '19 14:14;emdek;*@David Faure*, OK, but why can't we have *both*? Nobody forces anyone to use it, but it's so damn handy.
In just one project alone I would have to replace 25 instances of usage of that method, and only one sane way to do so would be to introduce dummy helper function that does exactly the same thing as this method does right now.
And it's not limited, it simply has one purpose, allowing to access child of *that specific* {{QModelIndex}}, what is wrong with that?
If people are misusing it then perhaps documentation needs improvements instead.

*@Giuseppe D'Angelo*, so I could do the same with {{sibling()}} (the one that is deemed worthy), to make it ""verbose"", the point is that there is no gain from removing it, that verbose variant is more error prone since it's easier to do it *wrong*,  not everyone will remember to check if model is valid first, and you *still* have to check if resulting index is valid.
That way {{QStringList::contains() const}} should be dropped in favor of more verbose iterating over the list and comparing strings using operators.

??Qt keeps its API ""clean"" by not having a function that doesn't work in certain cases...??
OK, then we should remove {{QIODevice}} entirely, and many other code that might fail in some conditions. ;-)

And to be clear, I understand that you want to have less API to maintain, but while other deprecation warnings I have to deal with after building against 5.13 (related to {{QFontMetrics}}, {{QSreen}}, {{QSslSocket}} etc.) made sense (and had proper replacements) this one doesn't, since it removes one handy wrapper that doesn't have direct replacement  while keeping almost identical method (which is also just a wrapper) and which also gets two helper methods.

Funny thing, some time ago I've moved away from using pointers to {{QStandardItem}} instances when walking through some models just to avoid constant {{NULL}} checking, which is about to be forced on me now, just because I wanted to use safer approach... :-P
","19 Apr '19 15:31;peppe;bq. so I could do the same with sibling() (the one that is deemed worthy), 

The point is that {{sibling()}} always yields the correct result. {{child()}} doesn't:

{code}
QModelIndex idx = ~~~;
int row = idx.row();
int column = idx.column();
Q_ASSERT(idx == idx.parent().child(row, column)); // fails!
{code}

This behavior *can* cause subtle bugs, and that's why I deprecated it. 

bq. to make it ""verbose"", the point is that there is no gain from removing it, that verbose variant is more error prone since it's easier to do it wrong, not everyone will remember to check if model is valid first, and you still have to check if resulting index is valid.

If they don't check, the app will _verbosely_ crash. That's much better than a subtle access to the wrong index.  

bq. I understand that you want to have less API to maintain

Actually my point was not about ""how many APIs we have to maintain"", it was more about being consistent, avoiding subtle corner cases, and other similar ""surprises"" in Qt's APIs.


bq. That way QStringList::contains() const should be dropped in favor of more verbose iterating over the list and comparing strings using operators.

In fact I am against contains() as-is :) https://codereview.qt-project.org/#/c/247701/",,,,,,,,,,,,,,,
QPainter.drawText crashes when no window connected,QTBUG-75240,277274,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,vgt,fbo,fbo,17 Apr '19 09:59,17 Apr '19 09:59,18 Feb '21 09:41,,5.5.1,,,,,,,,,,,,,,,,,,,,,,GUI: Painting,,,,1,,,,"When using the QPdfWriter class and drawtext with QPainter, you need the complete gui on your system.

If you run a program that creates a pdf from e.g. a Linux system with desktop it works, but connecting from a remote to the same system with e.g. ssh it crashes because it needs the gui environment.

This is a pity, since e.g. putting pictures in works.

Now we need to fall back to external libraries like PoDoFo, which are not as nice as the Qt native functions.

Could this be changed, since a lot of printing routines, especially on reporting happens for server based applications that do not run on a client environment.",In this case Ubuntu Linux 16.04. But this is about the QPainter::drawText QGuiApplication rather than on QCoreApplication.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0ky6f:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Make it possible to get the specified ranges from the dialog when printing,QTBUG-75220,277247,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,johnlayt,andysh,andysh,17 Apr '19 06:59,17 Apr '19 06:59,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,GUI: Printing,,,,1,Reported_by_support_standard,,,Make it possible to get the specified ranges from the dialog when printing. When CUPS is used then it is possible that it will handle the printing of page ranges itself and therefore the application does not need to worry about it. However this can be a problem if the printing is doing a lot of actual rendering which would be wasted since the page is not being painted. Therefore it would be good to get access to the actual specified range so that an application could also then choose to skip the painting of the page and just call newPage() to get to the next one instead.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0ky0f:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
No method to hide message shown using QSystemTrayIcon::showMessage() ,QTBUG-75093,276951,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt.team.quick.subscriptions,emdek,emdek,10 Apr '19 18:29,10 Apr '19 18:29,18 Feb '21 09:41,,5.13.0 Beta 1,,,,,,,,,,,,,,,,,,,,,,Widgets: Widgets and Dialogs,,,,0,,,,"Trying to replace it by setting message with empy title and description only creates another, empty notification (Linux), which probably counts as separate bug.

Ability to hide message is useful in cases like recently introduced {{QWebEngineNotification}}, which might request to close the message without waiting for timeout.","Kubuntu 18.10, 64 bit.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0kwan:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Ability to set scroll speed in system settings of Linux desktop environments,QTBUG-73467,273216,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,srutledg,clel,clel,02 Feb '19 16:15,08 Apr '19 11:34,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,"GUI: Basic Input System (keyboard, mouse, touch)",,,,1,,,,"In order to be able to set scroll speed via the system settings of different Linux desktop environments there is needed some way of handling this (see the discussion on [https://gitlab.freedesktop.org/libinput/libinput/issues/185] for reference). Thus I am creating this issue, so the relevant parties can try to figure out a way how to achieve this.

Also see [https://gitlab.gnome.org/GNOME/gnome-shell/issues/950]

 

PS: I just chose some componenty which might fit, but probably there is a better one which I was not aware of.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Linux/Wayland,Linux/X11,,,,,"0|i0kc3j:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"03 Feb '19 15:52;thiago;QtCore and QtConcurrent were not the right components.

Anyway, libinput should provide that information for the toolkits. Once it does, Qt can be adapted to obey it.","03 Feb '19 16:12;clel;Thanks for correcting that.

Regarding libinput: Peter Hutterer said that is not what libinput is for and instead that information should be provided by the desktop environments (or some other place): [https://gitlab.freedesktop.org/libinput/libinput/issues/185]

Thus I created this issue, so one can hopefully come up with a solution to this.","04 Feb '19 15:32;thiago;Ok, so ""some other place"". I suggest using X resource properties in the root window, like ""Xft.dpi"" is currently used, plus whatever Wayland has equivalent.","08 Apr '19 11:34;clel;Sorry for my late reply, I was busy in between. So you seem to vote for ""some other place"" instead of having every desktop environment handling this, which I support. I did some research, but unfortunately did not find such equivalent, maybe also because Wayland uses a slightly different architechture. I encourage you to discuss this further in [https://gitlab.gnome.org/GNOME/gnome-control-center/issues/379] so the discussion does not get spreaded to much over the single issues.",,,,,,,,,,,,,,,,,,
Provide a list of connected replicas to the remote object side to see if anything is connected or not,QTBUG-75029,276750,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,bstottle,andysh,andysh,08 Apr '19 10:36,08 Apr '19 10:36,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Remote Objects,,,,0,Reported_by_support_standard,,,Provide a list of connected replicas to the remote object side to see if anything is connected or not. That way a decision can be made to disable the remote side if need be and to display information about what is connected.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0kv7b:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Allow storing QWindow state completely,QTBUG-74998,276685,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,,silicomancer,silicomancer,05 Apr '19 19:07,05 Apr '19 19:07,18 Feb '21 09:41,,5.12.1,,,,,,,,,,,,,,,,,,,,,,GUI: Window management,,,,0,,,,"Currently QWindow does not have a normaleGeometry() method (like QWidget does). However that method is necessary for session management to restore a window completely.

There seems to be no clean way (i.e. without tracking all state changes of all windows) to restore the ""normal"" geometry of a maximized QWindow without that method (since in maximized state only the maximized geometry is accessible).

Please add normalGeometry() to QWindow to support that use case (and porting applications from Qt4 to Qt5).",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0kuv3:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Dynamic mesh rendering curved line and surface,QTBUG-74980,276649,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,seanharmer,unseon.ryu,unseon.ryu,05 Apr '19 06:51,05 Apr '19 14:25,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Qt3D,,,,0,,,,"In order to render road lanes or marks for ADAS or ARHUD,

The dynamic curved mesh is needed.

 

Bezier curve is a basic type of curve.  Spine is also preferred as well.

 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0kunb:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"05 Apr '19 14:25;zakalawe;Some considerations here: we can't rely on GPU tesselation, so we need a CPU-side tessellation option. And some decision on when the CPU re-tesselates, based on view frustum probably. We have the pieces for this (LOD/culling info). 

And need to define how tesselated geometry appears to the vertex and fragment shader (since some info will not be available with CPU-side tesselation). 

Doing all of this in a generic way will be tough.",,,,,,,,,,,,,,,,,,,,,
Supporting SVG format on TextureLoader,QTBUG-74979,276648,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,kileppal,unseon.ryu,unseon.ryu,05 Apr '19 06:41,05 Apr '19 14:22,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Qt3D,,,,0,,,,"From end-user's viewpoint,  SVG format should be supported directly.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0kun3:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"05 Apr '19 14:22;zakalawe;Adding [~seanharmer] to comment - this would mean a dependency on QtSVG which I guess we want to avoid? ",,,,,,,,,,,,,,,,,,,,,
Make it possible to call grabToImage() to get a 16bit based (64bpp) image back,QTBUG-74899,276504,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,w00t,andysh,andysh,02 Apr '19 13:03,02 Apr '19 13:03,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Quick: Other,,,,0,Reported_by_support_standard,,,"Make it possible to call grabToImage() to get a 16bit based (64bpp) image back. Currently it will give an 8bit image (32bpp) back because the internal texture format is GL_RGBA, whereas to get a 16bit one back we would need it to be GL_RGBA16. This can be necessary now we have support for 16bit based images.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0ktr3:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Feature request: allow for setting the default ""new folder"" name in QFileDialog",QTBUG-74826,276321,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt.team.quick.subscriptions,ev,ev,29 Mar '19 08:35,29 Mar '19 14:47,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Widgets: Widgets and Dialogs,,,,0,,,,"The current behavior of the (non-native) QFileDialog for creating a new folder (upon pressing the ""Create New Folder"" action) is naming the new folder ""New Folder"" (or the respective translation thereof).

 

There seems to be no way to change this behavior (other than some hacks like temporarily installing a translation). For some use cases, it would be very handy to have control over the default name. One use case would be the creation of 'hot folders' where the name of the hot folder depends on some user setting. Also note that the ""New Folder"" terminology is inconsistent with the remainder of the file dialog that speaks of ""Directories"" rather than ""Folders"".

 

One solution would be to add two extra methods to the QFileDialog class for getting and setting the default new folder name (like ""QString QFileDialog::defaultNewDirectoryName() const"" and ""void {color:#172b4d}QFileDialog::setDefaultNewDirectoryName(const QString &newdirectoryname)"".{color}

 

{color:#172b4d}Another solution would be to add one extra virtual method to the QFileDialog class for getting the default new folder name (like ""virtual QString QFileDialog::defaultNewDirectoryName() const', where the default implementation would return ""tr(""New Folder"")"". A derived class could then override this method.{color}",any use of the (non-native) QFileDialog for creating a new directory,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0ksnb:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add support for 16bit images in QHeightMapSurfaceDataProxy,QTBUG-74814,276301,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,tokorpip,andysh,andysh,28 Mar '19 16:35,28 Mar '19 16:35,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Data Visualization,,,,0,Reported_by_support_standard,,,"Add support for 16bit images in QHeightMapSurfaceDataProxy, currently it will only support up to 8bit images (since it converts to RGB32) whereas more information could be held in an image that is RGB64 based which would be converted down. So adding support for the 16bit images would be useful here.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0ksiv:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
QSyntaxHighlighter interruptable,QTBUG-74701,276114,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,esabraha,jazzco,jazzco,26 Mar '19 08:27,26 Mar '19 08:27,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,GUI: Text handling,,,,0,,,," QSyntaxHighlighter isn't interruptable internally. It always runs through ALL lines on the first call which is triggered by the modification of the QTextDocument (that is internally directly connected to the private class). This blocks the ui for user interaction.

I'd suggest to add a way to pause and resume the highlighting process in {{QSyntaxHighlighterPrivate::reformatBlocks(..)}}. Maybe a block counter or a special {{QTextBlock::userState()}} can be used to interrupt it.

Discussion: https://forum.qt.io/topic/101077/qsyntaxhighlighter-hardly-threadable",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0kre7:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
QCheckBox: In some circonstances the signal stateChanged(int) is not raised when the box is (un)checked,QTBUG-74697,276108,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt.team.quick.subscriptions,navis-raven,navis-raven,26 Mar '19 06:34,26 Mar '19 06:34,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Widgets: Widgets and Dialogs,,,,1,,,,"Hi, this bug is not easy to catch, I failed to create a simple project where to catch the bug. So, I tried to simplify to the minimum my current project on which I catched the bug. So I giving a simplified source code of my project. 

To catch the bug run my project on Visual Studio 2017, open FenParametres.cpp and FenPrincipale.cpp (these are the two useful files to see the bug, and more essentially FenParametres.cpp).

Before going further, on the file FenParametres.cpp place a breakpoint at the line 96 : 
{code:java}
if (etat == Qt::Unchecked){code}
 

Our goal is to track when the signal stateChanged(int) is sent from the checkbox ""ui.activerHistoriqueChkBox"". The connection of this checkbox is at the line 12
{code:java}
connect(ui.activerHistoriqueChkBox, SIGNAL(stateChanged(int)), this, SLOT(slotHistoriqueChkBox(int)));
{code}
{color:#FF0000}*So the line 96 which is inside the slot slotHistoriqueChkBox(int) should stops everytime the signalChanged(int) is raised*{color}


The interrupt breakpoint should stop when the user click on the checkbox or when ui.activerHistoriqueChkBox->setChecked(X); is done. And we have this
{code:java}
ui.activerHistoriqueChkBox->setChecked(m_historiqueActive);{code}
at the line 42 and 63. Place breakpoints at those lines to see when the programs go there. 

Now let's begin the test: Start a debug session

At the menubar click on Fichier then Paramètres.
!image-2019-03-26-07-00-10-769.png!
This QDialog window will appear...
Click on activer historique tu uncheck it 
!image-2019-03-26-07-02-02-400.png!

The debugger will stop at the line 96, because the state of the checkbox has been changed. Everything is normal, so let's continue the debug session...
A Warning window will appear, click on ""Annuler"" (which means Cancel in French)
!image-2019-03-26-07-05-50-014.png!

Now the debugger will stop at the line 42, since this function ""setActiverHistorique(bool on_off)"" is called when you click on Cancel. The goal of this function is to re-check the checkbox since you've cancelled. Now the programm is about to execute this:
{code:java}
ui.activerHistoriqueChkBox->setChecked(m_historiqueActive);
{code}
*and since the setChecked is called it should raise the signal stateChanged(int) and go again to the line 96 where there is our breakpoint.* 

*However when we continue the debug sessions... we just see this window and nothing else happens....*

!image-2019-03-26-07-16-11-734.png!

(please don't care about the other buttons)

Now uncheck ""Activer historique"" checkbox by clicking on it:
!image-2019-03-26-07-18-09-889.png!
*The program should raise the signal stateChanged(int) and stop at the breakpoint at the line 96... but again nothing happens...*
!image-2019-03-26-07-20-08-830.png!
It's only now, if you recheck the checkbox then the programm will stop at the line 96. 

 


Note that if you do theses changes, all will function normally:

Stop debug session
 comment the line 12, and replace it by uncommenting the line 11
{code:java}
connect(ui.activerHistoriqueChkBox, SIGNAL(toggled(bool)), this, SLOT(slotHistoriqueChkBox_v2(bool)));
{code}
this line will replace the stateChanged(int) signal by toggled(bool), and replace the previous slot by this slotHistoriqueChkBox_v2(bool). slotHistoriqueChkBox_v2(bool) is quite identical to the previous slot except that the parameter in entry is a ""bool"" and not an ""int"". 

Now place a breakpoint at the line 81 instead of 96. and start a debug session and redo the previous protocol, you will see this time all is working according to what it should be. 

it is only the changeing of signal stateChanged(int) by toggled(bool) which made the bug disappear. 
So I can conclude that the bug is very likely to come from the ""stateChanged(int)"" signal !","Visual Studio 2017 
Qt VS Tools",,,,,,,,,,,,,,,,,,"26 Mar '19 06:00;navis-raven;image-2019-03-26-07-00-10-769.png;https://bugreports.qt.io/secure/attachment/82349/image-2019-03-26-07-00-10-769.png","26 Mar '19 06:00;navis-raven;image-2019-03-26-07-00-46-263.png;https://bugreports.qt.io/secure/attachment/82348/image-2019-03-26-07-00-46-263.png","26 Mar '19 06:02;navis-raven;image-2019-03-26-07-02-02-400.png;https://bugreports.qt.io/secure/attachment/82347/image-2019-03-26-07-02-02-400.png","26 Mar '19 06:05;navis-raven;image-2019-03-26-07-05-50-014.png;https://bugreports.qt.io/secure/attachment/82346/image-2019-03-26-07-05-50-014.png","26 Mar '19 06:16;navis-raven;image-2019-03-26-07-16-11-734.png;https://bugreports.qt.io/secure/attachment/82345/image-2019-03-26-07-16-11-734.png","26 Mar '19 06:18;navis-raven;image-2019-03-26-07-18-09-889.png;https://bugreports.qt.io/secure/attachment/82344/image-2019-03-26-07-18-09-889.png","26 Mar '19 06:20;navis-raven;image-2019-03-26-07-20-08-830.png;https://bugreports.qt.io/secure/attachment/82343/image-2019-03-26-07-20-08-830.png","26 Mar '19 06:34;navis-raven;zNavigo V QCheckBoxBug.zip;https://bugreports.qt.io/secure/attachment/82342/zNavigo+V+QCheckBoxBug.zip",,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0krcv:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add possibility to share components (meshes etc) between Qt3D scenes,QTBUG-74584,275880,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,seanharmer,miikapernu,miikapernu,20 Mar '19 15:03,21 Mar '19 07:21,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Qt3D,,,,1,Reported_by_support_standard,,,"In the case of multiple scenes none of the materials, meshes etc can be reused in other scenes at the moment.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0kpyv:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
allow to set QQuickWindow rendering viewport,QTBUG-74558,275840,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt.team.quick.subscriptions,chub,chub,19 Mar '19 16:22,19 Mar '19 16:22,18 Feb '21 09:41,,5.12.2,,,,,,,,,,,,,,,,,,,,,,Quick: Core Declarative QML ,,,,0,,,,"when setting a rendertarget, QQuickWindow doesn't provide a way to specify a viewport where the scene should be rendered, as a result it will always set a viewport to the QRect(0,0, width, height). This might be problematic when using systems that recycle rendering target by specifying a different viewport.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0kpq7:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"19 Mar '19 16:22;chub;original mailing list message for context:

Hello,

I'm trying to render to QML to Direct Composition [1] surfaces. 
This can be achieve by getting Qt to render its scene to a special PBO created 
by ANGLE.
I got this part working by following advises from [2] and [3].

Before starting to perform a draw call, DComposition will inform you where it 
expect you to perform your drawing within the texture it gives you, like an 
OpenGL viewport. In most cases this will be (0,0) and will works out of the 
box. Though, especially when dealing with small resolution, DComposition will 
recycle its texture and ask you to draw with a different viewport. I didn't find a 
way to specify the viewport on Qt side, it seems to reset it before drawing the 
scene (probably [4]) . 
So my question is, is there any way I can tell Qt what viewport to use?

To make thing more clear, or if this interest someone else, my code is available at [5]

[1] https://docs.microsoft.com/en-us/windows/desktop/api/_directcomp/
[2] https://lists.qt-project.org/pipermail/interest/2015-September/018977.html
[3] https://lists.qt-project.org/pipermail/interest/2015-September/019047.html
[4] https://code.woboq.org/qt5/qtdeclarative/src/quick/items/qquickwindow.cpp.html#463 
[5] https://github.com/chubinou/QtOnDirectCompose/

 ",,,,,,,,,,,,,,,,,,,,,
Add some features to QAction an QMenu,QTBUG-74501,275535,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt.team.quick.subscriptions,navis-raven,navis-raven,17 Mar '19 09:35,18 Mar '19 01:08,18 Feb '21 09:41,,5.12.0,,,,,,,,,,,,,,,,,,,,,,Widgets: Main Window,Widgets: Widgets and Dialogs,,,0,,,,"I suggest to add some features to QMenu and QAction:

1)  create a signal to intercept a right click on a QAction, to be able to do this for example:

connect(action, SIGNAL(right_clicked()), this, SLOT(doSomething()));

 

2) Actually we are able to do set a context menu on a widget but not on an action. My suggestion is to make possible to set a context menu policy on an action. Actually we can do this :

myWidget->setContextMenuPolicy(Qt::CustomContextMenu);

connect(myWidget, SIGNAL(customContextMenuRequested(const QPoint&)), this, SLOT(ShowContextMenu(const QPoint&)));

 

but not this below. And my suggestion to be able to do ths:

myAction->setContextMenuPolicy(Qt::CustomContextMenu);

connect(myAction, SIGNAL(customContextMenuRequested(const QPoint&)), this, SLOT(ShowContextMenu(const QPoint&)));

 

3) Make possible to hide the right arrow/triangle on a QMenu. The only possibility to hide it today is to make it 0x0 px size with stylesheets: this problem is discussed in many forums like this one: [https://forum.qt.io/topic/35113/how-to-hide-the-right-arrow-in-qmenu/6]

 

4) Actually giving a pointer of an action as a parent to a QMenu raise an exceptin at the execution, for example doing this:

 

 QAction* action= new QAction(""foo"", this);

QMenu* menu = new QMenu((QWidget*) action);

raises an exception. My goal was to get the ""father"" of the menu in the arborescence, since I made this: 

action->setMenu(menu);

 

and once the menu open I was not able to know to which action set this menu. There is no function menu->getLinkedAction() or soething like that. So I tried to make this instead:

QAction* act= new QAction(""foo"", this);

QMenu* alpha = new QMenu((QWidget*) act);

act->setMenu(alpha);

....

//At the slot that manage the context menu ""alpha"" I wasn't able to this: 

QAction* act2 = alpha->parent();

 

because of the excepetion raised at ""QMenu* alpha = new QMenu((QWidget*) act);""

 

My suggestion is to search for solution to make the ability to get the ""father"" of this QMenu

 ",windows 7,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0kox3:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"17 Mar '19 20:41;navis-raven;I've searched the whole Google I found many forums which are discussing the problem of the impossibility to hide the right-arrow of a menu and I found no answer !","17 Mar '19 20:42;sgaist;Hi,

C casting a QAction as a QWidget is wrong on several levels. A QAction is not a QWidget at all.

QAction have no physical representation unless they are put in a QMenu or a [QToolBar|https://doc.qt.io/qt-5/qtoolbar.html].

You can get the menu that contains a specific QAction with [QAction::menu|https://doc.qt.io/qt-5/qaction.html#menu]

If a menu is a submenu, you can get the containing menu using [QMenu::menuAction|https://doc.qt.io/qt-5/qmenu.html#menuAction] 
","17 Mar '19 23:56;navis-raven;Hi, note that I've casted the pointer QAction* as a QWidget* and not QAction as QWidget, my goal was to keep a traceability of the parent. Anyway if I've understood what you said with [QMenu::menuAction|https://doc.qt.io/qt-5/qmenu.html#menuAction] we have our solution. 

So if I make:

act1->setMenu(myMenu);

....

//At the slot that manage the context menu ""myMenu"": 

QAction* act2 = myMenu->menuAction();

We have at the end act2==act1 isn't it ?","18 Mar '19 01:08;navis-raven; 

I've tested the code myMenu->menuAction(); it seems to be working. So I think the point 4 is solved, thanks for the help",,,,,,,,,,,,,,,,,,
"When adding a menu to an action, you cannot click (trigger) anymore on this action.",QTBUG-74506,275543,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt.team.quick.subscriptions,navis-raven,navis-raven,18 Mar '19 01:03,18 Mar '19 01:03,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Widgets: Main Window,Widgets: Widgets and Dialogs,,,0,,,,"When adding a menu to an action, you cannot click (trigger) anymore on this action.

For example, after doing something like this on a QMainWindow:


{{ui.baseMenu->addAction(myAction);}}
{{QMenu* myMenu();}}
{{myAction->setMenu(myMenu);}}
{{connect(myAction, SIGNAL(triggered()), this, SLOT(doSomething()));}}{{}}{{}}

{{//...}}

{{void MyClass::doSomething()}}

{{{}}

{{}}}

when the window is displayed, you cannot click and trigger myAction, and the programm will never enter into doSomething() slot. And this problem is because we've setted a QMenu to our QAction ({{myAction->setMenu(myMenu);}}) 

I don't know if its a bug or a wanted behavior, but my suggestion is to add an option in order to let the programmer user define if he wants to make the menu myMenu masking the triggerable action or not. 

The solution may like something like this (example of possible solution): 

{{ui.baseMenu->addAction(myAction);}}
{{QMenu* myMenu();}}
{{myMenu->setMaskingAssociatedAction(false);}}
{{myAction->setMenu(myMenu);}}

//etc...

This is only an example, the goal is to solve this problem anyway. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0koyv:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
QProcess documentation enhancement,QTBUG-74451,275444,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,docteam,scorp1us,scorp1us,14 Mar '19 18:16,14 Mar '19 18:16,18 Feb '21 09:41,,5.12.1,,,,,,,,,,,,,,,,,,,,,,Documentation,,,,0,,,,"There should be a note accompanying QProcess::finished signal that it is only emitted if the process is started successfully. 

The only way to pick up failed processes AND completed processes is to watch for the state transition to QProcess:: ProcessState::NotRunning.  Refer to the Qt-interest mailing list on 2019-03-13,14 for the thread.

 

 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0kodj:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Possible to set constant properties to ListElement,QTBUG-74186,274932,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt.team.quick.subscriptions,keshav,keshav,03 Mar '19 07:27,14 Mar '19 13:49,18 Feb '21 09:41,,5.12.1,,,,,,,,,,,,,,,,,,,,,,QML: Declarative and Javascript Engine,,,,0,,,,"I have separated module with constant colors:

AppTheme.qml (cutted file for example)
{code:java}
pragma Singleton

import QtQuick 2.12

QtObject {
    readonly property color textColor: ""#de000000""   // 87%
    readonly property color textColor54: ""#8a000000""
    readonly property color textColor38: ""#61000000""
    readonly property color textColor12: ""#1e000000""
}
{code}
In other module I want to create ListModel. In example:
{code:java}
ListModel {
    ListElement { param: 0.0; color: AppTheme.textColor }
    ListElement { param: 1.0; color: AppTheme.textColor12 }
}
{code}
And then I run get this error:
{quote}cannot use script for property value
{quote}
But I don't understand what happens. Because ListElement created with constant color values. I don't use any functions...

I use this hack:
{code:java}
ListModel {
            Component.onCompleted: {
                [
                [ 0.0,  AppTheme.textColor ],
                [ 1.0,  AppTheme.textColor12 ]
                ].forEach(function(element) {
                    append({
                               param: element[0],
                               color: element[1]
                           });
                });
            }
{code}
But it is not readable and it is not so simple...

Please make possible to set constants in ListElement in future. Because I have many cases where it will be useful. Colors, icon fonts etc...

 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0kla7:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Create a Wayland extension for minimized state,QTBUG-74351,275260,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,johanhelsing,esabraha,esabraha,12 Mar '19 10:41,12 Mar '19 10:42,18 Feb '21 09:41,,5.13.0 Alpha 1,,,,,,,,,,,,,,,,,,,,,,QPA: Wayland,,,,0,,,,"There is currently no information in the Wayland protocol about the minimization state. This can be useful in multiple situations, such as for applications that implement ""minimize to tray"" functionality.

We should invent such an extension and support it in Qt, so that other compositors may also support this if seen as useful.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Linux/Wayland,,,,,,"0|i0kn93:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add a means to detect when the stacking order changes for an item,QTBUG-74320,275185,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt.team.quick.subscriptions,andysh,andysh,11 Mar '19 10:38,11 Mar '19 10:38,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Quick: Core Declarative QML ,,,,1,Reported_by_support_standard,,,"Add a means to detect when the stacking order changes for an item so that it is possible to account for this in a custom layout.

Currently the only way to catch this sort of thing is with a QQuickItemChangeListener which is private API, so either making this public or adding another means (possibly via QQuickItem::itemChange) would be handy here.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0kmtb:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Support XMLHttpRequest Level 2,QTBUG-74302,275155,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt.team.quick.subscriptions,chriseby,chriseby,08 Mar '19 22:22,08 Mar '19 22:22,18 Feb '21 09:41,,5.12.1,,,,,,,,,,,,,,,,,,,,,,QML: Declarative and Javascript Engine,,,,1,,,,"It appears that QML supports XMLHttpRequest Level 1 ([https://www.w3.org/TR/XMLHttpRequest)], however,  XMLHttpRequest Level 2 has been out for so long that it is now simply know as XMLHttpRequest ([https://xhr.spec.whatwg.org)|https://xhr.spec.whatwg.org%29/]. It would be really great if QML supported the modern spec, especially the FormData object.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0kmmv:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Qt3D : add setScreenSpaceTolerance feature to QPickingSettings for Lines and Points,QTBUG-74297,275150,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,seanharmer,lcadet,lcadet,08 Mar '19 16:07,08 Mar '19 16:07,18 Feb '21 09:41,,5.12.1,,,,,,,,,,,,,,,,,,,,,,Qt3D,,,,0,,,,"Actually when performing Picking through _QPickingSettings_ and _QObjectPicker_ on Qt5.12.1, it works very well when the mesh is composed only of Triangles (and with _QPickingSettings::setPickMethod(TrianglePicking)_ ). 

However, when considering Point or Line Picking, the tolerance setting is based on WorldSpace distance, which is interesting to simulate thick lines in RayTracing rendering but not convenient for mouse Picking functionnality.

Thus, when the camera is close to the line/point, the picking works well. However, when the camera is far and the scene full of lines/points at different depths from camera, the picking becomes inefficient due to the pixels frustrum resolution. Thus, the _QPickingSettings::setWorldSpaceTolerance()_ method is not adequat for picking. 

However, performing the tolerance checking in the ScreenSpace (ie. tolerance in pixel count : example the manhattan distance) would be more robust for the specificities of mouse object picking.

 

 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0kmlr:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
:first pseudo-state support for QMenu::item,QTBUG-73681,273601,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt.team.quick.subscriptions,puffosauro,puffosauro,07 Feb '19 14:26,08 Mar '19 14:11,18 Feb '21 09:41,,5.11,,,,,,,,,,,,,,,,,,,,,,Widgets: Style Sheets,,,,0,,,,"It would be nice if the :first pseudo-state were supported for QMenu::item

e.g. it would be easy to create a customized menu with a title",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0kegv:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Overhaul the sorting of QTreeWidget resp. QAbstractItemModel,QTBUG-74114,274808,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,dfaure_kdab,lachrymology,lachrymology,28 Feb '19 09:15,04 Mar '19 05:35,18 Feb '21 09:41,,5.12.0,5.13.0 Alpha 1,,,,,,,,,,,,,,,,,,,,,Core: Item Models,,,,0,,,,"Hi all,

currently I've searched for a method to turn on the sorting by column of QTreeWidget / QTableWidget with the behaviour to sort the items ONLY when the user clicks a column section.

For god's sake this is really a pain in the ass.

The method setSortingEnabled will immediately sort the first column, who ever was thinking this was a good idea, was out of his senses.

Currently you need to call setSectionsClickable(true) and catch sortIndicatorChanged where within you call sortByColumn on your own. This can't be combined with setSortIndicatorShown.

My suggestion for a much better and useful behaviour:
 # setSortingEnabled will not immediately sort the first column. Sorting will only take place if the user forces it through a click in the header section or programmatically through sortByColumn.
 # Sorting needs to have three states instead of two state: None, AscendingOrder, DescendingOrder
This have to be used to restore the original insert order, so that the user can turn of the Ascending/Descending order, where the sortIndicator will be hidden.
 # It would be useful to define sections which shouldn't be sorted. Something like:
header()->disableSortingByColumn(int logicIndex, bool disabled)

These three changes will give the models/widgets a wide range of possibilities to configure them to your own needs. Such as only sorting through user interactions, disable sorting for columns/rows and restoring the original insert order through the user with indicators enabled.

I know that a proxy model is able to fulfill some of these requirements, but not everyone wants to write own models for some simple structured data / widgets.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Windows,,,,,,"0|i0kkkv:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"04 Mar '19 05:35;lachrymology;Multiple sorting of columns instead of only one column would be an awesome feature too.",,,,,,,,,,,,,,,,,,,,,
add QRect::united(QPoint),QTBUG-74089,274740,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,thiago,neurocod,neurocod,26 Feb '19 21:42,26 Feb '19 21:42,18 Feb '21 09:41,,5.12.1,,,,,,,,,,,,,,,,,,,,,,Core: Other,,,,0,,,,"There is QRect::united(const QRect &rectangle), and QPoint overload is useful for bounding rect calculations.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0kk5r:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add a feature (property) to QComboBox to make it align center ,QTBUG-74086,274735,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt.team.quick.subscriptions,navis-raven,navis-raven,26 Feb '19 18:25,26 Feb '19 19:17,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Widgets: Widgets and Dialogs,,,,0,,,,"The only way to align center a QComboBox is to make like described in this webpage of qt forum:
[https://forum.qt.io/topic/49122/solved-qcombobox-align-center]

It'll be good to add a property to QComboBox class to easily align center its contain

For example just by typing: 
QComboBox comboBox;
comboBox.setAlignment(Qt::AlignCenter);

And particulary by editing this alignement property in QtCreator",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0kk4n:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
QLayout::add*() Documentation is Weak,QTBUG-74059,274684,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,docteam,scorp1us,scorp1us,25 Feb '19 16:58,25 Feb '19 17:06,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Documentation,,,,0,,,,"Recently there was a thread on interest ( [https://lists.qt-project.org/pipermail/interest/2019-February/032476.html] ) where the OP was confused. After reading the docs, I was confused too. A few people agreed with the documentation not being clear:

{noformat}
> So the docs are clear as mud.
The docs are indeed unclear, but look at what you're quoting -- a function to add QLayoutItems to a layout. A QWidget is NOT a QLayoutItem (but it is possibly managed by one). QLayout::addItem will add a QLayoutItem to a layout, passing ownership of the _item_ to the layout (but not of the widget the layout item is managing).
{noformat}

{noformat}
>removeItem: Note: The ownership of widget remains the same as when it was added.

This is the part that isn't clear. ""Ownership [as] when it was added"", I decided that this had to mean ""before it was added"" instead of ""after it was added"" because, as you clear think too, that's the only thing that really makes sense.
{noformat}

Additionally the diagram in https://lists.qt-project.org/pipermail/interest/2019-February/032491.html was most helpful.
 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0kjtb:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"25 Feb '19 17:06;scorp1us;Also the parenting/vs ownership is not adequately covered.",,,,,,,,,,,,,,,,,,,,,
QR viewer/generator module/namespace/class support out of the box,QTBUG-72871,271867,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt.team.quick.subscriptions,ceperez1996,ceperez1996,07 Jan '19 03:00,24 Feb '19 23:33,18 Feb '21 09:41,,5.12.0,5.12.1,,,,,,,,,,,,,,,,,,,,,Widgets: Widgets and Dialogs,,,,0,,,,"As we have Qt SVG module, which allows us to display and create SVG files, we must have a Qt QR module that allows us to display and create QR codes (very used on this days). Nice features will be creating pixmaps or svg images from QString, QPixmap, QImage and from RAW data too (like QByteArray). A QQrWidget to display a QR code will be nice to have too. The architecture of the Qt SVG is pretty good to me, and having that over QR codes will be awesome. However, if this implementation s no good enough, you can always  provide just a namespace or even a small group of classes.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0k4h3:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"07 Jan '19 12:39;srutledg;Why should a QR code be SVG rather than generating a QImage of the appropriate size when it's to be displayed?

If we do this, we should make it work in both Qt Quick and widgets.

The recognizer is harder.  I'm not sure we can justify maintaining something like that, when there are probably already good C++ libraries from elsewhere that you can use?","07 Jan '19 20:47;ceperez1996;_Why should a QR code be SVG rather than generating a QImage of the appropriate size when it's to be displayed?_

No. no. If you think that a `QImage` will be a better option, it's enough for me. I just wanted to give ideas, not impose ideas.

_""The recognizer is harder. I'm not sure we can justify maintaining something like that, when there are probably already good C++ libraries from elsewhere that you can use?""_

Yes. There are a few C++ libraries that we can use, but they dont match the architecture of Qt so they are hard to use. Why you dont make an API over such libraries, as you did with the C SQLite API? I think that is a very interesting and useful feature, dont give up. If you can do it for Qt Quick, we can use it in embedded devices.","18 Feb '19 16:35;srutledg;If you want to try doing this yourself, and if it's enough to have it in Qt Quick, then I would suggest subclassing https://doc.qt.io/qt-5/qquickimageprovider.html , find yourself a suitably-licensed QR generator on github (say perhaps https://github.com/bjguillot/qr which I just now found, haven't tried it) and try to make it render into a QImage.  QQuickImageProvider takes a URL, so that seems like a very good fit: the QML can then be something like 
{code}
Image { source: ""image://qr/my-text-to-render?size=256"" }
{code}
and of course if you succeed, you can contribute a patch.  Maybe we could ship it in a Qt.labs module for now.

Having it available for widgets too would also be nice, but probably requires more discussion to decide where to put it, since there is not such an Image Provider API for widgets.  Ideally maybe it could just be a static function that takes a QString and returns a QImage.  Or maybe a QPainter method like QPainter::drawQrCode(const QRect &r, const QString &content)?  But it might turn out that there are many variations, and someone will want control over how the rendering is done... so then it needs an enum and/or an Options object, etc.","24 Feb '19 23:33;ceperez1996;Thanks for diving into, by the way.

Right now I'm a little busy, I think you are busy too. I will find the time to dive into all of this, eventually. So yes, thanks for the detailed info. When I implement this I will submit my code to you.",,,,,,,,,,,,,,,,,,
"Implement functions moveColumn and moveRow from QAbstractItemModel virtual ones, for convenience.",QTBUG-74013,274335,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,dfaure_kdab,maxzor,maxzor,23 Feb '19 00:29,23 Feb '19 00:29,18 Feb '21 09:41,,5.13.0 Alpha 1,Some future release,,,,,,,,,,,,,,,,,,,,,Core: Item Models,,,,0,,,,"Hello, it would be nice to have the feature in a QTableWidget.

What about implementing moveColumn and moveRow in :
 * QStandardItemModel,
 * the three convenience classes QList/Table/TreeWidget in their respective model inner-workings? For example, from source, QTableWidget uses a very thin implementation on top of QAbstractTableModel in its QTableModel. Why not implement the move function in this thin layer?

Very big props to peppe and osse in IRC, whom explained to me the business and suggested asking the feature here.

I am very far from understanding all of the subtleties of this Qt module, every suggestion or explanation is welcome.
 (for the context : I am using a QTableWidget and the header sectionsMovable feature. I would like to propagate the view move into a model move and have to do a custom rearranging at the moment.)

BR, Maxime",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0kiy7:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Need a signal to know the completion of Scene3D or TextureLoader's lazy-loading,QTBUG-72918,271982,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,seanharmer,unseon.ryu,unseon.ryu,09 Jan '19 06:47,21 Feb '19 00:59,18 Feb '21 09:41,,5.12,,,,,,,,,,,,,,,,,,,,,,Qt3D,,,,1,,,,"Almost Qt3D's initialization/loading are done with async.

Especially Scene3D and TextureLoader's lazy rendering should be managed in a certain  case.  For example, some opening animation should be started when all objects shown.

We need to make these jobs done with sync. or we need to provide signals when completed.

 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0k56n:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"11 Jan '19 10:49;anmaatta;[~unseon.ryu] We need a test case for this to understand the use case better. Could you provide this, please?","15 Jan '19 20:32;unseon.ryu;[~anmaatta] Claim from the customer. I will make clarify the test case after the meeting with the customer next Monday.

 ","18 Feb '19 06:07;kileppal;[~unseon.ryu] Did you get test case for this?","18 Feb '19 06:15;unseon.ryu;[~kileppal]

Sorry, I didn't update this page but only QTBUG-72927

Their test case was very simple.  Opening animation should be started after loading scene of Scene3D.

Triggering animation in QFrameAction is a nice idea.

If you don't have any better way to do that, this ticket could be closed.",,,,,,,,,,,,,,,,,,
Add support for passing SSL certificates so that they can be used by the underlying native browser,QTBUG-73948,274179,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,stromme,andysh,andysh,20 Feb '19 14:03,20 Feb '19 14:03,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,WebView,,,,0,Reported_by_support_standard,,,Add support for passing SSL certificates so that they can be used by the underlying native browser,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0ki0f:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
QTableView / QSortFilterProxyModel Drag/Drop not respecting column/row order of view,QTBUG-71473,269024,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,dfaure_kdab,shmittal,shmittal,29 Oct '18 11:02,19 Feb '19 08:59,18 Feb '21 09:41,,5.12,,,,,,,,,,,,,,,,,,,,,,Core: Item Models,,,,1,Reported_by_support_standard,,,"Feature Request: Drag and drop within tableViews should replace data according to column/rows order in destination view (i.e. where data is dropped), not according to column/row order of underlying model.

Please refer to the attached project and steps to reproduce the behavior.

The expected behavior is that 

When dragging data, QT only includes information about how the data is
organized, not how it's visualized. If you drag a QTableView that has its
columns swapped and drop it into another QTableView, the drop operation will
result in the columns being applied in an incorrect order from a user's
perspective. 

There is a workaround that you can implement dropMimeData() to define such mappings, but the customer is expecting this to be the default behavior. 

Not sure how feasible is this, so creating this report to get the developer team's view. ",,,,,,,,,,,,,,,,,,,"29 Oct '18 11:04;shmittal;Drag_Table_Has_Its_Columns_Swapped.png;https://bugreports.qt.io/secure/attachment/77627/Drag_Table_Has_Its_Columns_Swapped.png","29 Oct '18 11:04;shmittal;QTBUG71473.zip;https://bugreports.qt.io/secure/attachment/77626/QTBUG71473.zip","29 Oct '18 11:04;shmittal;QT_DragDrop_Bug_Bad_Result_Explanation.png;https://bugreports.qt.io/secure/attachment/77624/QT_DragDrop_Bug_Bad_Result_Explanation.png","29 Oct '18 11:04;shmittal;QT_DragDrop_Bug_How_To_Reproduce.png;https://bugreports.qt.io/secure/attachment/77625/QT_DragDrop_Bug_How_To_Reproduce.png",,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Windows,,,,,,"0|i0jo0n:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
QDrawer widget is mandatory needed for Android applications,QTBUG-73874,274049,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt.team.quick.subscriptions,gourmand64,gourmand64,18 Feb '19 14:55,18 Feb '19 18:38,18 Feb '21 09:41,,5.9.0,,,,,,,,,,,,,,,,,,,,,,Widgets: Widgets and Dialogs,,,,0,,,,No any objections are allowed. QDrawer *IS MANDATORY NEEDED* for Qt on Android. Even all other QML types *MUST BE IMPLEMENTED AS WIDGETS!*,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Android,,,,,,"0|i0kh7z:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"18 Feb '19 15:39;srutledg;Widgets are rendered by QPainter.  You can't have smooth-sliding animations in a CPU-friendly way if you are repainting with QPainter at 60FPS.  We would need to involve the GPU in some way.  

One way is to have QStyle (or some variant of it) use the scene graph: we're considering that for Qt 6, but no promises.  Some people of course worry that it will destabilize widgets on desktop platforms, so we can't leave the old QStyle behind either.

Another way might be to add support only for GPU-accelerated smooth sliding of any widget content in any direction: that's just an idea of mine, I haven't even tried to figure out the details of such an approach, but it seems like it ought to be possible to use QPainter to render a widget and all its children into a texture and then slide the texture around, rather than involving OpenGL or the scene graph to paint individual widgets inside.  The same approach could give us smooth scrolling too.  But the physics would have to be implemented independently in C++ (Qt Quick's Flickable is not reusable).  Probably the ""feel"" would end up being different than drawers in native Android apps.

Another way might be to use native widgets on various platforms.  Some prototyping was done in this direction a while back; but Qt is all about portable API, but it's hard to make portable API while still supporting all the features of every native widget.  A compromise has to be made in one direction or another.  So this idea was shelved for now.
","18 Feb '19 18:38;gourmand64;The solution is quite simple - *sliding widget does not need to be repainted*. When sliding starts paint entire widget with QPaint as obvious *ONLY ONCE*. Slide this widget *WITHOUT* repainting until widget movement stops. Then repaint it again. Paint it only when the widget stays on place.",,,,,,,,,,,,,,,,,,,,
Multiple QAreaSeries: lowerSeries to 0.0 instead of the x-axis,QTBUG-73841,273985,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,e0348803,thibault,thibault,15 Feb '19 14:47,15 Feb '19 14:49,18 Feb '21 09:41,,5.12.1,,,,,,,,,,,,,,,,,,,,,,Charts,,,,0,,,,"When creating two or more QAreaSeries without lowerSeries, the x-axis is used as the lower bound (see ""actual.png"" attachment). I think it would be useful to add the ability to set the lower bound to the 0.0 y-value instead (""expected.png"" attachment).

 

 

 

 ",,,,,,,,,,,,,,,,,,,"15 Feb '19 14:46;thibault;actual.png;https://bugreports.qt.io/secure/attachment/81049/actual.png","15 Feb '19 14:49;thibault;expected.png;https://bugreports.qt.io/secure/attachment/81050/expected.png",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0kgtr:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Clickable ticks for axes,QTBUG-73790,273861,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,e0348803,poikelin,poikelin,13 Feb '19 08:23,13 Feb '19 08:24,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Charts,,,,0,Reported_by_support_standard,,,Something like {{void tickClicked(qreal value)}} signal would do.  Same for category axes too.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0kg2f:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
A function to check if Qt is currently using software rendered OpenGL,QTBUG-73767,273776,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,lagocs,poikelin,poikelin,12 Feb '19 08:05,12 Feb '19 08:08,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,GUI: OpenGL,,,,0,Reported_by_support_standard,,,"Sometimes it would be good to know if the OpenGL implementation is software implementation to use lighter weight UIs. For example, to know when running on llvmpipe or warp through ANGLE.

These could be read from GL_RENDERER when it contains ""llvmpipe"" or ""Microsoft Basic Render Driver"" at least.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0kfjr:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ChartView with createSeries improved to define axis alignment,QTBUG-73748,273716,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,e0348803,joselopezvila,joselopezvila,11 Feb '19 10:37,11 Feb '19 10:38,18 Feb '21 09:41,,5.12.0,,,,,,,,,,,,,,,,,,,,,,Charts,,,,1,,,,"The method createSeries of a ChartView is the only way to create dynamic series but you can't specify the axis position. I've tried calling this method and then setting the 
axisYRight property but this action makes that the range of the other left axis takes the same values than the right axis.

The solution that I've found is modify the files declarativechart.cpp and declarativechart_p.h to specify the axis alignment.

If there are any other option to have series attached to left axis and other to the right I'm very interested.",,,,,,,,,,,,,,,,,,,"11 Feb '19 10:33;joselopezvila;declarativechart.cpp;https://bugreports.qt.io/secure/attachment/80871/declarativechart.cpp","11 Feb '19 10:33;joselopezvila;declarativechart_p.h;https://bugreports.qt.io/secure/attachment/80870/declarativechart_p.h",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0kf6f:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Button font can't have All-Uppercase in Material Theme  at Windows.,QTBUG-72873,271869,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt.team.quick.subscriptions,sazus,sazus,07 Jan '19 05:59,08 Feb '19 18:49,18 Feb '21 09:41,,5.12.0,,,,,,,,,,,,,,,,,,,,,,Quick: Controls 2,,,,2,,,," Please refer to the following forum issue.

[https://forum.qt.io/topic/97974/qt-quick-control-2-material-theme-upper-case-are-in-lower-case-on-windows-qt-5-12-0]


It isn't clearly described in the [Google Materials Design Guide|https://material.io/design/components/buttons.html#], it seems that it is a specification that button text have an all uppercase.
 I confirm android at API21, Button font capitalization had set all uppercase.

*/sdk/platforms/android-21/data/res/values/styles_material.xml*
{code:xml}
<style name=""TextAppearance.Material.Button"">
    <item name=""textSize"">@dimen/text_size_button_material</item>
    <item name=""fontFamily"">@string/font_family_button_material</item>
    <item name=""textAllCaps"">true</item>
    <item name=""textColor"">?attr/textColorPrimary</item>
 </style>
{code}

Currently, Ubuntu can view All-Uppercase button text,
 but,on Windows, it mixed Uppercase / lowercase.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Windows,,,,,,"0|i0k4hj:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"08 Feb '19 18:49;Dynite;I encountered this issue today upgrading from qt 5.11.1 to 5.12.1. Sometimes the buttons were lowercase and the text in general smaller. However other times they were back to being the correct size.",,,,,,,,,,,,,,,,,,,,,
Provide a command line option to disable the entire bookmark functionality,QTBUG-73694,273618,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,jkobus,andysh,andysh,07 Feb '19 23:23,08 Feb '19 08:33,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Tools: Assistant,,,,1,Reported_by_support_standard,,,Provide a command line option to disable the entire bookmark functionality as opposed to just the dock widget part as it can make sense to not allow any of it if users prefer it not be available especially if they are updating the help documentation frequently and thus the bookmarks would be reset.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0kekn:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"08 Feb '19 08:33;tc@4js.com;A property in the QHCP file could be an option as well, as it is done for the filters.",,,,,,,,,,,,,,,,,,,,,
Add a means to copy bookmarks from one qhc to another,QTBUG-73693,273617,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,jkobus,andysh,andysh,07 Feb '19 23:21,07 Feb '19 23:21,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Tools: Assistant,,,,1,Reported_by_support_standard,,,Add a means to copy bookmarks from one qhc to another as this can be useful if you are updating the documentation from one version to another and you don't want to lose the user's existing bookmarks if they can be kept. This could either be done with a separate helper tool or using Assistant's command line options do it.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0kekf:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Create qtwaylandscanner API for getting the version of an object,QTBUG-73646,273505,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,johanhelsing,johanhelsing,johanhelsing,06 Feb '19 13:41,06 Feb '19 13:41,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,QPA: Wayland,,,,0,,,,"Starting with libwayland 1.10, it's possible to get version info from libwayland using wl_proxy_get_version.

It would be usfeful to start generating wrappers around this in qtwaylandscanner in order to remove a lot of boiler-plate code within QtWayland itself, as well as the testing code.

It would also make implementing custom wayland extensions in application code easier.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Linux/Wayland,,,,,,"0|i0kdvj:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Graphical explanation of (Q)FontMetrics ,QTBUG-73508,273307,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,docteam,VersalEszett,VersalEszett,05 Feb '19 07:43,05 Feb '19 08:09,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Documentation,,,,0,,,,"It would be great if there was a visual explanation of the several properties ({{capHeight}}, {{ascent}}/{{descent}}, {{height}}, {{leading}} etc.), similar to the one at [https://doc.qt.io/qt-5/stylesheet-customizing.html].

There are several available in the web titled ""anatomy of a letter/typography"" ([exemplary image search|https://duckduckgo.com/?q=anatomy+of+a+letter&t=hj&iax=images&ia=images]), but it would be great to have one directly in the documentation without having to know what to search for.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0kcnr:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"qjsengine : Support any file extension -> import ""foo.bar""",QTBUG-73473,273224,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt.team.quick.subscriptions,mrahmedsayedali,mrahmedsayedali,03 Feb '19 10:29,04 Feb '19 13:03,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,QML: Declarative and Javascript Engine,,,,0,,,,"allow to accept another extension 

if (!pathOrUri.endsWith(QLatin1String(""js""))){

error->message = QCoreApplication::translate(""QQmlParser"",""Imported file must be a script"");

error->loc.startLine = tokenStartLine();

error->loc.startColumn = tokenStartColumn();

return false;

}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0kc5b:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"04 Feb '19 10:50;mitch_curtis;Why? Please explain the reasoning.","04 Feb '19 12:53;mrahmedsayedali;[~mitch_curtis] .

i use QJsEngine  in my c++ project
 import ""<JavaScriptFile>"" as <Identifier>
 {{import ""./foo.bar"" as Foo}}

and make a javascript files but in other extension

and when i make import (include other file inside it) : say ""Imported file must be a script""

by force must import foo.js  not foo.bar",,,,,,,,,,,,,,,,,,,,
Provide a way to check whether QOpenGLWidget will actually call paintGL() after an update(),QTBUG-73444,273159,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,lagocs,flaviotordini,flaviotordini,31 Jan '19 22:33,31 Jan '19 22:33,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,GUI: OpenGL,Widgets: Widgets and Dialogs,,,0,,,,"There is no currently no way to know if calling update() on a QOpenGLWidget will trigger a call to paintGL(). Having an attribute that tells QOpenGLWidget to unconditionally call paintGL would be ideal.

In my particular case I'm using libmpv and rendering video to QOpenGLWidget. I have to guess whether paintGL will be called or not and handle the two cases differently. This is not robust at all because there may be some other reason that prevents updates.

My (unreliable) code looks like:
{noformat}
QWidget *w = window();
if (!w->updatesEnabled() || w->isHidden() || w->isMinimized() || isHidden() ||        !updatesEnabled()) {
    makeCurrent();
    paintGL();
    QOpenGLContext *c = context();
    c->swapBuffers(c->surface());
    doneCurrent();
} else update();{noformat}
 

 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0kbr3:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
QChart has no possibility to reset scroll actions like zoomReset,QTBUG-73393,273060,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,e0348803,filippov,filippov,30 Jan '19 12:08,30 Jan '19 12:08,18 Feb '21 09:41,,5.12.0,,,,,,,,,,,,,,,,,,,,,,Charts,,,,0,,,,"AbstractDomain has private fields m_zoomReset[Min|Max][X|Y], which are saved by calling private method storeZoomReset(). And this performed just on zoomIn(...) zoomOut(...) methods.

It's great that we have possibility to roll back zoom action, but we have similar method XYDomain::move(...), which make XYDomain::setRange(...), but no storeZoomReset().

I think that it will be usefull to include storeZoomReset into move method or at least gain public access to storeZoomReset().

 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0kb53:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Consider marking QDialog::exec() deprecated,QTBUG-73287,272839,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt.team.quick.subscriptions,smokris,smokris,25 Jan '19 16:20,29 Jan '19 09:33,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Widgets: Widgets and Dialogs,,,,0,,,,"The documentation for [QDialog::exec|http://doc.qt.io/qt-5/qdialog.html#exec] says:
{quote}Note: Avoid using this function; instead, use open(). Unlike exec(), open() is asynchronous, and does not spin an additional event loop. This prevents a series of dangerous bugs from happening (e.g. deleting the dialog's parent while the dialog is open via exec()).
{quote}
See also [https://blog.qt.io/blog/2010/02/23/unpredictable-exec/] .

However, the [main QDialog documentation|http://example.http://doc.qt.io/qt-5/qdialog.html#detailscom] just says:

{quote}The most common way to display a modal dialog is to call its exec() function.{quote}

…which might lead new users to think {{QDialog::exec()}} is just fine, if they don't happen to see the method-specific documentation.

Would it be appropriate to mark {{QDialog::exec()}} deprecated (and remove the mention in the main QDialog documentation), since it's problematic and an alternative API is available?",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0k9sf:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"28 Jan '19 12:17;srutledg;In Qt Quick it's not allowed, but is it so problematic in widget-based applications?

Maybe it's a good idea to deprecate it, but I wonder how much unhappiness that will cause, since it's such an old and established technique?","29 Jan '19 09:33;richard;When this has been discussed before, I think we concluded that we should fix up our own examples first to not use it, before we can deprecate it / recommend not to use it. I have fixed a ton of bugs related to this (at least it feels so), so I can understand the motivation. The main problem is typically that e.g a mouse press event to the application, which will exec a dialog/call process events/start drag/etc. All which will recurse the event loop. Then new mouse events will be deliver from the recursed event loop, move, press, release, etc, which will be delivered to the application _while_ the first mouse press handler is still on the call stack. This can lead to all kinds of hard-to-understand problems :/ But I don't think we will be able to remove this API any time soon, too many auto-tests, examples, apps are depending on the pattern, and it's usually not trivial to rewrite such code.
",,,,,,,,,,,,,,,,,,,,
Add support for pre-authentication when downloading from a website,QTBUG-73278,272827,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,jefernan,andysh,andysh,25 Jan '19 13:59,28 Jan '19 04:32,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Network: Authentication,,,,0,Reported_by_support_standard,,,"Add support for pre-authentication when downloading from a website. If an attempt is made to get a file from a server that requires pre-authentication (i.e. returns 403 forbidden and not 401 authentication required on request) then it is not possible to get that file since the authentication is not requested. 

Therefore it would be good to be able to set the authentication details in advance when it is known the website is going to require this.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0k9qv:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"25 Jan '19 15:04;sigma;The server returns 403 (Forbidden), not 407","28 Jan '19 04:32;andysh;Corrected in the description, thanks.",,,,,,,,,,,,,,,,,,,,
WinExtras: Include the QML files into a resource file or plugin library instead of having them separate ,QTBUG-73250,272761,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,kleint,andysh,andysh,24 Jan '19 09:14,25 Jan '19 11:48,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Extras: Win,,,,0,Reported_by_support_standard,,,"Include the QML files into a resource file for use by the plugin library instead of having them separate. This would enable them to not have to be deployed separately and thus prevent them from being modified by users to attempt to hijack the application (see qtwinextras/src/imports/winextras/winextras.pro  and files JumpListDestination.qml  JumpListLink.qml  JumpListSeparator.qml ).
",,,,,,,,,,,,,,,QTBUG-73123,QTPM-889,QTBUG-35754,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Windows,,,,,,"0|i0k9c7:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"25 Jan '19 11:30;kleint;The recommended way to do this is use static linking. In this case, the QML files will bundled into a resource (see QTBUG-35754).

There is currently a restriction preventing the use of resources for dynamic builds in that the qmldir file needs to be located next to the C++ plugin.

Please check QTBUG-61752 for a suitable compiler version.

See also ""Include the qml files into a resource when building a static plugin""  0648503bb5fb6e29273ac14c478563ea6ebd17e https://codereview.qt-project.org/#/c/114835/ for QTBUG-35754.",,,,,,,,,,,,,,,,,,,,,
More Marker Shapes,QTBUG-73212,272687,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,bibr,kcbeck,kcbeck,23 Jan '19 02:04,23 Jan '19 02:04,18 Feb '21 09:41,,5.11,,,,,,,,,,,,,,,,,,,,,,Widgets: GraphicsView,,,,0,,,,"Add more marker shapes to QScatterSeries. Just  circle and rectangle are pretty minimal! We should have options for at least up triangle, down triangle, star, vert line, horiz line, any ASCII char, etc. Most plotting packages allow these options. I know there are workarounds to do this, but they all require a lot of extra coding and maintenance. Having these options in the core library would be much better.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0k8vr:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"For Qt6, reconsider Q*Application(int &argc, char **argv) constructor",QTBUG-73201,272664,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,thiago,srutledg,srutledg,22 Jan '19 14:07,22 Jan '19 14:09,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Core: Event loop,,,,0,,,,"{{QCoreApplication(int &argc, char **argv)}} implies that the caller (usually the main function) has to provide storage for argc but Qt is free to modify it.  And in fact the QApplication constructor docs say ""Note: argc and argv might be changed as Qt removes command line arguments that it recognizes.""  But does it have to be done like that?  Seems like argc should be passed by value: an int is never larger than a pointer anyway, and that will ensure that Qt internalizes its own problem (counting the arguments) rather than imposing a (rude) requirement on the application author that ""argc might be changed"".  And it's more or less source compatible.

What we see in QTBUG-56524 is that a user assumed it was OK to pass argc by value in a subclass (I guess).  But it's not, because when the by-value constructor argument is given to the superclass constructor, this requirement is violated: Qt doesn't get to modify the original variable because it's temporary.

char **argv is convenient because every main() function has it.  But it could be const: Qt should not modify either the pointer or the contents of that either.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0k8qv:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Split platform plugin and style plugin out,QTBUG-71854,269872,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt.team.quick.subscriptions,liaqi,liaqi,16 Nov '18 13:38,22 Jan '19 12:54,18 Feb '21 09:41,,5.13,6.0,,,,,,,,,,,,,,,,,,,,,Other,QPA,,,0,,,,"Nowadays, macOS have a new release every year, Windows 10 every half year?

For example, macOS 10.14 update need very powerful graphics card, so I assume lots of current users will keep using 10.13 if their machines can't upgrade to 10.14.

And if we want to support 10.14, we need to use some new or latest API, which are not available for some old versions, then it means the users which depend on them are ""deprecated* too.

Similar story, we have lots of users are still using Windows 7. If we still keep them in latest code, perhaps we can't migrate to the newest features very easily.

If we could split(or decouple) our current code base to two part, Qt libs + platform related plugins(platform + style + perhaps more). That's what QPA designed for.

At least I think it will help a lots for those style things on old operation systems.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0jt6f:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"16 Nov '18 13:48;vestbo;{quote}And if we want to support 10.14, we need to use some new or latest API, which are not available for some old versions, then it means the users which depend on them are ""deprecated* too.
{quote}
What do you mean by this?","16 Nov '18 13:50;vestbo;I don't understand exactly what you are proposing here, or how it would help the ""problem"" (that I also don't fully see). Each Qt version supports a range of versions of each platform. You want to be able too use the platform plugin from Qt 5.6 with Qt 5.12?","16 Nov '18 13:57;liaqi;https://bugreports.qt.io/browse/QTBUG-71279 , Adding stylesheet to QSpinBox causes a frame to be drawn to the value part.

This user could use latest 5.12 Qt libs with an old style plugin to have his old behaviour, perhaps on an older version of macOS.","16 Nov '18 14:12;vestbo;That would require formalizing the API of the platform plugins, which I don't think is worth it.","16 Nov '18 17:18;liaqi;Or for the old version of platform plugin and styles plugin, we only update to new private API and do not bring new code in.",,,,,,,,,,,,,,,,,
QSplitter programmatic collapsing,QTBUG-73186,272626,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt.team.quick.subscriptions,lachrymology,lachrymology,22 Jan '19 09:06,22 Jan '19 09:06,18 Feb '21 09:41,,5.12.0,,,,,,,,,,,,,,,,,,,,,,GUI: Look'n'Feel,GUI: Menus,,,0,,,,"Based on the ticket QTBUG-2031 I try a new attempt to make the QSplitter a bit more user friendly.

Original text:
""A new method to programmatically collapse a given widget in a QSplitter would be useful. Something like splitter->collapse(index).""

Nothing more to say right now. :D

Would be awesome to see this little helper function some day.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0k8j3:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Absolute style path for Virtual Keyboard,QTBUG-73144,272532,Suggestion,Open,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,mitch_curtis,autiarth,autiarth,18 Jan '19 22:45,21 Jan '19 09:04,18 Feb '21 09:41,,5.12.0,,,,,,,,,,,,,,,,,,,,,,Virtual Keyboard,,,,0,,,,"There is not any $QT_VIRTUALKEYBOARD_STYLE_PATH today.

 

The only way of changing the style is by setting its name in $QT_VIRTUALKEYBOARD_STYLE, but then Qt will only look into the Qt Quick 2 plugin directory under ../VirtualKeyboard/Styles/*_NAME_*.

 

I would like to have a similiar syntax as the one for Qt Quick Controls 2 Styles, for which you can change the path where Qt will look:

 - $QT_QUICK_CONTROLS_STYLE_PATH=*_PATH TO STYLES DIRECTORY_* , Where Qt looks for styles

 - $QT_QUICK_CONTROLS_STYLE=_*NAME*_ , Name of the style (checking in the path)",Archlinux x86_64,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0k7yf:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"21 Jan '19 08:54;mitch_curtis;See http://doc.qt.io/qt-5/technical-guide.html#adding-custom-styles:

{quote}
The process of creating a new style begins by creating a new subdirectory for the style in a QML import path under the URL-based directory structure QtQuick/VirtualKeyboard/Styles/. See QML Import Path for information about QML import paths. The directory name can not contain spaces or special characters other than underscore. Also, the directory name can not be the same as one of the built-in style, which currently includes ""default"" and ""retro"".
{quote}

So the style can be in any directory so long as QtQuick/VirtualKeyboard/Styles/ is part of the path and the directory is in the QML import path.",,,,,,,,,,,,,,,,,,,,,
"deprecate Package; maybe even deprecate DelegateModel etc.",QTBUG-73060,272358,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt.team.quick.subscriptions,srutledg,srutledg,15 Jan '19 14:17,18 Jan '19 14:37,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Quick: Core Declarative QML ,,,,1,Qt6,,,"I've always felt that DelegateModel mixes up the model and view, which might be considered an anti-pattern, so I have never had a real use case for it.  (Despite that some examples do)

ObjectModel might not be a great pattern to use either (and I also don't normally use it), but maybe it's easier to justify because it's just a compact way of populating stuff into an item view without using a model at all.

But it seems to me that Package is really obscure: I wasn't aware of its existence until yesterday.  Having the name available for something else is probably much more valuable than this class is.

I'm pretty sure we should get rid of at least some of this stuff to simplify qtdeclarative and reduce the maintenance burden in Qt 6.  So we should make up our minds which ones to get rid of, so we can start deprecating them soon.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0k6w7:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"15 Jan '19 14:41;mbrasser;I've used both DelegateModel and Package in real-world projects. I don't think I've used ObjectModel (that I remember). DelegateModel in particular has functionality that isn't (or wasn't; I don't know 100% for sure) currently available any other way – things like groups and model index handling. I agree Package is obscure, but it is also very useful for the types of transitions it supports (I'd personally love to see the concept further expanded to include more use cases).

 ","15 Jan '19 14:49;srutledg;But did you really need it?  Why was it not possible to just use an item view and its model in each instance where it was needed, rather than associating the model and delegate ahead of time?  I assume that's because you put the DelegateModel into a reusable component?  But does it really improve the architecture so much that you can't think of a better way?","15 Jan '19 15:24;mbrasser;While I don't remember all uses, I know I've used it in some cases because I needed the functionality it provided – specifically groups and packages. More powerful qml-based models (such as the type of functionality you can get from [https://github.com/oKcerG/SortFilterProxyModel),] might make some of the group features less useful/necessary, and I'd certainly be in favor of such additions.","15 Jan '19 16:58;davidedmundson;Speaking within KDE/Plasma.

 

We don't use Package.I don't think anyone was aware of it's existence either.

We currently do use DelegateModel, but from a cursory glance those instances could all be ported.","16 Jan '19 09:05;richard;ListView and GridView depends heavily on QQuickDelegateModel. So even if we would remove it from the public API, we would still need to keep it around (and maintain it) for those cases.","16 Jan '19 09:26;mitch_curtis;I will second what Richard said.

{quote}
But it seems to me that Package is really obscure: I wasn't aware of its existence until yesterday. Having the name available for something else is probably much more valuable than this class is.
{quote}
That seems like an odd motivation for deprecating types.

{quote}
I'm pretty sure we should get rid of at least some of this stuff to simplify qtdeclarative and reduce the maintenance burden in Qt 6. So we should make up our minds which ones to get rid of, so we can start deprecating them soon.
{quote}
Has it been a maintenance burden often though? I think simplifying the maintenance burden is good, but we need to be pretty sure that removing it won't cripple user code.

I haven't used Package so I can't comment on whether or not it's useful. I also don't know whether or not users use it.

It seems I'm using ObjectModel in Slate, though that could probably be replaced with a simple model:

https://github.com/mitchcurtis/slate/blob/master/app/qml/ui/OptionsDialog.qml#L275","18 Jan '19 14:37;srutledg;Another idea would be to put some less-used stuff into a different import, to reduce the memory size of the main part of Qt Quick and remove the namespace clutter for most users.

No I don't think it has been much of a maintenance burden, but you can search bugs to see.",,,,,,,,,,,,,,,
QT 5.11.3 - QLowEnergyController central/peripheral times out if no LTK is loaded at central side,QTBUG-72989,272130,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,ablasche,frv,frv,11 Jan '19 17:10,18 Jan '19 07:33,18 Feb '21 09:41,,5.11.3,,,,,,,,,,,,,,,,,,,,,,Connectivity: Bluetooth,,,,0,,,,"Hi,

Not really a bug  probably but missing functionality for setting up a secured BLE communication.

Please see my report here:

[https://forum.qt.io/topic/98427/connection-times-out-when-trying-connecting-qt-ble-central-applic-with-ble-peripheral-applic-if-no-long-term-key-is-loaded-at-central-side]

Any suggestions, ideas to tackle this better?

 

Best regards,

Frank 

 
h2. *UPDATE 12/01/2019*

It seems in some way Linux kernel version related.
With the Linux kernel V4.14 I have to load in the long term keys.
With the Linux kernel V4.20 I no longer have to do this.

 

Nevertheless it would be nice to know how security is actually handled by QT when setting up the BLE connection and if it can be made configurable in QT??

 

Thanks,

Frank

 ","Linux 4.14 (Yocto BBB)  BBB board (QT 5.11.3)  simplified central application)

Zephyr 1.13 on nRF52 DK board

BlueZ 5.50",,,,,,,,,,,,,,,,,,"11 Jan '19 17:06;frv;bledevice.cpp;https://bugreports.qt.io/secure/attachment/79920/bledevice.cpp","11 Jan '19 17:06;frv;main.cpp;https://bugreports.qt.io/secure/attachment/79921/main.cpp",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Linux/Other display system,,,,,,"0|i0k63b:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"16 Jan '19 14:36;frv;Hi Alex, 

I'm still  confused if the concept of *static random* or *private random* is usable in the QT BLE SW stack. 

As far as I can interpret the *QLowEnergyController* object, setting up a whitelist at peripheral side can only hold a public address of the BLE device acting as central that is allowed to connect to it.  Also the central will make a connection to the peripheral  with an address type that doesn't change every 15 minutes... thus not a static random or private. 

Correct?

 

Thanks,

Best regards,

Frank","17 Jan '19 06:29;ablasche;Qt's Bluetooth API is completely reliant on Bluez's DBus API. To the best of my knowledge there is no DBUS API to set the LTK short of the support in the btmgmt application. I guess one could expose this via the Qt API as well but that would be a feature requests and so far Qt has stayed away from it.

On the topic of random address types, this feature is mostly hidden from Bluez API users. Only fairly recent Bluez versions even publish whether a given address is public or random:

https://git.kernel.org/pub/scm/bluetooth/bluez.git/commit/doc/device-api.txt?id=2a225e92de904c2a31d51707e93b3da2ef79ae88

But as you can see in the description, it is only needed if you want to establish a raw L2CP socket connection. Establishing a connection via DBUS is done such that the user discovers the remote devices and whatever address you get is what you use to connect to. QBLowEnergyController::setRemoteAddressType is a relict of old days when Qt didn't use the Bluez DBus API.","17 Jan '19 10:02;frv;Hi Alex,

Thanks for the clarification.

 

Actually I was becoming very excited about the QT BLE implementation (as I do for more than 20 years using QT as framework)  before realyzing we also need to implement security in our BLE architecture. 

 

After some months of research on BLE connectivity we finally came up with a very good working architecture based on QT as SW stack for implementing the central application running on a Linux embedded device (using BBB (hw board) as proof of concept, running Linux 4.20)  having a Nordic nRF52 DK board running Zephyr RTOS with a BLE (HCI_UART) connectivity stack. Both boards are connected via UART and h4 protocol is spoken. On a peripheral  BLE device the Zephyr HR applic runs.  Between both applications an unsecure BLE connection is made (no paring and thus no exchange of keys). 

 

So it is correct to say there is no direct short/long term roadmap that QT is having to futher extending the API on QLowerEnergyController and other BLE related QT objects for implementing BLE security features (OOB - NFC, use of private resolvable addresses...).

 

Currently I'm struggling and puzzling out if I can combine what already exists in QT and needs to be done by myself with what the BlueZ API offers.

 

But if we want to use private resolvable addresses I don't see this can be done by the actual function calls provided in the QLowEnergyController class (e.g. connectToDevice()... or constructor arguments...).

 

Thanks in advance for your support on this. 

Best regards,

Frank

 ","17 Jan '19 13:38;ablasche;There is a roadmap item: https://bugreports.qt.io/browse/QTBUG-31674. Almost every Qt release adds a bit to the API including QLowEnergyController. It is also a question of time you have vs scheduled feature in QtBluetooth. 

The question I have is what Bluez API you are going to use for your not covered use cases. Let's take ""private resolvable addresses"", maybe you see more than I but I don't see a DBus API for it. Or do you consider btmgmt API? In such cases you could always just use QProcess to initiate the part not covered by Qt Bluetooth and then move back.

OOOB-NFC is intrinsically build into Bluez. It has a plugin for neard. neard and bluetoothd would work the key sharing out among themselves and all API clients would benefit from that. In other words there is no Qt API needed here. Mind you, I have a rather bad opinion of neard. There are a lot of crashes in the latest release such that we even consider replacing it in QtNFC. In such a case you have to hack bluez itself to connect it to yet another NFC infrastructure.

What other features do you have? What side (central/peripheral) do you want to implement with Qt?


","17 Jan '19 16:22;frv;Hi Alex,

 

For the moment the ""private addressing"" and ""IRK"" feature can be omitted. 

 

Correct to say, I can use the BlueZ *btmgmt* tool ( with cmd : remote-oob) or directly the  BT managment socket (with the API as described here : [https://git.kernel.org/pub/scm/bluetooth/bluez.git/tree/doc/mgmt-api.txt)]

during provisioning of our BLE devices with OOB data. 

Initially the NFC process can be omitted if the OOB info can be pushed in the devices via the btmgmt tool or BT mgmt socket. 

Although this post does not sound very promising :

[https://stackoverflow.com/questions/42344367/out-of-band-bluetooth-pairing-with-the-btmgmt-tool-on-linux]

 

Our plan is to run only the QT BLE stack on the embedded Linux device acting as a CENTRAL.

A demonstrator is described and visualized here:

[https://forum.qt.io/topic/98427/sometimes-connection-times-out-when-trying-connecting-qt-ble-central-applic-with-ble-peripheral-applic-if-no-long-term-key-is-loaded-at-central-side]

 

For the moment the services and its attributes/characteristics the QT BLE central application tracks are NOT encrypted and NOT authorized. 

If I can get the OOB pairing process up and running outside the QT BLE framework will the current QT implementation of the QLowEnergyService/QLowEnergyController will be able to readout a changed characteristic that is set secured (or implies authentication) at peripheral side?

 

+*To summarize:*+
 - During the provisioning phaze I do the :

pairing and bonding process via the BT mgmt SW stack 
 - During operation when the connectToDevice function is called on the QLowEnergyController object, the characteristics of the tracked services can be readout when addressed after a change value notification

 

Your input/feedback is very appreciated thanks!

The simplicity of use of the QT API and its high SW quality makes it hard to NOT use it. I really hope I can stick to it as a SW frame work for implementing our use case. 

 

Best regards,

Frank","18 Jan '19 07:21;ablasche;doc/mgmt-api.txt is indeed the relevant API. I have not experimented with for some time but the main thing you have to keep in mind is the fact that it requires CAP_NET_ADMIN permission. That's usually not required for any general Qt API and what makes it harder for Qt to utilize. It is not unheard off of course.

Your suggestion on working out the provisioning via mgmt API or btmgmt tool followed by usage of the Qt API is the process I would recommend as well. Since both interaction vectors ultimately utilize the same Bluetooth system one vector should see the change of the other.","18 Jan '19 07:33;frv;Hi Alex,

 

Thanks for confirming what I have in mind and pointing me in the right direction (of course). I will definitely keep you guys informed on the progress I make in the coming days :). 

 

BTW I will certainly follow up the QT BLE backlog.

 

Have a nice weekend,

Frank",,,,,,,,,,,,,,,
Many syntaxhiglighers for one QPlainTextEdit are needed in order to crate modular editors,QTBUG-72866,271862,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,esabraha,szykcech,szykcech,05 Jan '19 14:34,10 Jan '19 08:14,18 Feb '21 09:41,,5.12.0,,,,,,,,,,,,,,,,,,,,,,GUI: Text handling,,,,0,,,,"There are huge difficulties when I try to program modular (plugin based) text editor with Qt library. The problem is when I want to have 2 syntax highlighters: one for code coloring and second for spell checking. I want to create 2 separate and independed plugins for this. But I fail shortly because you can call:
QTextEdit *editor = new QTextEdit;
MyHighlighter *highlighter = new MyHighlighter(editor->document());
MySpellchecking* spelchecking = new MySpellchecking(editor->document());
But only last syntax highlighter will be work.
This is approach is opposite against modular programming.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0k4fz:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"05 Jan '19 22:28;dhaumann;Right now this is not directly possible. Still, it can be done. You could have a look at the KSyntaxHighlighting framework:

[https://api.kde.org/frameworks/syntax-highlighting/html/index.html]

[https://kate-editor.org/2018/10/21/mit-licensed-ksyntaxhighlighting-usage/]

[https://github.com/KDE/syntax-highlighting/blob/master/examples/codeeditor.cpp]

 

You'd have to use the AbstractHighlighter and do the composition yourself in your application. Kate is doing it this way as well.

 

Your request is likely out of scope for the simple use case of QSyntaxHighlighter.","06 Jan '19 14:57;szykcech;Do you mean something like this:

{code:java}
class Highlighter : public QAbstractHighlighter
{
public:
void higlightBlock(QString& aText);
protected:
QList<QAbstractHighlighter*> mHighlighters;
};

void Highlighter::higlightBlock(QString& aText)
{
for(QAbstractHighlighter* lHighlighter : mHighlighters) lHighlighter.higlightBlock(aText);
}
{code}
Will this work?!?","10 Jan '19 08:14;dhaumann;Wait a minute: I gave you already support on how to do this on [https://bugs.kde.org/show_bug.cgi?id=383350] including some links about possible solutions to your problem. I don't think I can provide more support, and I also don't think that's an big issue of QSyntaxHighlighter, sorry.",,,,,,,,,,,,,,,,,,,
Constructor for QString should be explicit,QTBUG-72898,271946,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,thiago,th.thielemann,th.thielemann,08 Jan '19 09:51,09 Jan '19 14:25,18 Feb '21 09:41,,5.9.5,,,,,,,,,,,,,,,,,,,,,,Core: Containers and Algorithms,Core: QString and Unicode,,,0,,,,"To avoid implicit but unexpected type conversions the constructors of QString should be flagged with explicit.

Correct:

 
{code:java}
pressure = 999;
pressureString = QString(""%1 hPa"").arg(pressure);
{code}
 

Wrong:

 
{code:java}
pressure = 999;
pressureString = QString(pressure) + QString("" hPa"");
{code}
 

 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0k4yn:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"08 Jan '19 14:17;thiago;Which constructor is that calling? The QChar one?","08 Jan '19 16:00;th.thielemann;Yes, it is.
{code:java}
    Q_DECL_CONSTEXPR QChar(int rc) Q_DECL_NOTHROW : ucs(ushort(rc & 0xffff)) {}
{code}","08 Jan '19 17:46;thiago;We ought to make the QChar int and uint ones explicit, adding non-explicit char16_t.","09 Jan '19 08:23;th.thielemann;Should I create a patch for these changes?","09 Jan '19 14:24;thiago;Not right now. It's a Qt 6 change.","09 Jan '19 14:25;thiago;Well, you can create apatch with {{#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)}}...",,,,,,,,,,,,,,,,
Let QTextBlock to have many QTextBlockUserData in oder to allow modular programming,QTBUG-72865,271861,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,esabraha,szykcech,szykcech,05 Jan '19 14:25,06 Jan '19 15:10,18 Feb '21 09:41,,5.12.0,,,,,,,,,,,,,,,,,,,,,,GUI: Text handling,,,,0,,,,"There are huge difficulties when I try to program modular (plugin based) text editor with Qt library. Problem is with QTextBlock which allow only one attached QTextBlockUserData derived object.
This is wrong in my case:
I want to use SyntaxHiglighter class from KSyntaxHighlighting from Kde. It already using QTextBlockUserData internally.
I want to create plugins with text editor and separate plugin for syntax highlighting. I don't want to mess editor code with syntaxhiglighter code.
I want in my editor bookmarks - in order to use it I have to use QTextBlockUserData.
In C++ I can't use efectively class which derive from 2 classes my LineInfo and KSyntaxHighlighting::TextBlockUserData - I cant cast between these two classes. This aproach will be enough because in my syntax highligter plugin I can create such class without mess the text editor plugin.
When I will have something like QTextBlock::addUserData(QTextBlockUserData *data); and QList<QTextBlockUserData *>  QTextBlock::userData();
Then I will be able to check what user data is mine by simple: dynamic_cast<LineInfo*>().",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0k4fr:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"06 Jan '19 15:10;szykcech;Actually I study a bit these project sources:
https://github.com/KDE/kate
https://github.com/KDE/ktexteditor
in order to investigate how they handle bookmarks.

I discover that they subclass every classes I hear in the QPlainTextEdit subject (document, textblock) and they added huge number of additional classes. I dig in this for a while and I discovered they implement bookmars just by create QHash<int, KTextEditor::Mark *> m_marks; where int is number of line. This approach is not QTextBlockUserData approach!!! But I want to have this simple approach workable and usable in modular applications! In KTextEditor they chose to cover all cases QPlainTextEdit is modified - I want avoid this as cumbersome, complicated and inefficient. There should be vast possibilities to attach various data to QTextBlock.
In summary:
I want to use simple QTextBlockUserData approach and not want reinvent the whell as they did in KTextEditor. But for now QTextBlockUserData is limited to one object which is not real case and usable only in monolithic programs (this is good at the beginning of learning Qt pehraps, but definitely not professional approach).",,,,,,,,,,,,,,,,,,,,,
Allow hover other items while pressing mouse button,QTBUG-72812,271749,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt.team.quick.subscriptions,aykon,aykon,02 Jan '19 00:23,04 Jan '19 11:10,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Quick: Core Declarative QML ,Quick: Mouse Touch and Tablet input,,,0,,,,"The simplest way to show what I mean is by running the sample code from [https://doc.qt.io/qt-5/qml-qtquick-controls2-menuitem.html] 
If you press on a menu item and without releasing it you try to hover a different item, it will not be highlighted because the initially pressed item ""owns"" the mouse events.

I think currently this is an intended behavior by design, but I think this made sense when qml was more focused on targeting non-mouse ui.

Right now, with QtQuick Controls 2, it seems that qml is also targeting desktop applications, so maybe this behavior should be reconsidered since almost all desktop applications allow pressing and moving the mouse to hover other elements (You can check this out with the menus of QtCreator, for example). Furthermore, many of them allow triggering the item where the mouse was release and not the item that was initially pressed. Also, this behavior is so extended and expected that it makes not having it quite annoying from the end-user's point of view.

Hopefully this can be resolved in a generic way and not only for menu items, since other use cases may benefit from this change.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0k3qv:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
No way to construct qml Path from QPainterPath,QTBUG-72839,271810,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,w00t,THall,THall,03 Jan '19 12:15,03 Jan '19 12:15,18 Feb '21 09:41,,5.11.2,,,,,,,,,,,,,,,,,,,,,,Quick: Other,,,,0,,,,"QQuickPathElements appear to construct a QPainterPath internally. I can construct my own QPainterPath in C++ and expose it as a property, but there doesn't appear to be any way to construct a qml PathElement using my QPainterPath.

As far as I can tell, there isn't currently any sane way to take a model containing a list of 2D points and construct a QtQuick Shape to render a path through them.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0k44f:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Text nodes in public c++ API,QTBUG-72773,271687,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt.team.quick.subscriptions,poikelin,poikelin,27 Dec '18 11:47,02 Jan '19 08:56,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Quick: Core Declarative QML ,,,,1,Reported_by_support_standard,,,"Text painting is quite difficult for custom items. Perhaps QQuickTextNode or some part of it could be exposed.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0k3d3:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Rounded corners for rectangle node,QTBUG-72774,271688,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt.team.quick.subscriptions,poikelin,poikelin,27 Dec '18 11:55,27 Dec '18 12:33,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Quick: Core Declarative QML ,,,,0,Reported_by_support_standard,,,Rectangle supports rounded corners and there is QSGBasicInternalRectangleNode that is also available in private API. Perhaps this could be moved to public.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0k3db:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"27 Dec '18 12:33;srutledg;65c877f40e965c368fe6e7ed730242461b5824b7 says you're supposed to call QQuickWindow::createRectangleNode() to get an instance.  But QSGRectangleNode doesn't have much API.",,,,,,,,,,,,,,,,,,,,,
Add a function to update ChartView when the data is updated at runtime,QTBUG-72767,271678,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt.team.quick.subscriptions,pekarjal,pekarjal,27 Dec '18 06:38,27 Dec '18 06:40,18 Feb '21 09:41,,5.12.0,,,,,,,,,,,,,,,,,,,,,,Quick: Core Declarative QML ,,,,0,reported_by_support_standard,,,"It would be nice to have a function to update ChartView qml object when the data in the model changes at runtime. Especially possible X and Y axis min and max values. Those works perfect when the data is available when the component is created, but does not when the data in the view changes at runtime.

Currently it requires manual update for the X and Y axis values when new point is added or point is removed, but a simple 'updateAxis' etc. function call would be a nice feature",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,macOS,Windows,,,,,"0|i0k3b3:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add support for OpenID Connect authorization method,QTBUG-72689,271538,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,jefernan,andysh,andysh,20 Dec '18 07:02,20 Dec '18 07:02,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Network: Authentication,,,,1,Reported_by_support_standard,,,"OpenID Connect is a layer that is on top of OAuth2 and requires a small addition to the API to make it possible. Currently Qt supports using client_secret_post which puts the client secret into the request body. OpenID Connect also has support for client_secret_basic which puts it in the request headers instead.

What would be good to add here is a function that enables the user to specify the type of authentication (client_secret_[post|basic]) and then QtNetworkAuth can handle the correct way of passing that forward.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0k2gn:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
add option to QQuickRectangle to honor corner radius in contains(),QTBUG-72671,271478,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt.team.quick.subscriptions,sparr,sparr,19 Dec '18 05:14,19 Dec '18 05:17,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Quick: Core Declarative QML ,,,,0,,,,"{{QQuickItem::contains()}} simply checks the bounding box of the element, and Rectangle inherits this behavior. I am requesting/proposing an optional ability to exclude the outside of {{radius}}'d corners, so that clicks and other events outside the radius would not be intercepted by the element. I recognize that it would probably need to be opt-in to avoid breaking existing code.

Here is a simple mostly-untested non-optional example of what this might look like, taken from a project I am working on, where the immediate use case is a circular \{{MouseArea.containmentMask}}:
{code:java}
bool QQuickItemRadiusMask::contains(const QPointF &point) const
{
    qreal x = point.x();
    qreal y = point.y();

    if (x < 0 || y < 0 || x > width() || y > height())
        // entirely outside the bounding box
        return false;

    if (width() == height() && m_radius >= width() / 2) {
        // special case for circle, hopefully the most common case
        qreal dx = width() / 2 - x;
        qreal dy = height() / 2 - y;
        return ( ( (dx * dx) + (dy * dy) ) <= (m_radius * m_radius) );
    }
    else {
        // points not near a corner are definitely inside
        if ((x > m_radius && x < width() - m_radius) ||
            (y > m_radius && y < height() - m_radius) ) {
            return true;
        }
        qreal dx, dy;
        if (x <= m_radius) {
            dx = x - m_radius;
        }
        else {
            dx = x - (width() - m_radius);
        }
        if (x <= m_radius) {
            dy = y - m_radius;
        }
        else {
            dy = y - (height() - m_radius);
        }
        return ( (dx * dx) + (dy * dy) <= (m_radius * m_radius) );
    }
}
{code}
 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0k23b:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
column span for table or tree view,QTBUG-72377,270884,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt.team.quick.subscriptions,icemichael,icemichael,07 Dec '18 10:13,07 Dec '18 15:40,18 Feb '21 09:41,,5.12.0,,,,,,,,,,,,,,,,,,,,,,Quick: Controls 1,,,,0,,,,"It does not seem possible at all to provide a column span to specific cells/rows?

Please implement. Maybe, finally combining with `QAbstractItemModel::span`: http://doc.qt.io/qt-5/qabstractitemmodel.html#span",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0jyvr:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"07 Dec '18 15:35;srutledg;We won't be adding any more features to Controls 1, but maybe it will be possible to add this feature to the new TableView eventually: http://doc.qt.io/qt-5/qml-qtquick-tableview.html","07 Dec '18 15:40;icemichael;Sounds nice!",,,,,,,,,,,,,,,,,,,,
MouseArea: getting all events.,QTBUG-71935,270023,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt.team.quick.subscriptions,mr.greywater,mr.greywater,20 Nov '18 19:49,07 Dec '18 12:21,18 Feb '21 09:41,,5.11.2,,,,,,,,,,,,,,,,,,,,,,Quick: Core Declarative QML ,,,,1,,,,"Sometimes it is necessary for a MouseArea to get all events.

Flickables are handled quite well, and are not a problem by setting preventStealing: true

The following things can still make a MouseArea unable to receive an event.

1. It is overlapped by another MouseArea. Here you are at grace of the other MouseArea's propagation settings. This can get quite messy, sometimes it can be unclear which MouseArea is the one responsible for a certain position, and propagation only works to children of the parent MouseArea, and they are often used as leaf Items. Often you still want to know the current position of the mouse, or know when the mouse was clicked but have no way of doing so.

2. It is overlapped or has a children Popup/Control/Page/Pane. In this case there is no way at all to get e.g position updates of the MouseArea. This is extremely inconvenient when designing Components that have no control over the children that might be added.

I propose adding a new property to the MouseArea that allows receiving all mouse events in that region in the order of their z value (similar to popups) before anything else, but unless the events are explicitly accepted, they are propagated normally through wherever they have to go (not only children) after going through those exclusive priority mouse areas.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0ju33:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"07 Dec '18 12:21;mitch_curtis;MouseArea is not in Qt Quick Controls 2.",,,,,,,,,,,,,,,,,,,,,
Allow changing cursor on native window with transparent for input flag.,QTBUG-71615,269390,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt.team.quick.subscriptions,chrisaverage,chrisaverage,06 Nov '18 17:07,06 Dec '18 22:30,18 Feb '21 09:41,,5.11.2,5.12.0,,,,,,,,,,,,,,,,,,,,,Widgets: Widgets and Dialogs,,,,0,,,,"As requested - created in response to closing of QTBUG-67906.

The reason given for closing mentioned regression was that the behavior changed only for Windows and that it is now in line with Linux an MacOS. I find this argument irrelevant and it's those platforms that have it wrong if anything. The other argument was that the implementation uses mouse events so it makes sense that the feature is disabled if events are not handled. I'm seeing this as deciding what feature does based on how it happens to be implemented on particular set of platforms. I feel it should be the other way around.

The reasons I'm asking to allow changing cursors on transparent for mouse events windows are:
 * Cursor is an object property. Using events is an implementation detail that should not dictate what the property does and what it does is changing cursor and that's it. Nothing to do with move events from user's perspective.
 * Tying a cursor property to a Qt::WindowTransparentForInput flag, which seems unrelated from the user perspective is IMO wrong. It's not intuitive if you don't know the implementation, it's surprising and not documented anywhere.
 * Previous Windows implementation allowed ease of both things - have cursor change (just set it) or not (just don't set it, the default). Current implementation keeps it easy to not have cursor changing but horrible to actually enable - one call to setCursor is now turned into basically reinventing a wheel - overriding and implementing my own event handling and forwarding. It makes a thing that was trivial now complicated and error prone (the real life code this originated from has an already complicated event handling structure and additional handling of this makes it far worse).
 * Argument that it's in line with a 2 to 1 majority of platforms should be mute IMHO. The Windows minority had a more flexible solution that allowed for both behaviors easily. Now it is arbitrarily gone and the argument is that it wasn't present on other platforms. That's just backwards. It's like removing bluetooth support from Qt because not all platforms have it implemented yet.
 * The behavior of a cursor is now different in an embedded window and a child widget. The argument was that it's natural because the events are handled differently. Again - I think that's backwards thinking. I see no reason for a simple feature like that to behave differently in those scenarios. The implementation might be different but that's not something the user should be exposed to and implementation detail should not dictate a feature's purpose, which in this case is simply changing a cursor for a piece of surface.",,,,,,,,,,,,,,,,,,,"07 Nov '18 08:58;kleint;qtbug71615.zip;https://bugreports.qt.io/secure/attachment/77907/qtbug71615.zip",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0jq87:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
PropertyAction limitations should be documented better,QTBUG-72272,270705,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,,pekarjal,pekarjal,04 Dec '18 09:56,04 Dec '18 09:56,18 Feb '21 09:41,,5.11.3,,,,,,,,,,,,,,,,,,,,,,Core: Animation Framework,,,,0,Reported_by_support_standard,,,"I am using a SequentialAnimation which has a group of PropertyActions. First PropertyAction sets a text to Text component and the next PropertyAction changes the Text component's 'x' value based on the text length that was set in the first PropertyAction. This does not seem to work as the second PropertyAction sees the text length as 0. If this behavior is a limitation in PropertyAction or SequentialAnimation, it should be mentioned in the documentations. 

Using a ScriptAction however works just fine and it can be used to achieve the exact same result. 

I have attached an example project to demonstrate this issue. ",,,,,,,,,,,,,,,,,,,"04 Dec '18 09:55;pekarjal;propertyAction.zip;https://bugreports.qt.io/secure/attachment/78772/propertyAction.zip",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,macOS,Windows,,,,,"0|i0jxsn:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Adding rotary knob support in QTextBrowser(with patches),QTBUG-71468,269014,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt.team.quick.subscriptions,bgtrackqtunameegon,bgtrackqtunameegon,29 Oct '18 08:59,28 Nov '18 11:00,18 Feb '21 09:41,,Some future release,,,,,,,,,,,,,,,,,,,,,,Widgets: Widgets and Dialogs,,,,0,,,,"The patch adds a method to QTextBrowser allowing to navigate in an online help only with a rotary knob.
The method scrolls by one step, but also moves the hyperlink focus in an appropriate way.
It thus is possible to navigate in the help only with rotary knob turns an clicks.

Background: Many instruments have a rotary knob, which also is important for instruments with touchscreen.
Dialog elements are large enough to click on them the touchscreen, but not the hyperlinks in the online help.
Many users prefer to use the rotary knob anyway.
We such a patch (in other form) since Qt3, and it might well be useful for other users and applications.",,,,,,,,,,,,,,,,,,,"29 Oct '18 08:59;bgtrackqtunameegon;qtextbrowser.cpp;https://bugreports.qt.io/secure/attachment/77617/qtextbrowser.cpp","29 Oct '18 08:59;bgtrackqtunameegon;qtextbrowser.h;https://bugreports.qt.io/secure/attachment/77618/qtextbrowser.h",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0jnyf:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"29 Oct '18 09:06;liaqi;Thanks for the report. Please consider adding a unit test and submitting a patch on codereview.qt-project.org (https://wiki.qt.io/Qt_Contribution_Guidelines and http://wiki.qt.io/Gerrit_Introduction for more details).","28 Nov '18 09:26;liaqi;How did you get the rotary knob event?","28 Nov '18 11:00;bgtrackqtunameegon;{color:#1f497d}thanks for your interest. {color}{color:#1f497d}The rotary knob events come from some hardware driver and in our case arrive in the QTextBrowser (-child) eventFilter(). {color}{color:#1f497d}The instruments run under Linux, by the way.{color}

{color:#1f497d} {color}

{color:#1f497d}When a keyboard is attached to the instrument the rotary knob events can also be simulated with Tab and Shift-Tab.{color}

{color:#1f497d}This also is the case when a windows-version of the firmware runs (in simulation mode) in a windows PC.{color}

{color:#1f497d} {color}

{color:#1f497d}One more adaption in our QTextBrowser child is a modification of the {color}

{color:#1f497d}QStyle::SH_TextControl_FocusIndicatorTextCharFormat to clearly recognize the current Hyperlink.{color}",,,,,,,,,,,,,,,,,,,
Support for background-size property in style sheets,QTBUG-71944,270041,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt.team.quick.subscriptions,izero,izero,21 Nov '18 09:37,22 Nov '18 12:21,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Widgets: Style Sheets,,,,1,reported_by_support_standard,,,Customer would like to have the 'background-size' property supported so that a svg image could be scaled to wanted size for a background of QLineEdit instead of providing different svg files for every needed size.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0ju73:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"22 Nov '18 12:21;izero;Additional related feature request: ""Please add support for; -webkit-filter: grayscale(100%);
filter:grayscale(100%); also (seen here), as they are missing also. SVG stays
in color...""",,,,,,,,,,,,,,,,,,,,,
QList: shuffle method wanted,QTBUG-71850,269861,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,thiago,niesommer,niesommer,16 Nov '18 10:29,17 Nov '18 11:22,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Core: Containers and Algorithms,,,,0,,,,"Is there already any shuffle method for QList?
 I had several cases where a simple myList.shuffle() would have been handy.

Idea:
{code}
 QList <int> l;
 l << 1 << 2 << 3 << 4; // now l is [1,2,3,4]
 l.shuffle(); // now l is for example [3,2,1,4] or [1,2,4,3]
{code}
I know that this method it not important to have, since it can be solved very easily by writing a small shuffling method. But for me (and I hope for others as well) it would be very convenient, just to type .shuffle() instead of adding another function to the code myself.

Out of curiosity: did I understand correctly, that, since QList operates on heap-allocated data, it would only be a fast ""move some pointers around"", without copying the underlying data? 
 At the moment I use
{code}
#include <QCoreApplication>
#include <QList>
#include <QDebug>
#include <QRandomGenerator>

int main(int argc, char *argv[]) {
    
    QCoreApplication a(argc, argv);   
    QList <int> l;
    l << 1 << 2 << 3 << 4 << 5;
    qDebug() << l; // output:  (1, 2, 3, 4, 5)    
     for (int i=0; i <l.length(); i++) {
        l.move(i, QRandomGenerator::global()->bounded(0, l.length()));
    }    
    qDebug() << l;  // output for example : (5, 4, 1, 3, 2)  
  
    // proposed feature:  
    // l.shuffle(); 
    // until now: ""no member named 'shuffle' in 'QList <int>'

    return a.exec();
}
{code}
I assume this can be optimized by using the std functions. Would be nice if somebody who is familiar with the QList code can implement it in the proper way. I am afraid rewriting the code above as void QList::shuffle()\{...} would performancewise not be sufficient, right? Or should I submit a patch for QList with the above code myself?",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0jt3z:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"16 Nov '18 16:13;thiago;Use {{std::shuffle}} - https://en.cppreference.com/w/cpp/algorithm/random_shuffle

Or explain why that won't work.","16 Nov '18 17:43;niesommer;Thiago: Thanks for your time. And of course using std:shuffle would work, as far I can see (I don't know much about C++). I am not sure what std function would be best, I only used the Qt functions for my example to show what kind of functionality I meant. Not everyone (especially beginners, or people coming from c) are very familiar with the std library (me neither). I assumed that a shuffle method would be a nice feature to add. At least I missed a myList.shuffle() a few time already. I don't except that adding another method call is the fastest way possible, but it would make development with QLists for beginners and people who are not that familiar with the standard library a bit easier. Can I suggest to add something like

 
{code:java}
/*! 
 * Randomizes the positions of the content in the list.
 *
 * Using the example code from
 * https://en.cppreference.com/w/cpp/algorithm/random_shuffle
 */
void QList<T>::shuffle() {
   std::random_device rd;
   std::mt19937 g(rd());
   std::shuffle(d->begin(), d->end(), g);
}{code}
? (Would it ok to write it that way? I was using the examples from the Page. I have two more questions: First, is it right that ""this"" needs to be replaced with ""d"" here? And second question, is QList the right place? Or would the implementation better belong to QListData? Sorry, for asking stupid questions, this is my first approach with the Qt internals.)

 

In case you argument against implementing this as a mere convenient function, can I ask to please see [https://meetingcpp.com/blog/items/stdrandom_shuffle-is-deprecated.html] . I guess adding the method would free people (who maybe are not familar with the topic of RNGs at all) from choosing between different RNGs and also maybe making future adjustments of code easier if this is centralized handled for QLists by Qt itself.

 ","17 Nov '18 00:29;thiago;Our current policy is to not add methods to our classes if the Standard Library <algorithms> can do it and at the same level of efficiency. So you need to give me a reason to add it: either there isn't a method from the Standard Library that does what you want or it can't do it as efficiently as an internal method would.

PS: your choice of RNG is QRandomGenerator. That's a good example of where we did duplicate for a good reason.","17 Nov '18 11:22;niesommer;Thanks for the reply.

I'll think about it. For the moment I guess there is nothing I strongly could argue in favor for it.

Today I needed something like mylist.shuffle(3,7). This would shuffle the elements in the middle of the list, but leaving the first few and a few at the end where they had been. Therefor I still hope for additional nice list shuffle functions added to Qt one day. But I see your point. Thanks for the feedback.",,,,,,,,,,,,,,,,,,
Clear button of QLineEdit on Android always visible when one of QLineEdit-s parent  widgets sets stylesheet on QToolButton,QTBUG-71823,269816,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt.team.quick.subscriptions,delphi251189,delphi251189,15 Nov '18 12:52,15 Nov '18 12:52,18 Feb '21 09:41,,5.9.7,,,,,,,,,,,,,,,,,,,,,,Widgets: Style Sheets,,,,0,,,,"How to reproduce:
 # Create QLineEdit as child of some widget.
 # Set clearButtonEnabled : true
 # Set stylesheet to parent widget, in my case:
QToolButton \{ background-color: rgb(92, 184, 92); color: white; border-style: outset; order-radius: 2px; padding: 5px; }

QToolButton:hover \{background-color: rgb(68, 157, 68); border-style: inset; }

 

 

Result:

  * On Windows result is as as expected: clear button visible only when text is not empty:

  * On Android rectangular background of button is always visible, and  when text is edited on rectangular bgnd appears circular icon of button.

 

 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Android,,,,,,"0|i0jstz:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add a function set background image without the need to set it with stylesheets,QTBUG-71787,269692,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt.team.quick.subscriptions,pekarjal,pekarjal,14 Nov '18 09:54,14 Nov '18 09:54,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,GUI: Look'n'Feel,,,,1,Reported_by_support_standard,,,"It would be great to have a function to set a background image to some widgets instead of using stylesheets for it. For example using a QPixmap that can dynamically change at runtime, would be nice to just set the QPixmap as a background instead of saving it to a file and modify the stylesheet to use the background image from newly created file.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0js2n:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Provide public API to convert QNodeId to QNode*,QTBUG-71767,269658,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,seanharmer,vpicaver,vpicaver,13 Nov '18 14:16,13 Nov '18 14:20,18 Feb '21 09:41,,5.11.2,,,,,,,,,,,,,,,,,,,,,,Qt3D,,,,0,,,,"Currently Qt3D supports converting QNode to QNodeId but doesn't have a public way to go the other way around (QNodeId to QNode). This is useful for writing custom QAbstractAspect's that return frontend QNodeId's that need to be converted into QNode*. Currently the only way to get the QNode* from a public API is to iterate through the entire QNode hierarchy (painful) and match for QNodeId. It would be better to have some way of using
{code:java}
QScene->lookupNode(QNodeId){code}
method in a public interface. Perhaps making a NodeLookup QNode that has private access to QNodePrivate, which has a scene() and can lookup QNodeId's?  Then you don't have to expose QScene as public API and just pass or create NodeLookup object with the current QNode as the parent.

 

This is currently possible by using private API while in QNode:

 
{code:java}
auto d = QNodePrivate::get(this);
QNode* node = d->scene()->lookupNode(myQNodeId)
{code}
 

 

You'll have to import private headers:

 
{code:java}
#include <Qt3DCore/private/qscene_p.h>
#include <Qt3DCore/private/qnode_p.h>
#include <Qt3DCore/private/qcomponent_p.h>
{code}
 

 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0jrv3:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Create QopcConnectionSettings class,QTBUG-71632,269419,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,fmeerkoetter,gergap,gergap,07 Nov '18 10:32,08 Nov '18 10:13,18 Feb '21 09:41,,5.13.0 Alpha 1,,,,,,,,,,,,,,,,,,,,,,OpcUA,,,,0,,,,"When connecting there are many possible settings to choose from.

Some are defined by OPC UA:
 * LocaleId
 * SecureChannelLifeTime
 * Publish Timeout
 * Connect Timeout

Some are SDK specific:
 * AutoReconect (reconnect on lost connection)
 * Intial Retry (retry if initial  connect fails)
 * Watchdog Time (periodic read of ServerState, NamespaceTable)
 * Reverse Connect (the servers connects to the client, the client opens a listen socket)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0jqen:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Splash screen for QtQuick application,QTBUG-71628,269415,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,w00t,linarcx,linarcx,07 Nov '18 10:14,07 Nov '18 20:35,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Quick: Other,,,,0,,,,"how to create splash screen in qt quick application. i mean something like QSplashScreen. but it is for qWidget applications only. 
Also i don't want to use splash screen in mobile app. it is a desktop applicaiton.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0jqdr:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add support for handling structure datatypes,QTBUG-71637,269424,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,fmeerkoetter,gergap,gergap,07 Nov '18 10:45,07 Nov '18 10:45,18 Feb '21 09:41,,5.13.0 Alpha 1,,,,,,,,,,,,,,,,,,,,,,OpcUA,,,,0,,,,"In OPC UA servers often contain custom structure datatypes. This is especially true for PLCs, but also for other companion specifications.

The client therefor needs the ability to decode structures that are not known at compile time and needs a generic API for accessing those structure fields. Ther server provides the meta data for this datatypes via the UA information model.

The UACPP SDK provides the class UaGenericStructureValue for this usecase:

http://documentation.unified-automation.com/uasdkcpp/1.6.3/html/classUaGenericStructureValue.html",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0jqfr:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
The UACPP backend is implemented synchronously,QTBUG-71635,269422,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,fmeerkoetter,gergap,gergap,07 Nov '18 10:41,07 Nov '18 10:41,18 Feb '21 09:41,,5.13.0 Alpha 1,,,,,,,,,,,,,,,,,,,,,,OpcUA,,,,0,,,,"This should be changed to use the asynchronous API prefixed with ""begin"" like e.g. beginRead, beginWrite, etc.

This avoids blocking the backend thread, which allows multiple parallel service calls as intended by OPC UA.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0jqfb:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add ImpersonateUser / ChangeUser functionality,QTBUG-71634,269421,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,fmeerkoetter,gergap,gergap,07 Nov '18 10:39,07 Nov '18 10:39,18 Feb '21 09:41,,5.13.0 Alpha 1,,,,,,,,,,,,,,,,,,,,,,OpcUA,,,,0,,,,"The useridentiy and localeids are provided by the ActivateSession services.

OPC UA allows to change the user identity and localeids by subsequent ActivateSession calls.

Because the UACPPSDK hides the OpenSecureChannel/CreateSession/ActicateSession sequence in a simple connect method, it provides an additional changeUser method for this task.

This should be added to QopcUaClient as well.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0jqf3:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Missing browse service in QopcUaClient class,QTBUG-71633,269420,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,fmeerkoetter,gergap,gergap,07 Nov '18 10:35,07 Nov '18 10:35,18 Feb '21 09:41,,5.13.0 Alpha 1,,,,,,,,,,,,,,,,,,,,,,OpcUA,,,,0,,,,I would suggest to add Browse service and TranslateBrowsePathsToNodeIds service (resolveBrowsePaths) at the client class. So one can use those mass operations without the need of creating thousands of QopcUaNode instances.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0jqev:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Feature Request: Collapsible QDockWidgets,QTBUG-71528,269162,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt.team.quick.subscriptions,izero,izero,01 Nov '18 09:18,01 Nov '18 09:18,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Widgets: Widgets and Dialogs,,,,1,Reported_by_support_standard,,,Similar collapsible feature is requested for QDockWidget as the QSplitter offers. Wanted feature is that dockwidgets could be shrink to zero size using the resize handle.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0jouv:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add support for simulating mouse wheel events in QTest,QTBUG-71449,268979,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,macadder,lennartrolland@gmail.com,lennartrolland@gmail.com,27 Oct '18 21:36,27 Oct '18 21:36,18 Feb '21 09:41,,5.11.2,,,,,,,,,,,,,,,,,,,,,,Testing: qtestlib,,,,2,,,,"QTest has functionality to simulate mouse clicks and movements but there is no way to simulate *mouse wheel* events. Looking at documentation ([http://doc.qt.io/qt-5/qtest.html#details)] there is not a single mention of ""wheel"" anywhere.

 

Suggestion is to add this basic functionality to QTest.

 

This has been requested recently ([https://stackoverflow.com/questions/50996997/how-to-simulate-mouse-wheel-events-using-qtestlib-qt5)] and as far back as 10 years ago, in  2008 ([https://www.qtcentre.org/threads/13436-Wheel-and-QTest).|https://www.qtcentre.org/threads/13436-Wheel-and-QTest)]

Today this request was made formal.

NOTE: If there is a misunderstanding that this functionality is in fact available, then the documentation should be updated on how to do it!

 

 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0jnqn:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Custom gestures with Input Handlers,QTBUG-71425,268937,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt.team.quick.subscriptions,permotion88,permotion88,26 Oct '18 12:20,26 Oct '18 13:13,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Quick: Mouse Touch and Tablet input,,,,2,,,,"It would be great to be able to define custom gestures with Input Handlers from QML or C++.

It is currently possible to handle many touch points with multiple PointHandlers, but only if the gesture does not start at all points simultaneously (The successive addition of fingers works).

 

MultiPointHandler it is not available in public API. Is there any possibility for custom handling many of touch points with Input Handlers, (as it is done in MultiPointTouchArea, for example)?",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0jnhb:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add a means to know when an axis is interacted with by the mouse,QTBUG-71418,268920,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,e0348803,andysh,andysh,26 Oct '18 07:36,26 Oct '18 07:36,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Charts,,,,2,Reported_by_support_standard,,,"Add a means to know when an axis is interacted with by the mouse. This could be by adding signals to be emitted when the mouse is used on the axis, or by providing a way to get these events.

This makes it possible to do something specific dependent on the range at the clicked position or if dragging then the range the mouse was dragged from and to.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0jndj:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
evedevkeyboard plugin with multiple keymap s,QTBUG-71385,268862,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,srutledg,christian_gagneraud_navico,christian_gagneraud_navico,25 Oct '18 01:39,25 Oct '18 10:24,18 Feb '21 09:41,,5.11.2,,,,,,,,,,,,,,,,,,,,,,"GUI: Basic Input System (keyboard, mouse, touch)",,,,0,,,,"Currently it is noit possible to assign different keymap to different keyboard.

Our use-case:
 * USB keyboard requires 'default' keymap
 * internal GPIO based keypad, with dedicated' HW keys which are by default mapped to standard keys. We need to load a custom keymap, so that some keys are mapped correctly.

Currently we have our own 'evdevhotplug' plugin that can handle different keymap using a special custom parameter naming.

 

Currently the syntax is `/dev/...:/dev/...:keymap=...`, wouldn't it be nice to be able to do `/dev/...=/path/to/keymap`, and for backward compatibility, allow a global 'keymap' parameter.

 

If we can agree on this feature, and the parameter naming, i don't mind to provide a merge request through gerrit.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0jn0n:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Add a ""non-resize-mode"" to QQuickView ",QTBUG-71146,268399,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt.team.quick.subscriptions,derm,derm,15 Oct '18 10:29,23 Oct '18 10:26,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Quick: Core Declarative QML ,,,,0,,,,"For the QQuickView it is currently (officially) only possible to choose between two ResizeModes:
 * SizeViewToRootObject
 * SizeRootObjectToView

If it is desired to not link the RootObject to the QQuickView, that is not supported.

Currently it seems to be possible by calling

{{QQuickView::setResizeMode(static_cast<QQuickView::ResizeMode>(-1))}}

but this is a hack and no nice solution.

I suggest adding a third mode for that. You will only need to add a third value to the enum. Since for the auto-resize functionality it is always checked for equality and never for unequality, as far as I can see, no other code has to be changed.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0jk67:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Please add a window flag/attribute to bypass the high DPI scaling system,QTBUG-71304,268696,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,,maarten baert,maarten baert,21 Oct '18 20:43,21 Oct '18 21:48,18 Feb '21 09:41,,5.11.2,,,,,,,,,,,,,,,,,,,,,,GUI: Window management,,,,0,,,,"I develop a screen capturing application (SimpleScreenRecorder) which allows the user to select a rectangular capture region using the mouse. Originally I did this using the standard Qt functions: QMouseEvent::globalX/Y to get the global mouse position, and QWidget::setGeometry to place a selection rectangle at the correct position on screen (like QRubberBand).

Users have reported that this approach is completely broken on high-DPI environments with Qt5, because obviously the scaled coordinates that Qt provides don't match the coordinates of the native X11 screen capturing API.

I have tried to write workarounds to basically revert the transformations that Qt is applying, but I have not been able to find a reliable method that produces the correct result in all situations, in particular when dealing with multi-monitor setups with different scale factors per monitor, and when the selection rectangle overlaps the boundary between two monitors. The way Qt handles this is undocumented and in some cases buggy (see QTBUG-71302).

I would like to request a window flag/attribute that disables the Qt high DPI system on a per-window basis. Basically something which sets the devicePixelRatio to 1 for a single window without affecting the other ones. I think this would eliminate  all of these issues.

Without such an option, my only alternative is to forcibly disable high DPI support completely by overriding the corresponding environment variables (which users won't like), or revert to native X11 calls to create and draw the selection rectangle window manually (which is a huge pain).",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Linux/X11,,,,,,"0|i0jlzz:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Allow QGraphicsTextItem to not ensure visibility,QTBUG-71241,268600,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,bibr,kagro,kagro,18 Oct '18 12:24,18 Oct '18 17:30,18 Feb '21 09:41,,5.12.0 Beta 2,,,,,,,,,,,,,,,,,,,,,,Widgets: GraphicsView,,,,0,,,,"When QGraphicsTextItem receives focus or its text is modified, it ensures item is visible in all QGraphicsViews as documented here: http://doc.qt.io/qt-5/qgraphicstextitem.html#setPlainText

This can be troublesome especially for UIs which use multiple QGraphicsViews for a single UI component. For example Qt 3D Studio timeline currently contains hack to disable this behavior by overriding QGraphicsView::scrollContentsBy() as seen here http://code.qt.io/cgit/qt3dstudio/qt3dstudio.git/tree/src/Authoring/Studio/Palettes/TimelineGraphicsView/ui/TreeHeaderView.cpp

But if you want to disable this behavior while keeping rest of scrolling behavior, things become more complicated. There should be a cleaner way to avoid QGraphicsTextItem not causing ensureVisibility or QGraphicsView not reacting to these.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0jlen:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"18 Oct '18 17:30;kagro;Proposed patch for this in https://codereview.qt-project.org/243119

Qt 3D Studio patches that would utilize this:
# Cleaning up code to not need custom QGraphicsView: https://codereview.qt-project.org/243147
# Adding comments texts support into timeline: https://codereview.qt-project.org/237856/

First would just clean up code, while for second I don't currently know what a workaround requires. Any thoughts?",,,,,,,,,,,,,,,,,,,,,
Add replace method with list to QtCharts::QLineSeries,QTBUG-71159,268428,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,e0348803,rnestler,rnestler,15 Oct '18 16:11,15 Oct '18 16:14,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Charts,,,,0,,,,In Qml the QtCharts LineSeries doesn't allow updating with a list of new values.,,,,,,,,,,,,,,,,,,,"15 Oct '18 16:12;rnestler;qtchartspatch.diff;https://bugreports.qt.io/secure/attachment/77239/qtchartspatch.diff",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0jkcn:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"15 Oct '18 16:14;rnestler;The attached patch ([^qtchartspatch.diff)] shows what I want. I tested it with the QT 5.7 branch.",,,,,,,,,,,,,,,,,,,,,
Use OpenGL directly in Declarative* charts,QTBUG-71122,268335,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,e0348803,jefernan,jefernan,12 Oct '18 12:15,12 Oct '18 12:15,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Charts,,,,0,,,,"The current implementation of charts is using a QGraphicsScene to render the chart and dump it into a texture. Using OpenGL directly would improve the performance.

In the WebGL QPA it causes a lot of flickering because of constant texture updates.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0jjs7:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add support for multiple screens in Android,QTBUG-71058,268180,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt.team.graphics.and.multimedia,andysh,andysh,10 Oct '18 13:17,10 Oct '18 13:17,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,QPA,,,,1,Reported_by_support_standard,,,Since Android 8 has support for displaying on multiple screens then Qt could be extended to account for this.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Android,,,,,,"0|i0jiu7:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Please make it easier to get a dynamic width for QListWidget / QTreeWidget,QTBUG-71017,268089,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,Not Evaluated,,qt.team.quick.subscriptions,artomason,artomason,09 Oct '18 00:55,09 Oct '18 00:55,18 Feb '21 09:41,,Some future release,,,,,,,,,,,,,,,,,,,,,,Widgets: Widgets and Dialogs,,,,0,,,,"Could you please make it easier to obtain the exact necessary width of a QListWidget and QTreeWidget to view their contents without showing a horizontal scrollbar.

As it currently stands, there does not appear to be a straight forward way of calculating the width in a dynamic fashion. This causes some aesthetic issues when viewed on various high density displays.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0jiaf:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
QQuickAccessibleAttached / Accessible QML: no way to specify the value for QAccessible.state().disabled in QML,QTBUG-74358,275292,Suggestion,Open,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P1: Critical,,smd,cosminp,cosminp,13 Mar '19 01:14,08 Jan '21 12:15,18 Feb '21 09:41,,5.11.1,5.12.4,5.15.2,,,,,,,,,,,,,,,,,,,,GUI: Accessibility (a11y),,,,0,customer=lngAAA,CustomerRequirement,,"This is needed to support accessibility in scenarios where we show text input fields that are disabled (cannot be interacted with).

While the QAccessible class's state() supports a ""disabled"" value, that value doesn't exist in the Accessible QML namespace and thus it doesn't get plumbed through QQuickAccessibleAttached and QAccessibleQuickItem",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Windows,,,,,,"0|hzzy97:o4",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
QTreeWidget: add virtual function supportedDragActions,QTBUG-87465,306071,Suggestion,Open,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P1: Critical,,qt.team.quick.subscriptions,miikapernu,miikapernu,13 Oct '20 10:58,07 Dec '20 09:04,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Widgets: Itemviews,,,,2,Reported_by_support_standard,,,"QTreeWidget has the function https://doc.qt.io/qt-5/qtreewidget.html#supportedDropActions which can be used to edit the supported drop actions. However, it does not have a similar member function to change the supported drag actions. This is problematic because QAbstractItemModel::setSupportedDragActions is now obsolete meaning there is no more an obvious way to edit the supported drag actions in a QTreeWidget.

The only way to change the supported drag actions for QTreeWidget that I've discovered is by overriding QTreeWidget::supportedDropActions because by default QAbstractItemModel::supportedDragActions return value is the same as that of supportedDropActions (documented at https://doc.qt.io/qt-5/qabstractitemmodel.html#supportedDragActions). This doesn't feel very intuitive but may work in some cases. Unfortunately, it gets problematic once the QTreeWidget needs to support a different set of drop and drag actions which currently seems impossible.

Adding the function QTreeWidget::supportedDragActions which functions logically similarly to supportedDropActions would fix the problem.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,QTBUG-89157,9223372036854775807,,,,,,,,,"0|i0pfaf:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"13 Oct '20 13:41;thornto4;Note, I believe this is a -regression in capability- breaking change between Qt5 and Qt6.

In Qt5, supported drag/drop actions for a QTreeWidget could be changed independently through the deprecated QAbstractItemModel::setSupportedDrag/DropActions.

In Qt6, the deprecated method has been removed and there is no way to independently change these actions.

 ","13 Oct '20 13:47;thornto4;I think you'd just need to do:


{code:java}
// qtreewidget.h
virtual Qt::DropActions supportedDragActions() const;

//qtreewidget.cpp
Qt::DropActions QTreeWidget::supportedDragActions() const
{
    return model()->QAbstractItemModel::supportedDragActions();
}

//qtreewidget's private model
Qt::DropActions QTreeModel::supportedDragActions() const override
{
    return view()->supportedDragActions();
}
{code}",,,,,,,,,,,,,,,,,,,,
Add a transient property to ScrollBar ,QTBUG-76895,280906,Suggestion,Open,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P1: Critical,,qt.team.quick.subscriptions,andysh,andysh,04 Jul '19 06:29,12 Oct '20 07:37,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Quick: Controls 2,,,,0,qtquickcontrols2-desktop,Reported_by_support_standard,,Add a transient property to ScrollBar so that for those who want the scrollbar to always be visible (if it is needed) can ensure it is always available. Currently the only way to achieve this is by working around it and having a means to indicate that it will always be visible if the policy indicates it would be shown would make things more obvious and straightforward.,,,,,,,,,,,,,,,QTBUG-83612,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0lizb:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"30 Jun '20 09:36;mitch_curtis;The workaround:

{code}
import QtQuick 2.14
import QtQuick.Controls 2.14

ApplicationWindow {
    visible: true
    width: 640
    height: 480
    title: width + "" "" + height

    Flickable {
        id: flickable
        contentWidth: 2000
        contentHeight: 800
        anchors.fill: parent

        ScrollBar.vertical: ScrollBar {
            active: flickable.contentHeight > flickable.height
        }
    }
}
{code}

I'm not certain that this would be equivalent, but [another idea was proposed by J-P|https://bugreports.qt.io/browse/QTBUG-55364?focusedCommentId=353194&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-353194]:

{quote}
Alternative idea: expose customizable enter and exit transitions in the ScrollBar API.
{quote}","30 Jun '20 09:37;mitch_curtis;Hmm... my thinking was that you could set both of those to null, but then you'd lose e.g. the fade out animation that occurs when the content is too small for the window.

I think a transient property is the best solution.","12 Oct '20 07:36;richard;I agree this is needed (although it's also possible to argue that it's up to the style whether scrollbars should be transient or not).

But it's tricky to implement non-transient scrollbars when the scrollbars are attached directly to the flickable, like in the example above. The problem is that the scrollbars need to be placed outside the flickable, since you don't want the flickable/content item to go _under_ the scrollbars, like in the transient case. This looks wrong if the scrollbars are translucent (macOS, dark mode). But more important, if the flickable's content width is the same as the flickable's own width, a horizontal scrollbar should not show (ScrollBar.AsNeeded). But if you at the same time show a vertical scrollbar _on top_ of the flickable on the right side, it will obscure the content item.

So I'm thinking that we can probably only support this for ScrollView. In that case you simply need to set a rightPadding and bottomPadding on it, which will move the flickable to be on the inside of the scrollbars. This is what we already do in the native styles, since there the scrollbars are currently hard-coded to always be non-transient.",,,,,,,,,,,,,,,,,,,
Use DST data even before 1970,QTBUG-80421,289460,Suggestion,In Progress,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,Eddy,Eddy,Eddy,28 Nov '19 16:38,17 Feb '21 12:37,18 Feb '21 09:41,,5.0.0,5.14,5.15,5.9,6.0.0,,,,,,,,,,,,,,,,,6.2.0 FF,Core: Date/Time,,,,0,Qt6,,,"At present the {{QDateTime}} code goes out of its way to ignore DST before 1970, although it does use the available time-zone data to determine the standard time offset to use instead of DST.  This makes no sense.
I shall remove this at Qt6, so that we just use the time-zone data we have, with no special quirk about 1970.

(On MS-Windows, when using the native TZ-data APIs, we only get data reaching back a few years before the MS-version was released.  Everywhere else (including MS, when we have ICU available) we use the Olson database, which is about as authoritative a source of TZ data as there is.)",,,,,,,,,,,,,,,QTBUG-79923,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,mkalinow,All,,,,,,"0|i0qi9u:",9223372036854775807,9223372036854775807,,,,ablasche,Qt6_Foundation_Sprint 28,,,,,,,13.0,,"26 Jan '21 17:02;Eddy;The present behaviour creates a bogus DST transition at the start of 1970 in the UK (which was in permanent DST from 1968-Feb to 1971-Oct), which causes fest failures for developers using the UK time-zne. This has caused problems on some macOS CI machines when provisioned to used GMT (not that I encourage such behaviour, but apparently we do this).
Because we're ignoring DST before the epoch and taking it into account after, there is effectively a spring-forward that skips the first hour of 1970-01-01 in the UK time-zone (Europe/London).",,,,,,,,,,,,,,,,,,,,,
Consider supporting blending directly in the scene-graph ,QTBUG-81382,291649,Suggestion,Open,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,qt.team.graphics.and.multimedia,thohartm,thohartm,15 Jan '20 10:15,17 Feb '21 12:08,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Quick: SceneGraph,,,,0,,,,"*Consider supporting blending directly in the scene-graph*

Blend effects could be part of Item/the scenegraph. 
This would mean any item could be blended against the background 
or use the background as an opacity mask.

This would make blending items a lot easier because no extra effect item is required
and enable designer to setup complex blending scenarios.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0n7uv:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
QtQuick Controls 2 TableView doesn't support selecting items,QTBUG-74750,276215,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,richard,cosminp,cosminp,27 Mar '19 19:02,17 Feb '21 07:51,18 Feb '21 09:41,,5.12.0,,,,,,,,,,,,,,,,,,,,,,Quick: Controls 2,,,,6,Reported_by_support_1H20,Reported_by_support_premium,Reported_by_support_standard,"The control is advertised as a replacement for TableView/ListView from Controls 1, but it doesn't support selecting rows.

 ",,,,,,,,,,QTBUG-73139,,,QTPM-1299,QTBUG-70331,QTBUG-83612,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0krzz:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"28 Mar '19 10:59;srutledg;Yes we will try to get that done ASAP.","07 Nov '19 22:36;6th;Any ETA on this?","25 Feb '20 14:55;srutledg;Sorry, that feature didn't get done in time for 5.15 either.  So that means it will need to be sometime in the Qt 6 series.","08 Dec '20 13:21;erikjans;what would be ideal would be if the table view has QItemSelectionModel, in the same way as the QAbstractItemView has one.

even if it would not support all functions, simply having it available would make it easier to customize selection behavior of the TableView","08 Jan '21 13:49;erikjans;I think these _small_ changes would take care of a lot of use cases :

* selectionModel() method on the view
* setSelectionModel() method on the view
* selected attached property on the delegate
* current attached property on the delegate",,,,,,,,,,,,,,,,,
Missing features in inspector/devtools,QTBUG-85171,300779,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,qt_webengine_team,the compiler,the compiler,22 Jun '20 07:17,16 Feb '21 15:27,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,WebEngine,,,,0,,,,"When comparing the QtWebEngine devtools/inspector to the one in Chromium, certain features are missing or broken. I'm not sure if those all boil down to the same cause or if they are different things (and some arguably are bugs rather than feature requests), but I'm opening this as an overview to hopefully get the ball rolling.

# The ""device mode"" toggle is missing, it can be used in Chromium to view the page on a simulated mobile screen:  !image-2020-06-22-09-12-03-873.png|thumbnail! 
# Using <Ctrl-P> and entering ""screenshot"" allows to select e.g. ""capture area screenshot"". Both QtWebEngine and Chromium show a cross-hair allowing to select a part of the page. After that, the screenshot is saved as a simulated download with Chromium, but nothing seems to happen with QtWebEngine. (This one might be a bug rather than feature request?)
# When clicking a color in the ""styles"" pane, a color picker opens. With Chromium, it's then possible to hover over the page to select colors from there:  !image-2020-06-22-09-16-54-586.png|thumbnail! but with QtWebEngine, that doesn't work.
# In the ""Sources -> Filesystem"" tab, using ""Add folder to workspace"", nothing happens.",,,,,,,,,,,,,,,,,,,"22 Jun '20 07:12;the compiler;image-2020-06-22-09-12-03-873.png;https://bugreports.qt.io/secure/attachment/95745/image-2020-06-22-09-12-03-873.png","22 Jun '20 07:17;the compiler;image-2020-06-22-09-16-54-586.png;https://bugreports.qt.io/secure/attachment/95744/image-2020-06-22-09-16-54-586.png","23 Jun '20 14:50;the compiler;image-2020-06-23-16-50-27-545.png;https://bugreports.qt.io/secure/attachment/95793/image-2020-06-23-16-50-27-545.png",,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0oljz:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"22 Jun '20 09:24;allan.jensen;I have the device mode toggle in 5.15. Seems to work too.","23 Jun '20 14:49;the compiler;Huh, that's weird - I don't with the 5.15 simplebrowser:  !image-2020-06-23-16-50-27-545.png|thumbnail! ","23 Jun '20 15:27;allan.jensen;Well, I am running with a few fixes to dev tools that are currently integrating. Perhaps they make the difference.","21 Sep '20 09:19;the compiler;I'm now running 5.15.1 and I still can't see the device mode toggle with simplebrowser FWIW.","16 Feb '21 15:27;allan.jensen;Yeah, I can't figure out when it is there and when it isn't.",,,,,,,,,,,,,,,,,
Build examples as tests rather than as part of the main build,QTBUG-90820,312660,Suggestion,In Progress,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,crscott,crscott,crscott,02 Feb '21 05:53,16 Feb '21 07:57,18 Feb '21 09:41,,6.0.0,,,,,,,,,,,,,,,,,,,,,,Build System: CMake,,,,0,,,,"When using a static Qt, we can't build examples as part of the main Qt build due to issues with cyclic dependencies between the main Qt module libraries and the plugins (see QTBUG-90819). We would have to manually link to the plugins in every example, but this is something that user projects wouldn't need to do and the examples would then be tainted with things that are only relevant to building Qt itself.

Ideally, we want the examples to be built in their own separate build. They should build against the Qt that the main build provides somehow. A potential solution to this is to move the examples out to their own test case(s) and make use of the {{ctest --build-and-test}} functionality. That {{ctest}} feature is specifically meant for situations like this, where you want to verify that a project can be configured and built.

While it would be nice to make every single example its own separate test case, that would have a fairly strong negative impact on test time. Every sub-build will need to do a full CMake run, which means performing compiler checks, etc. and this can take several seconds with some generators. We can minimise this impact by grouping examples by functionality, feature, etc. such that one test case builds multiple examples. We could potentially offer a CMake option for fine-grained tests if the user wanted it.

Tests support _labels_ in CMake. We could potentially assign some labels based on the module, etc. for each example or group of examples. This would enable the developer to select just the subset of tests for the examples they want.

A further advantage of this approach is that it may open up the opportunity for building the examples against an existing Qt installation, similar to how we currently support the standalone test capabilities. This may have some advantages for CI as well.",,,,,,,,,,,,,,,QTBUG-90819,QTBUG-86669,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,QTBUG-88540,9223372036854775807,,,All,,,,,,"0|i0qhdb:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"02 Feb '21 06:07;crscott;I'll record this here as a CMake upstream enhancement which would become desirable if we went ahead with this proposal:

[https://gitlab.kitware.com/cmake/cmake/-/issues/21087]

The proposed feature in that link would allow us to {{AND}} together test labels on the {{ctest}} command line, meaning you could then do something like this:
{noformat}
ctest -L example -L qml{noformat}
At the moment, only the last {{-L}} is used and earlier ones are ignored instead of {{AND}}'ing them together.","09 Feb '21 06:19;crscott;This may end up being required in order to solve QTBUG-86669 for static builds.","15 Feb '21 08:36;srutledg;So because of this, cross-module dependencies will be OK?  e.g. qtdeclarative examples using controls2?","15 Feb '21 09:11;crscott;If you can point me at a specific example, I can confirm for you.","15 Feb '21 09:17;srutledg;https://codereview.qt-project.org/c/qt/qtdeclarative/+/332962","16 Feb '21 04:01;crscott;The {{localstorage}} example referenced in that change on gerrit builds fine for me in a static build (top level or per-repo) with my changes. I tested both the current code and also the modified version in the linked gerrit change, both work fine.","16 Feb '21 07:56;srutledg;Cool, thanks for checking.",,,,,,,,,,,,,,,
Missing documentation on QML directory imports from the resource system,QTBUG-91026,313026,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,docteam,nagrohn,nagrohn,08 Feb '21 15:35,12 Feb '21 13:30,18 Feb '21 09:41,,5.15,,,,,,,,,,,,,,,,,,,,,,Documentation,,,,1,reported_by_support_standard,,,"It'd be nice if there's a document that clearly shows the future-proof way of writing QML import statements from the resource system. 

Especially relative path like this

{code:java}
import ""../components""
{code}

This is extremely useful as this enables to load the same QML files from the resource system or from the file system without having to change anything but the load location of the initial QML file.

Some documents which tell related topic but these are not enough. 
https://doc.qt.io/qt-5/qtqml-syntax-directoryimports.html doesn't mention the resource system 
https://doc.qt.io/qt-5/qtqml-syntax-imports.html only mentions the resource system in the context of QML2_IMPORT_PATH 
https://doc.qt.io/qt-5/resources.html doesn't mention QML import

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0qjdz:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"11 Feb '21 09:57;asperamanca;This issue doesn't exactly reflect my original support request.

I'm still in contact with support about this, maybe a second issue will be written. In case that doesn't happen, here is my concern:

I use relative import statements both in the file and resource system, e.g.
{code:java}
import ""../components""
{code}
This is extremely useful. It is also undocumented.

I can load the same QML files from the resource system or from the file system without having to change anything but the load location of the initial QML file.

The resource system is useful when deploying the finished product

The file system is useful to rapid-prototype QML files during development. You can change the QML file on the file system and reload instantly, something that is not possible using the resource system.",,,,,,,,,,,,,,,,,,,,,
Android WebView: cannot enable localStorage,QTBUG-75723,278229,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,stromme,arabine,arabine,09 May '19 07:28,12 Feb '21 12:02,18 Feb '21 09:41,,5.12.3,,,,,,,,,,,,,,,,,,,,,,WebView,,,,4,Reported_by_support_standard,,,"The default implementation of WebView on Android does not enable the localStorage. Thus, it is not possible to start web app using it. 

File: {{QtAndroidWebViewController.java}}

{{Suggestions:}}

 {{1. (complex) Add a proper generic interface to enable various browser settings in the QML WebView component}}

2. (simple) Add the following lines in the constructor:

 

webSettings.setDatabaseEnabled(true);

{{webSettings.setDomStorageEnabled(true);}}

 

These lines can be surrounded by a check if the app permission allows it (write to external storage??).

 ",Qt Android all versions,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Android,,,,,,"0|i0l3dr:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Materials of imported scene should be collected under a single item under root object,QTBUG-91044,313075,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,janichol,e0348803,e0348803,09 Feb '21 13:45,11 Feb '21 07:42,18 Feb '21 09:41,,5.15.2,,,,,,,,,,,,,,,,,,,,,6.2,Quick: 3D,,,,0,,,,"When a complex 3D scene is imported, it may be difficult to find the material used by the model when the same material is used by multiple models. All of the materials of the scene (or at least materials used by multiple models) should be generated under a single materials item for easy discovery.

I.e. something like this:
{code:java}
Node {
    id: rootNode
	
    Node { // This doesn't need to be a Node, so maybe some other type is better?
        id: materials
        DefaultMaterial {
            id: body_material
            //...
        }
        DefaultMaterial {
            id: glass_material
            //...
        }
        //...
    }
{code}
 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0qjof:",9223372036854775807,9223372036854775807,,,,,,,,,,,,4.0,,"11 Feb '21 07:42;janichol;Yeah, that does sound reasonable.  I'll see if we can do that sooner than later.",,,,,,,,,,,,,,,,,,,,,
There should be a way to visualize models without any material assigned,QTBUG-91046,313080,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,janichol,e0348803,e0348803,09 Feb '21 14:15,09 Feb '21 14:15,18 Feb '21 09:41,,5.15.2,,,,,,,,,,,,,,,,,,,,,,Quick: 3D,,,,0,,,,"From tooling perspective, it would be nice to be able to somehow visualize also models that have no materials assigned. Otherwise it's easy to accidentally leave invisible models lying around in a complex scene when you delete a material that is used by many models.

E.g. Use some kind of obvious default ""error"" material or just use default material if no material is specified. If this is not good default behavior, make it possible to enable this somehow. E.g. via some private API call or maybe SceneEnvironment could have ""defaultMaterial"" property?",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0qjpj:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add support for foreground services,QTBUG-85154,300733,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,rampe,andysh,andysh,19 Jun '20 13:01,08 Feb '21 10:20,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Extras: Android,,,,4,Reported_by_support_standard,,,"Add support for foreground services in Android, background services work out of the box, but something more is needed to enable foreground services.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Android,,,,,,"0|i0ptdo:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"19 Jun '20 13:50;holgergerth;Android foreground service as described here:
[https://androidwave.com/foreground-service-android-example/]",,,,,,,,,,,,,,,,,,,,,
Qt Remote Object in Webassembly,QTBUG-74462,275459,Suggestion,Open,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,,Tinu,Tinu,15 Mar '19 07:21,08 Feb '21 10:18,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,Some future release,Remote Objects,,,,1,,,,Has Remote Object support for WebAssembly or should I use WebSockets?,,,,,,,,,,,,,,,,,,,"17 Apr '20 11:49;tuomas.vaarala;build_log.txt;https://bugreports.qt.io/secure/attachment/93814/build_log.txt","17 Apr '20 11:49;tuomas.vaarala;config.log;https://bugreports.qt.io/secure/attachment/93815/config.log","17 Apr '20 11:49;tuomas.vaarala;config.summary;https://bugreports.qt.io/secure/attachment/93816/config.summary",,,,,,,,,,,,,,,,,,,,,,,,b8a71125f038b5a52d034b804d32ecddd9e19286 dea04056ac0225f6051a974c9d623eabaaa7eee4,,,,QTBUG-82935,9223372036854775807,,,WebAssembly,,,,,,"0|i03pom:902bzoztrfcf6",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"15 Mar '19 11:44;bstottle;[~sorvig] You wrote the blog post on webassembly.  Do you know it QtRO is supported (I think it should if networking is supported)?","18 Mar '19 13:18;sorvig;There is networking support, but protocol support is limited.

The preferred way would be if QtRO supported connections over WebSockets. Then I think we  could support the QRemoteObjectNode::connectToNode(const QUrl &address) API.

There is also a solution in Emscripten for tunneling TCP connections over WebSockets to a forwarding/proxy server. See websockify:  https://github.com/novnc/websockify. I have not tested this myself, and it may not be a good fit for the QtRO API.","18 Mar '19 23:30;bstottle;If the docs are accurate and the websocket apis are aligned with QTcpServer and QAbstractSocket, it shouldn't be too hard to add a backend for it.  However, given that I haven't worked at all in webassembly, I'd be reluctant to add support without some sort of minimal stub example (client and server) that I could use to verify things are working properly.  Anyone willing/able to provide such an example?","19 Mar '19 19:29;sorvig;You should be able to do most of the development on a desktop system using the QWebSocket API. When building for WebAssembly QWebSocket will then use a wasm backend which calls the JavaScript WebSockets API. Keep in mind that we don't support QWebSocketServer on the Web.

We have a MQTT-over-QWebSockets example here: https://github.com/msorvig/qt-webassembly-examples/tree/master/mqtt_simpleclient, which should be half-relevant at least :)


","08 May '19 23:01;lpotter;Just tested the modelviewserver/client with server on desktop and client on browser, and the client does not receive anything, so some work is needed to make remote objects work.","03 Jun '19 09:04;lpotter;This might be related: https://bugreports.qt.io/browse/QTBUG-76163","11 Sep '19 11:28;bstottle;This works, and examples showing how to create the proper QIODevice are included in Qt 5.14.  See

[https://codereview.qt-project.org/c/qt/qtremoteobjects/+/264692] and

[https://codereview.qt-project.org/c/qt/qtremoteobjects/+/264693]","17 Apr '20 11:48;tuomas.vaarala;The Qt Remote Objects fails to build for me or the customer with WebAssembly.

Environment:
{quote}Setting environment variables:
EMSDK = /home/tuvaaral/projects/source/emsdk
EM_CONFIG = /home/tuvaaral/projects/source/emsdk/.emscripten
EM_CACHE = /home/tuvaaral/projects/source/emsdk/.emscripten_cache
LLVM_ROOT = /home/tuvaaral/projects/source/emsdk/fastcomp-clang/e1.38.27_64bit
EMSCRIPTEN_NATIVE_OPTIMIZER = /home/tuvaaral/projects/source/emsdk/fastcomp-clang/e1.38.27_64bit/optimizer
BINARYEN_ROOT = /home/tuvaaral/projects/source/emsdk/fastcomp-clang/e1.38.27_64bit/binaryen
EMCC_WASM_BACKEND = 0
EMSDK_NODE = /home/tuvaaral/projects/source/emsdk/node/8.9.1_64bit/bin/node
EMSCRIPTEN = /home/tuvaaral/projects/source/emsdk/emscripten/1.38.27
{quote}
Build log is attached as build_log.txt","17 Apr '20 15:07;bstottle;Can you try with multithreading?  [https://www.qt.io/blog/2019/06/26/qt-webassembly-multithreading]","17 Apr '20 15:59;hgerdau;The problem seems to be a different handling of moc_ includes  in cpp files when compiled for webassembly.

At least it builds  if the #include  ""moc_*.cpp"" are removed from

Src/qtremoteobjects/src/remoteobjects/qremoteobjectnode.cpp

Src/qtremoteobjects/src/remoteobjects/qremoteobjectpendingcall.cpp

and the 2 plugin.cpp

Src/qtremoteobjects/src/imports/compat/plugin.cpp

Src/qtremoteobjects/src/imports/remoteobjects/plugin.cpp

are given as headers to moc.

After successfully building the lib it actually worked in a browser displaying a remote model in a tableview using the websocket method way outlined here but was depressingly slow compared to exactly the same code in a desktop app. Both local connections.","29 Jan '21 10:18;santtuahonen;Gearbox (Santtu & Kalle): Postponing to 'Some future release, if and what we can get on Qt 6.2 LTS will be mapped back later.",,,,,,,,,,,
Add API to set the DPI of a QTextDocument,QTBUG-80454,289529,Suggestion,Open,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,esabraha,esabraha,esabraha,02 Dec '19 08:21,05 Feb '21 14:04,18 Feb '21 09:41,,5.14.0 Beta3,,,,,,,,,,,,,,,,,,,,,,GUI: Text handling,,,,2,Reported_by_support_standard,,,"QTextDocument has no way of defining a default DPI, so it will use qt_defaultDpi() instead, which is based on system settings (or 75 in the case of a non-GUI application). In principle, this is okay, since it will match the DPI of fonts, but it makes certain use cases difficult. 

For instance, if you want to get actual physical sizes e.g. in an image or on a printer, you have to account for the logical DPI factor of the system (or override this using AA_Use96Dpi), even if the QTextDocument is never drawn to any screen. This is not just an issue for fonts, but things like setting absolute sizes for an iframe (or a table) for instance, will also interpret the pixel size in terms of the system's logical DPI and scale all output to the target device based on this. 

If there was a way to set the DPI of the QTextDocument, it would make use cases like this a lot easier. ",,,,,,,,,,,,,QTBUG-90958,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0mvon:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Support FIDO2 user verification,QTBUG-90938,312863,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,qt_webengine_team,maximbaz,maximbaz,04 Feb '21 15:32,04 Feb '21 20:34,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,WebEngine,,,,0,,,,"Go to [https://webauthn.io/]

Put any username, click on ""Advanced settings"" and set ""User verification"" to ""Required"".

Now click ""Register"".

In Chromium, a popup shows up asking for PIN of YubiKey (I'm using YubiKey 5C Nano):

!image-2021-02-04-16-28-29-937.png|width=550,height=250!

In qutebrowser for example, which is based on QtWebEngine, this will not work, because there is way to enter a PIN.

So either QtWebEngine needs to display such a dialog itself, or it needs to provide an API for applications to do so.

Thanks by the way for implementing WebAuthn support in QtWebEngine!",,,,,,,,,,,,,,,,,,,"04 Feb '21 15:28;maximbaz;image-2021-02-04-16-28-29-937.png;https://bugreports.qt.io/secure/attachment/104682/image-2021-02-04-16-28-29-937.png",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0qii7:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"04 Feb '21 17:20;allan.jensen;Is the pin a part of CTAP2, special to your key, or using the older U2F protocol?","04 Feb '21 17:38;maximbaz;The pin is special to my key, this is not the older U2F protocol","04 Feb '21 20:34;allan.jensen;Anyway, the solution to both this and QTBUG-90941 is the same. Implementing ContentBrowserClient::

GetWebAuthenticationRequestDelegate() and a proper AuthenticatorRequestClientDelegate class. It deals with both PINs and account selection",,,,,,,,,,,,,,,,,,,
QRhi: texture strides,QTBUG-90770,312554,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,lagocs,jcelerier,jcelerier,29 Jan '21 21:37,02 Feb '21 10:54,18 Feb '21 09:41,,5.15,6.x,,,,,,,,,,,,,,,,,,,,,Qt RHI,,,,0,,,,"Hello,
All graphics API allow to set the stride of uploaded textures.
For instance:
- GL: glPixelStorei(GL_UNPACK_ROW_LENGTH,stride);
- Vulkan: I assume it's rowPitch in VkSubresourceLayout
- Metal: newTextureWithDescriptor takes a bytesPerRow parameter
- D3D11: looks like it's somewhere in there: https://docs.microsoft.com/en-us/windows/win32/api/d3d11/ns-d3d11-d3d11_subresource_data 

This is useful for instance for GPU video playback: some videos are decoded into slightly wider buffers for decoder efficiency reasons; e.g. a 720 * 576 video may be decoded in a 768 * 576 texture with the 48 rightmost pixels of each line to be ignored. 

could this feature be added to the QRhiTextureSubresourceUploadDescription API in some way ? Even at texture construction time would already be very useful",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0qgrj:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"02 Feb '21 10:21;lagocs;If the image format is suitable for QImage, then there is a workaround already now: set the bytesPerLine in a wrapping QImage and create the texture from that wrapping QImage instead of raw image data.","02 Feb '21 10:54;jcelerier;Hm, in my case it's YUV420-encoded frames coming from ffmpeg / libav (under the form of three separate planes) when decoding a video. Those wouldn't work in QImage I believe.. (and YUV420 is pretty common for video)",,,,,,,,,,,,,,,,,,,,
Icons for submenus,QTBUG-79972,288272,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,qt.team.quick.subscriptions,poikelin,poikelin,12 Nov '19 17:01,02 Feb '21 08:29,18 Feb '21 09:41,,5.15.2,,,,,,,,,,,,,,,,,,,,,,Quick: Controls 2,,,,2,Reported_by_support_standard,,,"Controls 1 supported icons for submenus through iconSource property:

https://doc.qt.io/qt-5/qml-qtquick-controls-menu.html#iconSource-prop

Menu in Controls 2 does not not similar feature.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0mobr:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Create a tool that creates an initial Qt CMake project,QTBUG-90811,312639,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,qtbuildsystem,jbornema,jbornema,01 Feb '21 12:59,01 Feb '21 15:07,18 Feb '21 09:41,,6.0.0,,,,,,,,,,,,,,,,,,,,,,Build System: CMake,,,,0,,,,"Create a tool that mimics ""qmake -project"", but for CMake.
It should add the necessary find_package calls and add the source files.

Extra sugar on top: scan the source for includes and deduct the needed Qt modules.

There's https://github.com/KDAB/KDToolBox/blob/master/qt/cmake-project/cmake-project
but that's not platform-independent. 
I suggest to implement this tool in CMake itself and run it by wrappers like configure/configure.bat.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0qh8v:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
QProgressDialog::setValue should rate-limit itself,QTBUG-83265,296609,Suggestion,Open,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,qt.team.quick.subscriptions,apalomer,apalomer,02 Apr '20 11:17,01 Feb '21 13:00,18 Feb '21 09:41,,5.14.1,5.14.2,5.9.5,,,,,,,,,,,,,,,,,,,,Widgets: Widgets and Dialogs,,,,1,,,,"When a progress dialog that is set to window modal is updated too fast from a thread  by sending a signal that is connected (not using Qt::DirectConnection) to QProgressDialog::setValue, it produces a stack overflow error. [This|https://github.com/apalomer/progress_bar_crash_overflow_stack] example shows a thread with two different calculations one that emits an update value every few milliseconds and one that emits as fast as it can. In both cases, the signals from the thread are connected without using Qt::DirectConnection to the QProgressDialog::setValue slot of the QProgressDialog in the main application thread. The second one produces the stack overflow error.

Here is an example stack call from Ubuntu:
{noformat}
 # #0 0x00007ffff76fa330 in QProgressDialog::setValue(int) () at /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5
 # #1 0x00007ffff60a3dec in QtPrivate::FunctorCall<QtPrivate::IndexesList<0>, QtPrivate::List<int>, void, void (QProgressDialog:: )(int)>::call(void (QProgressDialog:: )(int), QProgressDialog*, void*) () at /home/apalomer/programming_workspace/progress_bar_example/build/libthreadedworker.so
 # #2 0x00007ffff60a3ba4 in void QtPrivate::FunctionPointer<void (QProgressDialog:: )(int)>::call<QtPrivate::List<int>, void>(void (QProgressDialog:: )(int), QProgressDialog, void*) () at /home/apalomer/programming_workspace/progress_bar_example/build/libthreadedworker.so
 # #3 0x00007ffff60a3759 in QtPrivate::QSlotObject<void (QProgressDialog:: )(int), QtPrivate::List<int>, void>::impl(int, QtPrivate::QSlotObjectBase*, QObject*, void*, bool) () at /home/apalomer/programming_workspace/progress_bar_example/build/libthreadedworker.so
 # #4 0x00007ffff6ef30c2 in QObject::event(QEvent*) (this=0x555555b74610, e=<optimized out>) at kernel/qobject.cpp:1247
 # #5 0x00007ffff751775b in QWidget::event(QEvent*) () at /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5
 # #6 0x00007ffff74d883c in QApplicationPrivate::notify_helper(QObject*, QEvent*) () at /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5
 # #7 0x00007ffff74e0104 in QApplication::notify(QObject*, QEvent*) () at /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5
 # #8 0x00007ffff6ec38d8 in QCoreApplication::notifyInternal2(QObject*, QEvent*) (receiver=0x555555b74610, event=event@entry=0x7fffc80037a0) at kernel/qcoreapplication.cpp:1024
 # #9 0x00007ffff6ec604d in QCoreApplication::sendEvent(QObject*, QEvent*) (event=0x7fffc80037a0, receiver=<optimized out>) at ../../include/QtCore/../../src/corelib/kernel/qcoreapplication.h:233
 # #10 0x00007ffff6ec604d in QCoreApplicationPrivate::sendPostedEvents(QObject*, int, QThreadData*) (receiver=receiver@entry=0x0, event_type=event_type@entry=0, data=0x55555576fef0) at kernel/qcoreapplication.cpp:1699
 # #11 0x00007ffff6ec65d8 in QCoreApplication::sendPostedEvents(QObject*, int) (receiver=receiver@entry=0x0, event_type=event_type@entry=0) at kernel/qcoreapplication.cpp:1553
 # #12 0x00007ffff6f1d263 in postEventSourceDispatch(GSource*, GSourceFunc, gpointer) (s=0x5555558952a0) at kernel/qeventdispatcher_glib.cpp:276
 # #13 0x00007ffff4221417 in g_main_context_dispatch () at /usr/lib/x86_64-linux-gnu/libglib-2.0.so.0
 # #14 0x00007ffff4221650 in () at /usr/lib/x86_64-linux-gnu/libglib-2.0.so.0
 # #15 0x00007ffff42216dc in g_main_context_iteration () at /usr/lib/x86_64-linux-gnu/libglib-2.0.so.0
 # #16 0x00007ffff6f1c88f in QEventDispatcherGlib::processEvents(QFlags<QEventLoop::ProcessEventsFlag>) (this=0x5555558d2b80, flags=...) at kernel/qeventdispatcher_glib.cpp:423
 # #17 0x00007ffff76fa4c7 in QProgressDialog::setValue(int) () at /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5
 # #18 0x00007ffff60a3dec in QtPrivate::FunctorCall<QtPrivate::IndexesList<0>, QtPrivate::List<int>, void, void (QProgressDialog:: )(int)>::call(void (QProgressDialog:: )(int), QProgressDialog*, void*) () at /home/apalomer/programming_workspace/progress_bar_example/build/libthreadedworker.so
 # #19 0x00007ffff60a3ba4 in void QtPrivate::FunctionPointer<void (QProgressDialog:: )(int)>::call<QtPrivate::List<int>, void>(void (QProgressDialog:: )(int), QProgressDialog, void*) () at /home/apalomer/programming_workspace/progress_bar_example/build/libthreadedworker.so
 # #20 0x00007ffff60a3759 in QtPrivate::QSlotObject<void (QProgressDialog:: )(int), QtPrivate::List<int>, void>::impl(int, QtPrivate::QSlotObjectBase*, QObject*, void*, bool) () at /home/apalomer/programming_workspace/progress_bar_example/build/libthreadedworker.so
 # #21 0x00007ffff6ef30c2 in QObject::event(QEvent*) (this=0x555555b74610, e=<optimized out>) at kernel/qobject.cpp:1247
 # #22 0x00007ffff751775b in QWidget::event(QEvent*) () at /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5
 # #23 0x00007ffff74d883c in QApplicationPrivate::notify_helper(QObject*, QEvent*) () at /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5
 # #24 0x00007ffff74e0104 in QApplication::notify(QObject*, QEvent*) () at /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5
 # #25 0x00007ffff6ec38d8 in QCoreApplication::notifyInternal2(QObject*, QEvent*) (receiver=0x555555b74610, event=event@entry=0x7fffc8002ef0) at kernel/qcoreapplication.cpp:1024
 # #26 0x00007ffff6ec604d in QCoreApplication::sendEvent(QObject*, QEvent*) (event=0x7fffc8002ef0, receiver=<optimized out>) at ../../include/QtCore/../../src/corelib/kernel/qcoreapplication.h:233
 # #27 0x00007ffff6ec604d in QCoreApplicationPrivate::sendPostedEvents(QObject*, int, QThreadData*) (receiver=receiver@entry=0x0, event_type=event_type@entry=0, data=0x55555576fef0) at kernel/qcoreapplication.cpp:1699
 # #28 0x00007ffff6ec65d8 in QCoreApplication::sendPostedEvents(QObject*, int) (receiver=receiver@entry=0x0, event_type=event_type@entry=0) at kernel/qcoreapplication.cpp:1553
 # #29 0x00007ffff6f1d263 in postEventSourceDispatch(GSource*, GSourceFunc, gpointer) (s=0x5555558952a0) at kernel/qeventdispatcher_glib.cpp:276
 # #30 0x00007ffff4221417 in g_main_context_dispatch () at /usr/lib/x86_64-linux-gnu/libglib-2.0.so.0
 # #31 0x00007ffff4221650 in () at /usr/lib/x86_64-linux-gnu/libglib-2.0.so.0
 # #32 0x00007ffff42216dc in g_main_context_iteration () at /usr/lib/x86_64-linux-gnu/libglib-2.0.so.0
 # #33 0x00007ffff6f1c88f in QEventDispatcherGlib::processEvents(QFlags<QEventLoop::ProcessEventsFlag>) (this=0x5555558d2b80, flags=...) at kernel/qeventdispatcher_glib.cpp:423
 # #34 0x00007ffff6ec190a in QEventLoop::exec(QFlags<QEventLoop::ProcessEventsFlag>) (this=this@entry=0x7fffffffcfb0, flags=..., flags@entry=...) at kernel/qeventloop.cpp:212
 # #35 0x00007ffff6eca9b4 in QCoreApplication::exec() () at kernel/qcoreapplication.cpp:1297
 # #36 0x0000555555554cb4 in main ()
{noformat}

And here one from windows
{noformat}
 # Qt5Widgets.dll!QProgressDialog::setValue(int progress) Line 653 C++
 # [Inline Frame] Qt5Core.dll!QtPrivate::QSlotObjectBase::call(QObject *) Line 398 C++
 # Qt5Core.dll!QMetaCallEvent::placeMetaCall(QObject * object) Line 626 C++
 # Qt5Core.dll!QObject::event(QEvent * e) Line 1339 C++
 # Qt5Widgets.dll!QWidget::event(QEvent * event) Line 9094 C++
 # Qt5Widgets.dll!QApplicationPrivate::notify_helper(QObject * receiver, QEvent * e) Line 3687 C++
 # Qt5Widgets.dll!QApplication::notify(QObject * receiver, QEvent * e) Line 3639 C++
 # Qt5Core.dll!QCoreApplication::notifyInternal2(QObject * receiver, QEvent * event) Line 1075 C++
 # [Inline Frame] Qt5Core.dll!QCoreApplication::sendEvent(QObject *) Line 1470 C++
 # Qt5Core.dll!QCoreApplicationPrivate::sendPostedEvents(QObject * receiver, int event_type, QThreadData * data) Line 1815 C++
 # qwindows.dll!QWindowsGuiEventDispatcher::sendPostedEvents() Line 82 C++
 # Qt5Core.dll!QEventDispatcherWin32::processEvents(QFlags<enum QEventLoop::ProcessEventsFlag> flags) Line 525 C++
 # qwindows.dll!QWindowsGuiEventDispatcher::processEvents(QFlags<enum QEventLoop::ProcessEventsFlag> flags) Line 75 C++
 # Qt5Widgets.dll!QProgressDialog::setValue(int progress) Line 663 C++
 # [Inline Frame] Qt5Core.dll!QtPrivate::QSlotObjectBase::call(QObject *) Line 398 C++
 # Qt5Core.dll!QMetaCallEvent::placeMetaCall(QObject * object) Line 626 C++
 # Qt5Core.dll!QObject::event(QEvent * e) Line 1339 C++
 # Qt5Widgets.dll!QWidget::event(QEvent * event) Line 9094 C++
 # Qt5Widgets.dll!QApplicationPrivate::notify_helper(QObject * receiver, QEvent * e) Line 3687 C++
 # Qt5Widgets.dll!QApplication::notify(QObject * receiver, QEvent * e) Line 3639 C++
 # Qt5Core.dll!QCoreApplication::notifyInternal2(QObject * receiver, QEvent * event) Line 1075 C++
 # [Inline Frame] Qt5Core.dll!QCoreApplication::sendEvent(QObject *) Line 1470 C++
 # Qt5Core.dll!QCoreApplicationPrivate::sendPostedEvents(QObject * receiver, int event_type, QThreadData * data) Line 1815 C++
 # qwindows.dll!QWindowsGuiEventDispatcher::sendPostedEvents() Line 82 C++
 # Qt5Core.dll!QEventDispatcherWin32::processEvents(QFlags<enum QEventLoop::ProcessEventsFlag> flags) Line 525 C++
 # qwindows.dll!QWindowsGuiEventDispatcher::processEvents(QFlags<enum QEventLoop::ProcessEventsFlag> flags) Line 75 C++
 # Qt5Widgets.dll!QProgressDialog::setValue(int progress) Line 663 C++
 # [Inline Frame] Qt5Core.dll!QtPrivate::QSlotObjectBase::call(QObject *) Line 398 C++
 # Qt5Core.dll!QMetaCallEvent::placeMetaCall(QObject * object) Line 626 C++
 # Qt5Core.dll!QObject::event(QEvent * e) Line 1339 C++
 # Qt5Widgets.dll!QWidget::event(QEvent * event) Line 9094 C++
 # Qt5Widgets.dll!QApplicationPrivate::notify_helper(QObject * receiver, QEvent * e) Line 3687 C++
 # Qt5Widgets.dll!QApplication::notify(QObject * receiver, QEvent * e) Line 3639 C++
 # Qt5Core.dll!QCoreApplication::notifyInternal2(QObject * receiver, QEvent * event) Line 1075 C++
 # [Inline Frame] Qt5Core.dll!QCoreApplication::sendEvent(QObject *) Line 1470 C++
 # Qt5Core.dll!QCoreApplicationPrivate::sendPostedEvents(QObject * receiver, int event_type, QThreadData * data) Line 1815 C++
 # qwindows.dll!QWindowsGuiEventDispatcher::sendPostedEvents() Line 82 C++
 # Qt5Core.dll!QEventDispatcherWin32::processEvents(QFlags<enum QEventLoop::ProcessEventsFlag> flags) Line 525 C++
 # qwindows.dll!QWindowsGuiEventDispatcher::processEvents(QFlags<enum QEventLoop::ProcessEventsFlag> flags) Line 75 C++
 # Qt5Widgets.dll!QProgressDialog::setValue(int progress) Line 663 C++
 # [Inline Frame] Qt5Core.dll!QtPrivate::QSlotObjectBase::call(QObject *) Line 398 C++
 # Qt5Core.dll!QMetaCallEvent::placeMetaCall(QObject * object) Line 626 C++
 # Qt5Core.dll!QObject::event(QEvent * e) Line 1339 C++
 # Qt5Widgets.dll!QWidget::event(QEvent * event) Line 9094 C++
 # Qt5Widgets.dll!QApplicationPrivate::notify_helper(QObject * receiver, QEvent * e) Line 3687 C++
 # Qt5Widgets.dll!QApplication::notify(QObject * receiver, QEvent * e) Line 3639 C++
 # Qt5Core.dll!QCoreApplication::notifyInternal2(QObject * receiver, QEvent * event) Line 1075 C++
 # [Inline Frame] Qt5Core.dll!QCoreApplication::sendEvent(QObject *) Line 1470 C++
 # Qt5Core.dll!QCoreApplicationPrivate::sendPostedEvents(QObject * receiver, int event_type, QThreadData * data) Line 1815 C++
 # qwindows.dll!QWindowsGuiEventDispatcher::sendPostedEvents() Line 82 C++
 # Qt5Core.dll!QEventDispatcherWin32::processEvents(QFlags<enum QEventLoop::ProcessEventsFlag> flags) Line 525 C++
 # qwindows.dll!QWindowsGuiEventDispatcher::processEvents(QFlags<enum QEventLoop::ProcessEventsFlag> flags) Line 75 C++
 # Qt5Widgets.dll!QProgressDialog::setValue(int progress) Line 663 C++
 # [Inline Frame] Qt5Core.dll!QtPrivate::QSlotObjectBase::call(QObject *) Line 398 C++
 # Qt5Core.dll!QMetaCallEvent::placeMetaCall(QObject * object) Line 626 C++
 # Qt5Core.dll!QObject::event(QEvent * e) Line 1339 C++
 # Qt5Widgets.dll!QWidget::event(QEvent * event) Line 9094 C++
 # Qt5Widgets.dll!QApplicationPrivate::notify_helper(QObject * receiver, QEvent * e) Line 3687 C++
 # Qt5Widgets.dll!QApplication::notify(QObject * receiver, QEvent * e) Line 3639 C++
 # Qt5Core.dll!QCoreApplication::notifyInternal2(QObject * receiver, QEvent * event) Line 1075 C++
 # [Inline Frame] Qt5Core.dll!QCoreApplication::sendEvent(QObject *) Line 1470 C++
 # Qt5Core.dll!QCoreApplicationPrivate::sendPostedEvents(QObject * receiver, int event_type, QThreadData * data) Line 1815 C++
 # qwindows.dll!QWindowsGuiEventDispatcher::sendPostedEvents() Line 82 C++
 # Qt5Core.dll!QEventDispatcherWin32::processEvents(QFlags<enum QEventLoop::ProcessEventsFlag> flags) Line 525 C++
 # qwindows.dll!QWindowsGuiEventDispatcher::processEvents(QFlags<enum QEventLoop::ProcessEventsFlag> flags) Line 75 C++
 # Qt5Widgets.dll!QProgressDialog::setValue(int progress) Line 663 C++
 # [Inline Frame] Qt5Core.dll!QtPrivate::QSlotObjectBase::call(QObject *) Line 398 C++
 # Qt5Core.dll!QMetaCallEvent::placeMetaCall(QObject * object) Line 626 C++
 # Qt5Core.dll!QObject::event(QEvent * e) Line 1339 C++
 # Qt5Widgets.dll!QWidget::event(QEvent * event) Line 9094 C++
 # Qt5Widgets.dll!QApplicationPrivate::notify_helper(QObject * receiver, QEvent * e) Line 3687 C++
 # Qt5Widgets.dll!QApplication::notify(QObject * receiver, QEvent * e) Line 3639 C++
 # Qt5Core.dll!QCoreApplication::notifyInternal2(QObject * receiver, QEvent * event) Line 1075 C++
 # [Inline Frame] Qt5Core.dll!QCoreApplication::sendEvent(QObject *) Line 1470 C++
 # Qt5Core.dll!QCoreApplicationPrivate::sendPostedEvents(QObject * receiver, int event_type, QThreadData * data) Line 1815 C++
 # qwindows.dll!QWindowsGuiEventDispatcher::sendPostedEvents() Line 82 C++
 # Qt5Core.dll!QEventDispatcherWin32::processEvents(QFlags<enum QEventLoop::ProcessEventsFlag> flags) Line 525 C++
 # qwindows.dll!QWindowsGuiEventDispatcher::processEvents(QFlags<enum QEventLoop::ProcessEventsFlag> flags) Line 75 C++
 # Qt5Widgets.dll!QProgressDialog::setValue(int progress) Line 663 C++
 # [Inline Frame] Qt5Core.dll!QtPrivate::QSlotObjectBase::call(QObject *) Line 398 C++
 # Qt5Core.dll!QMetaCallEvent::placeMetaCall(QObject * object) Line 626 C++
 # Qt5Core.dll!QObject::event(QEvent * e) Line 1339 C++
 # Qt5Widgets.dll!QWidget::event(QEvent * event) Line 9094 C++
 # Qt5Widgets.dll!QApplicationPrivate::notify_helper(QObject * receiver, QEvent * e) Line 3687 C++
 # Qt5Widgets.dll!QApplication::notify(QObject * receiver, QEvent * e) Line 3639 C++
 # Qt5Core.dll!QCoreApplication::notifyInternal2(QObject * receiver, QEvent * event) Line 1075 C++
 # [Inline Frame] Qt5Core.dll!QCoreApplication::sendEvent(QObject *) Line 1470 C++
 # Qt5Core.dll!QCoreApplicationPrivate::sendPostedEvents(QObject * receiver, int event_type, QThreadData * data) Line 1815 C++
 # qwindows.dll!QWindowsGuiEventDispatcher::sendPostedEvents() Line 82 C++
 # Qt5Core.dll!QEventDispatcherWin32::processEvents(QFlags<enum QEventLoop::ProcessEventsFlag> flags) Line 525 C++
 # qwindows.dll!QWindowsGuiEventDispatcher::processEvents(QFlags<enum QEventLoop::ProcessEventsFlag> flags) Line 75 C++
 # [Inline Frame] Qt5Core.dll!QEventLoop::processEvents(QFlags<enum QEventLoop::ProcessEventsFlag>) Line 138 C++
 # Qt5Core.dll!QEventLoop::exec(QFlags<enum QEventLoop::ProcessEventsFlag> flags) Line 225 C++
 # Qt5Core.dll!QCoreApplication::exec() Line 1383 C++
 # progress_bar.exe!main(int argc, char * * argv) Line 9 C++
 # [External Code]
{noformat}

I did not put the ones that end up in stack overflow to avoid adding lines because in the two stack examples it can be already seen how the method is invoked recursively.

I have tested this in Windows 10, Visual Studio 16.5.2, MSVC 19.25.28612.0 and Qt 5.14.2 as well as Qt 5.14.1, Qt 5.9.5. Also, I have tried in Ubuntu 18.04, g++ 7.5.0 and Qt 5.9.5.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0nxp3:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"02 Apr '20 11:51;thiago;{{QProgressDialog}} is a GUI class and cannot be updated from a thread.","02 Apr '20 13:17;apalomer;Please reconsider this as an issue. I do not update manually by calling QProgressDialog::setValue directly from the secondary thread, nor I do the connection with the flag Qt::DirectConnection. If you look into the provided project, you will see that the connection is done properly, from the signal emitted in the thread to the slot of the object living in the main thread using the default connection flag.","02 Apr '20 16:04;kiburtse;This small example is actually enough to reproduce stackoverflow:
{code:cpp}
#include <QApplication>
#include <QTimer>
#include <QProgressDialog> 
#include <functional>
int main(int argc, char **argv) {                                                                                                                                                                                                                                                 
    QApplication app(argc, argv);                                                                                                                                                                                                                                                 
    QProgressDialog progress;                                                                                                                                                                                                                                                     
    progress.setWindowModality(Qt::ApplicationModal);                                                                                                                                                                                                                             
    progress.show();                                                                                                                                                                                                                                                              
    progress.setMaximum(999999999);                                                                                                                                                                                                                                               
    std::function<void (int)> l = [&] (int i) -> void {                                                                                                                                                                                                                           
        if (i < progress.maximum())                                                                                                                                                                                                                                               
            QTimer::singleShot(0, [&] () { l(++i); });                                                                                                                                                                                                                            
        progress.setValue(i);                                                                                                                                                                                                                                                     
    };                                                                                                                                                                                                                                                                            
    QTimer::singleShot(0, [&] () { l(0); });                                                                                                                                                                                                                                      
    return app.exec();                                                                                                                                                                                                                                                            
}   
{code}
So basically modal progress dialog is not protected against this kind of situation: when there is new 'setValue' already in a main thread queue before 'processEvents'. Even if fix is implemented  with somehow throttling so frequent updates of the progress, visually it is still not going to be nice, because main thread is just overloaded with events processing. But it shouldn't crash i think. ","02 Apr '20 16:15;thiago;Testcase uses signal, so thread synchronisation looks right.","02 Apr '20 16:20;thiago;Original testcase doesn't compile:
{noformat}
src/fastthreadedworker.cpp:1:10: fatal error: FastThreadedWorker.h: Arquivo ou diretório inexistente
    1 | #include ""FastThreadedWorker.h""
{noformat}

I can reproduce the issue with the reduced testcase.

Not a bug in Qt: {{setValue()}} spins the event loop so it can actually update the progress bar. In doing so, your next event gets delivered and calls {{setValue}} again. The bug is in your code.","02 Apr '20 16:43;apalomer;I have updated the [example|https://github.com/apalomer/progress_bar_crash_overflow_stack] code to fix the compilation error. Now it does compile and it does crash. Please consider fixing this bug. Because as pointed out by [~kiburtse], this should not happen (regardless of it being stupid for updating the progress too fast) and it is, indeed a Qt bug.","22 May '20 10:16;apalomer;Is there any plan on fixing this bug?","22 May '20 15:51;thiago;The bug is in your code. Remove all threads before I can look at it.","22 May '20 15:55;thiago;Now I'm not convinced that you're not even violating threading requirements by accessing a widget outside of the UI thread. Remove the threads .

As I said, {{setValue}} spins the event loop in order to show what changed. That means new cross-thread event deliveries can happen, like calling {{setValue}} again, which leads to infinite recursion. Unfortunately, this cannot be changed. This is a limitation that cannot be changed.

Closing as ""Won't Do"".","23 May '20 09:04;apalomer;I am 100% sure that I am not accessing any UI elements outside of the main UI thread. The thread only emits signals that according to the connect documentation: ""The slot is invoked when control returns to the event loop of the receiver's thread. The slot is executed in the receiver's thread."" The receivers thread is the progress dialog thread, i.e. the main GUI thread. This is clearly a Qt bug/limitation.","23 May '20 15:49;thiago;The second part remains: {{setValue}} spins the event loop to redrawa the new value. That is allowing a new, posted event from your other thread to be processed, calling {{setValue}} again. That leads to stack overflow.

That also can't be fixed. I suggest you introduce a rate-limiter on your sender side to no more than 10 times per second.","29 May '20 14:54;lassoan;Implementing a rate limiter is a good idea - *please implement a rate limiter inside QProgressDialog to solve this issue once and for all*.

It could be certainly implemented outside the dialog, too, but a few reasons why it should be a feature of QProgressDialog:
 * If this random crash only occurs on a user's computer then it may quite hard for developers to even figure out that this is due to a stack overflow in QProgressDialog.
 * If you expect users to implement a solution then you still need to document this common issue in QProgressDialog, describe a recommended solution there, which would be just as much work as adding the recommended solution inside QProgressDialog
 * Even if you document this issue in, users would still come and report this error in the issue tracker and forums, which would keep taking your time to answer.

 ","01 Feb '21 12:59;apalomer;I have tested with the example code provided earlier in this issue that the solution implemented to solve the issue [QTBUG-10561|https://bugreports.qt.io/browse/QTBUG-10561], and released with version 5.15.2, also fixes this one. QTBUG-83265 should in fact be labeled as a duplicate of that one and closed.",,,,,,,,,
Feature request: Add support for new text-input v3 protocol,QTBUG-90537,312055,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,esabraha,ngkz,ngkz,22 Jan '21 05:06,01 Feb '21 09:37,18 Feb '21 09:41,,5.15.2,,,,,,,,,,,,,,,,,,,,,,GUI: Complex Input methods,,,,0,,,,"Due to the lack of text-input-unstable-v3 protocol support, Qt5 applications can't use the Wayland input method on Mutter and Sway.

Please add support for text-input-unstable-v3 protocol."," * Arch Linux (rolling release)
 * Qt 5.15.2
 * Mutter 3.38.3 + Ibus 1.5.23 + ibus-mozc-ut 2.26.4237.102.20201129-1
 * Mutter 3.38.3 + Fcitx5 5.0.4 + fcitx5-mozc-ut 2.26.4237.102.20201129-1
 * Sway with [this patch|https://github.com/swaywm/sway/pull/5890] + Fcitx5 5.0.4 + fcitx5-mozc-ut 2.26.4237.102.20201129-1
 * Sway with [this patch|https://github.com/swaywm/sway/pull/5890] + wlanthy (commit 9ecfb29)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Linux/Wayland,,,,,,"0|i0qdv3:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add default signal parameters in QML,QTBUG-89604,310177,Suggestion,Open,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,qt.team.quick.subscriptions,mmi_puya,mmi_puya,18 Dec '20 19:10,28 Jan '21 16:05,18 Feb '21 09:41,,5.15.2,,,,,,,,,,,,,,,,,,,,,6.x,QML: Declarative and Javascript Engine,,,,0,qmlnext,,,"As of ECMAScript 6 ([ECMA-262|https://tc39.es/ecma262/#sec-function-definitions]), default parameters are supported. However this gives a syntax error as of 5.15.2.

A workaround is to use a function wrapper:
{code:html}
signal mySignal(int x, int y)
function emitMySignal(x, y = 0) {
	mySignal(x, y)
}
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,QTBUG-69097,9223372036854775807,,,All,,,,,,"0|i0q39b:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"04 Jan '21 11:35;ulherman;We should probably allow full typescript syntax for declaring signals. ",,,,,,,,,,,,,,,,,,,,,
Instantiating an object without constructor prints only 'TypeError: Type error',QTBUG-88559,308027,Suggestion,Open,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,qt.team.quick.subscriptions,rweickelt,rweickelt,16 Nov '20 19:30,28 Jan '21 16:01,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,6.x,QML: Declarative and Javascript Engine,,,,0,qmlnext,,,"The following code:
{code:java}
        QJSEngine e;
        QJSValue o = e.newObject();
        e.globalObject().setProperty(QStringLiteral(""Blub""), o);
        QJSValue r = e.evaluate(QStringLiteral(""new Blub()""));
        qWarning() << r.toString();
{code}
prints only: {{Type Error: Type Error}}.

QScriptEngine instead printed: {{'Blub' cannot be instantiated.}}

Would it be possible to print such a nice error message in QJSEngine as well?",,,,,,,,,,,,,,,QBS-913,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,QTBUG-35361,9223372036854775807,,,,,,,,,"0|i0pqs7:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[QtQuick Compiler] Add option to exclude *.qml source files from the resource system.,QTBUG-87676,306380,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,qt.team.quick.subscriptions,tuomas.vaarala,tuomas.vaarala,16 Oct '20 10:37,28 Jan '21 15:59,18 Feb '21 09:41,,5.15.0,5.15.1,6.0.0 Beta1,,,,,,,,,,,,,,,,,,,6.2,QML: Compiler,,,,1,qmlnext,reported_by_support_standard,,"With a change [https://codereview.qt-project.org/c/qt/qtdeclarative/+/271898] it was made that the *.qml and *.js files would always be retained in the resource system.

Some users however would like an option to remove the source files from the resource system when using the QtQuick Compiler to obfuscate the source.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,QTBUG-79331,9223372036854775807,,,,,,,,,"0|i0ph3r:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Enable required keyword for alias properies,QTBUG-86897,305050,Suggestion,Open,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,qt.team.quick.subscriptions,mmi_puya,mmi_puya,24 Sep '20 19:40,28 Jan '21 15:50,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,6.2,Quick: Core Declarative QML ,,,,0,qmlnext,,,"It would be nice to be able to mark an alias property as required:
{code:html}
// MyComponent.qml
Item {
  required property alias displayText: textBox.text
  Text {
    id: textBox
  }
}
{code}

An alternative would be to mark the inner property _required_. But having it on the alias allows us to:
- Only require it for the aliased property
- Have the API documented at the top of the component, so that users don't need to also look at the aliased property to know that it is _required_",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,QTBUG-69097,9223372036854775807,,,,,,,,,"0|i0p9dj:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Feature Request: Option to have required and readonly QML property,QTBUG-85763,302158,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,qt.team.quick.subscriptions,shmittal,shmittal,27 Jul '20 11:51,28 Jan '21 15:50,18 Feb '21 09:41,,5.15.0,,,,,,,,,,,,,,,,,,,,,6.2,Quick: Core Declarative QML ,,,,3,qmlnext,Reported_by_support_standard,,"When you instantiate an object in which the readonly property is required to be set, therein it will be set and subsequently, it cannot be changed.
Whereas the ""required-but-not-readonly"" property must be set in the object in which it is required, but subsequently it can be changed.
And it is this changeability that creates the problem by Qt not allowing the concept of ""required and readonly"" at the same time. It would be great if following is made possible:

{code:java}
required readonly property int itemNumber
{code}

",,,,,,,,,,,,,,,QTBUG-86115,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,QTBUG-69097,9223372036854775807,,,,,,,,,"0|i0otlj:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"10 Aug '20 08:38;grecko;I think the keyword for the property should be {{final}}, such a keyword is used in other languages..

{{readonly}} means that a property isn't modifiable from outside of the component. But it can still be changed from inside with a binding.

final would imply required.","10 Aug '20 09:22;mitch_curtis;That would be a bit confusing with there being a {{FINAL}} Q_PROPERTY attribute though, which has a different meaning.","10 Aug '20 15:04;grecko;Indeed that's a shame. The nearest Q_PROPERTY atribute would be {{CONSTANT}} but it is not as strict.",,,,,,,,,,,,,,,,,,,
Emit a warning when reading non-existing properties,QTBUG-85069,300575,Suggestion,Open,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,qt.team.quick.subscriptions,peppe,peppe,16 Jun '20 10:34,28 Jan '21 15:42,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,6.2,QML: Declarative and Javascript Engine,,,,0,qmlnext,,,"In QML it's perfectly allowed to read from a non-existing property, and that will yield ""undefined"", without emitting any warnings. 

Could it be possible to have pragmas or similar flags that instead make the engine raise a warning? 

Usually it's a silly typo in the code, like {{anchors.top: otherThing.borrom}} that otherwise goes completely undetected.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,QTBUG-69097,9223372036854775807,,,,,,,,,"0|i0okbj:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Selective import statements for QML,QTBUG-84794,300045,Suggestion,Open,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,qt.team.quick.subscriptions,peppe,peppe,08 Jun '20 20:42,28 Jan '21 15:42,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,6.x,QML: Declarative and Javascript Engine,,,,0,qmlnext,,,"A way to reduce the name clashes with multiple imports via a Python-like syntax:

{code}
from QtQuick 2.0 import Rectangle, MouseArea

Rectangle {}  // OK
Item {} // NOT FOUND
MouseArea {} // OK
{code}

{code}
from QtQuick 2.0 as QQ2 import Rectangle

Rectangle {} // NOT FOUND
QQ2.Rectangle {} // OK
QQ2.Item {} // NOT FOUND
{code}

{code}
from QtQuick 2.0 import Rectangle as R, MouseArea as M

Rectangle {} // NOT FOUND
R {} // OK, alias for Rectangle
{code}

And similar variations.

The rationale is minimizing the clashes, just like in other languages.

With the drop of versioned module imports in QML3, either one namespaces everything or we need something like this for long-term big-scale QML projects.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,QTBUG-69097,9223372036854775807,,,,,,,,,"0|i0oh7b:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
qmllint: Add feature to show non-used import in qml files,QTBUG-83237,296534,Suggestion,Open,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,ulherman,papetaja,papetaja,01 Apr '20 14:59,28 Jan '21 15:18,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,6.1,QML: Tooling,,,,3,qmlnext,,,Report imports where nothing is actually used in the qml file. Removing those reduces the time it takes to resolve import dependecies and therefore the load time.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,QTBUG-79331,9223372036854775807,,,,,,,,,"0|i0nxan:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[Qt6] Allow inherited properties to be made private/required/readonly,QTBUG-82663,294769,Suggestion,Open,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,qt.team.quick.subscriptions,adrian.gabureanu,adrian.gabureanu,04 Mar '20 09:36,28 Jan '21 15:17,18 Feb '21 09:41,,6.0,,,,,,,,,,,,,,,,,,,,,6.x,QML: Declarative and Javascript Engine,,,,1,qmlnext,,,"{code:xml|title=Possible Syntax}
component BlueCircle: Rectangle{
 required radius
 private height: 2*radius
 private width: 2*radius
 readonly color: ""blue"" 
}

BlueCircle{
 anchors.centerIn: parent
 radius: parent.height/5
}
{code}

This will provide better encapsulation. Changing the access level of inherited members in a derived class is also supported in C++.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,QTBUG-69097,9223372036854775807,,,,,,,,,"0|i0nomv:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"04 Mar '20 09:45;ulherman;""required radius"" already works.",,,,,,,,,,,,,,,,,,,,,
Provide Component.onPreCompleted attached signal emitted before object completion state,QTBUG-81038,290893,Suggestion,Open,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,qt.team.quick.subscriptions,jpetrell,jpetrell,01 Jan '20 18:06,28 Jan '21 15:04,18 Feb '21 09:41,,5.15,6.0,,,,,,,,,,,,,,,,,,,,6.x,QML: Declarative and Javascript Engine,,,,0,qmlnext,,,"Component's completed signal is emitted after the object has been instantiated and full QML environment has been established. The signal is often used to execute script code when declarative approach isn't suitable for a reason or another. The signal is a bit overloaded since the completed state is also used to execute costly operations inside Qt Quick elements to avoid doing unnecessary intermediate work until all the bindings have been evaluated and the system can be reasonably certain the property value assigned to the objects are close to the wanted configuration.

I haven't looked at Component construction code internals lately, but according the documentation the order of running the onCompleted handlers is undefined so there is no guarantees that the script code defined in onCompleted signal handler will actually execute before the heavy operations. If the script changes object property state (geometry, source to be loaded, text to be layout) there is a risk that heavy operations will get executed twice. Ideally the system would also provide preCompleted signal that would be emitted after full QML environment has been established but just before objects reach the completed state.

Note this is just a suggestion, proper evaluation, possibly profiling would be needed to make sure if the new signal provides value, e.g. the discussed performance benefits. It is also not hard to imagine emitting signals before component completion can cause unforeseen issues.

Didn't found duplicate reports here, but found one forum discussion from 2015 also asking for such a signal, apparently needed for a QML live reload feature https://forum.qt.io/topic/62100/add-another-component-oncompleted-signal/4",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,QTBUG-69097,9223372036854775807,,,All,,,,,,"0|i0n3jb:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"02 Jan '20 09:22;ulherman;All the onCompleted handlers are only executed once, no matter what each one does to the object state. In Qt 6 we are planning to evaluate bindings lazily so that modifying multiple dependencies of the same binding in short order will only trigger one recalculation of the binding. Would that fix your problem?

Otherwise, an example application that demonstrates the problem would be appreciated.","12 Jan '20 19:49;jpetrell;> modifying multiple dependencies of the same binding in short order will only trigger one recalculation of the binding

That is very cool. :) Unfortunately as far as I can understand it does not help in this case, since this does not relate to bindings but to signal handlers..

Regarding code example, here is one contrived code example:
{code:java}
Image {
   source: ""image.png""
   Component.onCompleted: sourceSize.width = 100 // image may have been already loaded, now reload it in specific size
}
{code}
Didn't test if the image is actually loaded twice (also documentation the order is undefined so there are no guarantees the execution order will stay regardless of result), but hopefully you get the idea.

Looking qt Quick library I can see Image loading image source, Text layouting text contents, View elements processing models, positioners positioning child items that cause geometry propagations going further so could create further examples. Note Component.onCompleted attached signal handler may not be on the same objects as the one doing the costly operation.

Multiple properties affect the outcome of the execution, if any of those is set after the element internally reaches component completed state it will potentially cause reloading, re-layouting, re-positioning, etc. In each case if you are in full control of the QML code you can avoid intermediate execution by postponing setting of image source, model reference and text contents only after having fully configured the element on componentCompleted signal handler, but if you are using components from external module that is not always the case. Even if you can work-around the issue it is unfortunate to have to avoid bindings in such cases to force evaluation order.",,,,,,,,,,,,,,,,,,,,
Adding instructions how to run Qt 3D Studio project in Qt Creator.,QTBUG-85042,300506,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,leenam,tero.pelkonen,tero.pelkonen,15 Jun '20 12:17,25 Jan '21 08:53,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Documentation,,,,0,reported_by_support_standard,,,"User contacted Qt support regarding the Qt 3D Studio instructions. He could not find instructions how to import 3D Studio project to Qt Creator. 

[https://doc.qt.io/qt3dstudio/qt3dstudio-index.html] seems to miss this kind of instructions.

Some instructions can be found in:

[https://www.qt.io/blog/2018/05/18/get-started-qt-3d-studio-2-0-beta-1]

but they could be out-dated.

 

Could 3D Studio get similar kind of instructions as Qt Design Studio ""Converting UI Projects to Applications""?

[https://doc.qt.io/qtdesignstudio/quick-converting-ui-projects.html]",,,,,,,,,,QDS-2252,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0ojyn:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"15 Jun '20 13:20;leenam;Would this be the next step, once the project has been exported and imported into Qt Design Studio?","25 Jan '21 08:53;leenam;We now have instructions for exporting a Qt 3D Studio project into Qt Design Studio: [https://doc.qt.io/qtdesignstudio/exporting-from-qt3ds.html]

Do you think we need to show this topic also in the Qt Creator Manual (with possible adjustments)?",,,,,,,,,,,,,,,,,,,,
QThreadPooler should be able to use another threadpool,QTBUG-90536,312054,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,seanharmer,vpicaver,vpicaver,22 Jan '21 05:06,22 Jan '21 19:30,18 Feb '21 09:41,,5.15.2,,,,,,,,,,,,,,,,,,,,,,Qt3D,,,,0,,,,"It's pretty easy to make the rendering completely freeze and be blocked if the global threadpool is being used Qt::Concurrent. For example:
{code:java}
QtConcurrent::map(list, []() { sleep(60); });
{code}
I think the user should be able to specify the thread pool that Qt3D runs on, or make environmental variable for it.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0qduv:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"22 Jan '21 07:41;fabiankosmale;Note that if Qt 6 is an option, QtConcurrent::map can be used with a different thread-pool than the global one.","22 Jan '21 19:30;pschuchardt;In Qt5 series, it fairly easy to patch by just creating a new QThreadPool in the constructor of the QThreadPooler. I have yet to port my code base to Qt6. I'm waiting on QtLocations. ",,,,,,,,,,,,,,,,,,,,
Poor drag performance with QtQuick depending on graphics backend,QTBUG-90406,311769,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,lagocs,greenwolf,greenwolf,19 Jan '21 03:35,19 Jan '21 12:30,18 Feb '21 09:41,,6.0.0,,,,,,,,,,,,,,,,,,,,,,Qt RHI,,,,0,,,,"When launching a simple Qt application (like the Qt Quick gallery) I have very poor graphical performance with D3D11 backend (either on debug or release) when interacting with the mouse.

If I force the opengl backend by setting {{QSG_RHI_BACKEND}} to {{opengl}}, everything is fine.

*With D3D11 backend:*

 
{code:java}
qt.scenegraph.general: Using QRhi with backend D3D11
  graphics API debug/validation layers: 0
  QRhi profiling and debug markers: 0
qt.scenegraph.general: threaded render loop
qt.scenegraph.general: Using sg animation driver
qt.scenegraph.general: Animation Driver: using vsync: 16.67 ms
qt.scenegraph.general: Using sg animation driver
qt.scenegraph.general: Animation Driver: using vsync: 16.67 ms
qt.rhi.general: DXGI 1.2 = true, FLIP_DISCARD swapchain supported = true
qt.rhi.general: Adapter 0: 'NVIDIA GeForce GTX 980' (vendor 0x10DE device 0x13C0 flags 0x0)
qt.rhi.general:   using this adapter
qt.rhi.general: Adapter 1: 'Microsoft Basic Render Driver' (vendor 0x1414 device 0x8C flags 0x2)
qt.scenegraph.general: MSAA sample count for the swapchain is 1. Alpha channel requested = no.
qt.scenegraph.general: rhi texture atlas dimensions: 2048x2048
{code}
*With opengl backend:*

 

 
{code:java}
qt.scenegraph.general: Using QRhi with backend OpenGL
  graphics API debug/validation layers: 0
  QRhi profiling and debug markers: 0
qt.scenegraph.general: threaded render loop
qt.scenegraph.general: Using sg animation driver
qt.scenegraph.general: Animation Driver: using vsync: 16.67 ms
qt.scenegraph.general: Using sg animation driver
qt.scenegraph.general: Animation Driver: using vsync: 16.67 ms
qt.rhi.general: Created OpenGL context QSurfaceFormat(version 4.6, options QFlags<QSurfaceFormat::FormatOption>(DeprecatedFunctions), depthBufferSize 24, redBufferSize 8, greenBufferSize 8, blueBufferSize 8, alphaBufferSize 8, stencilBufferSize 8, samples 0, swapBehavior QSurfaceFormat::DoubleBuffer, swapInterval 1, colorSpace QColorSpace(QColorSpace::SRgb, QColorSpace::Primaries::SRgb, QColorSpace::TransferFunction::SRgb, gamma=2.31), profile  QSurfaceFormat::CompatibilityProfile)
qt.rhi.general: OpenGL VENDOR: NVIDIA Corporation RENDERER: GeForce GTX 980/PCIe/SSE2 VERSION: 4.6.0 NVIDIA 432.00
qt.scenegraph.general: MSAA sample count for the swapchain is 1. Alpha channel requested = no.
qt.scenegraph.general: rhi texture atlas dimensions: 2048x2048
{code}
 

 

All driver are up to date on my machine.

Note that even a very small example has the issue, like this:

 
{noformat}
import QtQuick
import QtQuick.Window

Window {
    width: 640
    height: 480
    visible: true
    title: qsTr(""Hello World"")

    Rectangle {
        width: 25
        height: 25
        color: ""red""

        DragHandler {
            target: parent
        }
    }
}
{noformat}
Moving the rectangle in this simple exemple look smooth with opengl backend, but auwful with D3D11 one, the rectangle is always late, and sometime seems totally fixed for half a second.

The effect is strongger with larger windows.

This issue is particulary diffucult to explain, and I'm trying to record my screen but the process of recording slow the computer and the issue is not visible on the recordings.

I also tryes to profile the application, but both profile looks globally the same (which seems really normal to me):

!image-2021-01-18-22-35-02-690.png!

 

:(

 

 ",,,,,,,,,,,,,,,,,,,"19 Jan '21 03:35;greenwolf;image-2021-01-18-22-35-02-690.png;https://bugreports.qt.io/secure/attachment/104121/image-2021-01-18-22-35-02-690.png",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Windows,,,,,,"0|i0qc9b:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"19 Jan '21 08:56;lagocs;Not sure...in my case (NVIDIA on Windows, release build) OpenGL behaves very close to D3D. Whereas Vulkan gives a markedly better experience with the test application. Running the example with 5.15.1, the behavior is pretty similar there (compared to Qt 6 with D3D/GL), so Qt 6 behaves pretty much like Qt 5 did with its direct, non-QRhi-based OpenGL rendering path.

But that there is such a difference between the three APIs, that is definitely odd indeed.

","19 Jan '21 12:30;greenwolf;Note that it’s not only for drag, typing text is awful too, animation in some case are not smooth...",,,,,,,,,,,,,,,,,,,,
Add option to exclude unused Qt Quick Controls 2 styles from build,QTBUG-86056,302878,Suggestion,Open,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,rampe,morte,morte,14 Aug '20 16:40,19 Jan '21 10:09,18 Feb '21 09:41,,5.15,6.0,,,,,,,,,,,,,,,,,,,,,Build tools: androiddeployqt,Build tools: qmake,Quick: Controls 2,,0,,,,Often only one Qt Quick Controls 2 style plugin is used in application and others only increasing size of package (what is especially critical on mobile platforms e.g. Android). I don't find any ability to include only required style into application package and exclude others.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i03pom:902bzoztrfcf4",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"17 Aug '20 08:10;mitch_curtis;This is already possible with configure flags:

{noformat}
-no-feature-quickcontrols2-default
-no-feature-quickcontrols2-fusion
-no-feature-quickcontrols2-imagine
-no-feature-quickcontrols2-material
-no-feature-quickcontrols2-universal
{noformat}","17 Aug '20 19:04;morte;[~mitch_curtis], This applies only to the case when the Qt is building from source?

I mean ability to exclude unused style plugins when building projects while using prebuilt binaries Qt installation.

Maybe i should exclude ""Build System"" category from bugreport and reopen","18 Aug '20 06:50;mitch_curtis;{quote}
I mean ability to exclude unused style plugins when building projects while using prebuilt binaries Qt installation.
{quote}
I don't see the correlation between building an application and unused styles. Do you mean when deploying your application, there are unwanted styles? In which case this should be for one of the deployment tools (windeployqt, etc.). You can also just remove these files with a script.","18 Aug '20 10:40;morte;[~mitch_curtis], first of all i mean build of Android packages (APK and AAB), i looked at qmake and androiddeployqt options and don't find anything related","18 Aug '20 10:48;mitch_curtis;That is still a deployment step though, which I would consider out of scope for qtquickcontrols2. Looks like we have a tool specifically for Android deployment:

https://doc.qt.io/qt-5/deployment-android.html#androiddeployqt","18 Aug '20 11:25;morte;It's probably should be related to qmake/qbs/cmake as it's not only Android-related thing. ","24 Aug '20 13:11;kkohne;qmake does support ANDROID_DEPLOYMENT_DEPENDENCIES: https://doc.qt.io/qt-5/qmake-variable-reference.html#android-deployment-dependencies . Does that fit your bill?","24 Aug '20 22:57;morte;{quote}qmake does support ANDROID_DEPLOYMENT_DEPENDENCIES: [https://doc.qt.io/qt-5/qmake-variable-reference.html#android-deployment-dependencies] . Does that fit your bill?
{quote}
Not exactly:

i can specify few dependencies which can be safety removed from project build to reduce output package size, but i can't specify full list of dependencies for all Qt modules in project in right order...","25 Aug '20 07:41;mitch_curtis;https://doc.qt.io/qtcreator/creator-developing-android.html#requirements says Gradle is a requirement, so you might be able to use something like this:

https://stackoverflow.com/a/39760001

Or just remove them from the APK directly:

https://stackoverflow.com/a/51822936",,,,,,,,,,,,,
Add Android Debugging symbols to Qt Maintenance Tool,QTBUG-80314,289171,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,assam,xentrax,xentrax,25 Nov '19 14:41,19 Jan '21 10:09,18 Feb '21 09:41,,5.13.2,,,,,,,,,,,,,,,,,,,,,,Other,,,,1,,,,"Libraries like libQt5Core.so, libQt5Gui.so, libQt5Quick.so for Android armv7a
and Android aarch64 are stripped of debug symbols. File names and line number information are not available.

And debug symbols are not provided separately either.

If there is an option to download those, debugging will become much easier, and developers from community will be able to write better bug descriptions. Building Qt for Android is not trivial, especially for Windows users.

Please consider.

 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Android,,,,,,"0|i03pom:902bzoztrfcczzzzti",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"11 Jan '21 10:58;rampe;Dependecy to DA team. Needs talk, to balance benefits vs size and possibility to provide .symbols separately",,,,,,,,,,,,,,,,,,,,,
QML FolderDialog: CurrentFolder is not getting updated correctly,QTBUG-76860,280849,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,qt.team.quick.subscriptions,pderocco,pderocco,02 Jul '19 17:02,18 Jan '21 21:52,18 Feb '21 09:41,,5.14,,,,,,,,,,,,,,,,,,,,,,Quick: Controls 2,,,,2,qtlabsplatform,qtquickcontrols2-desktop,Reported_by_support_standard,"The FolderDialog from Qt.labs.platform 1.1 works with the native Windows dialog box, but has a minor anomaly. If I select a folder name within a folder, so that its name appears in the ""Folder:"" box at the bottom, and then click the accept button, it returns the containing folder, not the one I selected. I have to actually go into that folder and click the accept button. It would perhaps be better if, when clicking the accept button, if there's something in the ""Folder:"" box, setting the folder property to that before emitting the ""accepted"" signal.
It is also expected if 'Folder' is set to “C:/folder1”, and 'currentFolder' to “C:/folder1/folder2”, it is expected to pre-select 'folder2'.
Please refer to the attached sample.
 ",Windows 7,,,,,,,,,,,,,,,,,,"28 Oct '19 15:55;kleint;qtbug76860.qml;https://bugreports.qt.io/secure/attachment/88619/qtbug76860.qml","29 Jan '20 13:58;shmittal;qtbug76860.zip;https://bugreports.qt.io/secure/attachment/91613/qtbug76860.zip",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Windows,,,,,,"0|i0limn:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"06 Oct '19 07:40;antar;This also happens on OSX if you use List view (that shows tree style folder structure).

I've looked at the attached change, and it should fix it on OSX too - since QtQuick.Dialogs' FileDialog behaves correctly. FileDialog in QtQuick.Dialogs seems a good alternate till this is fixed for Mac / Win if you set selectFolder: true.","07 Oct '19 10:43;mitch_curtis;Do you know of any native examples of a folder dialog in Windows? I'm struggling to think of one that I can use to verify this with...","07 Oct '19 11:04;florianrichter;I only found the example code snippets i[n the documentatio|https://doc.qt.io/qt-5/qml-qt-labs-platform-folderdialog.html]n and an example for the [FileDialog|https://code.qt.io/cgit/qt/qtquickcontrols.git/tree/examples/quickcontrols/dialogs/systemdialogs?h=5.13].","18 Jan '21 21:39;aamann;One example of a native folder dialog in Windows is accessible via the ""Extract All…"" context menu entry for a ZIP file.

Using the ""Browse"" button in the dialog brings up a folder dialog and highlighting a folder before selecting ""Choose Folder"" populates the selected folder (rather than its parent) back into the dialog.",,,,,,,,,,,,,,,,,,
TODOs and brainstorming for QRhi and Qt Quick,QTBUG-78640,285326,Suggestion,Open,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,lagocs,lagocs,lagocs,20 Sep '19 13:18,18 Jan '21 14:46,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,Some future release,Qt RHI,,,,0,,,,"*A collection of research, brainstorming, and smaller todo items in no particular order*
 * Better compressed texture story: Think about integrating [https://github.com/BinomialLLC/basis_universal] on the proper level. The latter is important, this cannot be thrown in in random places in the Qt and tooling stack, hence listing it here. Perhaps to be integrated with the QRhi API, so that it is Qt-wide common solution, usable by Qt Quick, 3D and others as well. There's an example at [https://github.com/alpqr/qrhibasis]

 * rhi: WebGPU backend (for Qt wasm). Once Emscripten gains WebGPU support, it should be possible to bring up a QRhi backend that renders via WebGPU. This would assume a WebGPU implementation on the browser side with SPIR-V support. (e.g. Chrome) - the new shading language developed alongside WebGPU (WHLSL) is out of scope for the foreseeable future. Track [https://github.com/emscripten-core/emscripten/issues/9575] for Emscripten progress.

 * Think about a future compute-based particle engine covering both 2D and 3D. Not as a replacement for the existing ParticleSystem/ImageParticle in Quick, but as a modern alternative, perhaps with a different feature set.

 * think about multiple command buffers. Relevant really only when worker threads are involved to offload the heavy CPU work needed to generate a CB (but what is that heavy CPU work in Qt 2D/3D context?). Queues and resource hazard stuff will not be exposed in the QRhi API, but building and submitting multiple command buffers (i.e. build one or more additional CBs on separate threads, then submit them to the same queue, with appropriate sync primitives on the main CB to wait where needed). TBD.

 * rhi: d3d backends: use dxc and new compiler APIs? (no point for d3d11? how relevant for d3d12? (esp. if we only care about vertex/fragment/compute))

 * Conclude if we can live without push constants. (we only support uniform buffers with QRhi, even though some backends (Vulkan, OpenGL?) could offer another (limited) form of sending data to the shader - no option for D3D11 and Metal, however)

 * Conclude if never using uniform buffers in the OpenGL backend is suitable for all users, including Quick 3D. (The GL backend decomposes uniform buffer data into individual uniforms. We never generate true uniform blocks in the SPIRV-Cross generated GLSL shaders, since for Qt Quick & co. this is not worth it. But think of other clients, e.g. Quick 3D with a larger amount of light data)

 * Vulkan backend: staging for immut/static buffers should be persistently mapped too?

 * Metal backend: should pipeline objects and such be deferred-released too?

 * storage buffer bind-range alignment? (check, perhaps just needs documenting it's same as ubuf?)

 * make some warnings/errors nicer (e.g. print backend name when failed to create)

 * improve QRhi internal docs about barriers: add a note about barriers to beginPass and beginComputePass at least. Check the general section too.

 * do we need a waitIdle (or similar) in the renderloop before cleaning up nodes? (but watch out for deviceLost flag)

 * OpenGL backend: sRGB textures, what's the story there, what's missing. May not map well to what we've been implementing for the other backends. Note separate task for HDR in colorspace in general. This is just feature parity in OpenGL backend vs. the other three.

 * storage buffers with dynamic offset (add it to api, and all backends vk, mtl, d3d, gl)

 * replace some Q_UNREACHABLE with Q_ASSERT_X? - check if we are following the right pattern here

 * utilize recently added bgr888 QImage format in some form? Perhaps not very relevant for now.

 * rhi: investigation: consider some form of limited threading for copy ops in particular? to help glTexImage on bad/slow systems? (but cross api this is difficult and may make no sense for non-GL anyway) - probably not

 * Investigate if number of allocations performed while filling up a QRhiResourceUpdateBatch could be reduced: [https://codereview.qt-project.org/c/qt/qtbase/+/275432] shows an approach to remove the individual QByteArray data; members from individual DynamicBufferUpdate items inside a resource update batch. Rather, a single, batch-level QByteArray is used there, with the individual update descriptions only storing on offset inside the ""pool"". This still allocates/resizes of course, but the there is fewer allocations overall. Or figure out something else. It could be that the improvements may (also) come from changes on the client side (i.e. the Qt Quick renderer) instead of or in addition to the QRhi API.--

 * d3d11: Make slot reset logic smarter? resetShaderResources could be made more optimal by avoiding resetting slots that will have something bound to them in the pass.

 * QRhi OpenGL/Vulkan backend: consider if dynamic buffers should follow the MAP_DISCARD style approach like d3d11. Dynamic QRhiBuffer updates map to a glBufferSubData with gl, while with Vulkan they are each a memcopy to a (persistently mapped) host visible, maybe host coherent, but maybe uncached, memory area. Consider if we should switch to what the d3d11 backend does for QRhiBuffer::Dynamic: keep a copy of the full buffer data on CPU side, then map with MAP_DISCARD and always copy the full contents regardless of the changed region). This in fact is closer to what the scenegraph does on the direct OpenGL code path, although there it is at the mercy of what glBufferData does internally, but the important part is that it also avoids the partial glBufferSubData (or map/memcpy/unmap). The same would be true for the gl backend of QRhi then (it would do a full glBufferData instead of subData) But then, it should be considered if the gl backend should employ double buffering (i.e. keep two native buffers per QRhiBuffer etc.) since we do not have a true MAP_DISCARD style solution in ES 2.0. May not be worth it though. Note that any change to the Vulkan approach must be retested on a mobile/embedded device due to the different characteristics - for instance the fact that we benefit greatly from persistent mapping was only found out when running on the Shield TV (Tegra X1, Android). Regressions must be avoided. Dropped the priority since this is not the cause of the huge difference between d3d11 and vulkan/gl. An experiment for the gl backend is at [https://codereview.qt-project.org/c/qt/qtbase/+/275687] with no real improvements.

 * Long term physical device / adapter selection story. Physical device (Vulkan terminology) or adapter (D3D/DXGI terminology) selection where applicable: what do we want to support? Currently we do have env.vars. like QT_D3D_ADAPTER_INDEX and QT_VK_PHYSICAL_DEVICE_INDEX. Should there be something less backend specific and more general? We have to be careful with introducing full-blown adapter enumeration and management APIs, however. Think about what a simple, compact API would look like. Metal: do we care about choosing between MTLDevices, or just using the ""system default"" is enough? (do not have any hardware with multiple GPUs, cannot investigate) Do we need to monitor the device list on Metal? Only relevant on macOS with external GPUs (disconnect at runtime - apps relying on that GPU are quit/restarted by default by the OS, I think, perhaps that good enough?) Cannot test, no hardware available.

 * May need an API on QQuickWindow or elsewhere to indicate that external native rendering will be used (overlay, underlay, rendernode, ...) ExternalContentsInPass is a beginFrame() flag in QRhi, but we cannot guess this in Qt Quick, and therefore we either set it always or never. For now we assume yes always, even though this is not ideal strictly speaking since it triggers secondary command buffer usage for all Qt Quick apps when running on Vulkan, including those that do not integrate their own custom rendering, which is harmless, but is still extra work at run time. The case itself is not necessarily that interesting, but how we handle it should define a pattern for possible future cases that are similar to this one. With some of the underlying graphics APIs leaning heavily towards declaring everything (how a resource is used etc.) up front we cannot guarantee that similar flags will not be introduced later on.

*QRhiProfiler*
 - Investigate how to use some of the data we can collect in combination with the QML profiler
 - Should the QRhiProfiler integration (opt-in via env var) be disabled completely in Qt Quick?
 - buffer memtype to qrhiprofiler
 - rhiprofiler disconnect when device destroyed?
 - what if no event loop because on render thread?
 - rhiprof what if multiple windows so multiple QRhis? -> broken atm

*QRhi renderpass load/store configurability brain dump*

Some potential use cases have been brought up both from Qt Quick 3D and Qt 3D side that are not necessarily well-supported with the current model of having pre-defined load/store settings, with the only configurability being via QRhiTextureRenderTarget's PreserveColor and similar flags.

Think depth pre-pass in a separate renderpass (depth needs to be written out, cannot be DONT_CARE), or any special case when someone absolutely has to do an additional pass targeting the swapchain without clearing the content from the previous pass in the same frame.

We do not (and probably never will) support Vulkan subpasses (esp. since it has little applicability to other APIs), but rather some sort of configurability could be introduced via flags passed to beginPass() for instance. (but this would come with complications inside some backends, in particular, Vulkan)

There are some issues with this however, due to the graphics pipeline being dependent on the renderpass descriptor (in Vulkan at least). So just having plain flags for beginPass() is not sufficient. (that's why QRhiRenderPassDescriptor exists in the first place, but that's always created from a QRhiRenderTarget atm, not just out of nowhere)

For what it's worth, WebGPU (the high-level API that is closest to QRhi in spirit when it comes to vision and goals) seems to also follow a configure-on-renderpass-start approach ([https://gpuweb.github.io/gpuweb/#ref-for-dictdef-gpurenderpassdescriptor] ) (on the other hand I cannot seem to find where a GPURenderPipeline is associated with a GPURenderPassDescriptor - presumably it is left to the implementations to juggle with the native resources under the hood?)

However:

it is not clear we really want this. As long as one can record everything in one single pass (e.g. a simple depth pre-pass does not need to be a separate renderpass), the additional complexity that would be added here is basically not worth it.

For getting the depth buffer out of some renderpass - something that may be needed for Quick3D custom materials and effects - one can use a depthTexture in the QRhiTextureRenderTargetDescription instead of depthStencilBuffer, which will implicitly enable writing depth out.

Also, the way Qt Quick 3D integrates with Qt Quick in overlay/underlay mode is by definition incompatible with additional renderpasses on the main render target (the swapchain for the window) (in the 'render' phase, that is, one could do anything in the 'prepare' phase of course, but that's all cleared away when Qt Quick scenegraph issues the main beginPass()). Therefore relying on multiple renderpasses onto the main target is out question, so not sure if there is a use case for having non-default attachment load/store settings.

Needs some more thinking.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0m7iv:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add support for session management,QTBUG-89917,310921,Suggestion,Open,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,lpotter,andysh,andysh,08 Jan '21 09:12,18 Jan '21 01:22,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Other,,,,1,Reported_by_support_standard,,,"Add support for session management or at least add a means to prevent QCoreApplication::quit() being called inside the onbeforeunload() handler.

Currently, what is expected is that when the browser window is closed that there is a chance to save any unsaved documents etc before the application closes, currently this is not possible to catch because it will call quit() and there is no way to stop it from closing should there be need to. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,WebAssembly,,,,,,"0|i0q79j:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"08 Jan '21 10:59;cajus;Besides to ""just save documents"", there's the possibility to let the browser ask for user feedback by returning a non nullptr. I.e.

 
{code:java}
emscripten_set_beforeunload_callback(0, [](int, const void*, void*) -> const char* {
  if (PageHelper::instance().modified()) {
    return ""modified"";
  }
  QCoreApplication::quit();
  return nullptr;
});
{code}
 ","15 Jan '21 02:27;lpotter;Does this change help with this?

https://codereview.qt-project.org/c/qt/qtbase/+/280228","15 Jan '21 06:33;cajus;That does more or less what I'm doing currently - removing the onbeforeunload listener ;) So yes - it helps.","18 Jan '21 01:22;lpotter;At any rate, QPlatformSessionManager needs to be implemented.",,,,,,,,,,,,,,,,,,
Allow handling of tablet events in QQuickItem,QTBUG-84641,299727,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,qt.team.quick.subscriptions,daljit97,daljit97,02 Jun '20 16:37,14 Jan '21 09:49,18 Feb '21 09:41,,5.14.2,5.15.0,,,,,,,,,,,,,,,,,,,,,Quick: Mouse Touch and Tablet input,,,,0,,,,"Currently it's not possible to handle table events directly in `QQuickPaintedItem` and `QQuickItem`. Only mouse events can be handled. I can see that in Qt 5.15 tablets event were added to the new Pointer handlers APIs. It'd be really use to be able to override `tabletEvent(QTabletEvent* event)` in `QQuickItem`, just like it is possible to do in `QQuickWindow`.",,,,,,,,,,QTBUG-84775,QTBUG-90296,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Linux/X11,Windows,,,,,"0|i0ofb3:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Simplified graphics backend detection for QML object's,QTBUG-90043,311208,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,adam.pietrzak,wojblas,adam.pietrzak,13 Jan '21 05:50,13 Jan '21 05:57,18 Feb '21 09:41,,5.15,,,,,,,,,,,,,,,,,,,,,,Quick: 3D,,,,0,android_nonvisual_crossfunctionality_bug,CandidateForScale,,"The graphics backend detection (OpenGL, OpenGLES, Vulkan, etc.) could be handled in a more convenient way.
 Currently there is a need to discover of available driver on native (C++ side), then {{QSurfaceFormat}} needs to be specified and set as default, after that sequence of instructions {{GraphicsInfo.renderableType}} can be used in QML Object's {{onComplete}} handler. It would be better to have such information available in QML without need of additional setup in C++.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,Android,,,,,"0|i0q8zr:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
QML Drag.startDrag() does not work at all on EGLFS,QTBUG-87765,306594,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,lagocs,michaelwinkelmann,michaelwinkelmann,21 Oct '20 15:47,11 Jan '21 15:23,18 Feb '21 09:41,,5.12.9,5.15.1,,,,,,,,,,,,,,,,,,,,,QPA: EGLFS,Quick: Other,,,0,Reported_by_support_standard,,,"Calling Drag.startDrag [(https://doc.qt.io/qt-5/qml-qtquick-drag.html#startDrag-method) |https://doc.qt.io/qt-5/qml-qtquick-drag.html#startDrag-method]

always crashes on EGLFS because it is attempted to create a QRasterWindow which is not possible on EGLFS platform. Hence, the app says goodbye with ""EGLFS: OpenGL windows cannot be mixed with others."" Backtrace is attached.

The QRasterWindow is used for the Drag icon, but even if I do not have a drag icon and the pixmap of the raster window is empty, the window will be created (there is a TODO in gui/kernel/qsimpledrag.cpp // ### TODO Check if its really necessary to have m_drag_icon_window
 // when QDrag is used without a pixmap - QDrag::setPixmap())

I am working on a customer project where they have parametrise machine settings via Drag and Drag and it stops them from getting the machines to be delivered.
However, I have a workaround for the specific customer in place: You need to apply the attached patch to qtbase and use the DragImageItem, a QQuickPaintedItem which I wrote to have a replacement for the drag icon. Note that the patch is just a workaround for the customer, a real fix for Qt it is not that trivial since the raster window needs to be replaced with an OpenGL surface.

 ",,,,,,,,,,,,,,,,,,,"21 Oct '20 15:44;michaelwinkelmann;0001-QBasicDrag-Only-create-QShapedPixmapWindow-when-drag.patch;https://bugreports.qt.io/secure/attachment/99423/0001-QBasicDrag-Only-create-QShapedPixmapWindow-when-drag.patch","21 Oct '20 15:43;michaelwinkelmann;application-output__prc7hmi_svn_rev_544___crash_on_drag_and_drop_fahrsatz.txt;https://bugreports.qt.io/secure/attachment/99424/application-output__prc7hmi_svn_rev_544___crash_on_drag_and_drop_fahrsatz.txt","21 Oct '20 15:43;michaelwinkelmann;backtrace__prc7hmi_svn_rev_544___crash_on_drag_and_drop_fahrsatz.txt;https://bugreports.qt.io/secure/attachment/99425/backtrace__prc7hmi_svn_rev_544___crash_on_drag_and_drop_fahrsatz.txt","21 Oct '20 15:46;michaelwinkelmann;dragimageitem.cpp;https://bugreports.qt.io/secure/attachment/99422/dragimageitem.cpp","21 Oct '20 15:46;michaelwinkelmann;dragimageitem.h;https://bugreports.qt.io/secure/attachment/99421/dragimageitem.h","26 Oct '20 09:56;michaelwinkelmann;dragndrop_bug.zip;https://bugreports.qt.io/secure/attachment/99604/dragndrop_bug.zip","28 Oct '20 14:12;michaelwinkelmann;dragndrop_bug_internal_drag.zip;https://bugreports.qt.io/secure/attachment/99679/dragndrop_bug_internal_drag.zip",,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Linux/Yocto,,,,,,"0|i0picv:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"21 Oct '20 17:13;thiago;Nothing related to {{QtCore}}.","22 Oct '20 16:34;michaelwinkelmann;I can confirm that it is not only startDrag() that doesnt work, setting ""item.Drag.active = true"", is enough.

{{#2 0x00007ffff6325f6c in QMessageLogger::fatal(char const*, ...) const () from /home/miwinkel/Qt/5.12.7/gcc_64/lib/libQt5Core.so.5}}
{{#3 0x00007ffff281f586 in QEglFSWindow::create() () from /home/miwinkel/Qt/5.12.7/gcc_64/plugins/platforms/../../lib/libQt5EglFSDeviceIntegration.so.5}}
{{#4 0x00007ffff2824e57 in QEglFSIntegration::createPlatformWindow(QWindow*) const ()}}
{{ from /home/miwinkel/Qt/5.12.7/gcc_64/plugins/platforms/../../lib/libQt5EglFSDeviceIntegration.so.5}}
{{#5 0x00007ffff723a2a6 in QWindowPrivate::create(bool, unsigned long long) () from /home/miwinkel/Qt/5.12.7/gcc_64/lib/libQt5Gui.so.5}}
{{#6 0x00007ffff723b982 in QWindowPrivate::setVisible(bool) () from /home/miwinkel/Qt/5.12.7/gcc_64/lib/libQt5Gui.so.5}}
{{#7 0x00007ffff726b828 in QBasicDrag::recreateShapedPixmapWindow(QScreen*, QPoint const&) () from /home/miwinkel/Qt/5.12.7/gcc_64/lib/libQt5Gui.so.5}}
{{#8 0x00007ffff726b88e in QBasicDrag::startDrag() () from /home/miwinkel/Qt/5.12.7/gcc_64/lib/libQt5Gui.so.5}}
{{#9 0x00007ffff726ba78 in QSimpleDrag::startDrag() () from /home/miwinkel/Qt/5.12.7/gcc_64/lib/libQt5Gui.so.5}}
{{#10 0x00007ffff726a80e in QBasicDrag::drag(QDrag*) () from /home/miwinkel/Qt/5.12.7/gcc_64/lib/libQt5Gui.so.5}}
{{#11 0x00007ffff7268621 in QDragManager::drag(QDrag*) () from /home/miwinkel/Qt/5.12.7/gcc_64/lib/libQt5Gui.so.5}}
{{#12 0x00007ffff726891c in QDrag::exec(QFlags<Qt::DropAction>, Qt::DropAction) () from /home/miwinkel/Qt/5.12.7/gcc_64/lib/libQt5Gui.so.5}}
{{#13 0x00007ffff7bdd642 in QQuickDragAttachedPrivate::startDrag(QFlags<Qt::DropAction>) () from /home/miwinkel/Qt/5.12.7/gcc_64/lib/libQt5Quick.so.5}}
{{#14 0x00007ffff7bdd976 in QQuickDragAttached::setActive(bool) () from /home/miwinkel/Qt/5.12.7/gcc_64/lib/libQt5Quick.so.5}}","23 Oct '20 10:44;michaelwinkelmann;Instantiating a QDrag from C++ directly and calling exec() leads to the same error.","23 Oct '20 10:48;michaelwinkelmann;The build-in dragndrop examples work on the target platform, because startDrag() is not involved there.

I can try to provide a minimal example.","23 Oct '20 14:00;srutledg;The FS in EGLFS stands for ""fullscreen"": i.e. usually the application has one full-screen window.  So I'm not surprised if nobody thought of using DnD there before.  Do you really have multiple windows and the possibility to drag content between them?  

In Qt Quick, it's also possible to drag and drop items within one window, without depending on the window-system drag-and-drop mechanism.  See the examples for that.","26 Oct '20 10:00;michaelwinkelmann;Qt stands for ""One framework. One codebase. Any platform."" The same code is supposed to work on Windows as well as on EGLFS. It should be at least documented that QML Drag does not work completely on EGLFS since the regular user does not assume that there is window compositing involved when using it. It  Sorry. we had better excuses for closing bugs in the past ;)

I attached the example. Show me how to do it without using startDrag() or drag.active = true
Oh, and when I use a MouseArea for the ListDelegates, I can't scroll through the list anymore because the MouseArea swallows all events. Thats why I used a TapHandler and onTapped() \{ drag.active = true; }","27 Oct '20 12:11;lagocs;This could not possibly ever worked, so it hardly justifies a P1 bug. (more like a new feature suggestion) The docs could be improved indeed. Other than that, a platform without a windowing system will often be unable to run your desktop designs as-is, there will always be compromises - and sometimes alternative approaches - needed here and there.

As you are working within a single fullscreen QQuickWindow, there should be other, more efficient ways to implement dragging, like Shawn says. (i.e. implement something within the Qt Quick scene, without relying on QDrag and magic native windows)
","28 Oct '20 14:12;michaelwinkelmann;Okay, I found a workaround that uses the internal drag and it doesn't require a patched Qt.
However, that ""something within the Qt Quick scene"" turned out to be a trial-and-error meandering and is anything else than intuitive. After some help from my PS colleagues, here is my final solution:

1) The draggable items are ItemDelegates within a list view and need to be moved outside onto a DropArea. The solution didn't work with a TapHandler and only with MouseArea drag mechanism.
2) The attached ""Drag"" property needs to attached to an internal icon item, which is only visible when the drag is active. This icon item acts as the drag item whilst the original item delegate is still at its original position.
3) The problem here is that the icon item is inside the ListView and is hence not visible outside the listview's boundaries and has the wrong Z-level. This means that the item must be reparented to a top-level item.
4) To reparent the item we need to introduce two states to the icon item whhich involve a ParentChange. But two which top-level item it needs to be reparented?
5) We need to find the content item of the window. I could not find a way in QML how to do that, so I implemented a QObject ""DragDataProvider"" singleton that is registered in the QML engine that provides a QQuickItem* as root item. When the window component is completed, the root item is set to the windows content item: Component.onComplement: \{ DragDataProvider.rootItem = window.contentItem; }
Now we can reparent to the right item.
6) Now the next problem occurs: We need to set the icon item to the cursor position. Thus, we need to extend the DragDataProvider so it contains the global cursor position in root item coordinates as property. We install an event filter to find out all mouse move/drag move events and retrieve the cursor position accordingly. Now, we can set the icon position from the cursor position property of our DragDataProvider.
7) Because the draggable item are ItemDelegates of a listview and when a MouseArea is used, I cannot scroll through the ListView anymore because the MouseArea eats up all mouse events. This does not happen when using a TapHandler.
8) I tried to circumevent this problem by limiting the drag axis to YAxis, but then of course I cannot move the item to an arbitrary position. The UX friendly solution was to put a singleshot Timer into the mouse area with an interval of 150ms. The timer is started in the onPressed signal handler of the MouseArea. As long as the timer is running, no dragging of the icon is not possible, because the drag target is null: drag.target: dragTimer.running ? null : icon No, I can both scroll with a swipe gesturn through the listviews and drag the items.
9) I had to adapt the keys of the DropArea, because mimetypes are not working as expected when using the internal drag mechanism.

 

The updated example is attached.",,,,,,,,,,,,,,
qmllint: warning level support,QTBUG-83804,297783,Suggestion,Open,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,max.goldstein,jacek.nijaki,jacek.nijaki,27 Apr '20 11:36,11 Jan '21 10:00,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,QML: Tooling,,,,0,,,,"When using `-U` switch output produced contains both critical and non-critical problems, e.g. unqualified references to parent scope (which are working fine) are mixed with reports of whole missing components (which will crash at runtime)

There should be some severity switch (warning level) or switches for individual type of problems to be reported available. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0o4qn:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"27 Apr '20 11:54;ulherman;I agree that there should be more fine grained output categories. However, unqualified references are not benign. They are the most important thing that works in dynamic QML, but in the general case, doesn't work in strict or static QML. I know that QUL implements unqualified references for some specific cases, but it really shouldn't. ""False"" positives there should be taken seriously.

Furthermore, qmllint should actually output all warnings by default. The command line options should switch off warnings, rather than switch them on.",,,,,,,,,,,,,,,,,,,,,
Screen hotplug support,QTBUG-89944,310959,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,lagocs,lagocs,lagocs,08 Jan '21 16:06,09 Jan '21 15:13,18 Feb '21 09:41,,5.15.0,6.0,,,,,,,,,,,,,,,,,,,,,QPA: EGLFS,,,,1,,,,"Connecting or disconnecting a screen at runtime with backends like eglfs_kms have no effect since we are not prepared to handle this. Ideally some support should be introduced, at least for the eglfs_kms backend.
",,,,,,,,,,,,,,,QTBUG-89787,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0q7hz:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"09 Jan '21 15:13;vladimir_sazonov;It might not necessarily be a signal. It can be just a method, after calling which, the list of screens is updated. Now, to update the list of screens, you have to re-create the QGuiApplication object. This will help detect display connection before creating the QML engine object.",,,,,,,,,,,,,,,,,,,,,
Qt Quick 3D Materials and Textures can't be created dynamically,QTBUG-89712,310493,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,janichol,alexey89,alexey89,28 Dec '20 13:12,08 Jan '21 10:08,18 Feb '21 09:41,,6.0.0,,,,,,,,,,,,,,,,,,,,,6.2,Quick: 3D,,,,0,,,,"To load 3D models from c++ it is required to have the possibility to create dynamic amount of materials and textures. Different parts of models can use equal materials and different materials can use equal textures, but at the moment there is no way to create them dynamically and share. As they have to be hardcoded, multuple instances of equal textures and Materials are created which leads to overhead in memory usage and long loading time.

 
{code:java}
    Repeater (or Repeater3D)
    {
        id: repeater
        model: model
        delegate: CustomMaterial {}
    }
    Repeater (or Repeater3D)
    {
        id: repeater 
        model: model
        delegate: Texture {}
    }
    Repeater (or Repeater3D)
    {
        id: repeater
        model: model
        delegate: TextureInput {}
    }
{code}
Errors:

QML Component: Delegate must be of Item type

QML Component: Delegate must be of Node type 

 

Would be nice to add this possibility and assign textures from repeater this way:  
{code:java}
CustomMaterial
{
    property TextureInput normalmaptex: TextureInput {
        enabled: true
        texture: repeater.itemAt(0) 
        texture: repeater.children[0] // or this way 
    }
}{code}
Another problem is that one model part can have hundreds of materials assigned, to cover all of them hundreds of CustomMaterial items should be hurdcoded.

 

UPD I found a way to get over this problem. The problem can be soved by wrapping Texture and CustomMaterial into an Item and the item can be used with Repeater. It has a small overhead but works the expected way.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Windows,,,,,,"0|i0q51j:",9223372036854775807,9223372036854775807,,,,,,,,,,,,5.0,,,,,,,,,,,,,,,,,,,,,,,
Add support for similar shader cache APIs as in ogl-runtime,QTBUG-88685,308263,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,janichol,tokorpip,tokorpip,20 Nov '20 11:22,08 Jan '21 10:03,18 Feb '21 09:41,,5.15,,,,,,,,,,,,,,,,,,,,,5.15,Quick: 3D,,,,0,,,,"Add support for shader cache API that supports bytearrays similar to ogl-runtime, i.e.
{code:java}
void exportShaderCache(QByteArray &cacheData, bool binaryShaders);
void exportShaderCache(QByteArray &cacheData, bool binaryShaders, int compressionLevel);
void setShaderCacheData(const QByteArray &shaderCache);
{code}
Also add support for exporting the cache at any point (similar to https://bugreports.qt.io/browse/QT3DS-4145).",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0ps6n:",9223372036854775807,9223372036854775807,,,,,,,,,,,,3.0,,,,,,,,,,,,,,,,,,,,,,,
Add attribute to define material indexes for triangles in QQuick3DGeometry,QTBUG-89759,310590,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,janichol,alexey89,alexey89,02 Jan '21 12:59,08 Jan '21 09:42,18 Feb '21 09:41,,6.0.0,,,,,,,,,,,,,,,,,,,,,,Quick: 3D,,,,0,,,,"Using mesh model it is possible to have different textures assigned to different parts of model this way:
{code:java}
Model {
    source: ""qrc:/meshes/distortedcube.mesh""
    //geometry: MeshData
    
    PrincipledMaterial {
        id: frontTop_material
        baseColor: ""red""
        cullMode: Material.NoCulling
        lighting: PrincipledMaterial.NoLighting
    }

    PrincipledMaterial {
        id: frontBottom_material
        baseColor: ""green""
        cullMode: Material.NoCulling
        lighting: PrincipledMaterial.NoLighting
    }

    materials: [
        frontTop_material,
        frontBottom_material
    ]
}
{code}
One part (submesh) of the model is painted with frontTop_material and for the other frontBottom_material is used.

If a model is loaded via QQuick3DGeometry, it is not possible to set which material should be used for each triangle. There is no attribute wich could be used to define material index and the first material from the list is always used for all triangles.

To solve this problem the model can be split into several models, but it's not very handy and a better solution would be to add another attribute which can be used to specify the material index.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Windows,,,,,,"0|i0q5jr:",9223372036854775807,9223372036854775807,,,,,,,,,,,,5.0,,,,,,,,,,,,,,,,,,,,,,,
Qt Online Installer could provide option to build additional libraries,QTBUG-89724,310528,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,releaseteam,tero.pelkonen,tero.pelkonen,29 Dec '20 12:40,07 Jan '21 10:26,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Packaging & Installer,,,,0,reported_by_support_standard,,,"Qt online installers Additional libraries description says:

""

These additional libraries are distributed in source code using conan.io package manager. Binary is built locally by the user for the supported Qt versions and platforms.

""

Could there be an additional option that would do the build for the user?",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0q56f:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"07 Jan '21 06:05;iknd;The online installer is not a tool to build the modules for n...1 targets, where as e.g. QtCreator is.

The online installer does not setup all possible toolchains or compilers the user might need to build the given module(s) for all the needed targets.
E.g. Android SDK/NDK or xcode need to be installed by the user beforehand.

To make the life easier for end users there are plans for build helpers in QtCreator (Conan integration) IIRC, [~con] ?","07 Jan '21 10:26;kkohne;Qt Creator will support Conan as part of a project configuration: https://bugreports.qt.io/browse/QTCREATORBUG-21785 . You can then add a dependency to a module to it, and it will be compiled as part of your project build.",,,,,,,,,,,,,,,,,,,,
Invalid assumption (and assertion) in QLineF::setLength,QTBUG-89010,308849,Suggestion,Open,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,vgt,aclight,aclight,30 Nov '20 16:38,07 Jan '21 10:23,18 Feb '21 09:41,,5.12.10,5.15,,,,,,,,,,,,,,,,,,,,,GUI: Painting,,,,3,,,,"[https://codereview.qt-project.org/q/I7b71d66b872ccc08a64e941acd36b45b0ea15fab] added a Q_ASSERT in QLineF::setLength that can be hit using this simple test:

 
{code:java}
int main(int argc, char *argv[])
{
	QApplication a(argc, argv);
	QLineF line(QPointF(qQNaN(), qQNaN()), QPointF(qQNaN(), qQNaN()));
	line.setLength(9.45);

	return a.exec();
}
{code}
In this situation isValid() returns true for the line, but length() is NaN, which is not >0, so the Q_ASSERT is hit.

 

Our application, which has its own programming language, allows users to draw lines, rectangles, etc. programmatically. We have a suite of fuzz tests to test this functionality, and one of the tests is now hitting this Q_ASSERT.

We are also noticing a hang in the same fuzz tests when drawing rectangles that did not happen when we were using version 5.12.9. I haven't figured out a MCE to reproduce that hang yet, but it is almost certainly caused by the same Qt change as this bug.

Clearly there is no realistic use case for drawing a line between to (Nan, Nan) points, but if the code that calls QLineF and such is now responsible for checking the validity of the values, that's a significant enough change that I would at least expect a change log entry.",,,,,,,,,,,,,,,,,,,"02 Dec '20 14:32;Eddy;backtrace.txt;https://bugreports.qt.io/secure/attachment/100938/backtrace.txt","01 Dec '20 16:57;aclight;main.cpp;https://bugreports.qt.io/secure/attachment/100892/main.cpp",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0pvlb:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"30 Nov '20 17:42;thiago;I'd say that creating lines or points with NaN coordinates is UB.","30 Nov '20 18:03;allan.jensen;You have always been supposed to check validity of values. The only places that is checked in Qt is in parsers. Once it gets to internal classes it is supposed to be sane.","30 Nov '20 18:37;Eddy;Indeed, when making the indicated change, I expected without considering the alternative that co-ordinates are finite.  Although there are corner cases where an infinite line might make sense (the positive X-axis runs from (0, 0) to (infinity, 0); but only axis-aligned lines can be represented in this way, a diagonal to (infinity, infinity) has ill-defined direction) I think it is reasonable for computational geometry types to expect to be given finite co-ordinates.  (Indeed, affine geometry has the means to represent points infinitely far away, in any direction, using finite co-ordinates.)

I recommend that code generating calls to such types check the co-ordinates being passed for sanity.  See [{{qIsFinite()}}|https://doc.qt.io/qt-5/qtglobal.html#qIsFinite] for the means to check.","30 Nov '20 19:07;aclight;[~Eddy] That's easier said than done.

In our application, here is the stack trace that's actually leading to the Q_ASSERT being hit:
{code:java}
1   __pthread_kill                                                                                                           (x86_64) /usr/lib/system/libsystem_kernel.dylib       0x7fff6b13c2c2 
2   pthread_kill                                                                                                             (x86_64) /usr/lib/system/libsystem_pthread.dylib      0x7fff6b1f7bf1 
3   abort                                                                                                                    (x86_64) /usr/lib/system/libsystem_c.dylib            0x7fff6b0a66a6 
4   qt_message_fatal(QtMsgType, QMessageLogContext const&, QString const&)                                                   qlogging.cpp                                     1907 0x11f9a3b38    
5   QMessageLogger::fatal(const char *, ...) const                                                                           qlogging.cpp                                     888  0x11f9a5ffe    
6   qt_assert(const char *, const char *, int)                                                                               qglobal.cpp                                      3212 0x11f999887    
7   QLineF::setLength(double)                                                                                                qline.h                                          378  0x11ea55773    
8   QStroker::joinPoints(double, double, QLineF const&, QStroker::LineJoinMode)                                              qstroker.cpp                                     490  0x11eb65bc9    
9   bool qt_stroke_side<QSubpathForwardIterator>(QSubpathForwardIterator *, QStroker *, bool, QLineF *)                      qstroker.cpp                                     685  0x11eb64610    
10  QStroker::processCurrentSubpath()                                                                                        qstroker.cpp                                     428  0x11eb640b4    
11  QStrokerOps::end()                                                                                                       qstroker.cpp                                     224  0x11eb62109    
12  QPaintEngineEx::stroke(QVectorPath const&, QPen const&)                                                                  qpaintengineex.cpp                               506  0x11eacc07b    
13  QRasterPaintEngine::stroke(QVectorPath const&, QPen const&)                                                              qpaintengine_raster.cpp                          1744 0x11eae01d6    
14  QPaintEngineEx::draw(QVectorPath const&)                                                                                 qpaintengineex.cpp                               603  0x11eacd2a9    
15  QPaintEngineEx::drawPath(QPainterPath const&)                                                                            qpaintengineex.cpp                               842  0x11eacedd2    
16  QPainter::drawPath(QPainterPath const&)                                                                                  qpainter.cpp                                     3399 0x11eaf7abc                                          2402 0x10439576b    
... <More>                                                                                                                                                                                        

{code}
So it's really QStroker that's creating the QLineF and calling setLength.

I haven't yet come up with a MWE that gets to the Q_ASSERT starting with drawPath, but it seems that the rectangle my code is trying to draw has coordinates as (x0, y0)=(7.9e302, 4.16e302), (x1, y1)=(-2481.85819634, -1306.90254389). That's finite, though clearly pathological.

There may be a dash pattern applied to the line, which could complicate things.","01 Dec '20 11:42;Eddy;Given that, it sounds like you can probably construct a test-case that doesn't involve your language driving Qt, but could be expressed as a C++ or QML example exhibiting the case.  Doing that would increase the likelihood that we pay closer attention to this.  The fix would likely be to whatever the NaNs first show up in, not in {{QLineF}} itself, so we'd need such an example to find where that happens.","01 Dec '20 14:43;aclight;Yes, you would think this would be pretty easy to do, but so far I have not figured out how exactly to boil down our code to reproduce directly in C++.

In our language, I am calling this command:
{code:java}
DrawRect 1e300, 1e300, -pi, -p1
{code}
The parameters are positions of the left, top, right, and bottom sides of the rectangle, respectively. This would create an unfilled rectangle with a solid line 2 pixels in width (due to this being done on a Retina display–otherwise it would be 1 pixel in width).

Internally, this is drawn by creating a QPainterPath and drawing that using QPainter. This test code, from within a paintEvent, is more or less what is executing in our application, but this code in a test application does NOT hit the Q_ASSERT:
{code:java}
	p.translate(0.5, 0.5);
	QPainterPath path(QPointF(7.9e302, 4.16e302));
	path.setFillRule(Qt::WindingFill);
	path.lineTo(QPointF(-2481.85819634, -1306.90254389));
	path.closeSubpath();
	p.setBrush(Qt::NoBrush);

	QPen pen;
	pen.setWidthF(2.0);
	pen.setColor(Qt::red);
	pen.setCapStyle(Qt::FlatCap);
	pen.setJoinStyle(Qt::MiterJoin);
	pen.setStyle(Qt::SolidLine);
	pen.setMiterLimit(4.97493718553);
	p.setPen(pen);
	p.drawPath(path);
{code}
We already have code when we construct the path that skips points that are outside the valid range that Qt allows. I see that we do not use that test for the first point, which is why the path is started with a point at (7.9e302, 4.16e302). The difference in magnitude of the values from my command (eg. 1e300) to the painter path (7.9e302) is probably due to our command using a slightly different coordinate system than Qt.

I can keep digging if you think it's worthwhile, but if you think you're likely to close this as undefined behavior then I won't bother. I am certain that the NaN values in the QLineF that lead to the Q_ASSERT are not coming directly from our code. But our code is throwing some large values at the painting system.","01 Dec '20 15:27;thiago;Adam, can you get a ""backtrace full"" of a debug build of Qt of that? If you're hitting a Q_ASSERT, it must be a debug build already, we just need the backtrace with all locals. If you could trace where the NaN came from, it would help considerably.","01 Dec '20 15:55;Eddy;Or, indeed, attach a debugger, break on {{qt_assert}} and {{qt_assert_x}} and walk up the stack in the debugger to search for the source of the NaNs.

The linked review (see Gerrit panel at top right) is mostly a doc change, but does add some more asserts, that might help you catch the issue closer to source, if you can apply it.","01 Dec '20 16:19;aclight;Yes, this is a debug build. I've never heard of a ""backtrace full""–based on a quick Google search, that might be a Linux thing. Our application runs on macOS and Windows. If you know how to collect the equivalent on either of those platforms, I'm happy to try to create that for you.

All line numbers below are from the tip of the 5.12 branch from Tuesday or so of last week.

The call to QLineF::setLength that triggers the assert is in QStroker::joinPoints (qstroker.cpp, line 490). The QLineF l1 is constructed based on prevLine, which has (nan,nan) for both coordinates. Then setLength is called when appliedMiterLimit is 9.949...

Here are the debugger local values when stopped at line 490 of qstroker.cpp:

 
{noformat}
	Locals		
		[statics]		
		angle	nan	qreal
		appliedMiterLimit	9.94987437107	qreal
		focal_x	-2481.85819634	qfixed
		focal_y	-1306.90254389	qfixed
		isect	(0.0, 0.0)	QPointF
			xp	0.0	qreal
			yp	0.0	qreal
		join	QStroker::MiterJoin (2)	QStroker::LineJoinMode
		l1	@0x7ffeefbf5108	QLineF
			pt1	(nan, nan)	QPointF
			pt2	(nan, nan)	QPointF
		l2	@0x7ffeefbf50e8	QLineF
			pt1	(0.0, 0.0)	QPointF
			pt2	(0.0, 0.0)	QPointF
		miterLine	@0x7ffeefbf5138	QLineF
			pt1	(nan, nan)	QPointF
			pt2	(0.0, 0.0)	QPointF
		nextLine	@0x7ffeefbf5230	QLineF &
			pt1	(-2481.39226527, -1307.78736491)	QPointF
			pt2	(7.9e+302, 4.16e+302)	QPointF
		prevLine	@0x7ffeefbf5208	QLineF
			pt1	(nan, nan)	QPointF
			pt2	(nan, nan)	QPointF
		shortCut	@0x7ffeefbf5180	QLineF
			pt1	(nan, nan)	QPointF
			pt2	(-2481.39226527, -1307.78736491)	QPointF
		this	@0x61b00017e728	QStroker
			[QStrokerOps]	@0x61b00017e728	QStrokerOps
				m_clip_rect	0.0x0.0+0.0+0.0	QRectF
				m_cubicTo	(QtGui_debug`qpaintengineex_cubicTo(double, double, double, double, double, double, void*) at qpaintengineex.cpp:353)	qStrokerCubicToHook
				m_curveThreshold	0.25	qfixed
				m_customData	(0x00006030010b8530)	void*
				m_dashThreshold	0.5	qfixed
				m_elements	@0x61b00017e730	QDataBuffer<QStrokerOps::Element>
				m_lineTo	(QtGui_debug`qpaintengineex_lineTo(double, double, void*) at qpaintengineex.cpp:347)	qStrokerLineToHook
				m_moveTo	(QtGui_debug`qpaintengineex_moveTo(double, double, void*) at qpaintengineex.cpp:341)	qStrokerMoveToHook
			m_back1X	nan	qfixed
			m_back1Y	nan	qfixed
			m_back2X	nan	qfixed
			m_back2Y	nan	qfixed
			m_capStyle	QStroker::FlatJoin (0)	QStroker::LineJoinMode
			m_joinStyle	QStroker::MiterJoin (2)	QStroker::LineJoinMode
			m_miterLimit	4.97493718553	qfixed
			m_strokeWidth	2.0	qfixed
		type	QLineF::NoIntersection (0)	QLineF::IntersectType
{noformat}
 

One frame earlier in the stack trace is qt_stroke_side (line 685 of qstroker.cpp). Here are the variable values there:

{noformat}
	Locals		
		MAX_OFFSET	16	int
		[statics]		
		capFirst	false	bool
		e	@0x7ffeefbf5660	QStrokerOps::Element
			type	QPainterPath::LineToElement (1)	QPainterPath::ElementType
			x	7.9e+302	qfixed
			y	4.16e+302	qfixed
		first	false	bool
		first_element	@0x7ffeefbf56a8	QStrokerOps::Element
			type	QPainterPath::MoveToElement (0)	QPainterPath::ElementType
			x	7.9e+302	qfixed
			y	4.16e+302	qfixed
		it	@0x7ffeefbf5b78	QSubpathForwardIterator
			m_path	@0x61b00017e730	QDataBuffer<QStrokerOps::Element>
			m_pos	3	int
		line	@0x7ffeefbf5640	QLineF
			pt1	(-2481.39226527, -1307.78736491)	QPointF
			pt2	(7.9e+302, 4.16e+302)	QPointF
		normal	@0x7ffeefbf5600	QLineF
			pt1	(-2481.85819634, -1306.90254389)	QPointF
			pt2	(-2481.39226527, -1307.78736491)	QPointF
		offset	1.0	qfixed
		offsetCurves	@0x7ffeefbf56f0	QBezier[16]
		prev	@0x7ffeefbf5688	qfixed2d
			x	-2481.85819634	qfixed
			y	-1306.90254389	qfixed
		start	@0x7ffeefbf5698	qfixed2d
			x	7.9e+302	qfixed
			y	4.16e+302	qfixed
		startTangent	@0x7ffeefbf5b48	QLineF
			pt1	(nan, nan)	QPointF
			pt2	(nan, nan)	QPointF
		stroker	@0x61b00017e728	QStroker
			[QStrokerOps]	@0x61b00017e728	QStrokerOps
			m_back1X	nan	qfixed
			m_back1Y	nan	qfixed
			m_back2X	nan	qfixed
			m_back2Y	nan	qfixed
			m_capStyle	QStroker::FlatJoin (0)	QStroker::LineJoinMode
			m_joinStyle	QStroker::MiterJoin (2)	QStroker::LineJoinMode
			m_miterLimit	4.97493718553	qfixed
			m_strokeWidth	2.0	qfixed
	Inspector		
	Expressions		
	Return Value		
	Tooltip		

{noformat}

 ","01 Dec '20 16:59;aclight;I just attached main.cpp, which if executed using debug libraries of 5.12.11 will reproduce the Q_ASSERT. I think the problem I was having reproducing the problem in a simplified form was that I forgot to check the ""use debug version of frameworks"" in Creator.

Using Qt 5.12.11, I hit the assert. Using 5.12.4 (the latest version I have available prior to 5.12.11), I do not hit the assert.","02 Dec '20 14:46;Eddy;OK, so a call to {{QLineF::unitVector()}} on
{code}
{pt1 = {xp = 7.9000000000000006e+302, yp = 4.1599999999999996e+302},
 pt2 = {xp = 3.740000000000001e+302, yp = 1.206e+303}}
{code}
duly tries to add the unit-{{QPointF}} to its {{pt1}} and gets (because the {{O(1)}} components are less than the {{O(1e286)}} smallest change to either of {{pt1}}'s components that {{double}} can represent) a copy of {{pt1}} as the ""unit"" {{QLineF}}'s {{pt2}}; which is, all things considered, entirely outside {{QPointF}}'s ability to evade.

The problem arises in {{qt_stroke_side<QSubpathForwardIterator>}} at {{qtbase/src/gui/painting/qstroker.cpp:672}}:
{code}
            QLineF line(qt_fixed_to_real(prev.x), qt_fixed_to_real(prev.y),
                        qt_fixed_to_real(e.x), qt_fixed_to_real(e.y));
            if (line.p1() != line.p2()) {
                QLineF normal = line.normalVector();
                normal.setLength(offset);
{code}
The {{normalVector()}} is the one whose {{pt1}}'s components are too huge for adding a unit vector to be representable, so the attempt to {{setLength()}} is doomed ({{offset}} is 1, but we wouldn't be saved even if it were {{1e300}}, as {{setLength()}} goes via a unit vector; we can fix that in {{QLineF}}, but it won't solve the present problem).

The issue is in graphics code that does stroking, using {{QLineF}} for things it can't handle.
The fundamental problem is that, when {{offset}} is tiny when compared to the coordinates of either point on the line, the other bound of the stroke to be drawn isn't representably distinct from the line it's supposed to be offset from.

Attached backtrace where this is happening [^backtrace.txt]
",,,,,,,,,,,
Add an iOS style for mobile,QTBUG-80261,289051,Suggestion,Open,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,qt.team.quick.subscriptions,andysh,andysh,22 Nov '19 10:56,05 Jan '21 16:03,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Quick: Controls 2,,,,4,Reported_by_support_standard,,,"Add a theme for default usage on iOS to make the controls look more native, this will complement the Material (for Android) and Universal (for Windows) themes then.",,,,,,,,,,,,,,,QTBUG-83612,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,iOS/tvOS/watchOS,,,,,,"0|i0msxb:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"09 Sep '20 11:46;mitch_curtis;There is now a macOS desktop style in dev. However, judging from the wording of this report, I'm assuming that a more modern iOS style is what users want?","10 Sep '20 12:19;declan;Yes. iOS would be a great plus.
Without it one cannot really use Qt for (non in-house only) iOS apps that are designed to be published. Apple users have a strong bias for the official ""look and feel"", and anythig else is perceived as sub standard","21 Oct '20 13:30;javihria;We are striving towards to get more developers using Qt and lack of proper iOS styles (like the Cupertino package on flutter) on our offering is a big turnoff. We should investigate the work that is needed to get this done. I'll take this forward.

 ",,,,,,,,,,,,,,,,,,,
Add support for custom getters and setters in QProperty,QTBUG-89655,310343,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,fabiankosmale,ivan.solovev,ivan.solovev,22 Dec '20 09:22,05 Jan '21 10:56,18 Feb '21 09:41,,6.0.0,,,,,,,,,,,,,,,,,,,,,,Core: Object Model,,,,1,,,,"If I understand correctly, currently QProperty allows only trivial getters and setters.

Custom getters can be achieved by reimplementing QBindableInterface's getter() and makeBinding() methods. However this approach is quite verbose (see example here: [https://codereview.qt-project.org/c/qt/qtbase/+/327038/6/src/corelib/itemmodels/qabstractproxymodel_p.h]).

The situation with setters is even worse. We do have a Q_OBJECT_COMPAT_PROPERTY macro, that allows a custom setter, but if we just want to use QProperty, there is no way for now. Trying to achieve that, I had to create my own class, which was a combination of QProperty and QObjectCompatProperty: https://codereview.qt-project.org/c/qt/qtbase/+/327265/3/src/corelib/kernel/qcoreapplication_p.h

 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,QTBUG-89505,9223372036854775807,,mkalinow,,,,,,,"0|i0q45r:",9223372036854775807,9223372036854775807,,,,ablasche,,,,,,,,,,"22 Dec '20 09:23;ivan.solovev;I'm not sure, how important/critical is that, so feel free to reject.",,,,,,,,,,,,,,,,,,,,,
Rationalise CMake variables used to represent Android NDK root directory,QTBUG-89651,310335,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,qtbuildsystem,crscott,crscott,22 Dec '20 05:24,05 Jan '21 00:35,18 Feb '21 09:41,,6.0.0,,,,,,,,,,,,,,,,,,,,,,Build System: CMake,,,,0,,,,"CMake documents the {{CMAKE_ANDROID_NDK}} variable as the location of the Android NDK. It has logic for detecting this based on other CMake variables and environment variables. If using the Android NDK toolchain file, that file also sets {{CMAKE_ANDROID_NDK}}.

In {{qtbase/cmake/QtAutoDetect.cmake}}, two other variables {{ANDROID_NDK_ROOT}} and {{CMAKE_ANDROID_NDK_ROOT}} are referred to. They are apparently used to allow the {{CMAKE_TOOLCHAIN_FILE}} to be set automatically when only the NDK location is provided. Neither seems to really be needed and could be replaced by {{CMAKE_ANDROID_NDK}} to reduce potential confusion over their meaning.

This has become relevant lately because of the need to document the variables that are used by Qt's CMake API. See QTBUG-88839 and in particular the changes in https://codereview.qt-project.org/c/qt/qtbase/+/327306 for context. The user should only have to worry about one variable for defining where the NDK is and CMake already documents a canonical one, but Qt seems to be using something else. While {{QtAutoDetect.cmake}} is only used to build Qt itself, it makes sense to not have different approaches between building Qt and a project that uses Qt. The generated {{qt.toolchain.cmake}} file is one example of a cross-over point between the two, as it is used by both.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Android,,,,,,"0|i0q43z:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"04 Jan '21 13:43;kkohne;[~crscott], with your patches in , is there more to be done?","05 Jan '21 00:35;crscott;My patch merged recently only addressed the public part relating to Android deployment file generation (I needed to resolve that for the CMake API documentation issue I was working on). There is still work to be done in {{QtAutoDetect.cmake}}, which is only used when building Qt itself (specifically, it is used by qtbase and the top level qt5 CMakeLists.txt file). {{QtToolchainHelpers.cmake}} also needs some revising and this one requires a bit more care because it generates the {{qt.toolchain.cmake}} file which _is_ exposed to projects consuming Qt.

[~assam] The logic at the top of {{qt_auto_detect_android()}} looks for {{ndk-bundle}} in the SDK, but my understanding is that subdirectory has been deprecated and should not be relied upon. Instead, we should be looking in an {{ndk}} subdirectory and sorting the list of versions found, then picking the latest. There is already code in {{Qt6AndroidMacros.cmake}} in {{_qt_internal_android_get_sdk_build_tools_revision}} which does something similar for {{build-tools}}. We can/should probably clean this up too at the same time. What is the oldest NDK release we support (so I know how far back we need to check for compatibility with any changes)?

The main thing preventing me from jumping in and doing the changes myself now is I'm not sure of all the implications for the configure script. At the moment, that script defines {{ANDROID_SDK_ROOT}} and {{ANDROID_NDK_ROOT}}, but I'm proposing we drop the latter and use the more canonical variable {{CMAKE_ANDROID_NDK}} instead. I don't know if this change of naming will affect anyone? Is the {{ANDROID_NDK_ROOT}} variable exposed anywhere publicly that we would need to maintain any sort of backward compatibility for it? There's no equivalent situation for {{ANDROID_SDK_ROOT}} because neither CMake nor the NDK provides anything to do with the SDK.
",,,,,,,,,,,,,,,,,,,,
Unable to control what gets copied to clipboard from a document in QtQuick,QTBUG-89667,310371,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,qt.team.quick.subscriptions,appadeia,appadeia,22 Dec '20 21:15,25 Dec '20 10:47,18 Feb '21 09:41,,5.15.2,6.0.0,,,,,,,,,,,,,,,,,,,,,Quick: Controls 2,Quick: Core Declarative QML ,,,0,,,,"There's no hooks in QtQuick's QTextDocument-using items allowing the user to control what gets copied to the clipboard when you trigger a copy; making custom QTextObjectInterfaces useless in QtQuick applications if you want to be able to copy and paste documents containing them in a coherent format, e.g. representing mentions in a chat application as fancy chips while still being able to copy and paste them as plaintext {{@username}}s.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0q4br:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Can not build Qt 6 with cmake on macOS when ssl is disabled,QTBUG-89649,310316,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,qtbuildsystem,emmenlau,emmenlau,21 Dec '20 20:53,22 Dec '20 12:57,18 Feb '21 09:41,,6.0.0,,,,,,,,,,,,,,,,,,,,,,Network,,,,0,,,,"I'm building Qt 6.0 with (plain) cmake 3.19.2, without using the Qt configure script. I've set options to disable ssl because I don't want to link any ssl code into the binary. The cmake options are:
{code}
    ""-DFEATURE_ssl=OFF""
    ""-DFEATURE_openssl=OFF""
    ""-DFEATURE_openssl_linked=OFF""
    ""-DFEATURE_openssl_runtime=OFF""
    ""-DFEATURE_opensslv11=OFF""
{code}

When I compile with latest XCode, I get a number of errors:
{code}
FAILED: qtbase/src/network/CMakeFiles/Network.dir/ssl/qsslcertificate.cpp.o 
/data/Tools/lib/ccache/c++ -DGL_SILENCE_DEPRECATION -DNetwork_EXPORTS -DQT_ASCII_CAST_WARNINGS -DQT_BUILDING_QT -DQT_BUILD_NETWORK_LIB -DQT_CORE_LIB -DQT_DEPRECATED_WARNINGS -DQT_DEPRECATED_WARNINGS_SINCE=0x060000 -DQT_DISABLE_DEPRECATED_BEFORE=0x050000 -DQT_MOC_COMPAT -DQT_NO_CAST_TO_ASCII -DQT_NO_EXCEPTIONS -DQT_NO_FOREACH -DQT_NO_USING_NAMESPACE -DQT_USE_QSTRINGBUILDER -DQT_USE_SYSTEM_PROXIES -D_LARGEFILE64_SOURCE -D_LARGEFILE_SOURCE -Iqtbase/src/network/Network_autogen/include -Iqtbase/include -Iqtbase/include/QtNetwork -I../qtbase/src/network -Iqtbase/src/network -I../qtbase/src/network/kernel -Iqtbase/include/QtNetwork/6.0.0 -Iqtbase/include/QtNetwork/6.0.0/QtNetwork -Iqtbase/include/QtCore -I../qtbase/mkspecs/macx-clang -Iqtbase/src/corelib -Iqtbase/include/QtCore/6.0.0 -Iqtbase/include/QtCore/6.0.0/QtCore -isystem /data/Debug/include -glldb -fno-omit-frame-pointer -O1 -march=ivybridge -mtune=skylake -mmacosx-version-min=10.15 -g -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.15.sdk -mmacosx-version-min=10.14 -fPIC -fvisibility=hidden -fvisibility-inlines-hidden -Wall -Wextra -fno-exceptions -fPIC -fapplication-extension -std=c++17 -Winvalid-pch -Xclang -include-pch -Xclang /data/tmp/qt/x86_64/qtbase/src/network/CMakeFiles/Network.dir/cmake_pch.hxx.pch -Xclang -include -Xclang /data/tmp/qt/x86_64/qtbase/src/network/CMakeFiles/Network.dir/cmake_pch.hxx -MD -MT qtbase/src/network/CMakeFiles/Network.dir/ssl/qsslcertificate.cpp.o -MF qtbase/src/network/CMakeFiles/Network.dir/ssl/qsslcertificate.cpp.o.d -o qtbase/src/network/CMakeFiles/Network.dir/ssl/qsslcertificate.cpp.o -c ../qtbase/src/network/ssl/qsslcertificate.cpp
In file included from ../qtbase/src/network/ssl/qsslcertificate.cpp:138:
In file included from ../qtbase/src/network/ssl/qsslsocket_mac_p.h:60:
In file included from ../qtbase/src/network/ssl/qsslsocket_p.h:60:
../qtbase/src/network/ssl/qsslconfiguration_p.h:105:13: error: field has incomplete type 'QSslKey'
    QSslKey privateKey;
            ^
../qtbase/src/network/ssl/qsslcertificate.h:62:7: note: forward declaration of 'QSslKey'
class QSslKey;
      ^
In file included from ../qtbase/src/network/ssl/qsslcertificate.cpp:138:
In file included from ../qtbase/src/network/ssl/qsslsocket_mac_p.h:60:
In file included from ../qtbase/src/network/ssl/qsslsocket_p.h:60:
../qtbase/src/network/ssl/qsslconfiguration_p.h:106:5: error: unknown type name 'QSslCipher'
    QSslCipher sessionCipher;
    ^
../qtbase/src/network/ssl/qsslconfiguration_p.h:108:11: error: use of undeclared identifier 'QSslCipher'
    QList<QSslCipher> ciphers;
          ^
../qtbase/src/network/ssl/qsslconfiguration_p.h:112:5: error: use of undeclared identifier 'QSslSocket'; did you mean 'QTcpSocket'?
    QSslSocket::PeerVerifyMode peerVerifyMode;
    ^~~~~~~~~~
    QTcpSocket
/data/Debug/include/../../../../../../../../../System/Volumes/Data/data/tmp/qt/qtbase/src/network/socket/qtcpsocket.h:52:24: note: 'QTcpSocket' declared here
class Q_NETWORK_EXPORT QTcpSocket : public QAbstractSocket
                       ^
In file included from ../qtbase/src/network/ssl/qsslcertificate.cpp:138:
In file included from ../qtbase/src/network/ssl/qsslsocket_mac_p.h:60:
In file included from ../qtbase/src/network/ssl/qsslsocket_p.h:60:
../qtbase/src/network/ssl/qsslconfiguration_p.h:112:17: error: no type named 'PeerVerifyMode' in 'QTcpSocket'
    QSslSocket::PeerVerifyMode peerVerifyMode;
    ~~~~~~~~~~~~^
../qtbase/src/network/ssl/qsslconfiguration_p.h:125:5: error: unknown type name 'QSslDiffieHellmanParameters'
    QSslDiffieHellmanParameters dhParams;
    ^
../qtbase/src/network/ssl/qsslconfiguration_p.h:132:13: error: field has incomplete type 'QSslKey'
    QSslKey ephemeralServerKey;
            ^
../qtbase/src/network/ssl/qsslcertificate.h:62:7: note: forward declaration of 'QSslKey'
class QSslKey;
      ^
In file included from ../qtbase/src/network/ssl/qsslcertificate.cpp:138:
In file included from ../qtbase/src/network/ssl/qsslsocket_mac_p.h:60:
In file included from ../qtbase/src/network/ssl/qsslsocket_p.h:60:
../qtbase/src/network/ssl/qsslconfiguration_p.h:138:5: error: incomplete type 'QSslConfiguration' named in nested name specifier
    QSslConfiguration::NextProtocolNegotiationStatus nextProtocolNegotiationStatus;
    ^~~~~~~~~~~~~~~~~~~
/data/Debug/include/../../../../../../../../../System/Volumes/Data/data/tmp/qt/qtbase/src/network/access/qnetworkrequest.h:51:7: note: forward declaration of 'QSslConfiguration'
class QSslConfiguration;
      ^
In file included from ../qtbase/src/network/ssl/qsslcertificate.cpp:138:
In file included from ../qtbase/src/network/ssl/qsslsocket_mac_p.h:60:
In file included from ../qtbase/src/network/ssl/qsslsocket_p.h:60:
../qtbase/src/network/ssl/qsslconfiguration_p.h:88:26: error: use of undeclared identifier 'QSslSocket'; did you mean 'QTcpSocket'?
          peerVerifyMode(QSslSocket::AutoVerifyPeer),
                         ^~~~~~~~~~
                         QTcpSocket
/data/Debug/include/../../../../../../../../../System/Volumes/Data/data/tmp/qt/qtbase/src/network/socket/qtcpsocket.h:52:24: note: 'QTcpSocket' declared here
class Q_NETWORK_EXPORT QTcpSocket : public QAbstractSocket
                       ^
In file included from ../qtbase/src/network/ssl/qsslcertificate.cpp:138:
In file included from ../qtbase/src/network/ssl/qsslsocket_mac_p.h:60:
In file included from ../qtbase/src/network/ssl/qsslsocket_p.h:60:
../qtbase/src/network/ssl/qsslconfiguration_p.h:88:38: error: no member named 'AutoVerifyPeer' in 'QTcpSocket'
          peerVerifyMode(QSslSocket::AutoVerifyPeer),
                         ~~~~~~~~~~~~^
../qtbase/src/network/ssl/qsslconfiguration_p.h:93:20: error: use of undeclared identifier 'QSslDiffieHellmanParameters'
          dhParams(QSslDiffieHellmanParameters::defaultParameters()),
                   ^
../qtbase/src/network/ssl/qsslconfiguration_p.h:97:41: error: incomplete type 'QSslConfiguration' named in nested name specifier
          nextProtocolNegotiationStatus(QSslConfiguration::NextProtocolNegotiationNone)
                                        ^~~~~~~~~~~~~~~~~~~
/data/Debug/include/../../../../../../../../../System/Volumes/Data/data/tmp/qt/qtbase/src/network/access/qnetworkrequest.h:51:7: note: forward declaration of 'QSslConfiguration'
class QSslConfiguration;
      ^
In file included from ../qtbase/src/network/ssl/qsslcertificate.cpp:138:
In file included from ../qtbase/src/network/ssl/qsslsocket_mac_p.h:60:
In file included from ../qtbase/src/network/ssl/qsslsocket_p.h:60:
../qtbase/src/network/ssl/qsslconfiguration_p.h:170:8: error: incomplete type 'QSslConfiguration' named in nested name specifier
inline QSslConfiguration::QSslConfiguration(QSslConfigurationPrivate *dd)
       ^~~~~~~~~~~~~~~~~~~
/data/Debug/include/../../../../../../../../../System/Volumes/Data/data/tmp/qt/qtbase/src/network/access/qnetworkrequest.h:51:7: note: forward declaration of 'QSslConfiguration'
class QSslConfiguration;
      ^
In file included from ../qtbase/src/network/ssl/qsslcertificate.cpp:138:
In file included from ../qtbase/src/network/ssl/qsslsocket_mac_p.h:60:
In file included from ../qtbase/src/network/ssl/qsslsocket_p.h:60:
../qtbase/src/network/ssl/qsslconfiguration_p.h:170:8: error: incomplete type 'QSslConfiguration' named in nested name specifier
inline QSslConfiguration::QSslConfiguration(QSslConfigurationPrivate *dd)
       ^~~~~~~~~~~~~~~~~~~
/data/Debug/include/../../../../../../../../../System/Volumes/Data/data/tmp/qt/qtbase/src/network/access/qnetworkrequest.h:51:7: note: forward declaration of 'QSslConfiguration'
class QSslConfiguration;
      ^
In file included from ../qtbase/src/network/ssl/qsslcertificate.cpp:138:
In file included from ../qtbase/src/network/ssl/qsslsocket_mac_p.h:60:
In file included from ../qtbase/src/network/ssl/qsslsocket_p.h:61:
../qtbase/src/network/ssl/qocspresponse.h:50:1: error: static_assert failed due to requirement 'bool(-1 == 1)' ""Required feature ssl for file ../qtbase/src/network/ssl/qocspresponse.h not available.""
QT_REQUIRE_CONFIG(ssl);
^~~~~~~~~~~~~~~~~~~~~~
/data/Debug/include/../../../../../../../../../System/Volumes/Data/data/tmp/qt/qtbase/src/corelib/global/qglobal.h:78:36: note: expanded from macro 'QT_REQUIRE_CONFIG'
#define QT_REQUIRE_CONFIG(feature) Q_STATIC_ASSERT_X(QT_FEATURE_##feature == 1, ""Required feature "" #feature "" for file "" __FILE__ "" not available."")
                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/data/Debug/include/../../../../../../../../../System/Volumes/Data/data/tmp/qt/qtbase/src/corelib/global/qglobal.h:105:49: note: expanded from macro 'Q_STATIC_ASSERT_X'
#  define Q_STATIC_ASSERT_X(Condition, Message) static_assert(bool(Condition), Message)
                                                ^             ~~~~~~~~~~~~~~~
In file included from ../qtbase/src/network/ssl/qsslcertificate.cpp:138:
In file included from ../qtbase/src/network/ssl/qsslsocket_mac_p.h:60:
../qtbase/src/network/ssl/qsslsocket_p.h:108:22: error: unknown type name 'QSslSocket'; did you mean 'QTcpSocket'?
    Q_DECLARE_PUBLIC(QSslSocket)
                     ^~~~~~~~~~
                     QTcpSocket
/data/Debug/include/../../../../../../../../../System/Volumes/Data/data/tmp/qt/qtbase/src/corelib/global/qglobal.h:1173:12: note: expanded from macro 'Q_DECLARE_PUBLIC'
    inline Class* q_func() noexcept { return static_cast<Class *>(q_ptr); } \
           ^
/data/Debug/include/../../../../../../../../../System/Volumes/Data/data/tmp/qt/qtbase/src/network/socket/qtcpsocket.h:52:24: note: 'QTcpSocket' declared here
class Q_NETWORK_EXPORT QTcpSocket : public QAbstractSocket
                       ^
In file included from ../qtbase/src/network/ssl/qsslcertificate.cpp:138:
In file included from ../qtbase/src/network/ssl/qsslsocket_mac_p.h:60:
../qtbase/src/network/ssl/qsslsocket_p.h:108:22: error: unknown type name 'QSslSocket'; did you mean 'QTcpSocket'?
    Q_DECLARE_PUBLIC(QSslSocket)
                     ^~~~~~~~~~
                     QTcpSocket
/data/Debug/include/../../../../../../../../../System/Volumes/Data/data/tmp/qt/qtbase/src/corelib/global/qglobal.h:1174:18: note: expanded from macro 'Q_DECLARE_PUBLIC'
    inline const Class* q_func() const noexcept { return static_cast<const Class *>(q_ptr); } \
                 ^
/data/Debug/include/../../../../../../../../../System/Volumes/Data/data/tmp/qt/qtbase/src/network/socket/qtcpsocket.h:52:24: note: 'QTcpSocket' declared here
class Q_NETWORK_EXPORT QTcpSocket : public QAbstractSocket
                       ^
In file included from ../qtbase/src/network/ssl/qsslcertificate.cpp:138:
In file included from ../qtbase/src/network/ssl/qsslsocket_mac_p.h:60:
../qtbase/src/network/ssl/qsslsocket_p.h:117:5: error: use of undeclared identifier 'QSslSocket'; did you mean 'QTcpSocket'?
    QSslSocket::SslMode mode;
    ^~~~~~~~~~
    QTcpSocket
/data/Debug/include/../../../../../../../../../System/Volumes/Data/data/tmp/qt/qtbase/src/network/socket/qtcpsocket.h:52:24: note: 'QTcpSocket' declared here
class Q_NETWORK_EXPORT QTcpSocket : public QAbstractSocket
                       ^
In file included from ../qtbase/src/network/ssl/qsslcertificate.cpp:138:
In file included from ../qtbase/src/network/ssl/qsslsocket_mac_p.h:60:
../qtbase/src/network/ssl/qsslsocket_p.h:117:17: error: no type named 'SslMode' in 'QTcpSocket'
    QSslSocket::SslMode mode;
    ~~~~~~~~~~~~^
fatal error: too many errors emitted, stopping now [-ferror-limit=]
{code}
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,macOS,,,,,,"0|i0q42f:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
QBluetoothDeviceInfo should offer access to all fields received in the scanRecord / Android,QTBUG-79966,288259,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,ablasche,szb,szb,12 Nov '19 13:56,21 Dec '20 11:00,18 Feb '21 09:41,,5.13.2,,,,,,,,,,,,,,,,,,,,,,Connectivity: Bluetooth,,,,0,,,,"Currently BLE scan seems to parse only a subset of the fields received during adertising:

The list of fields considered is in the ADType enum ()

/* Advertising Data Type (AD type) for LE scan records, as defined in Bluetooth CSS v6. */
enum ADType {
 ADType16BitUuidIncomplete = 0x02,
 ADType16BitUuidComplete = 0x03,
 ADType32BitUuidIncomplete = 0x04,
 ADType32BitUuidComplete = 0x05,
 ADType128BitUuidIncomplete = 0x06,
 ADType128BitUuidComplete = 0x07,
 ADTypeManufacturerSpecificData = 0xff,
 // .. more will be added when required
};

One of the items that probably should be added is

type = 0x09 = Complete Local Name , that is the local name of the device.

Also it would be nice if the list would be somehow extensible (so that clients could set the list of fields they're interested in,  not sure if this is possible)

 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Android,,,,,,"0|i0mo93:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"21 Dec '20 11:00;victor.corchez;will this fix be included in any Qt version any time soon?",,,,,,,,,,,,,,,,,,,,,
CMake Build: Instruct CMake to create the fileApi json structure for IDEs,QTBUG-89487,309879,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,qtbuildsystem,cadam,cadam,14 Dec '20 19:56,15 Dec '20 11:34,18 Feb '21 09:41,,6.0.0,,,,,,,,,,,,,,,,,,,,,,Build System: CMake,,,,0,,,,"The CMake configuration process of QtBase, or of a Qt6 super build can take a while, it would be helpful if this time could be reduced to zero when importing the build in Qt Creator (or other IDE that supports CMake fileApi).

If the CMake build system would make sure that in the build directory there will be the following file structure ({{<build_dir>/.cmake/api/v1/query}})

{code}
└───.cmake
    └───api
        └───v1
            └───query
                    cache-v2
                    cmakeFiles-v1
                    codemodel-v2
{code}

The files are 0 bytes in size.

This way Qt Creator could import the build and load the CMake project very fast, thus having a better user experience.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0q1i7:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"14 Dec '20 20:54;jbornema;I seem to be missing some parts here. How does the existence of these empty files speed up loading?

And can't Qt Creator just create this directory structure if needed on importing a CMake build dir?","14 Dec '20 21:35;cadam;CMake looks into the ""query"" directory and creates the ""reply"" directory. The ""reply"" directory contains json files that represent the project, json files which Qt Creator will be reading in order to load the project.

Qt Creator is doing this step if the .cmake directory is missing, or if the ""reply"" directory is missing.  

If the build system would prepare this, then Qt Creator wouldn't have to. ","15 Dec '20 06:58;jbornema;That means the directory structure must exist before cmake creates the build system. 
It has to be checked whether the dir structure actually can be created by CMake project files then or if that would be too late.

I have a bit of a problem with enabling this for every user project. Not everyone might want this. ","15 Dec '20 07:49;kkohne;[~cadam], is there a cmake command to set this up?

THis sounds like a good idea at least for Qt/-developer-builds. Anyhow, the question still is whether we should do this for all projects ... 

[~crscott] ^^","15 Dec '20 11:34;cadam;I've tried adding the following:

{code}
foreach(file cache-v2 cmakeFiles-v1 codemodel-v2)
  file(WRITE ""${CMAKE_BINARY_DIR}/.cmake/api/v1/query/${file}"" """")
endforeach(){code}

at the top of a {{CMakeLists.txt}}'s project, configured the project and unfortunately the ""reply"" folder was not created.

Then I tried adding the code into a {{PreLoad.cmake}} file found in the source directory of the project, tried again, and ... it worked! �

The {{PreLoad.cmake}} could be then added into a {{.gitignore}} so that it won't end in the git repository.

",,,,,,,,,,,,,,,,,
Feature Request: Option to replace all points in QML XYSeries ,QTBUG-89478,309857,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,e0348803,shmittal,shmittal,14 Dec '20 13:21,14 Dec '20 13:23,18 Feb '21 09:41,,5.15.2,,,,,,,,,,,,,,,,,,,,,,Charts,,,,0,Reported_by_support_standard,,,"Currently, user can replace points in XySeries one by one in QML charts, and there is no option to replace all the points in one go. A similar method is available for QXYSeries, https://doc.qt.io/qt-5/qxyseries.html#replace-5. 
It would be great if similar functionality can be added to QML series too. 
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0q1db:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add method in QWebSocket to Bind it to a specific IP/Port,QTBUG-83302,296686,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,cnn,taytoo,taytoo,03 Apr '20 18:29,11 Dec '20 06:48,18 Feb '21 09:41,,5.15,5.15.0 Beta3,,,,,,,,,,,,,,,,,,,,,WebSockets,,,,1,Reported_by_support_standard,,,"Some applications need to offer the ability to select which network interface/address an application should use to communicate. QTcpSocket and QUdpSocket both have the option to bind to specific IP/port combination, however, the bind method is lacking in QWebSocket.

*Proposed methods:* 
_1. bool QWebSocket::bind(const QHostAddress &address, quint16 port = 0, QAbstractSocket::BindMode mode = DefaultForPlatform)_

_2. bool QWebSocket::bind(quint16 port = 0, QAbstractSocket::BindMode mode = DefaultForPlatform)_



QAbstractSocket +already has+ these two bind methods with identical parameters. Since QWebSocket internally uses a QTcpSocket, the change is very straightforward in that the proposed methods in QWebSocket simply need to call the respective method in QTcpSocket and return value.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0ny53:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Extend the registration of a custom schema so it can be also used as a custom scheme for the Fetch API,QTBUG-88830,308517,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,qt_webengine_team,andysh,andysh,25 Nov '20 07:46,09 Dec '20 10:23,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,WebEngine,,,,0,Reported_by_support_standard,,,Extend the registration of a custom schema so it can be also used as a custom scheme for the Fetch API. In addition if there is any internal other APIs that could make use of the custom scheme it should be registered for them too.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0ptnz:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"07 Dec '20 01:53;benjamintmiller;Could we get an estimate on when this might be worked on?  A product of ours will be blocked on this feature, so we need to find another approach if it will take a long time.","09 Dec '20 10:23;allan.jensen;Shouldn't be too hard, assuming nothing unexpected pops up. But I guess it would require a new API. It is similar to schemes allowed for service workers",,,,,,,,,,,,,,,,,,,,
[Accessibility] QtQuick ListView on Windows should implement the VirtualizedItem control pattern,QTBUG-88187,307405,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,frederik,cosminp,cosminp,05 Nov '20 01:05,08 Dec '20 15:36,18 Feb '21 09:41,,5.14.2,,,,,,,,,,,,,,,,,,,,,,GUI: Accessibility (a11y),,,,0,customer=lngAAA,CustomerRequirement,,"The VirtualizedItem control pattern allows a UIAutomation element to provide information about the real size of the list (not just the realized items) and control functions to realize items.

https://docs.microsoft.com/en-us/windows/win32/winauto/uiauto-implementingvirtualizeditem",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Windows,,,,,,"0|i0pn5r:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[Accessibility] Add a HeadingLevel to QML Accessible and surface it in QWindowsUiaMainProvider ,QTBUG-75004,276691,Suggestion,Open,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,frederik,cosminp,cosminp,05 Apr '19 19:52,08 Dec '20 15:36,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,GUI: Accessibility (a11y),,,,0,customer=lngAAA,CustomerRequirement,,"Missing property implementation HeadingLevel which enables Accessibility Tools to correctly interpret a text as the title of a page - the same way that can be achieved on web pages using ARIA annotations

[https://docs.microsoft.com/en-us/windows/desktop/winauto/uiauto-heading-level-identifiers]

 ",,,,,,,,,,,,,,,,,,,"06 May '19 14:40;cosminp;AccHeadingLevel_InspectTool.jpg;https://bugreports.qt.io/secure/attachment/83652/AccHeadingLevel_InspectTool.jpg",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Windows,,,,,,"0|i0kuwf:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"06 May '19 08:44;frederik;This makes sense, I wonder what other platforms do, how do I best check if this is working on Windows?","06 May '19 14:40;cosminp;Hi [~frederik], there's 2 ways to verify this:
 # Using Windows Narrator (press ctrl+ win+ enter to open), point it at any webpage (for example this page: [https://support.microsoft.com/en-us/help/22798/windows-10-complete-guide-to-narrator] ) and press CapsLock + F6 which makes Narrator show a list of all the headings in the window
 # Using the Windows SDK accessibility inspector (apologies if you're already familiar with it) - if you have any version of the Windows SDK installed it should be in this folder: Windows Kits\10\bin\10.0.17134.0\x64\inspect.exe. You can use it to hover over the text/element you want to be a header and check its heading level property  !AccHeadingLevel_InspectTool.jpg|width=681,height=551!",,,,,,,,,,,,,,,,,,,,
WebEngine PDF extension ignore opening options,QTBUG-86152,303075,Suggestion,Open,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,davidsz,kadomcevi,kadomcevi,19 Aug '20 13:07,04 Dec '20 12:09,18 Feb '21 09:41,,5.13.0 RC 3,5.14.2,,,,,,,,,,,,,,,,,,,,,WebEngine,,,,0,,,,"WebEngine PDF extension ignore opening options
So urls like this:
path/to/pdf*#view=fitH*
path/to/pdf*#zoom=200*
not works (but works in original chrome browser)

 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0oyyv:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"30 Sep '20 11:27;davidsz;This is a valid issue. The problem is in our URL format: basically it is a chrome-extension URL with a parameter pointing to the PDF file, while Chrome operates with the PDF URL itself. In our case the fragment is the part of the chrome-extension URL instead of being part of the parameter, so open_pdf_params_parser.js can't parse it properly. This will be fixed when we start to support guest views and leave the navigation to the chrome-extension URL.

NOTE: We have an incomplete/shortened/trimmed function in browser_api.js without any trace in git logs:
{code:java}
export function createBrowserApi() {
 return createBrowserApiForPrintPreview();
}{code}
And the corresponding one in upstream Chrome:
 
{code:java}
export function createBrowserApi() {
  if (location.origin === 'chrome://print') {
    return createBrowserApiForPrintPreview();
  }
  return createBrowserApiForMimeHandlerView();
}{code}
This will be probably needed to fix this.
 ",,,,,,,,,,,,,,,,,,,,,
Euler Angles to Quaternion conversion,QTBUG-79752,287875,Suggestion,Open,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,lagocs,fmercury,fmercury,05 Nov '19 00:03,04 Dec '20 06:48,18 Feb '21 09:41,,6.0.0,,,,,,,,,,,,,,,,,,,,,,GUI: OpenGL,,,,0,,,,"The function [https://doc.qt.io/qt-5/qquaternion.html#fromEulerAngles] preassumes a very specific order of Euler angles and rotation sequence. There are several conventions, and it is usual in geometry packages to allow the user to specify the rotation order as an argument. Something like:

 
{code:java}
yaw = 0.1; 
pitch = 0.2; 
roll = 0.3;
quaternion = fromEulerAngles( yaw, pitch, roll, ""ZXY"" )

{code}
Potentially, this Qt function could be expanded to allow this rotation order as fourth argument. A very good example on how to implement this could be found here:

[https://github.com/bminortx/Buckshot/blob/master/matlabComponents/Matlab_functions/angle2quat.m]

 [https://www.mathworks.com/help/aerotbx/ug/angle2quat.html]

 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0mly7:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[Accessibility] Implement a QAccessibleEvent that fires a UiaRaiseNotificationEvent,QTBUG-75003,276690,Suggestion,Open,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,owolff,cosminp,cosminp,05 Apr '19 19:44,03 Dec '20 17:04,18 Feb '21 09:41,,5.14.2,,,,,,,,,,,,,,,,,,,,,5.15.0 Beta2,GUI: Accessibility (a11y),,,,0,customer=lngAAA,CustomerRequirement,,"The UiaRaiseNotificationEvent can be used on Windows to inform Narrator of a change in the window (typically to make it read updated text, similar to LiveRegionChanged events)

The event is explained on the UIAutomation blog:

[https://blogs.msdn.microsoft.com/winuiautomation/2017/11/08/can-your-desktop-app-leverage-the-new-uia-notification-event-in-order-to-have-narrator-say-exactly-what-your-customers-need/]

 

 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,566def740ec58e842e6bb37177f80e20aebaa245 (qt/qtbase/5.15),,,,,9223372036854775807,,javihria,Windows,,,,,,"0|i0kuw7:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"06 May '19 14:57;frederik;Thanks for the report and link! It's great to have some background on the notification :)","19 Mar '20 22:05;cosminp;[~anrocha] apologies - just catching up on this - I looked at the fix but it sounds like the caller has no flexibility on when the event gets fired, what its priority is or whether it should fire at all - it fires on every text change? That's probably too verbose most callers will want to fire the event only on demand - and would like to be able to specify the handling flags, NotificationProcessing_*

My initial thinking was somewhere along the lines of having a new type of QAccessibleEvent that does this, where callers can fire the event whenever they need the AT to announce the text (it could even have a Mac Cocoa NSAccessibility equivalent, with the problem that it takes a different set of values to specify priority/handling)","03 Dec '20 09:16;vhilshei;Reopening this suggestion as the implementation doesn't quite provide what's needed",,,,,,,,,,,,,,,,,,,
Feature Request: API to set Labels Precision in all chart series type ,QTBUG-89061,309001,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,e0348803,shmittal,shmittal,02 Dec '20 10:53,02 Dec '20 10:54,18 Feb '21 09:41,,5.15.2,,,,,,,,,,,,,,,,,,,,,,Charts,,,,2,Reported_by_support_standard,,,"Like with QAbstractBarSeries, user can set label precisión in bar charts with setLabelsPrecision
(changes are done as part of QTBUG-64370), but in other kinds of QAbstractSeries charts, there are no such functions to set the precision of labels.
Like in Area series, it is hardcoded to have precision up to 6, it would be great to have a similar method for all series types. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0pwgf:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Support rendering to QImage via QQuickRenderControl without having to use private APIs,QTBUG-88876,308593,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,qt.team.graphics.and.multimedia,rectalogic,rectalogic,25 Nov '20 23:20,27 Nov '20 12:30,18 Feb '21 09:41,,6.0.0 Beta5,,,,,,,,,,,,,,,,,,,,,,Qt RHI,Quick: SceneGraph,,,0,,,,"Currently to render offscreen using {{QQuickRenderControl}}, you need to {{QQuickWindow::setRenderTarget}} - and all available {{QQuickRenderTarget}}s are native, so you need 4 different native implementations.

Qt should expose a cross-platform {{QQuickRenderTarget}} so that I can render to this then read back the results as a {{QImage}}. This is for e.g. rendering QML offscreen as image frames into a video.

The test {{tst_RenderControl::renderAndReadBackWithRhi()}} in [https://github.com/qt/qtdeclarative/blob/v6.0.0-beta5/tests/auto/quick/qquickrendercontrol/tst_qquickrendercontrol.cpp#L137] does exactly what I want. And the comment in that test is exactly what this bug is about - why do application developers have to do 4 separate native implementations to make this work?
{noformat}
// What comes now is technically cheating - as long as QRhi is not a public
// API this is not something applications can follow doing. However, it  
// allows us to test out the pipeline without having to write 4 different
// native (Vulkan, Metal, D3D11, OpenGL) implementations of all what's below.{noformat}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0pu3r:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"27 Nov '20 10:07;lagocs;I changed this to a suggestion. For the time being this is an intentional, even if unfortunate, limitation.

For projects that do not target all supported platforms, and thus are not interested in functioning with all 4 graphics APIs, it could well be that a single graphics API is sufficient in practice, in which case the problem is less burning.

If your project has a strong and urgent need for this, and having support for all the possible graphics APIs is inevitable, I suggest considering trying out the private APIs.
","27 Nov '20 11:43;rectalogic;In Qt5 we at least had {{QCRenderContr::grab()}}

{noformat}
QQuickRenderControl has a slightly changed API: grab() is now removed, use QQuickWindow::grabWindow() instead, where applicable.
{noformat}
[https://doc-snapshots.qt.io/qt6-dev/quick-changes-qt6.html]

but {{grabWindow}} only works with the software renderer

{noformat}
Note: When using this window in combination with QQuickRenderControl, the result of this function is an empty image, unless the software backend is in use. 
{noformat}
https://doc-snapshots.qt.io/qt6-dev/qquickwindow.html#grabWindow ","27 Nov '20 12:30;lagocs;True, the thinking being that if an application manages its own native graphics resources (an OpenGL texture, Vulkan image, etc.), then it is the application that can decide what is the best way to work with said resource, how to perform a readback on it, once Qt Quick has finished with rendering.

It is not unthinkable to restore some of the grab functionality to a degree, but that is somewhat unrelated to the problem outlined in this ticket: to get a cross-graphics-API solution that does not involve the applications working directly with OpenGL, Vulkan, etc., one still needs to use the private QRhi APIs, regardless of the level of grab support we provide. Having a more widely functional grab implementation would merely be a convenience for applications that work directly with a graphics API to get a texture, then target that texture with Qt Quick rendering, and then wish to perform readback without using the graphics API directly.
",,,,,,,,,,,,,,,,,,,
Qt for Android apps monitoring via Google Console ,QTBUG-88568,308042,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,qtandroidteam,assam,assam,17 Nov '20 08:17,24 Nov '20 10:11,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Build tools: androiddeployqt,Examples and Demos,,,0,,,,"To ensure better quality and catch bugs, errors, and crashes in our Qt for Android releases, we could have a list of apps/examples deployed into the Play Store for each latest Qt version, and monitor the logs from them. This can also be done before the release like in the RTA testing phase to ensure the release doesn't have some obvious crashes. This of course won't be a full-proof solution for detecting all issues, but it will get us a step forward for sure.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Android,,,,,,"0|i08vfx:y",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"24 Nov '20 10:11;santtuahonen;Gearbox: Up to team level decision for how to proceed and prioritize in the overall backlog. Removing 4gearbox label. ",,,,,,,,,,,,,,,,,,,,,
QProperty does not accept Parameter list,QTBUG-88383,307704,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,thiago,febbe,febbe,10 Nov '20 18:07,17 Nov '20 15:54,18 Feb '21 09:41,,6.0.0 Beta3,,,,,,,,,,,,,,,,,,,,,,Core: Object Model,,,,0,,,,"I wanted to change parameters like:
Range range_{0,1} into 
QProperty<Range> range_{0, 1};
but this doesn't work, because you don't provide a variadic constructor with perfect forwarding:
template <typename ... Args>
QProperty(Args ...args) : QPropertyData<T>(std::forward<Args>(args)...){}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0poy7:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Feature Request: Enable using Locale and its NumberOptions for DoubleValidator,QTBUG-88453,307818,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,qt.team.quick.subscriptions,shmittal,shmittal,12 Nov '20 10:18,12 Nov '20 10:43,18 Feb '21 09:41,,5.15.1,,,,,,,,,,,,,,,,,,,,,,Quick: Core Declarative QML ,,,,1,Reported_by_support_standard,,,"Currently, User can specify the locale to DoubleValidator but the numberOptions set for that locale does not make any difference to the validator. 
E.g, If user wants to restrict comma(,) in DoubleValidator and has set NumberOption to Locale.RejectGroupSeparator, it does not work. Please refer to the attached sample. 

{code:java}
    TextField {
        id: myspin
        inputMethodHints: Qt.ImhFormattedNumbersOnly
        property var spinLocale: Qt.locale(""C"")
        validator: DoubleValidator {
            bottom: 0.0
            top: 100.1
            notation: DoubleValidator.StandardNotation
        }
        Component.onCompleted: {
            spinLocale.NumberOption = Locale.RejectGroupSeparator
            myspin.validator.locale = myspin.spinLocale.name
        }
    }
{code}
",,,,,,,,,,,,,,,QTBUG-75110,,,,"12 Nov '20 10:20;shmittal;qtbug88453.zip;https://bugreports.qt.io/secure/attachment/100079/qtbug88453.zip",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0ppmv:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"12 Nov '20 10:43;holo-pk;The workaround is to create a CustomDoubleValidator with preferred NumberOptions
{code:java}
// CustomDoubleValidator.h
class CustomDoubleValidator : public QDoubleValidator
{
    Q_OBJECT

public:
    CustomDoubleValidator()
    {
        QLocale locale(QLocale::C);
        locale.setNumberOptions(QLocale::RejectGroupSeparator);
        setNotation(QDoubleValidator::StandardNotation);
        setLocale(locale);
    }
};
{code}
and expose it to QML 
{code:java}
qmlRegisterType<CustomDoubleValidator>(""com.your.components"", 1, 0, ""CustomDoubleValidator"");
{code}
and in QML use this CustomDoubleValidator
{code:java}
// qml
import com.your.controls 1.0

TextField {
        id: myspin
        inputMethodHints: Qt.ImhFormattedNumbersOnly
        validator: CustomDoubleValidator {
            bottom: 0.0
            top: 100.1
        }
    }{code}",,,,,,,,,,,,,,,,,,,,,
Expose certificate chain and cipher of currently viewed URL,QTBUG-80860,290508,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,kiburtse,emdek,emdek,17 Dec '19 19:41,09 Nov '20 17:24,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,WebEngine,,,,2,,,,"The 5.14 release brought {{QWebEngineCertificateError::certificateChain()}}, but such information would be useful not just in case of the errors but also for properly loaded pages, so application could expose information about certificate to the user.

Related information are cipher used by this connection and mixed content state (which could be obtained using page specific URL interceptor but it's error prone and time consuming).

Both are available in {{QtWebKit}}, thanks to {{QtNetwork}} APIs.

 

Instead of simply exposing several new getters on the {{QWebEnginePage}}  it could be encapsulated as something like {{QWebEnginePageInfo}} or something like that.

It could include other properties in the future too, like actual text encoding used by the page, MIME type, document size etc.",,,,,,,,,,,,,,,,,,,"15 May '20 20:11;kiburtse;devtools-security-tab.png;https://bugreports.qt.io/secure/attachment/94836/devtools-security-tab.png","25 May '20 16:11;the compiler;screenshot-1.png;https://bugreports.qt.io/secure/attachment/95036/screenshot-1.png","25 May '20 16:12;the compiler;screenshot-2.png;https://bugreports.qt.io/secure/attachment/95037/screenshot-2.png","25 May '20 16:13;the compiler;screenshot-3.png;https://bugreports.qt.io/secure/attachment/95038/screenshot-3.png","15 May '20 20:06;kiburtse;security-info-icon.png;https://bugreports.qt.io/secure/attachment/94835/security-info-icon.png",,,,,,,,,,,,,,,,,,,,,,,,,,QTBUG-62089,9223372036854775807,,,,,,,,,"0|i0n1bj:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"14 Jan '20 10:21;emdek;One of these random properties could be also used rendering mode (quirks or strict etc.) too.","04 May '20 09:13;the compiler;Note that even something very basic is missing: A way to check whether the current connection is secure. This lead to security issues in three projects using QtWebEngine (out of 6 projects I found trying to implement a security indicator):

- https://github.com/qutebrowser/qutebrowser/issues/5403
- https://bugs.kde.org/show_bug.cgi?id=420902
- https://tracker.die-offenbachs.homelinux.org/eric/issue328

A quick overview on how those projects tried to work around the issue that there isn't a way to get this information:

- qutebrowser: Set a {{_has_ssl_errors}} flag as a response to {{certificateError}} - however, since {{certificateError}} only gets emitted once per host, that wasn't set anymore on a reload or when loading the same page again.
- Falkon: Always assumed a connection is secure when the URL starts with {{https://}}
- eric6: Same
- ""Viper Browser"": Remembers the insecure hostname in {{certificateError}} and doesn't show ""secure"" when visiting any hostname in there. That's problematic though: If the error gets fixed server-side, there's no way for the applications to find out, so they will still claim the connection is insecure. Still, that's the solution qutebrowser and eric6 are now implementing as well.
- ""theweb"" and Konqueror: Seem to open a second connection via {{QSslSocket}} to the website, just to check the certificate validity. A bit of a hack and can presumably still get out of sync with QtWebEngine's (different) network stack.","04 May '20 09:34;emdek;True.

I was trying to make something usable using exposed data in December, but failed, it's just too limited to be usable.","15 May '20 20:22;kiburtse;This is very unfortunate that mentioned certificate error's behavior contradicts expected one. It just basically exposes chromium's behavior which also remembers user's choice to ignore error until whole browser is restarted or warning is re-enabled manually (which suggests that this may be done at runtime and that it would be better to set it so unconditionally).

On topic though: i think there are two issues basically described here.

One is that some sort of indication for basic secure state is needed. I guess, something like lock icon in chromium's toolbar for high level info but in api, right? With just couple of basic values, like described here: [https://support.google.com/chrome/answer/95617]

for chromium connection status icon  !security-info-icon.png|thumbnail!

That probably may be done easily with content_utils.h:security_state::GetVisibleSecurityState(WebContents *) for root webcontents and really exposed through page's api.

As for the second, there is 'Security' tab in devtools which is very meaty with details. Loading qt.io, for example, actually fetches from at least 13 other origins as seen in devtools: !devtools-security-tab.png|thumbnail!

All these other secure origins also have its own certificates, connection info and corresponding url requests from network tab. So, i'm not sure how exposing certificate, cipher and etc just for main origin is really useful, and how text encoding, MIME type, document size relate to this.

 ","25 May '20 16:14;the compiler;Yeah, I agree something like {{GetVisibleSecurityState}} would be a great start, and IMHO the most important information of all. I still think it'd be good to get more information about a page's main origin certificate, though! See e.g. this in Chromium when you click on the ""Certificate"" button in your screenshot:

 !screenshot-1.png|thumbnail!
 !screenshot-2.png|thumbnail! 

Or in Firefox:

 !screenshot-3.png|thumbnail! 

What [~emdek] meant with encoding, etc., as far as I understood, was just an API suggestion: Rather than adding more and more getters to {{QWebEnginePage}}, this would fit nicely in a {{QWebEnginePageInfo}} type instead.",,,,,,,,,,,,,,,,,
Automated regression test for configure,QTBUG-88338,307619,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,qtbuildsystem,macadder,macadder,09 Nov '20 14:06,09 Nov '20 14:44,18 Feb '21 09:41,,6.0.0 Beta4,,,,,,,,,,,,,,,,,,,,,,Build System: CMake,,,,0,,,,"The configure script is conspicuous for its lack of self-tests. The CI system uses only a tiny fraction of the available configure options.  The rest are rarely, if ever, tested before a new Qt release.  The number of disruptive regressions that made it through CI into the dev branch when the new cmake-based configure was made the default suggests to me that more thorough testing of configure would be of benefit.

A good first step would be to test each of the available configure options one at a time to ensure that configure does not crash or terminate with a non-zero exit code.

This would obviously be a system-level test, not a (qtestlib-based) unit-level test.

CI could run the tests in parallel to improve speed.  Depending on the speed of such a test and the available CI resources, the test could be run periodically rather than for every CI run - a once-daily or once-weekly test would still be better than no testing.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0pofj:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
QMake projects: DISTFILES variable on Android,QTBUG-85331,301236,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,rampe,morte,morte,29 Jun '20 15:24,09 Nov '20 09:39,18 Feb '21 09:41,,5.15.0,,,,,,,,,,,,,,,,,,,,,5.15,Build tools: androiddeployqt,,,,0,,,,"When creating Android templates (""Create Templates"" button) QtCreator adds to .pro file following stuff:
{code:java}
DISTFILES += \ android/AndroidManifest.xml \ android/build.gradle \ android/res/values/libs.xml
{code}
It seems that DISTFILES has no effect to Android build process and used only for purpose of making files visible in QtCreator project tree.

The Qt documentation says:
{quote}
h2. DISTFILES

Specifies a list of files to be included in the dist target. This feature is supported by UnixMake specs only.
{quote}
 

So, should documentation be fixed or other variable (OTHER_FILES for example) should be used for purpose of adding files to project tree?",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Android,,,,,,"0|i03pom:902bzoztrfcei",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"06 Jul '20 07:22;rampe;Prioritized","02 Sep '20 10:00;assam;That variable is merely used for showing the files (bookkeeping), even if you don't include that it will work, the ANDROID_PACKAGE_SOURCE_DIR variable is the important one, which specifies the android package path.",,,,,,,,,,,,,,,,,,,,
"Make androiddeployqt respect gradle's productFlavors options, which lead to failure of zipalign invokation ",QTBUG-77172,281681,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,rampe,rightaway717,rightaway717,24 Jul '19 15:00,09 Nov '20 09:28,18 Feb '21 09:41,,5.10,5.11,5.12,,,,,,,,,,,,,,,,,,,,Build tools: Other,,,,2,,,,"Consider the following productFlavors in build.gradle:

 
{code:java}
flavorDimensions ""abi""
productFlavors {
    armv7 {
        dimension ""abi""
        versionCode versionProps['VERSION_CODE'].toInteger() * 100 + 7
    }
    armv8 {
        dimension ""abi""
        versionCode versionProps['VERSION_CODE'].toInteger() * 100 + 8
    }
}
{code}
 

The generated apks have the following name format:
 _android-build/build/outputs/apk/armv8/android-build-armv8-release-unsigned.apk_
 _android-build/build/outputs/apk/armv7/android-build-armv7-release-unsigned.apk_
 androiddeployqt tool expects apk with name _android-build-release-unsigned.apk_

The same happens if to use _splits:_
{code:java}
splits {
    abi {
        enable true;
        reset();
        include ""armeabi-v7a"";
        universalApk false;
    }
}{code}
I think it should be good if androiddeployqt tool respects productFlavors, so that zipalign tool would be able to proceed",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Android,,,,,,"0|i03pom:902bzoztrfcew",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"06 Aug '19 20:40;dg0yt;There are additional issues open (some for Qt Creator) with regard to product flavors, e.g. customizing app ID and min sdk.",,,,,,,,,,,,,,,,,,,,,
Expand android-deployment-settings.json to be scoped for the different archictectures,QTBUG-84379,299192,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,rampe,andysh,andysh,22 May '20 12:45,09 Nov '20 09:26,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,6.0,Build tools: androiddeployqt,,,,4,Reported_by_support_standard,,,"Expand android-deployment-settings.json to be scoped for the different archictectures. This would make it easier to control what the settings for each architecture is and save having to ensure things like extra libraries, qrc files etc are all available for that given architecture. Anything else not scoped would then be for all architectures to include.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,santtuahonen,,,,,,,"0|i03pom:902bzoztrfce",9223372036854775807,9223372036854775807,,,,rampe,,,,,,,,,,"25 May '20 08:53;assam;Currently, the android-deployment-settings.json lists extra libs for all architectures under the same key, and this aims to separate them per architecture.

I think [~andysh] was going to handle this, right?","25 May '20 16:30;andysh;That was my plan yes, since I can see it clearly in my head how it should be done but at the moment its a case of finding time.",,,,,,,,,,,,,,,,,,,,
Remove restriction to run Qt Android Services only in separate process,QTBUG-86257,303385,Suggestion,Open,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,rampe,morte,morte,26 Aug '20 08:28,09 Nov '20 09:25,18 Feb '21 09:41,,5.15,6.0,,,,,,,,,,,,,,,,,,,,6.0,Extras: Android,,,,1,,,,Make possible to run Qt Android services in the default process created for the application (e.g. as local service),,,,,,,,,,,,,,,,,,,"02 Sep '20 11:40;morte;Services in Qt 5.15 application for Android.png;https://bugreports.qt.io/secure/attachment/97868/Services+in+Qt+5.15+application+for+Android.png",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Android,,,,,,"0|i03pom:902bzoztrfcd",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"26 Aug '20 10:05;assam;Could you explain what restriction do you mean? 

You could try this example [https://doc-snapshots.qt.io/qt5-5.15/qtandroidextras-services-servicesameprocess-example.html] changing extends Service to extends QtService.

 ","27 Aug '20 21:34;morte;You can run Android service in default application process or dedicated process, but you can't run Qt Android service (QtService-extended service with native C++/Qt library) in default application process due to Qt limitations. I guess instantiation of QGuiApplication and QAndroidService in same process leads to crash.

[~assam], at example that you mentioned there is no point to extend QtService without adding native Cpp/Qt library, that QtService load's. That native Cpp/Qt part of service crashes if service runs in default application process.

You can take 'servicebinder' example and remove 
{code:java}
android:process="":qt_service""
{code}
from AndroidManifest.xml to observe application crash.","28 Aug '20 18:30;assam;QtService load's the native libs needed for Qt, if you're running in the same process as the main app, you don't need to load the libs again, so using a normal Android Service should be sufficient.

I don't see the use case of having the case you're describing, also, I don't see where you would need to instantiate both QGuiApplication and QAndroidService together?","28 Aug '20 21:33;morte;Uploaded an diagram to make it cleaner:    !Services in Qt 5.15 application for Android.png|thumbnail!

If i extend Service class in Java, then ill have normal Android service without restriction to run it as separate process, but it will be pure Java service without native C++/Qt stuff, as in example 'servicesameprocess'. 

([https://developer.android.com/guide/components/bound-services]):
{quote}If your service is private to your own application and runs in the same process as the client (which is common), you should create your interface by extending the {{[Binder|https://developer.android.com/reference/android/os/Binder]}} class and returning an instance of it from {{[onBind()|https://developer.android.com/reference/android/app/Service#onBind(android.content.Intent)]}}. The client receives the {{[Binder|https://developer.android.com/reference/android/os/Binder]}} and can use it to directly access public methods available in either the {{[Binder|https://developer.android.com/reference/android/os/Binder]}} implementation or the {{[Service|https://developer.android.com/reference/android/app/Service]}}.

This is the preferred technique when your service is merely a background worker for your own application. The only reason you would not create your interface this way is because your service is used by other applications or across separate processes.
{quote}","28 Aug '20 21:34;morte;Here ([https://www.kdab.com/qt-android-create-android-service-using-qt/]) is Bogdan Vatra's article about Services, where he wrote:
{quote}*BE AWARE:* Every single Qt service/activity *MUST* run in it’s own process! Therefore for each service you must set a different *android:process* attribute value.
{quote}
That what he says about that limitation: ""The problem is Qt’s architecture which can’t handle a service and an UI in the same process. We’ll see if in Qt 6 the things will change.""","03 Sep '20 08:23;assam;Using the QGuiApplication and QAndroidService to achieve this is not possible, instead it could be done by adding a new event handler for QAndroidService that doesn't rely strictly on QCoreApplication, but it hooks to the main app's QGuiApplication event loop.",,,,,,,,,,,,,,,,
Document documentation conventions,QTBUG-88213,307446,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,docteam,mitch_curtis,mitch_curtis,05 Nov '20 13:05,05 Nov '20 14:06,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Documentation,,,,0,,,,"Things like:

* What length should lines be wrapped at?
* How do you refer to a property after linking to it with \l the first time?

and other questions people might have.

This could also work in a how-to format, maybe.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0pnef:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"05 Nov '20 14:06;mitch_curtis;I [added some stuff|https://wiki.qt.io/index.php?title=Writing_Qt_Documentation&type=revision&diff=37495&oldid=31979], but the second point seems to be inconsistent, and would require someone from the doc team to make a decision.

[~paulwicking] said:
{quote}
When it comes to how we style certain content (e.g. referencing a property name), we're inconsistent throughout. Some places we use \c for monospaced font, other places we use \b or even \e (bold/emphasis (i.e. italic)). Yet other places, we don't do anything except type the name.
{quote}",,,,,,,,,,,,,,,,,,,,,
Event informing that the device has switched to Night(Dark) mode or vice versa,QTBUG-88043,307091,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,,piotrm,piotrm,30 Oct '20 08:38,03 Nov '20 11:22,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,GUI: Window management,,,,0,4GearboxHandling,,,"As Dark mode (a.k.a Dark Theme) is present in MacOs , Windows 10 and Android  platform  since API 29 and it can be turned on in runtime,  an event notification about the fact of switching on/off the dark mode. It would allow to change the application's theme on the fly both in QWidget applications as well as Qml ones.

*More information:*

[https://developer.apple.com/design/human-interface-guidelines/ios/visual-design/dark-mode]

[https://developer.android.com/guide/topics/ui/look-and-feel/darktheme] 

[https://www.windowscentral.com/how-enable-dark-theme-windows-10]

 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,javihria,,,,,,,"0|i096l2:y90008",9223372036854775807,9223372036854775807,,,,vhilshei,,,,,,,,,,"02 Nov '20 09:15;rampe;To be discussed in gearbox.","03 Nov '20 10:36;santtuahonen;Gearbox (Santtu & Kalle): This sounds like a good cross platform feature so that Qt applications can follow OS normal / dark mode changes on Windows, Android, macOS etc. The ownership of this is however in GUI side, thus moving to [~javihria] and [~vhilshei] to process further.","03 Nov '20 11:22;vhilshei;Qt's UI classes listen to the platform theme, and will respond to change to the theme (which usually triggers a change of the QPalette, or of how the style renders things). This works fine on macOS, Windows, or Linux desktop platforms.

If there is no change to the QPlatformTheme due to a missing integration on a specific platform (such as Android, I assume?), then that integration needs to be added.",,,,,,,,,,,,,,,,,,,
QML: string value assignment to C++ QDateTime property behaviour change in Qt6,QTBUG-87652,306350,Suggestion,Open,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,qt.team.quick.subscriptions,chrisadams,chrisadams,16 Oct '20 06:16,16 Oct '20 12:07,18 Feb '21 09:41,,6.0.0 Alpha,,,,,,,,,,,,,,,,,,,,,6.0.0 Beta1,QML: Declarative and Javascript Engine,,,,0,earmarked_by_ulf,,,"Perhaps related to QTBUG-87610, I found something interesting while fixing QtPIM unit tests to work with Qt6 - in this case, Qt6 behaviour is correct, while the previous Qt5 behaviour was incorrect, so I suggest adding a note to the ""Porting From Qt5 to Qt6"" documentation about this.

Consider the following main.qml:
{code:java}
import QtQuick 2.0
import Helper 1.0

Rectangle {
    width: 200
    height: 200
    color: ""lightsteelblue""
    property var helper: Helper { startDateTime: '2011-10-23T15:00:00Z' }
    Component.onCompleted: { console.log(""Have startDateTime: "" + helper.startDateTime) }
}
{code}
with the following main.cpp:
{code:java}
#include <QtCore/QCoreApplication>
#include <QtCore/QVariantMap>
#include <QtCore/QDateTime>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QTimer>
#include <QtCore/QObject>

#include <QtGui/QGuiApplication>
#include <QtQml/QQmlEngine>
#include <QtQml/QQmlComponent>
#include <QtQml/QQmlContext>
#include <QtQuick/QQuickView>

#include <QtDebug>

class Helper : public QObject
{
    Q_OBJECT
    Q_PROPERTY(QDateTime startDateTime READ startDateTime WRITE setStartDateTime NOTIFY startDateTimeChanged)

public:
    Helper(QObject *parent = 0) : QObject(parent) {}

    QDateTime startDateTime() const { return m_startDateTime; }
    void setStartDateTime(const QDateTime &sdt) { m_startDateTime = sdt; emit startDateTimeChanged(); }

Q_SIGNALS:
    void startDateTimeChanged();

private:
    QDateTime m_startDateTime;
};

int main(int argc, char *argv[])
{
    QGuiApplication app(argc, argv);

    qmlRegisterType<Helper>(""Helper"", 1, 0, ""Helper"");

    QQuickView view;
    view.setSource(QUrl(QStringLiteral(""main.qml"")));
    view.show();

    return app.exec();
}

#include ""main.moc""
{code}
Running in machine with locale set to my local timezone (Brisbane, GMT+10).

With Qt5:
{code:java}
$ ./testdate
qml: Have startDateTime: Sun Oct 23 15:00:00 2011 GMT+1000{code}
With Qt6:
{code:java}
$ ./testdate
qml: Have startDateTime: Mon Oct 24 01:00:00 2011 GMT+1000{code}
It appears that the timezone information is ignored in Qt5, while being correctly handled now in Qt6.  I suggest that this behaviour change be added to the documentation, if it has not been already (and if it has already, I apologise for the noise).

 (It also reproduces similarly for a value like '2011-10-23T15:00:00+0300'.)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0pgx3:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"16 Oct '20 06:34;fabiankosmale;[~Eddy] I think you've added fix the timezone handling? Do you recall if this was a declarative only fix, or if that results from a change in qtcore?","16 Oct '20 12:07;Eddy;hmm ... OK, the date-time text is given in UTC (Z suffix) and is represented by a {{Qt::LocalTime}} object, in Brisbane's time-zone, where it is indeed 01:00 the next day when UTC is at 15:00.  That makes sense.

As to what changed it &hellip; there's been a lot of work (by two of our new recruits, as well as me) on date-times since 5.15.0, and my knowledge of how things move to and fro via {{QVariant}} and QML is decidedly vague, so it's hard to know which change is actually responsible for this (especially with {{QVariant}} changing radically, too).
My best guess would be [~agolubev]'s {{commit bed25fdf6065d7137fa5610e4f214e9a8f8e172b}}, although the parser did already know about ""Z"" as suffix even before that, so this could easily be one of the hundred other changes to {{qtbase/src/corelib/time/}} between {{v5.15.0}} and current {{dev}}.
A binary chop (e.g. using {{git bisect}} and using ""good"" to mean the old, wrong, behaviour) would be the only sure way to know which change is really responsible, but shouldn't take too long ({{qtbase}} still has less than {{2^\{13\}}} commits between {{v5.15.0}} and {{dev}}, so it shouldn't take more than about a dozen rebuild-and-test steps).

There has also been one fix in {{qtdeclarative}}, [~ulherman]'s {{commit 510253aa0996a89e6029d244002a08615b2fb65b}}, but whether that's relevant depends on which platform you're on (Linux and MS-Win haven't changed, all others have).
",,,,,,,,,,,,,,,,,,,,
API to control the sequence of series drawn in chartView when OpenGL is set,QTBUG-87679,306385,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,e0348803,shmittal,shmittal,16 Oct '20 11:21,16 Oct '20 11:25,18 Feb '21 09:41,,5.15.1,,,,,,,,,,,,,,,,,,,,,,Charts,,,,0,Reported_by_support_standard,,,"When a chartView has multiple series, they are drawn in order of their declaration. But when OpenGL is set to true, this order becomes random. 
Please refer to the attached sample, where 2 series, green and purple have same points, meaning one overlaps other. But when OpenGL is on, sometimes green overlaps purple and sometimes purple overlaps green. 
Ideally, these should be painted in order of their declaration. ",,,,,,,,,,,,,,,,,,,"16 Oct '20 11:25;shmittal;qtbug87679.zip;https://bugreports.qt.io/secure/attachment/99334/qtbug87679.zip",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0ph4v:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Allow documenting the module specific namespace docs,QTBUG-87640,306334,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,docinfrastructure,vestbo,vestbo,15 Oct '20 12:59,15 Oct '20 13:04,18 Feb '21 09:41,,6.0,,,,,,,,,,,,,,,,,,,,,,Build tools: qdoc,,,,0,,,,"{quote}Only one location can use the \namespace command, otherwise it gets overwritten. If you document items under that namespace in other modules, and you have the dependency to the index that contains the \namespace, you should get the namespacename-sub-modulename.html page.{quote}

Would be nice if it was possible to document the sub-page as well, for module specific docs about the namespace, eg:
 
{code:java}
\namespace Foo
\inmodule SomeSubModule{code}
 
Where the main docs are documented with a plain:
{code:java}
\namespace Foo{code}
 
 
 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0pgtz:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
List sub-namespaces as namespaces in module C++ class overview,QTBUG-87641,306335,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,docinfrastructure,vestbo,vestbo,15 Oct '20 13:02,15 Oct '20 13:04,18 Feb '21 09:41,,6.0,,,,,,,,,,,,,,,,,,,,,,Build tools: qdoc,,,,0,,,,"Instead of the QNativeInterface being prefixed the classes under ""Classes"", I expect an entry under ""Namespaces"", linking to the sub-namespace docs, that then list the classes, and the classes not being listed under ""Classes"".

!image-2020-10-15-15-03-50-179.png|width=1156,height=497!",,,,,,,,,,,,,,,,,,,"15 Oct '20 13:03;vestbo;MicrosoftTeams-image (1).png;https://bugreports.qt.io/secure/attachment/99297/MicrosoftTeams-image+%281%29.png","15 Oct '20 13:03;vestbo;image-2020-10-15-15-03-50-179.png;https://bugreports.qt.io/secure/attachment/99298/image-2020-10-15-15-03-50-179.png",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0pgu7:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
iOS14 - little green dot ,QTBUG-87296,305787,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,valentyn.doroshchuk,scorp1us,scorp1us,08 Oct '20 13:11,08 Oct '20 13:29,18 Feb '21 09:41,,5.12.9,,,,,,,,,,,,,,,,,,,,,,Multimedia,,,,2,,,,"iOS 14 has a new feature, a little green dot that indicates the device is capturing  data from the mic or camera.

[https://www.the-sun.com/lifestyle/tech/1595314/iphone-green-dot-orange-camera-microphone-notification-ios-14/]

In our app, we start the Qt camera stack and this seems to activate it, even though we aren't acquiring video or images yet.

This makes the user think we are spying on them. There should be a way to avoid the green dot until we are actually capturing multimedia.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,iOS/tvOS/watchOS,,,,,,"0|i0pdlj:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[5.12.0-beta4] QQC and QQC2 repository names are not consistent with documentation,QTBUG-71654,269450,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,veshivas,mipohjan,mipohjan,08 Nov '18 07:20,28 Sep '20 15:30,18 Feb '21 09:41,,5.12.0 Beta 4,,,,,,,,,,,,,,,,,,,,,,Documentation,Quick: Controls 1,Quick: Controls 2,,0,RTA,,,"Because of: QTBUG-70333 and especially [https://codereview.qt-project.org/#/c/243390/] where qtquickcontrols2 links have changed to qtquickcontrols (and qtquickcontrols links have changed to qtquickcontrols1), the repository names don't match with the documentation now.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Linux/X11,macOS,Windows,,,,"0|i0jqlj:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"09 Nov '18 11:01;mitch_curtis;This is indeed a bit confusing. We could rename qtquickcontrols.git to qtquickcontrols1.git and eventually qtquickcontrols2.git to qtquickcontrols.git? It's a bit messy. :x","29 Apr '19 09:07;joaijala;What would be the resolution for this issue, [~veshivas]?","11 Oct '19 13:14;veshivas;Renaming the repos is ideal but I don't see this as a bug.  Changing it to a suggestion or task.",,,,,,,,,,,,,,,,,,,
"Property to control nested Menu ""title/label"" size.",QTBUG-84608,299668,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,qt.team.quick.subscriptions,tero.pelkonen,tero.pelkonen,01 Jun '20 11:19,28 Sep '20 13:45,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Quick: Controls 2,,,,0,qtquickcontrols2-desktop,reported_by_support_standard,,"User wants to adjust the size of the MenuItems and this does work well on them.

Issue comes if there is a nested Menu and the title of it has automatic size.

 

Could there be a new property for menu that could affect the height/width of the nested Menu?

Example project attached.

 ",,,,,,,,,,,,,,,,,,,"02 Jun '20 08:10;mitch_curtis;NestedMenuTest-v2.zip;https://bugreports.qt.io/secure/attachment/95232/NestedMenuTest-v2.zip","01 Jun '20 11:15;tero.pelkonen;NestedMenuTest.zip;https://bugreports.qt.io/secure/attachment/95213/NestedMenuTest.zip",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0oezz:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"02 Jun '20 08:11;mitch_curtis;Hmm, that is a tricky problem, isn't it. If you're using the Material style you can get shorter MenuItems for free by using {{Variant=Dense}} in the [configuration file|https://doc.qt.io/qt-5/qtquickcontrols2-material.html#configuration-file]. If you're using any other style, perhaps the best workaround for now would be to override MenuItem with your own style:

 [^NestedMenuTest-v2.zip] 

That example assumes you're using the Default style, but if you're not, you can specify the [fallback style|https://doc.qt.io/qt-5/qtquickcontrols2-configuration.html#controls-section].",,,,,,,,,,,,,,,,,,,,,
"Feature Request: QPolarChart starting position, direction selection",QTBUG-86849,304933,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,e0348803,shmittal,shmittal,23 Sep '20 08:20,23 Sep '20 08:20,18 Feb '21 09:41,,5.15.1,,,,,,,,,,,,,,,,,,,,,,Charts,,,,0,Reported_by_support_standard,,,"Currently, polar chart starting point is fixed to 12 o'clock position. It would be nice to have a way of setting it to different positions and being able to switch direction from clockwise to counter-clockwise too.

According to Qt’s documentation “If the angular distance between two consecutive points in a series is more than 180 degrees, any direct line connecting the two points becomes meaningless, and will not be drawn. Instead, a line will be drawn to and from the centre of the chart”. It would be better to make this behaviour configurable like if a user wants this line to be drawn. 
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0p8of:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
moc: add support for C++20 modules,QTBUG-86697,304594,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,fabiankosmale,talkless,talkless,16 Sep '20 12:48,21 Sep '20 06:30,18 Feb '21 09:41,,6.x,,,,,,,,,,,,,,,,,,,,,,Build tools: moc,,,,1,,,,"C++20 is now [approved|https://herbsutter.com/2020/09/06/c20-approved-c23-meetings-and-schedule-update/],
 There's [Visual Studio C++ module support|https://devblogs.microsoft.com/cppblog/standard-c20-modules-support-with-msvc-in-visual-studio-2019-version-16-8/],
 Also for [Clang|https://clang.llvm.org/docs/Modules.html],
 And there's [GCC modules branch|https://gcc.gnu.org/wiki/cxx-modules#Building]

Maybe it's time to talk about supporting that features in Qt tools?

If I understand correctly, {{moc}} has to detect that ""header"" it scanned is actually a _module interface unit_ (it has {{export module Foo;}}), and so it has to generate respective {{moc_Foo.cpp}} that will be one of the _module implementation units_, that:
 * starts with {{module;}},
 * has all neccessarry-for-black-moc-magic includes in global module fragment,
 * {{module Foo;}} to note that it's module implementation unit for that module {{Foo}} it found {{Q_OBJECT}} in earlier,
 * Then all that moc-generated magic code (except for {{#include}}'s as they can be only in global fragment?).

This issue does not imply that Qt has to ship it's code in C++20 modules, it's simply that {{moc}} support will allow users of Qt to use Qt classes within user-defined modules.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0p6pz:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"16 Sep '20 13:06;talkless;Here's my (failed) experiment due to GCC internal compiler error.

First, I've built {{devel/c++-modules}} branch.

Then, I've created module mapper file like this (this is GCC-specific?):
{code:java}
$ cat mapper 
foo gcm.cache/foo.gcm
{code}
Then, {{foo-m.cpp}} module interface unit:
{code:java}
module;

#include <QObject>

export module foo;

export class Foo : public QObject {

Q_OBJECT

public:
    Foo(QObject *parent = nullptr);

};
{code}
{{foo.cpp}} module implementation unit (was not necessary, could have all code in interface unit I guess):
{code:java}
module;

#include <iostream>

module foo;

Foo::Foo(QObject *parent) : QObject{parent} {
    std::cout << ""Foo::Foo()\n"";
}
{code}
{{moc_foo.cpp}} was first generated from ""oldschool"" header file, and then applied some changes (added {{module}} and {{module foo;}}):
{code:java}
module;
/****************************************************************************
** Meta object code from reading C++ file 'foo-m-oldstyle-header.h'
**
** Created by: The Qt Meta Object Compiler version 67 (Qt 5.11.3)
**
** WARNING! All changes made in this file will be lost!
*****************************************************************************/

//#include ""foo-m-oldstyle-header.h""
#include <QtCore/qbytearray.h>
#include <QtCore/qmetatype.h>
#if !defined(Q_MOC_OUTPUT_REVISION)
#error ""The header file 'foo-m-oldstyle-header.h' doesn't include <QObject>.""
#elif Q_MOC_OUTPUT_REVISION != 67
#error ""This file was generated using the moc from 5.11.3. It""
#error ""cannot be used with the include files from this version of Qt.""
#error ""(The moc has changed too much.)""
#endif


module foo;

QT_BEGIN_MOC_NAMESPACE
QT_WARNING_PUSH
QT_WARNING_DISABLE_DEPRECATED
struct qt_meta_stringdata_Foo_t {
    QByteArrayData data[1];
    char stringdata0[4];
};
#define QT_MOC_LITERAL(idx, ofs, len) \
    Q_STATIC_BYTE_ARRAY_DATA_HEADER_INITIALIZER_WITH_OFFSET(len, \
    qptrdiff(offsetof(qt_meta_stringdata_Foo_t, stringdata0) + ofs \
        - idx * sizeof(QByteArrayData)) \
    )
static const qt_meta_stringdata_Foo_t qt_meta_stringdata_Foo = {
    {
QT_MOC_LITERAL(0, 0, 3) // ""Foo""

    },
    ""Foo""
};
#undef QT_MOC_LITERAL


static const uint qt_meta_data_Foo[] = {

 // content:
       7,       // revision
       0,       // classname
       0,    0, // classinfo
       0,    0, // methods
       0,    0, // properties
       0,    0, // enums/sets
       0,    0, // constructors
       0,       // flags
       0,       // signalCount

       0        // eod
};

void Foo::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{
    Q_UNUSED(_o);
    Q_UNUSED(_id);
    Q_UNUSED(_c);
    Q_UNUSED(_a);
}

QT_INIT_METAOBJECT const QMetaObject Foo::staticMetaObject = {
    { &QObject::staticMetaObject, qt_meta_stringdata_Foo.data,
      qt_meta_data_Foo,  qt_static_metacall, nullptr, nullptr}
};


const QMetaObject *Foo::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;
}

void *Foo::qt_metacast(const char *_clname)
{
    if (!_clname) return nullptr;
    if (!strcmp(_clname, qt_meta_stringdata_Foo.stringdata0))
        return static_cast<void*>(this);
    return QObject::qt_metacast(_clname);
}

int Foo::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = QObject::qt_metacall(_c, _id, _a);
    return _id;
}
QT_WARNING_POP
QT_END_MOC_NAMESPACE


{code}
And, of course, {{main.cpp}}:
{code:java}
import foo;

int main()
{
    Foo f;
}
{code}
I've tried building like this:
{code:java}
/home/debian/gcc/prefix/bin/g++ -I /usr/include/x86_64-linux-gnu/qt5/ -I /usr/include/x86_64-linux-gnu/qt5/QtCore/ -std=gnu++20 -fPIC -fmodules-ts -fmodule-mapper=mapper foo-m.cpp foo.cpp moc_foo.cpp main.cpp -L /usr/lib/x86_64-linux-gnu/ -lQt5Core
{code}
But failed with ICE. I guess it's a bit early for GCC...:
{code:java}
moc_foo.cpp:62:6: internal compiler error: in comptypes, at cp/typeck.c:1504
   62 | void Foo::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
      |      ^~~
0x6ee59f comptypes(tree_node*, tree_node*, int)
        ../../gcc/cp/typeck.c:1504
0xb0392a cp_tree_equal(tree_node*, tree_node*)
        ../../gcc/cp/tree.c:3963
0xb03a36 cp_tree_equal(tree_node*, tree_node*)
        ../../gcc/cp/tree.c:4023
0xb03a36 cp_tree_equal(tree_node*, tree_node*)
        ../../gcc/cp/tree.c:4023
0xa01814 trees_in::read_enum_def(tree_node*, tree_node*)
        ../../gcc/cp/module.cc:11848
0xa01e79 module_state::read_cluster(unsigned int)
        ../../gcc/cp/module.cc:14536
0xa02695 module_state::load_section(unsigned int, mc_slot*)
        ../../gcc/cp/module.cc:17645
0xa0275f module_state::lazy_load(unsigned int, mc_slot*)
        ../../gcc/cp/module.cc:18259
0x9fccfc trees_in::tree_node(bool)
        ../../gcc/cp/module.cc:9478
0x9ff169 trees_in::key_mergeable(int, merge_kind, tree_node*, tree_node*, tree_node*, tree_node*, bool)
        ../../gcc/cp/module.cc:10455
0x9fa2b4 trees_in::decl_value()
        ../../gcc/cp/module.cc:7841
0x9fc247 trees_in::tree_node(bool)
        ../../gcc/cp/module.cc:8980
0xa02193 module_state::read_cluster(unsigned int)
        ../../gcc/cp/module.cc:14527
0xa02695 module_state::load_section(unsigned int, mc_slot*)
        ../../gcc/cp/module.cc:17645
0xa0275f module_state::lazy_load(unsigned int, mc_slot*)
        ../../gcc/cp/module.cc:18259
0x9fccfc trees_in::tree_node(bool)
        ../../gcc/cp/module.cc:9478
0x9fbb99 trees_in::tree_node(bool)
        ../../gcc/cp/module.cc:9030
0x9fd651 trees_in::core_vals(tree_node*)
        ../../gcc/cp/module.cc:6382
0xa04187 trees_in::tree_node_vals(tree_node*)
        ../../gcc/cp/module.cc:7010
0xa04187 trees_in::tree_value()
        ../../gcc/cp/module.cc:8757
We are damaged, This is broken.
Logic is lost,
We struggle,
Hunt through the rubble for what once was.
THIS IS AN IN-DEVELOPMENT COMPILER, it barfed, quelle horreur
See <https://gcc.gnu.org/wiki/cxx-modules#Bugs>, WHICH IS NOT THE USUAL REPORTING MECHANISM!
{code}","21 Sep '20 06:30;fabiankosmale;I agree that this needs to be done at some point, but I would expect that getting moc to support modules won't work fully until CMake supports them (https://gitlab.kitware.com/cmake/cmake/-/issues/18355).",,,,,,,,,,,,,,,,,,,,
It would be nice if we list all dependencies of modules,QTBUG-71221,268544,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,docinfrastructure,irfan.omair@digia.com,irfan.omair@digia.com,17 Oct '18 18:03,14 Sep '20 12:19,18 Feb '21 09:41,,5.11,,,,,,,,,,,,,,,,,,,,,,Build tools: qdoc,Documentation,,,0,Reported_by_support_standard,,,"It is not clear what module is dependent on what when building and skipping , for example QtWebengine needs few module and users can easily skip thos while configuring.

It would be great if we can list all the dependencies of modules",All Platform,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0jl27:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
QDoc: Implement automatic lookup of snippets (C++ vs. Python),QTBUG-74810,276295,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,docinfrastructure,paulwicking,paulwicking,28 Mar '19 13:17,14 Sep '20 12:19,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Build tools: qdoc,,,,0,DocWorkshop03.19,,,"It would make sense for QDoc to automatically include a correct version of a \snippet, based on whether we're generating C++,QML, or Python documentation (i.e. select the correct file based on the file extension).

Possibly, either fall back to a default snippet file, or omit the snippet entirely, if the correct extension does not exist.

For Python, investigate whether it should be Shiboken or QDoc that handles the snippet selection.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0kshj:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add support for passing -DDEFINE to qdoc,QTBUG-83969,298287,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,docinfrastructure,andysh,andysh,04 May '20 09:35,14 Sep '20 12:19,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Build tools: qdoc,,,,1,Reported_by_support_standard,,,"Add support for passing -DDEFINE to qdoc, currently you need to do it like: -D DEFINE to get it to work, but since a Makefile can have defines specified with -DDEFINE then it would make it easier if qdoc would accept defines that way too. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0o6yf:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"18 Jun '20 05:54;paulwicking;[~andysh] which version is this on? I seem to recall this was done for a reason (I believe tied to the clang parser) and that qdoc parses all defines and adds the whitespace if missing. This may have changed again, of course, and I might also be terribly mistaken in my recollection.","18 Jun '20 06:03;andysh;5.15.0b3 to be precise.",,,,,,,,,,,,,,,,,,,,
Doc: Introduce incremental documentation builds,QTBUG-74788,276273,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,docinfrastructure,paulwicking,paulwicking,28 Mar '19 13:03,14 Sep '20 12:19,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Build tools: qdoc,Documentation,,,0,DocWorkshop03.19,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0kscn:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Doc: Re-design automatic linking in documentation,QTBUG-74783,276268,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,docinfrastructure,paulwicking,paulwicking,28 Mar '19 13:00,14 Sep '20 12:19,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Build tools: qdoc,Documentation,,,0,DocWorkshop03.19,,,"The very least, an easy-to-use mechanism for avoiding specific words from being auto-linked is needed.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0ksbj:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"15 Apr '19 08:51;gbk;I added that capability about a year ago, but now I can't remember how I did it. I think you just escape the word with double backslash. I will try it now.","29 Apr '19 10:21;treinio;A more writer-friendly approach would be listing 'nolink' words in a configuration variable. This way, the writer doesn't have to escape every single instance, and only link explicitly when needed.

i think it's good to have both mechanisms, though.",,,,,,,,,,,,,,,,,,,,
QShaderBaker / qsb : how to ensure shared variable names ?,QTBUG-86589,304381,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,lagocs,jcelerier,jcelerier,11 Sep '20 14:54,11 Sep '20 16:12,18 Feb '21 09:41,,5.15.0,5.15.1,,,,,,,,,,,,,,,,,,,,,Qt RHI,,,,0,,,,"Hello,
consider the attached shaders. 
When passing them through qsb (or QShaderBaker), the generated names for the structures aren't the same across vertex and fragment: 
* In the vertex shader, the renderer_t instance is assigned _48.
* In the fragment shader, the material_t instance is assigned _48.

This then causes a shader link failure, with the following error  (using the RHI GL backend): 

{{Warning: Failed to link shader program: error: uniform `_48' declared as type `material_t' and type `renderer_t'.}}

But this does not seem to be something on which we have control as a user - the most meaningful thing would be to have a QShaderProgramBaker which would take all the stages and take the previously-generated variable names into account while baking the shaders ? 

","Linux with Mesa

Extended renderer info (GLX_MESA_query_renderer):
    Vendor: Intel (0x8086)
    Device: Mesa Intel(R) UHD Graphics 630 (CFL GT2) (0x3e9b)
    Version: 20.1.7
    Accelerated: yes
    Video memory: 3072MB
    Unified memory: yes
    Preferred profile: core (0x1)
    Max core profile version: 4.6
    Max compat profile version: 4.6
    Max GLES1 profile version: 1.1
    Max GLES[23] profile version: 3.2
OpenGL vendor string: Intel
OpenGL renderer string: Mesa Intel(R) UHD Graphics 630 (CFL GT2)
OpenGL core profile version string: 4.6 (Core Profile) Mesa 20.1.7
OpenGL core profile shading language version string: 4.60
",,,,,,,,,,,,,,,,,,"11 Sep '20 14:47;jcelerier;bug.frag;https://bugreports.qt.io/secure/attachment/98143/bug.frag","11 Sep '20 14:47;jcelerier;bug.vert;https://bugreports.qt.io/secure/attachment/98142/bug.vert",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Linux/X11,,,,,,"0|i0p5hj:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"11 Sep '20 14:57;jcelerier;s/suggestion/bug/ :-)","11 Sep '20 16:11;lagocs;Out of our hands, most likely. If there is no instance name, SPIRV-Cross will pick ""_id"" where id is whatever ID the compiler (glslang) happened to generate for the OpVariable instruction. 
(and the shaders have nothing to do with each other, compilation and reflection/translating happens completely independently. Any id in one SPIR-V shader may be used for something else in another shader.)

If using a single uniform buffer is not an option, add an instance name.

{code}
layout(std140, binding = 0) uniform renderer_t {
   mat4 clipSpaceCorrMatrix;
  vec2 texcoordAdjust;
  vec2 RENDERSIZE;
} r;
{code}

Using the same instance name in bug.vert/frag will then lead to an identical uniform declaration (uniform renderer_t r) in the OpenGL shaders.

The downside is that this introduces the need to prefix all access to the members with the instance name. (r.RENDERSIZE, and so on)

Strictly speaking we should always use an explicit instance name, because even if there would be no clash in the naming, using a different (implicit) name, e.g. _33 and _45 in the vertex and fragment shader for same same struct uniform would lead to a duplicate set of uniforms (like _33.member and _45.member for each (active (=not unused)) member). The GL backend of QRhi deals with this automatically but it does not change the fact that it is a bit wasteful.
",,,,,,,,,,,,,,,,,,,,
Feature Request: API for Line spacing in TextArea,QTBUG-84178,298695,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,qt.team.quick.subscriptions,shmittal,shmittal,12 May '20 12:37,09 Sep '20 11:48,18 Feb '21 09:41,,5.14.1,5.15.0,,,,,,,,,,,,,,,,,,,,,Quick: Core Declarative QML ,,,,0,Reported_by_support_standard,,,"It would be great to have a property in TextArea to set line spacing in case of multi-line input. Currently, we can only set letterSpacing and WordSpacing, not the line spacing. 
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0o9cn:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"12 May '20 14:44;srutledg;You can adjust it in the block format in the document: https://doc.qt.io/qt-5/qtextblockformat.html but yeah we don't have QML API for everything.  But overriding the line spacing of a whole document at once is less flexible than doing it on a block level.  We need to think about QML API for wysiwyg text editing features in general, IMO.","09 Sep '20 11:48;mitch_curtis;This API would go in TextEdit; changing the component.",,,,,,,,,,,,,,,,,,,,
QListView and QComboBox cannot scroll through gestures under the touch screen,QTBUG-86090,302945,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,srutledg,dami,dami,18 Aug '20 06:29,18 Aug '20 09:28,18 Feb '21 09:41,,5.15.0,,,,,,,,,,,,,,,,,,,,,,"GUI: Basic Input System (keyboard, mouse, touch)",GUI: Complex Input methods,Widgets: Gesture Support,,0,,,,"Under the touch screen, we need to realize sliding up and down like a mouse, but such functions as QListView and QComboBox cannot be realized.",uos20（deepin）,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Linux/X11,,,,,,"0|i0oy87:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"18 Aug '20 07:54;srutledg;Have you tried QScroller?

I agree it would be nice if widgets handled touch directly, but that's not in scope for the foreseeable future.  We are too small a team, so we spend our time on Qt Quick rather than on doing big enhancements in Widgets.

Of course since touch can emulate mouse, at least you can scroll any scrollbar, if one appears.  So one workaround is to make scrollbars wider in touch-oriented UIs.","18 Aug '20 09:28;dami;The use of QScroller under QListView has been solved, and my modification will be submitted later. Thank you.",,,,,,,,,,,,,,,,,,,,
Support swiping to take an action in SwipeDelegate,QTBUG-85799,302247,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,qt.team.quick.subscriptions,poikelin,poikelin,29 Jul '20 12:03,29 Jul '20 13:49,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Quick: Controls 2,,,,1,Reported_by_support_standard,,,"As a example, try swiping the action list on the right:
https://demo.mobiscroll.com/jquery/listview/swipe-actions#

This is almost possible to do now, but SwipeDelegate has a feature that if you pull it more than 50%, it opens fully automatically which would cause it to unintentionally trigger the action.


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0ou4v:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"29 Jul '20 12:41;mitch_curtis;It's easier if you show code that you've tried and explain where it goes wrong. For example, this code works for me:

{code}
import QtQuick 2.15
import QtQuick.Controls 2.15

ApplicationWindow {
    width: 400
    height: 400
    visible: true

    ListView {
        id: listView
        anchors.fill: parent
        model: 10
        delegate: SwipeDelegate {
            id: swipeDelegate
            text: ""Image "" + (modelData + 1)
            width: parent.width

            ListView.onRemove: SequentialAnimation {
                PropertyAction {
                    target: swipeDelegate
                    property: ""ListView.delayRemove""
                    value: true
                }
                NumberAnimation {
                    target: swipeDelegate
                    property: ""height""
                    to: 0
                    easing.type: Easing.InOutQuad
                }
                PropertyAction {
                    target: swipeDelegate
                    property: ""ListView.delayRemove""
                    value: false
                }
            }

            swipe.left: Label {
                id: labelItem
                width: parent.width
                text: swipeDelegate.swipe.position < 0.5 ? ""Get link"" : ""Download""
                color: ""white""
                verticalAlignment: Label.AlignVCenter
                padding: 12
                height: parent.height
                anchors.left: parent.left

                SwipeDelegate.onClicked: listView.model.remove(index)

                background: Rectangle {
                    color: labelItem.SwipeDelegate.pressed ? Qt.darker(""tomato"", 1.1) : ""tomato""
                }
            }
        }
    }
}
{code}","29 Jul '20 13:12;poikelin;With that, how would you get that ""Get link"" action?

If you pull it just under 50% and release it, it just closes without any notification that I can see. If you pull over 50% and release it, it snaps to Download action which you could figure out happened because swipe.onOpened is called (and to automatically close it, you can just call swipe.close() there).

So basically a way to disable it automatically opening it completely if it is just over 50% (which should trigger ""Get link"" action); and to close it automatically, but that could be done manually too with close() call.","29 Jul '20 13:20;mitch_curtis;OK, so it's about getting some kind of notification that you released it at a certain point.","29 Jul '20 13:27;mitch_curtis;I was going to suggest something like a canceled() signal, but that name is already taken. :) The naming is also wrong, as we currently emit it when a mouse click is interrupted:

https://doc.qt.io/qt-5/qml-qtquick-controls2-abstractbutton.html#canceled-signal

In any case, I think this would be worthwhile adding. We just need to come up with an appropriate name for it.","29 Jul '20 13:49;fabiankosmale;The English language should have enough alternatives: discontinued, aborted, rescinded...",,,,,,,,,,,,,,,,,
wasm: file dialog to support opening multiple files,QTBUG-85733,302116,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,sorvig,poikelin,poikelin,24 Jul '20 18:24,28 Jul '20 23:41,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,QPA,,,,1,Reported_by_support_standard,,,Currently it seems only possible to open a single file with a file dialog on WASM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,WebAssembly,,,,,,"0|i0otcf:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add a means to get the currently paired devices available on the system,QTBUG-85541,301652,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,ablasche,andysh,andysh,10 Jul '20 09:31,21 Jul '20 11:50,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Connectivity: Bluetooth,,,,0,Reported_by_support_standard,,,Add a means to get the currently paired devices available on the system. On Android for example this can be obtained by using BluetoothAdapter.getBondedDevices(). If a particular system does not provide a means then we could return the previous scan (assuming there was one). This saves having to do a scan first if it is expected that the device is already paired.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0oqnj:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Provide a deployment tool for Linux,QTBUG-74940,276582,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,qtbuildsystem,mitch_curtis,mitch_curtis,03 Apr '19 15:30,18 Jul '20 13:10,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Build tools: Other,,,,9,,,,"Deployment on Linux is a pain. There are a couple of tools that offer a way to deploy applications on Linux:

- https://github.com/probonopd/linuxdeployqt (https://github.com/probonopd/linuxdeployqt/issues/84)
- https://github.com/linuxdeploy/linuxdeploy (https://github.com/linuxdeploy/linuxdeploy/issues/73)

Development mailing list discussion:

https://lists.qt-project.org/pipermail/development/2019-April/035611.html",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0ku8f:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"14 Apr '19 01:19;ceperez1996;The deployment process on Linux is always a pain to make it running. I have been using linuxdeployqt and it worked like a charm most of times, but it's quite slow, considering that I/O operations are faster under UNIX and still windeployqt is much faster. Hope this can be solved before the release of Qt6.","14 Apr '19 21:02;SkyCoder;Besides the AppImage based approach, there is also flatpak. Whilest it is mostly designed to be used with graphical applications, I think it should be at least part of the discussion as well. ","14 Apr '19 23:12;ceperez1996;[~mitch_curtis] you should add the link of the discussion in the development mailing list here, so more people can join the discussion.","18 Jul '20 13:10;mbnoimi_;Most of the time I use Qt under Linux so linuxdeployqt is a really vital tool for me.

I'm very agree with this suggestion because Qt deployment is very painful in Linux (It was very painful too under Windows before windeployqt)",,,,,,,,,,,,,,,,,,
Feature request: Be able to set an icon on a QDockWidget so it is used when it is been placed in a tab,QTBUG-85418,301424,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,qt.team.quick.subscriptions,shmittal,shmittal,03 Jul '20 14:12,03 Jul '20 14:19,18 Feb '21 09:41,,5.15.0,,,,,,,,,,,,,,,,,,,,,,Widgets: Main Window,,,,0,Reported_by_support_standard,,,"It would be great if user is able to set an icon on a QDockWidget so it is used when appropriate (i.e. when it has been placed in a tab). 
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0opan:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[Feature Request] Japanese Flick Input by Virtual Keyboard,QTBUG-76112,279313,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,mitch_curtis,akizawa,akizawa,30 May '19 00:57,29 Jun '20 07:34,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Virtual Keyboard,,,,0,reported_by_support_standard,,,"Most Japanese end users are using flick input on smart phone like this movie.

[https://www.youtube.com/watch?v=8V-za9LT_30]

 

Then if Qt Virtual Keyboard supports that input method, it will be very comfortable with small screen and Boot2Qt.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0l9in:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Provide QTQUICK_COMPILER_ADD_BINARY_RESOURCES,QTBUG-71009,268080,Suggestion,Open,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,shausman,misery,misery,08 Oct '18 14:30,26 Jun '20 10:04,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Build System: CMake,QML: Compiler,,,1,,,,"Qt 5.11 provides a QTQUICK_COMPILER_ADD_RESOURCES as a replacement for qt5_add_resources.

It would be helpful if QTQUICK_COMPILER_ADD_BINARY_RESOURCES for qt5_add_binary_resources could be added, too.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0ji8f:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"29 Nov '18 08:06;shausman;What would you expect the function to do? Generate cache files and store them in the generated binary rcc file next to the .qml files?

(I'd be okay with that, but I want to make sure that I understand the ticket correctly :)","03 Dec '18 18:32;misery;Well, I thought to generate those binary files in my .rcc file. Is it necessary to add it to ""asset""?
We have a .qrc file with all our images, qml, js and other stuff. That will be generated to one .rcc file that will be registered on startup. There is no special assets directory for our UI files (qml, js).","04 Dec '18 08:13;shausman;The directory doesn't matter. But the binary files (generated from .qml source) in the .rcc files is what I had in mind.

I can see how binary rcc files make particular sense in the context of ios/android apps when using device specific assets. It should be possible to store also qml files in them (and thus ahead-of-time built ones).","23 Jan '19 10:26;llsag85dywftnhuo;Ping / Any updates here? :)",,,,,,,,,,,,,,,,,,
[cmake]Qml plugin targets missing,QTBUG-80846,290487,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,alexandru.croitor,timblechmann,timblechmann,17 Dec '19 12:46,26 Jun '20 10:04,18 Feb '21 09:41,,5.14.0,,,,,,,,,,,,,,,,,,,,,,Build System: CMake,,,,0,Reported_by_support_standard,,,"Qt 5.14.0 provides Import.cpp files for Qt plugins. however there are no cmake targets for Qml/QtQuick plugins. it would be nice if they could be provided, as `qt5_import_qml_plugins` is nice for some use cases, but not for others (apart from QTBUG-80843)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0n16v:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
complete Canvas2D TextMetrics implementation per updated/newly adopted specs,QTBUG-83602,297298,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,pakerane,wis,wis,16 Apr '20 15:02,20 Jun '20 22:08,18 Feb '21 09:41,,5.14.2,,,,,,,,,,,,,,,,,,,,,,Other,,,,0,,,,"Canvas' [context.measureText|https://doc.qt.io/qt-5/qml-qtquick-context2d.html#measureText-method] only returns an object only with a width property, it should also return:

*actualBoundingBoxAscent*
The distance from the horizontal line indicated by the textBaseline attribute to the top of the bounding rectangle of the given text, in CSS pixels; positive numbers indicating a distance going up from the given baseline.

*actualBoundingBoxDescent*
The distance from the horizontal line indicated by the textBaseline attribute to the bottom of the bounding rectangle of the given text, in CSS pixels; positive numbers indicating a distance going down from the given baseline.

*actualBoundingBoxLeft*
The distance parallel to the baseline from the alignment point given by the textAlign attribute to the left side of the bounding rectangle of the given text, in CSS pixels; positive numbers indicating a distance going left from the given alignment point.

*actualBoundingBoxRight*
The distance parallel to the baseline from the alignment point given by the textAlign attribute to the right side of the bounding rectangle of the given text, in CSS pixels; positive numbers indicating a distance going right from the given alignment point.

*alphabeticBaseline*
The distance from the horizontal line indicated by the textBaseline attribute to the alphabetic baseline of the line box, in CSS pixels; positive numbers indicating that the given baseline is below the alphabetic baseline. (Zero if the given baseline is the alphabetic baseline.)

*emHeightAscent*
The distance from the horizontal line indicated by the textBaseline attribute to the top of the em square in the line box, in CSS pixels; positive numbers indicating that the given baseline is below the top of the em square (so this value will usually be positive). Zero if the given baseline is the top of the em square; half the font size if the given baseline is the middle of the em square.

*emHeightDescent*
The distance from the horizontal line indicated by the textBaseline attribute to the bottom of the em square in the line box, in CSS pixels; positive numbers indicating that the given baseline is below the bottom of the em square (so this value will usually be negative). (Zero if the given baseline is the top of the em square.)

*fontBoundingBoxAscent*
The distance from the horizontal line indicated by the textBaseline attribute to the top of the highest bounding rectangle of all the fonts used to render the text, in CSS pixels; positive numbers indicating a distance going up from the given baseline.

*fontBoundingBoxDescent*
The distance from the horizontal line indicated by the textBaseline attribute to the bottom of the lowest bounding rectangle of all the fonts used to render the text, in CSS pixels; positive numbers indicating a distance going down from the given baseline.

*hangingBaseline*
The distance from the horizontal line indicated by the textBaseline attribute to the hanging baseline of the line box, in CSS pixels; positive numbers indicating that the given baseline is below the hanging baseline. (Zero if the given baseline is the hanging baseline.)

*ideographicBaseline*
The distance from the horizontal line indicated by the textBaseline attribute to the ideographic baseline of the line box, in CSS pixels; positive numbers indicating that the given baseline is below the ideographic baseline. (Zero if the given baseline is the ideographic baseline.)


Source: [https://webplatform.github.io/docs/apis/canvas/TextMetrics/] 
How we would have used it:
{code:javascript|title=window.qml|borderStyle=solid}
let metrics = ctx.measureText(key);
let actualKeyHeight = metrics.actualBoundingBoxAscent + metrics.actualBoundingBoxDescent;
{code} 

Right now, we have to use c++ and use QFontMetrics (::boundingRect) ourselves, the same API that measureText uses.
 as the docs mention:
{quote}object measureText(text)

Returns an object with a width property, whose value is equivalent to calling QFontMetrics::width() with the given text in the current font.
{quote}
{code:java|title=Bar.cpp|borderStyle=solid}
QFont font(font_family, size);
QFontMetrics fm(font);
int actual_key_height = fm.boundingRect(key).height();
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0o1tj:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Customize webengine embedded-builds more,QTBUG-84719,299911,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,qt_webengine_team,allan.jensen,allan.jensen,05 Jun '20 08:41,19 Jun '20 20:24,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,WebEngine,,,,0,,,,We still have the embedded build config in qtwebengine. We could use that to customize a few more things such as using android memory constraints in more places.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0ogef:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Allow QXmlStreamReader to return element raw inner data and not just text,QTBUG-85141,300708,Suggestion,Open,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,thiago,dguihal,dguihal,18 Jun '20 22:23,19 Jun '20 07:23,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,XML: Stream Reader/Writer,,,,0,,,,"As of deprecation of QXmlSimpleReader in favor of QXmlStreamReader I am facing a dead end.

At one point I need to recover data embedded inside an element which contains text as well as a subset of html tags.

Currently with QXmlSimpleReader sax parser I am able to recover this data as I am able to identify my parsing context when I receive sax event.

QXmlStreamReader is only able to provide text embedded in 3 ways:
 * Basic text with error if xml tags are met
 * Basic text without error with recursion (but without xml tags)
 * Basic text without error without recursion (but still without xml tags)

Would it be possible to add a 4th option to recover full raw text data within an element?

 

Thank you",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0ol4f:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"18 Jun '20 23:22;thiago;Seems like a reasonable request. Can you say what function you were using in the SAX parser? That's just for us to document the use-case.","19 Jun '20 07:23;dguihal;Hi [~thiago]

Here is the callbacks I currently inherit from QXmlContentHandler:
 * characters
 * skippedEntity
 * startDocument
 * endDocument
 * startElement
 * endElement


As for the sax parser by itself it is just a matter of:


 
{code:java}
QXmlSimpleReader xmlReader;
QXmlInputSource xmlSource;
xmlSource.setData(data);
xmlReader.setContentHandler(xmlCallBackObject);
xmlReader.setErrorHandler(xmlCallBackObject);
xmlReader.parse(&xmlSource);
{code}
 ",,,,,,,,,,,,,,,,,,,,
Add support for detecting when a device is ready to send a write without response on Apple platforms,QTBUG-73226,272716,Suggestion,Open,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,tpochep,andysh,andysh,23 Jan '19 11:29,08 Jun '20 17:37,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Connectivity: Bluetooth,,,,1,Reported_by_support_standard,,,Add support for detecting when a device is ready to send a write without response on Apple platforms. iOS 11 and macOS 10.13 has support for checking if you can write without response now so it would be good to add this. This can be done via canSendWriteWithoutResponse - https://developer.apple.com/documentation/corebluetooth/cbperipheral/2891512-cansendwritewithoutresponse?language=objc,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,iOS/tvOS/watchOS,macOS,,,,,"0|i0k927:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"28 Jan '19 12:50;tpochep;This is not a proper bug-report. QLowEnergyService does support WriteWithoutResponse in CoreBluetooth back-end.","28 Jan '19 14:40;andysh;It's not a bug report for a start, it is a feature request. I did not find the implementation which is why I expanded it to be generally covered but now I can see where I missed it so it is implemented. So I am correcting this to be more specific than I originally intended.","06 Feb '19 09:32;ablasche;The description is very confusing:

{quote}
Add support for detecting when a device is ready to send a write without response on Apple platforms. 
{quote}

The WriteWithoutResponse flag is set by the receiving device (aka peripheral). The sending device (central) can check whether the flag is set and utilize the type of write. Therefore there are two parts to this. First the service discovery mechanism of the central must ensure that it detects the flag and reflects it in QLowEnergyCharacteristic::properties(). Second the central device implementation must ensure that QLowEnergyService::writeCharacteristic() supports the WriteWithoutResponse Mode.

Lastly there is the peripheral side of things. He we need to ensure QLowEnergyCharacteristicData::setProperties() accepts the WriteWithoutResponse mode and the service is accordingly published.","06 Feb '19 10:31;tpochep;I have problems understanding what Andy is suggesting. And why iOS/Darwin only - whatever he wants, needs a new public API in the first place. The API he refers, is not documented properly. Let me quote from the Apple's headers:

 
{quote}/*!
 * @property canSendWriteWithoutResponse
 *
 * @discussion YES if the remote device has space to send a write without response. If this value is NO,
 * the value will be set to YES after the current writes have been flushed, and
 * <link>peripheralIsReadyToSendWriteWithoutResponse:</link> will be called.
 */{quote}
So how this wonderful API is of any use - I don't understand so far.

 
{quote}/*!
 * @method peripheralIsReadyToSendWriteWithoutResponse:
 *
 * @param peripheral The peripheral providing this update.
 *
 * @discussion This method is invoked after a failed call to @link writeValue:forCharacteristic:type: @/link, when <i>peripheral</i> is again
 * ready to send characteristic value updates.
 *
 */{quote}
So it would appear it contradicts what the first comment says. Again - what's the use of this API?","06 Feb '19 16:30;andysh;I tried to put it as best as I understood it based on the original request, you can follow through the link to the original support case (only for those internally) to see if that helps at all but I think the Apple docs not being really clear on when/how to use it is also a problem here. If it is available on other platforms then it could be extended to that, but whether it needs public API to use the readyToSend or not I don't know. I originally thought it could be utilized purely internally to only try to send if it was ready for it, but ultimately I was mistaken about there not being support for writeWithoutResponse at all so that clouded things somewhat.","06 Feb '19 19:02;tpochep;Looking at quite negative comments here - https://forums.developer.apple.com/thread/80376 - I somehow hesitate breaking our existing code.","07 Feb '19 11:54;tpochep;I've done some tests. canSendWriteWithoutResponse was always false in my case and I never had this callback/delegate method actually called. So I cannot base the internal logic (I/O) on this property/method. Apparently the only use of those functions - is to have a signal on QLowEnergyController, informing that now you can write. This is a change in public cross-platform API which at the same moment will be only Darwin-specific.","12 Feb '19 08:52;ablasche;Right now I cannot see how this property can maximize the streaming as claimed by the initial report. It is a better guarantee to the central side that the writeWithoutResponse will be sent by the local central use case. I see little sense providing a public API for it nor do I see how this improves the streaming. After all the guarantee of a local send off is still limited by the remote side ignoring it or the transmission being screwed on the air.

Without more info I suggest to resolve this task. We may come back to it later on.","28 Feb '19 16:48;mraynelson;On iOS and macOS, the central needs the ability to determine when the local BLE stack is ready for another write-without-response submission. If the central does not check for this readiness, the write is not always successfully queued for delivery to the peripheral and the central has no way of knowing this. Hence, there is no way to maximize throughput of write-without-response. The central must guess at how fast it can send packets to the local BLE layer. 

The new API provided by Apple in iOS 11 gives us a way to now overcome this. I've added this to Qt 5.10.1 - Qt 5.12.5 BLE in custom builds but believe this functionality should be added as part of the standard build.

I would be happy to have peripheralIsReadyToSendWriteWithoutResponse map to the existing QLowEnergyService::characteristicWritten signal but realize that will chafe those who believe that this signal reflects only write-with-response completion (even though it is currently called for write-without-response on both Android and Windows, and IS currently suitable for maximizing throughput since other mechanisms ensure the signal is not emitted until the BLE stack is actually ready to receive another write). 

Complicating this a bit further is that macOS 10.13 does not yet seem to implement peripheralIsReadyToSendWriteWithoutResponse properly. I don't know about macOS 10.14. 

 ","19 Mar '19 13:29;andysh;Reopening to make the new comment visible since there hasn't been any follow up to it in case it changes anything.","31 Oct '19 12:37;mraynelson;iOS (and macOS if Apple finally has it working) really needs some support here. Please consider doing something about this in Qt 5.12.6. ","04 May '20 11:37;ablasche;{quote}
The new API provided by Apple in iOS 11 gives us a way to now overcome this. I've added this to Qt 5.10.1 - Qt 5.12.5 BLE in custom builds but believe this functionality should be added as part of the standard build.
{quote}

[~mraynelson] Would you be able to contribute your patch for Qt ?","08 Jun '20 17:37;mraynelson;My solution unfortunately does not do a good job of preserving separatation of concerns among the various classes involved. As such, I see my solution as more a short term hack. I need to find the time to improve the solution. I also need to find time to figure out how one actually contributes a patch to Qt. I will try to tackle this as soon as I can. ",,,,,,,,,
Doc: Python snippets should live side-by-side with C++ snippets,QTBUG-74784,276269,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,vertries,paulwicking,paulwicking,28 Mar '19 13:01,03 Jun '20 14:53,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Documentation,,,,0,DocWorkshop03.19,,,"use the current approach as a fallback, and use the snippet in the source location as a preference.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,QTBUG-74787,9223372036854775807,,,,,,,,,"0|i0ksbr:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
QDoc libclang requries an updated MSVC 2019 Version,QTBUG-84006,298389,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,cadam,cadam,cadam,05 May '20 13:35,03 Jun '20 10:06,18 Feb '21 09:41,,5.15,,,,,,,,,,,,,,,,,,,,,,Build tools: qdoc,,,,0,,,,"While working at upgrading LLVM/Clang to version 10.0.0 the VM that builds for Visual Studio 2019 failed with this error:
{code:java}
CMake Error at cmake/modules/CheckCompilerVersion.cmake:62 (message):
  Host Visual Studio version 16.4 is known to miscompile part of LLVM, please
  use clang-cl or upgrade to 16.5 or above (use
  -DLLVM_TEMPORARILY_ALLOW_OLD_TOOLCHAIN=ON to ignore) 
{code}

For the moment I will try adding {{-DLLVM_TEMPORARILY_ALLOW_OLD_TOOLCHAIN=ON}} to the build script. But this should be removed when MSVC2019 version gets updated.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Windows,,,,,,"0|i0o7k7:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add support for Qt Remote Objects module,QTBUG-81837,292788,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,bstottle,tuomas.vaarala,tuomas.vaarala,04 Feb '20 08:13,02 Jun '20 15:40,18 Feb '21 09:41,,5.14.1,,,,,,,,,,,,,,,,,,,,,,Remote Objects,,,,3,reported_by_support_standard,,,The Qt Remote Object module would greatly benefit in using with Qt Web Assembly.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,WebAssembly,,,,,,"0|i0ndtj:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"17 Feb '20 09:56;santtuahonen;Would like to hear more on the use case, what the customer is actually trying to achieve. 

[~tuomas.vaarala], [~lpotter]","17 Feb '20 10:37;hgerdau;The use case is a client server application where the client handles the gui and the server the business logic. Only the server is connected to a database. The async bidirectional communication is done using QRemoteObjects with ssl sockets or with websockets. The gui is done using Qml/QtQuick.

This works perfect on the desktop even over wan networks. The client could easily be moved to QWebAssembly running in a browser with no client side installation needed. Unfortunately QRemoteObjects is not a supported QWebAssembly module.     ","18 Feb '20 00:18;lpotter;Totally supporting QtRemoteObjects would require using some sort of tcp proxy server, as we have no way to 'listen' in WebAssembly and everything goes through websockets.  Of course, QtWebAssembly can be used as a client and communicate with the server that way.

 ","18 Feb '20 00:51;bstottle;Is this different from https://bugreports.qt.io/browse/QTBUG-74462 ?  We've built and run QtRO with webassembly and it has worked, using the wrapper classes defined in the referenced commits (which are included in the 5.14 examples).","18 Feb '20 09:07;hgerdau;I actually tried the QtRO websocket examples supplied in 5.14 on the desktop and use similar code. But how did you sucessfully built and run QtRO with Webassembly? I would like to try that but couldn't built QtRO. Could you give some advice on how to do that. ","16 Apr '20 06:41;andysh;Reopening as the provided info is there, but pending a response from assignee","16 Apr '20 14:22;bstottle;I don't think we did anything special, but I haven't touched this in months since the initial investigation.  IIRC, we built Qt for webassembly and just included the QtRO module.  Is there a reason QtRO can't be included in the official webassembly package (I'm not sure who this question should be directed at)?","02 Jun '20 15:40;fishwaldo;Basic QTRO works, but there are some classes that are doing some nested event loops and these are throwing errors (and the App hangs) on WASM. See QTBUG-84626 so this still needs some work.",,,,,,,,,,,,,,
Add support for registering value type to QML engine,QTBUG-81593,292119,Suggestion,Open,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,qt.team.quick.subscriptions,gpbeta,gpbeta,22 Jan '20 15:13,02 Jun '20 08:37,18 Feb '21 09:41,,5.12.6,5.13.2,5.14.0,,,,,,,,,,,,,,,,,,,,QML: Declarative and Javascript Engine,,,,0,,,,"Introducing {{qmlRegisterValueType()}} would be very useful under some circumstances and may unify the built-in types implementation in current QML engine, e.g:

// MyControl.qml
{code:java}
import QtQuick 2.12
import QtQuick.Controls 2.12 as C

Item {
    property C.IconValueType icon
}{code}
We can also use the constructors that are marked with {{Q_INVOKABLE}} to initialize a value type property:
{code:java}
import QtQuick.Controls 2.12 as C

MyControl {

    icon: ""icon1"" // implicit type casting provided by constructor

    // a better Qt.icon() approach
    Component.onCompleted: icon = new C.IconValueType(""icon2"", 16, 16)
}{code}",,,,,,,,,,,,,,,QTBUG-82443,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0na2n:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Make sure the eglfs_kms backend is not limited to double buffering if use for more is warranted by performance. ,QTBUG-84450,299350,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,lagocs,tuomas.vaarala,tuomas.vaarala,26 May '20 11:22,27 May '20 06:47,18 Feb '21 09:41,,5.14.2,5.15.0,,,,,,,,,,,,,,,,,,,,,QPA: EGLFS,,,,0,reported_by_support_standard,,,"The eglfs_kms backend for EGLFS seems to be limited to double buffering and there is reason to believe that with Qt Quick more than 2 buffers should be created for optimal UI smoothness.

It seems that the eglfs_kms plugin chooses to wait/block, rather than querying for, and using, additional buffers when they are available.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Linux/Yocto,,,,,,"0|i0od4f:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add support for hardware video acceleration for embedded linux platforms,QTBUG-84245,298844,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,qt_webengine_team,andysh,andysh,15 May '20 08:48,15 May '20 14:50,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,WebEngine,,,,0,Reported_by_support_standard,,,"Add support for hardware video acceleration for Embedded Linux platforms, this is possible on the ChromeOS side so it should be possible to enable it.",,,,,,,,,,,,,,,QTBUG-76904,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Linux/Other display system,,,,,,"0|i0oa8v:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"15 May '20 09:11;allan.jensen;One option I was considering was building the option in, but leaving it off by default, so it could be enabled with command line switches.","15 May '20 09:22;michal;I do no think this is easy , it really depends on the backed , video driver etc. So what exactly is the support for requested ? I see related bug link , is it imx6 ? As far as I know imx uses vpu apis and not vaapi .","15 May '20 09:47;andysh;Unfortunately I don't know the specific device in this case but that might be possible to find out internally","15 May '20 14:01;andysh;The specific device in this reported case is at least imx8 in case that makes a difference","15 May '20 14:50;allan.jensen;Right, which means it probably comes with v4l drivers, which is a lot more complicated because while chromium does have a v4l layer, it is tailored to the chromecast specific version of v4l which doesn't quite match the real upstream.",,,,,,,,,,,,,,,,,
"Add an ""ask"" UnknownUrlSchemePolicy",QTBUG-84108,298582,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,qt_webengine_team,the compiler,the compiler,10 May '20 18:48,11 May '20 11:58,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,WebEngine,,,,0,,,,"Both Chromium and Firefox show a dialog asking the user for permission when clicking an external link:

 !image-2020-05-10-20-47-16-450.png|thumbnail! 

With QtWebEngine, it's only possible to allow/deny globally (or allow after an user interaction). Instead, there should be some setting which triggers a signal (or perhaps uses the existing feature permission mechanism, though that wouldn't allow adding the extra information present in the dialog).",,,,,,,,,,,,,,,,,,,"10 May '20 18:47;the compiler;image-2020-05-10-20-47-16-450.png;https://bugreports.qt.io/secure/attachment/94659/image-2020-05-10-20-47-16-450.png",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0o8ov:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Make QStringBuilder default on Qt6,QTBUG-74873,276446,Suggestion,Open,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,thiago,tallen_ford,tallen_ford,01 Apr '19 17:30,07 May '20 13:36,18 Feb '21 09:41,,6.0,,,,,,,,,,,,,,,,,,,,,,Core: QString and Unicode,,,,0,,,,"Proposal is to enable QStringBuilder by default for Qt6, with the ability for people to opt-out if they _really_ don't want the performance gains it provides (ie they are too lazy to fix their current codebase of incompatible concats/casts).",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0ktef:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"03 Apr '19 17:12;shausman;[~hjk], [~thiago], do you know if there are any issues about enabling this by default for Qt 6?

 

I've seen multiple times that this brought concrete performance benefits to existing Qt customers.

 ","04 Apr '19 03:46;thiago;The usual: the fact that the type is not a QString. In particular, it breaks Always Auto code:
{code}
   auto lockfile = filename + "".lock"";
{code}","04 Apr '19 06:12;hjk;The fact that it is not a string bites indeed occasionally, I don't find this unbearable, though.

I am not sure how popular AAA is in the real world nowadays, I have the impression that most active people/projects who are on C++11+ adapt a kind of ""use auto where it makes sense"" policy, with varying ""sense"", but rarely strict AAA. And even for AAA{code}auto lockfile = QString{filename + "".lock""};{code} would work, so that's not a showstopper IMO.

I'd be fine with switching the default.
       ","04 Apr '19 08:07;shausman;I take hjk's feedback as this being a valid suggestion then. Marking it as P2 given the positive impact the feature has in real world applications when they opt in.","07 May '20 12:16;asperamanca;This worries me a little...the following code crashes with a segfault in 5.12.5. Is this a misuse of QStringBuilder?
{code:java}
    auto fGetFlag = [](const char* const title, const bool bFlag)
                    {
                        return (QString(title) %
                                QString("": "") %
                                (bFlag ? QString(""true"") : QString(""false"")));
                    };


    QStringList parts;
    parts << QString(""Global parameters: "")
          << fGetFlag(""RunningAsClient"", bRunningAsClient)
          << fGetFlag(""RunningOnCcpu"", bRunningOnHardware)
          << fGetFlag(""RunningAsApp"", bRunningAsApp)
          << fGetFlag(""InofficialVersion"", g_tfr_globals.isInofficialVersion());
    const auto& message = parts.join(QString("" ""));
{code}","07 May '20 12:40;hjk;@Robert:  ""misuse"" is maybe the wrong word,  but sure, this here would need to declare the return type ""-> QString"" or return explictly{code} return QString(QString(title) % QString("": "") %  (bFlag ? QString(""true"") : QString(""false""))));{code} or (unchecked) {code}QString(QString(title) % "": "" %  (bFlag ? ""true"" : ""false"")));{code}",,,,,,,,,,,,,,,,
Feature Request: API for lupdate to filter the translations based on context ,QTBUG-84025,298425,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,kkohne,shmittal,shmittal,06 May '20 08:12,06 May '20 09:43,18 Feb '21 09:41,,5.14.2,5.15.0,,,,,,,,,,,,,,,,,,,,,Tools: Linguist,,,,0,Reported_by_support_standard,,,"It would be good if there is some option to configure the language tool ""lupdate"" in such a way, that some translation contexts are visible only in *some* of the created ts-files, not in all?

Use case for this request: Parts of an application are relevant (and visible) only for selected countries, and customer doesn't want the translators of other countries to do unnecessary work.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0o7rr:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"06 May '20 09:43;kmichel;Here is a workaround for doing it with batch files under Windows:
{code:java}
set translationcontext=TRANSLATION_CONTEXT_TO_REMOVE
for %%i in (*.ts) do (
    if %%i neq TRANSLATION_FILE_UNTOUCHED (
        powershell.exe -nologo -noprofile -command ""(Get-Content %%i -raw) -replace '(?ms)<context>.{5,6}<name>%translationcontext%</name>.*?</context>', '' | Set-Content %%i""
    )
)
{code}
Of course, a built-in functionality would be much better.",,,,,,,,,,,,,,,,,,,,,
Update QTextDocument::characterCount() for Qt 6,QTBUG-80662,290000,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,qt.team.quick.subscriptions,tero.pelkonen,tero.pelkonen,10 Dec '19 13:09,26 Apr '20 20:24,18 Feb '21 09:41,,6.0,,,,,,,,,,,,,,,,,,,,,,Widgets: Widgets and Dialogs,,,,1,reported_by_support_standard,,,"QtTextDocument::characterCount() return currently 1 even if the document is empty.

The QTextDocument will contain a single paragraph separator (unicode 0x2029)
 when it is empty because it contains an empty block. This is a formatting
 character, which is invisible, but is still counted as a character in the
 document.

This is not documented well and is very misleading. 

Users have requested that characterCount should return 0 if the document is empty.",,,,,,,,,,,,,,,QTBUG-32583,,,,"13 Dec '19 10:24;aelm;mainwindow.h;https://bugreports.qt.io/secure/attachment/90164/mainwindow.h",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0myhb:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"10 Dec '19 13:28;srutledg;It affects readers and writers (e.g. markdown) and affects behavior of QTextEdit too: if you read a document that starts with a heading, you will get an empty paragraph in front of it, and that will be written out when you save the document even if no changes were made.

Edit: that issue was also reported as QTBUG-81060, and is now fixed.","13 Dec '19 10:38;aelm;There is a much bigger issue here. I have been trying to go through Qt Support on this but I am getting nowhere (INC-1293325). If you run the attached example, and immediately hit the enter key, it asserts. The issue is that using the parameters from QTextDocument::contentsChange(int,int,int), and then take parameters 1 & 3 (position and charsAdded), you end up with an selection end position which is past the end of the document. The difference between what QTextCursor says is the end, and what the contentsChange implies is the end, is more than a difference of 1, so it is not as simple as saying it is just because the cursor is counting the character to the left/right differently for example. I think contentsChange is including hidden characters in its counts, but as far as I can tell none of the other interfaces do. This makes the values from contentsChange broken. It is fine for plain text, the issue only appears when more complex formatting and content options are used. Again, this is a hunch.

This affects Qt 5, and it is as far as I can tell as bug, not a simple feature request (as Qt Support have been indicating). QTextDocument::characterCount is is related but produces different character counts to QTextCursor. The issue I raised was about not being able to write well defined code against the contentsChange signal because it is unclear what I should do if every API I can think of tells me there are less characters in the document than the parameters of contentsChange tell me there are. This is only apparent when changes happen at the end of a document, but as I cannot verify changes there, then I cannot know for sure that changes anywhere are correctly notified.",,,,,,,,,,,,,,,,,,,,
Add features for QTabWidgets,QTBUG-74184,274930,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,qt.team.quick.subscriptions,navis-raven,navis-raven,03 Mar '19 03:39,15 Apr '20 14:42,18 Feb '21 09:41,,5.14.1,5.15.0,,,,,,,,,,,,,,,,,,,,,Widgets: Widgets and Dialogs,,,,1,Reported_by_support_standard,,,"I suggest to add four features for QTabWidget:

1°) add a property to align the text of tabs to the left (or center or right).
The usage should ressemble this {{TabWidget->setTabTextAlignement(Qt::AlignLeft);}}

2°) Make this code work: {{TabWidget->setStyleSheet(}}{{""QTabBar::tab \{text-align:left; }"")}} as an alternative for 1.

Forums discussing these problems (1°&2°): [https://openclassrooms.com/forum/sujet/qtabwidget-modifier-la-longueur-des-onglets-44498]

[https://stackoverflow.com/questions/48783228/qtabwidgets-tab-text-alignment-not-working]


3°) Make the possibilty to add a button next to the last tab, to allow us to do the same as for Mozilla Firefox, on which there is a (+) button to add new tabs. The only paliative solution I found is {{setCornerWidget(m_plusTab)}} property.

So the property usage should ressemble this:
{{m_plusTab = new QPushButton(""+""); }}
{{m_plusTab->setFixedSize(30, 20); }}
{{m_onglets->setNextToLastTabWidget(m_plusTab);}}

Forums discussing this problem: [https://openclassrooms.com/forum/sujet/qtabwidget-mettre-une-qaction-au-bout-pour-cree-un-onglet-36076]

 

4°) Add a property to QTabWidget to set the size of the tab, without using stylesheet functionnality. => Making possible to do this : 

{{tabWidget->setTabSize(60, 160)}}
instead of this:
{{tabWidget->setStyleSheet(""QTabBar::tab\{height:60px; width:160px}"");}}

Forum discussing this problem: https://forum.qt.io/topic/8186/solved-tab-size","Microsoft Visual Studio Community 2017 
Version 15.9.7
VisualStudio.15.Release/15.9.7+28307.423
Microsoft .NET Framework
Version 4.7.03062

Version installée : Community

Visual C++ 2017 00369-60000-00001-AA924
Microsoft Visual C++ 2017

ASP.NET and Web Tools 2017 15.9.04012.0
ASP.NET and Web Tools 2017

Assistants Microsoft Visual C++ 1.0
Assistants Microsoft Visual C++

Azure App Service Tools v3.0.0 15.9.03024.0
Azure App Service Tools v3.0.0

Common Azure Tools 1.10
Fournit des services courants utilisables par Microsoft Azure Mobile Services et Microsoft Azure Tools.

Cookiecutter 15.9.18254.1
Fournit des outils pour rechercher, instancier et personnaliser des modèles au format cookiecutter.

EasyMotion 1.0
Easy Motion clone for Visual Studio

Extension ResourcePackage 1.0
Informations détaillées sur l'extension Visual Studio ResourcePackage

ForceUTF8Package Extension 1.0
ForceUTF8Package Visual Studio Extension Detailed Info

Gestionnaire de package NuGet 4.6.0
Gestionnaire de package NuGet dans Visual Studio. Pour plus d'informations sur NuGet, consultez la page http://docs.nuget.org/.

GitHub.VisualStudio 2.8.0.6968
A Visual Studio Extension that brings the GitHub Flow into Visual Studio.

JavaScript Project System 2.0
JavaScript Project System

JavaScript UWP Project System 2.0
JavaScript UWP Project System

Microsoft Azure Tools 2.9
Microsoft Azure Tools pour Microsoft Visual Studio 2017 - v2.9.0.0

Microsoft JVM Debugger 1.0
Provides support for connecting the Visual Studio debugger to JDWP compatible Java Virtual Machines

Microsoft MI-Based Debugger 1.0
Provides support for connecting Visual Studio to MI compatible debuggers

MLGen Package Extension 1.0
MLGen Package Visual Studio Extension Detailed Info

Open in Sublime Text 1.1.30
Adds a menu command that lets you open any solution, project, folder and file in Sublime Text.

Outils C# 2.10.0-beta2-63501-03+b9fb1610c87cccc8ceb74a770dba261a58e39c4a
Composants C# utilisés dans l'IDE. En fonction de votre type de projet et de vos paramètres, une autre version du compilateur peut être utilisée.

Outils TypeScript 15.9.20918.2001
Outils TypeScript pour Microsoft Visual Studio

Outils Visual Basic 2.10.0-beta2-63501-03+b9fb1610c87cccc8ceb74a770dba261a58e39c4a
Composants Visual Basic utilisés dans l'IDE. En fonction de votre type de projet et de vos paramètres, une autre version du compilateur peut être utilisée.

Package hôte de l'adaptateur de débogage de Visual Studio Code 1.0
Couche d'interopérabilité pour l'hébergement d'adaptateurs de débogage Visual Studio Code dans Visual Studio

Package Microsoft Visual Studio VC 1.0
Package Microsoft Visual Studio VC

ProjectServicesPackage Extension 1.0
ProjectServicesPackage Visual Studio Extension Detailed Info

Python 15.9.18254.1
Fournit IntelliSense, des projets, des modèles, le débogage, des fenêtres interactives et du support pour les développeurs Python.

Python - Prise en charge Django 15.9.18254.1
Fournit des modèles et une intégration pour le framework web Django.

Python - Prise en charge du profilage 15.9.18254.1
Prise en charge du profilage pour les projets Python.

Python - Prise en charge IronPython 15.9.18254.1
Fournit des modèles et une intégration pour les projets basés sur IronPython.

Qt Visual Studio Tools 2.3.2
The Qt Visual Studio Tools allow developers to use the standard development environment without having to worry about any Qt-related build steps or tools.

Select Next Occurrence 1.3.69
Selects the next occurrence of the current selection and adds multiple cursors for editing.

Service de langage JavaScript 2.0
Service de langage JavaScript

SublimeVS Extension 1.0
SublimeVS Extension Detailed Info

Visual C++ pour le développement sous Linux 1.0.9.28218
Visual C++ pour le développement sous Linux

Visual F# Tools 10.2 pour F# 4.5 15.8.0.0. Commit Hash: 6e26c5bacc8c4201e962f5bdde0a177f82f88691.
Microsoft Visual F# Tools 10.2 pour F# 4.5

Visual Studio Tools pour CMake 1.0
Visual Studio Tools pour CMake

Visual Studio Tools pour les applications Windows universelles 15.0.28307.421
Visual Studio Tools pour les applications Windows universelles vous permet de créer une expérience d'application universelle unique que vous pouvez retrouver sur tous les appareils exécutant Windows 10 : téléphones, tablettes, PC, etc. Il inclut le Kit de développement logiciel (SDK) Microsoft Windows 10.

VSShortcutsManager Extension 1.0
VSShortcutsManager Visual Studio Extension Detailed Info

VSTricks 1.0
A bunch of simple tricks for Visual Studio

ZenCoding 1.2.12
Provides ZenCoding for the HTML Editor - full support for static HTML, Razor and WebForms.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0kl9r:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Feature Request: API to scroll to particular section in ListView,QTBUG-83468,297102,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,qt.team.quick.subscriptions,shmittal,shmittal,14 Apr '20 10:25,14 Apr '20 10:27,18 Feb '21 09:41,,5.14.2,5.15.0,,,,,,,,,,,,,,,,,,,,,Quick: Core Declarative QML ,,,,1,Reported_by_support_standard,,,"There should be some way so that Listview can scroll to a particular section. Something link if currentSection is set to some string, ListView should scroll/navigate to that section.

It seems that currentSection is read-only and navigation can be done only according to currentIndex. 
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0o0mn:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
qcommandlineoption required flag,QTBUG-80277,289102,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,dfaure_kdab,fmercury,fmercury,23 Nov '19 14:11,10 Apr '20 20:03,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Core: I/O,,,,1,,,,"When using qcommandlineparser, there is no way to tell that one option is mandatory, one has to do it by hand later on.

It would be more convenient if one could use a flag in the qcommandlineoption to mark it as 'required', so that the parser automatically detects if this was passed as CLI argument and prompts the error message.

So to say, something like:
{code:java}
parser.addOption({""f"",""file"",""The input file"","""", true}){code}
and for backward compatibility this last boolean can be set as false as default value.

Also, it could be nice if one could also specify the expected data type of associated values, e.g. ""int"", ""string"" or ""double"" when defining the QCommandlineoption, so that the returned QVariant gets automatically casted to it and you can retrieve it with an 'auto' variable.
{code:java}
parser.addOption({""f"",""file"",""The input file"","""", true, ""QString""}){code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0mt8f:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"02 Dec '19 19:40;fmercury;see for example this library that does it elegantly: https://cliutils.github.io/CLI11/book/

 ",,,,,,,,,,,,,,,,,,,,,
"There is no event modifier for /usr/share/X11/xkb/symbols/level5, and web assembly does not recognize Level3 or Level5",QTBUG-81720,292483,Suggestion,Open,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,lpotter,akiva,akiva,28 Jan '20 14:42,08 Apr '20 05:59,18 Feb '21 09:41,,5.14.1,,,,,,,,,,,,,,,,,,,,,,"GUI: Basic Input System (keyboard, mouse, touch)",,,,1,,,,"This key is not handled, and leads to a menagerie of small but annoying bugs.

 

Desktop Level 3 (Left Alt)

 
{code:java}
Qt::Key Qt::Key(ev->key()) 
Key_AltGr

int ev->key() 
16781571

QString ev->text() 
""""

int ev->count() 
1

QFlags ev->modifiers() 
NoModifier          : false
ShiftModifier       : false
ControlModifier     : false
AltModifier         : false
MetaModifier        : false
KeypadModifier      : false
GroupSwitchModifier : true
KeyboardModifierMask: false

QEvent::Type ev->type() 
6

unsigned int ev->nativeModifiers() 
0

unsigned int ev->nativeScanCode() 
64

unsigned int ev->nativeVirtualKey()
65027
{code}
Desktop Level 5 (Right Alt)

 

 
{code:java}
Qt::Key Qt::Key(ev->key()) 


int ev->key() 
0

QString ev->text() 
""""

int ev->count() 
1

QFlags ev->modifiers() 
NoModifier          : true
ShiftModifier       : false
ControlModifier     : false
AltModifier         : false
MetaModifier        : false
KeypadModifier      : false
GroupSwitchModifier : false
KeyboardModifierMask: false

QEvent::Type ev->type() 
6

unsigned int ev->nativeModifiers() 
0

unsigned int ev->nativeScanCode() 
108

unsigned int ev->nativeVirtualKey()
65041
{code}
This causes a few small problems on the desktop, but were fixable without touching qt. On Web Assembly however, it is causes more issues:

 

 

WebAssembly Level 3 (Left Alt)

 
{code:java}
Qt::Key Qt::Key(ev->key()) 
Key_unknown

int ev->key() 
33554431

QString ev->text() 
""""

int ev->count() 
1

QFlags ev->modifiers() 
NoModifier          : true
ShiftModifier       : false
ControlModifier     : false
AltModifier         : false
MetaModifier        : false
KeypadModifier      : false
GroupSwitchModifier : false
KeyboardModifierMask: false

QEvent::Type ev->type() 
6

unsigned int ev->nativeModifiers() 
0

unsigned int ev->nativeScanCode() 
0

unsigned int ev->nativeVirtualKey()
0
{code}
As you can see,  even Level3 is not being registered on Web Assembly, with 33554431 being a limit value of sorts (33554432 bytes = 32 mb). The exact same values are given when ralt (level 5) is pressed.

 

As a result, my keyboard mappings do not register on Web Assembly. For example, I have JKL mapped as Left, Down, Right respectively, and instead it will just default to JKL.

 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,QTBUG-82900,9223372036854775807,,,Linux/X11,WebAssembly,,,,,"0|i0nc3b:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"08 Apr '20 05:59;lpotter;So this bug is about Alt Right not giving proper QtKey?",,,,,,,,,,,,,,,,,,,,,
Add ability to intercept and redirect web requests with payload to custom scheme handlers,QTBUG-76651,280443,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,qt_webengine_team,poikelin,poikelin,25 Jun '19 08:52,01 Apr '20 12:39,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,WebEngine,,,,0,Reported_by_support_standard,,,Currently only requests without any payload can be intercepted and redirected to a custom scheme handler.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0lg93:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Support setting text properties,QTBUG-80968,290753,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,tmpsantos,poikelin,poikelin,23 Dec '19 13:24,30 Mar '20 09:17,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Location: Mapbox plugins,,,,0,Reported_by_support_standard,,,"It seems that there is a possibility to set text-size and other text related properties:
https://docs.mapbox.com/mapbox-gl-js/style-spec/#layout-symbol-text-size

But these don't seem to be supported.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0n2ov:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"QVulkanFunctions, QVulkanDeviceFunctions constness",QTBUG-75767,278325,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,lagocs,foobarres,foobarres,11 May '19 17:19,29 Mar '20 15:30,18 Feb '21 09:41,,5.13.0 Beta3,,,,,,,,,,,,,,,,,,,,,6.0.0,GUI: Vulkan,,,,1,,,,"Currently, the wrappers contained in QVulkanFunctions and QVulkanDeviceFunctions are non-const methods. However, since they simple read a member variable and call a function it looks they could safely be const.

Doing that would improve the reusability of QVulkanFunctions and QVulkanDeviceFunctions in conjunction with third party wrappers (in my case, Vulkan-Hpp).",,,,,,,,,,,,,,,,,,,"29 Mar '20 10:18;seeger;qtbase-vulkan_hpp.patch;https://bugreports.qt.io/secure/attachment/93377/qtbase-vulkan_hpp.patch",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0l3wn:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"29 Mar '20 10:21;seeger;Applying the attached patch, rebuilding and updating the Qt installation (as the affected headers get generated during build) fixes this issue for me.",,,,,,,,,,,,,,,,,,,,,
"Support ""picture in picture"" mode for videos",QTBUG-82390,293990,Suggestion,Open,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,qt_webengine_team,the compiler,the compiler,20 Feb '20 21:21,25 Mar '20 12:03,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,WebEngine,,,,0,,,,"When playing a video ([example|http://dl5.webmfiles.org/big-buck-bunny_trailer.webm]), there's a ""picture in picture"" item in the three dots menu. Clicking that in Chromium opens a separate window where the video is played. With QtWebEngine, nothing happens.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0nkqn:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
No way to declaratively instantiate Path elements in ShapePath,QTBUG-72838,271809,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,qt.team.quick.subscriptions,THall,THall,03 Jan '19 12:05,25 Mar '20 09:41,18 Feb '21 09:41,,5.11.2,,,,,,,,,,,,,,,,,,,,,,Quick: Other,,,,3,instantiator/repeater,,,"When using Shape, it would be nice to be able to construct a ShapePath using data from a model. For example, something like this:

 
{code:java}
Shape {
    ShapePath {
        Instantiator {
            model: someModel // Anything which implements Qt model API  
            PathLine {
                x: xValue // data from item in model
                y: yValue // data from item in model
            }
        }
    }
}
{code}
At the moment, this doesn't work, because it tries to add the Instantiator to the pathElements property of ShapePath and can't because it isn't a PathElement itself.

I haven't been able to find any other way of declaratively building up a ShapePath using data from a model. I believe it would make Shape and ShapePath much more flexible: Having to define all the line segments ahead of time is very limiting and rarely useful in practice.",,,,,,,,,,,,,,,QTBUG-83061,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0k447:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Require modules with dependent (leaf) modules to run tests for those dependent modules before merging changes,QTBUG-79454,287168,Suggestion,Open,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,qt.team.quick.subscriptions,mitch_curtis,mitch_curtis,21 Oct '19 14:28,09 Mar '20 11:06,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Quick: Controls 2,Quick: Core Declarative QML ,,,0,,,,"If every change that went into qtdeclarative had to be tested with its dependent modules, then we could catch a lot more bugs and save a lot of time. Even if I still have to fix these issues, at least I will then know exactly which change caused it, rather than have to bisect, etc., and the person who wrote the patch can give me a heads up: ""hey, a test in qtquickcontrols2 failed, how should we fix this?""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0mhtb:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"21 Oct '19 14:34;shausman;Added a few watchers to this (so don't be surprised if you get an email).

 

I fully recognize the issue that Mitch filed and would like to help find a solution.

 

My preferred solution to this is not solving this in Coin but rather by merging qqc2 and qtgraphicaleffects repositories into qtdeclarative. Fully and entirely.","21 Oct '19 14:51;mitch_curtis;{quote}
My preferred solution to this is not solving this in Coin but rather by merging qqc2 and qtgraphicaleffects repositories into qtdeclarative. Fully and entirely.
{quote}
That would also work. :) I am curious though: why would that be preferable over reverse dependencies? Do you think this could add some slowness in Git for those working on those modules? qtdeclarative is already noticeably slower than qtquickcontrols2 (at least on my machines and bad Internet connection at home), so I wonder if adding two more modules would bring it towards approaching qtbase levels of slowness. :x

Like Simon said on IRC, the logs for a passing test for qtquickcontrols2 start at around 14:49:53 and finish at 15:16:43, so that running time (~25-30 minutes) would need to be taken into account. I think qtgraphicaleffects is substantially faster though.","22 Oct '19 04:28;shausman;I prefer merging the repos as that also enables atomic commits to land the corresponding fixes in one go in the right repo. There is a tighter coupling between the modules than we thought, merging repos is IMO a natural answer.","22 Oct '19 08:12;mitch_curtis;{quote}
I prefer merging the repos as that also enables atomic commits to land the corresponding fixes in one go in the right repo. There is a tighter coupling between the modules than we thought, merging repos is IMO a natural answer.
{quote}
That's a very good point...","23 Oct '19 10:09;hehalmet;<< If every change that went into qtdeclarative had to be tested with its dependent modules,

This would also increase the need of CI capacity, because we would have to build and test every dependent module every time change goes into qtdeclarative","23 Oct '19 10:15;owolff;<< If every change that went into qtdeclarative had to be tested with its dependent modules,

If you continue this thought, every change in qtbase will result in a build of basically every other Qt module","23 Oct '19 10:36;mitch_curtis;{quote}
This would also increase the need of CI capacity, because we would have to build and test every dependent module every time change goes into qtdeclarative
{quote}
I guess the question is what's more important: a computer's time or a person's time? What's more expensive? And who sets the limit on CI capacity? Aren't we free to increase it to meet our needs?

It's easy to make a change in an upstream module and have it break a dependent module. What's harder is all the work that comes after that. The responsibility should be on the person making the change to make sure that it doesn't break dependent modules. How we do that I don't really mind, but I doubt that there is a good solution that doesn't involve making CI work harder for each change.","23 Oct '19 10:42;shausman;{quote}<< If every change that went into qtdeclarative had to be tested with its dependent modules,

If you continue this thought, every change in qtbase will result in a build of basically every other Qt module
{quote}

Sure, and the other way around -- we could qtcore, qtnetwork, etc. each into their own git repository.

Whatever lines we draw, it's going to be a compromise.

I've seen changes in qtdeclarative break qqc1 and qqc2 over the past couple of years. Often they are changes that are not easily reproduced locally, where the CI is the right gatekeeper.

In the case of QQC2 I'm in favor of re-drawing the lines, I think we gain more than we loose.","23 Oct '19 11:14;lagocs;qtgraphicaleffects has an uncertain future after 5.15 so merging it to qtdeclarative now is strongly discouraged. More generally, merging anything with Quick that is not prepared for the RHI based rendering path is not quite a good idea at this point, because we'd need to purge it in dev anyways.

> The responsibility should be on the person making the change to make sure that it doesn't break dependent modules.

In theory, yes. In practice there are myriads of special and corner cases so it's not all that black and white. For example in graphics in Qt 6 we will depend on private APIs more than ever. We should keep in mind not building more rigidness into the workflow since there are challenges here already as things are now.

 ","23 Oct '19 12:06;shausman;{quote}
qtgraphicaleffects has an uncertain future after 5.15 so merging it to qtdeclarative now is strongly discouraged. More generally, merging anything with Quick that is not prepared for the RHI based rendering path is not quite a good idea at this point, because we'd need to purge it in dev anyways.
{quote}

That suggests that the dependency of QtQuickControls2 on QtGraphicalEffects needs to be addressed first. How do you suggest to change the usage in QtQuickControls2?

{quote}
> The responsibility should be on the person making the change to make sure that it doesn't break dependent modules.

In theory, yes. In practice there are myriads of special and corner cases so it's not all that black and white. For example in graphics in Qt 6 we will depend on private APIs more than ever. We should keep in mind not building more rigidness into the workflow since there are challenges here already as things are now.
{quote}

That is perhaps an argument in favor of having less repositories, as then breaking up (inverted) test dependencies would not be required every time a private API changes.","23 Oct '19 12:10;ulherman;The typical private API mixups can already be detected at compile time. Maybe it's enough to compile all dependent modules with a change in qtdeclarative not test them. (Or even extend that to qtbase)

We probably want to exclude webengine.

If the question is only about merging quickcontrols2 into qtdeclarative, I can live with it, though. Simons statement about atomic commits does carry some weight, but we've also had private API mixups with qt3d or qtlocation. We don't want to merge those into qtdeclarative, do we?","23 Oct '19 12:39;mitch_curtis;Building would not be enough, at least not for qtquickcontrols2. A lot of the problems also come from changes in behaviour in Qt Quick that will only be discovered when running auto tests.","23 Oct '19 13:00;lagocs;GraphicalEffects in QC2 is only used in the Imagine style in some related examples. Those effects will be lost for the time being. We'll figure out something for it, but this is quite off-topic here.

My main point is to consider the plans after 5.15 because, based also on the discussion on IRC, I see quite a lot of ""left hand does not know what the right hand is doing"" syndrome happening. ","24 Oct '19 10:12;shausman;{quote}
GraphicalEffects in QC2 is only used in the Imagine style in some related examples. Those effects will be lost for the time being. We'll figure out something for it, but this is quite off-topic here.
{quote}

Well, it's not quite ""off-topic"" as you made a point about it. We can't ignore the dependency if we want to resolve this, can we?

Mitch, would it be feasible to move the imagine style out of qqc2? What about API stability?

Or would it perhaps be possible to implement those effects that qqc2 needs as shader that can be compiled ahead of time (and thus baked), instead of dynamically?

{quote}
My main point is to consider the plans after 5.15 because, based also on the discussion on IRC, I see quite a lot of ""left hand does not know what the right hand is doing"" syndrome happening. 
{quote}

In the light of left and right hands, what is your preferred way of addressing this recurring problem of declarative changes breaking qqc2?","24 Oct '19 10:32;lagocs;> In the light of left and right hands, what is your preferred way of addressing this recurring problem of declarative changes breaking qqc2?

To be frank, nothing. This is simply not a business priority.

 ","24 Oct '19 11:08;hehalmet;> I guess the question is what's more important: a computer's time or a person's time? What's more expensive? And who sets the limit on CI capacity? Aren't we free to increase it to meet our needs?

Well, every time we add something to CI the pending time will increase unless we add more CI capacity which will cost money. Problem is during work hours (""daytime"") when people staging their changes and build's are pending because no capacity left for the vm's. So we would need to make choice, do we accept the increasing pending time or do we invest more money to CI. And all depends on which level we would like to take this. E.g. do we want to build all modules which depends on qtdeclarative and modules which depends those modules etc. or do we wan't to restrict the dependencies chain somehow.

> It's easy to make a change in an upstream module and have it break a dependent module. What's harder is all the work that comes after that. The responsibility should be on the person making the change to make sure

> that it doesn't break dependent modules. How we do that I don't really mind, but I doubt that there is a good solution that doesn't involve making CI work harder for each change.

Yep, I feel your pain on this and yes, we should verify as much as we can during integrations. But I'm just saying that we also have limitations with the capacity which we need to take on account.","24 Oct '19 11:15;mitch_curtis;{quote}
Mitch, would it be feasible to move the imagine style out of qqc2? What about API stability?
{quote}
I don't think we need to (or should) do that. It's not just the Imagine style that relies on them; there are also some tests that (if I remember correctly) require them:

{noformat}
$ git grep QtGraphicalEffects
examples/quickcontrols2/imagine/automotive/qml/CustomGlow.qml:import QtGraphicalEffects 1.12
src/imports/controls/doc/src/qtquickcontrols2-customize.qdoc:    import QtGraphicalEffects 1.\1
src/imports/controls/doc/src/qtquickcontrols2-fileselectors.qdoc:    import QtGraphicalEffects 1.\1
src/imports/controls/imagine/DelayButton.qml:import QtGraphicalEffects 1.12
src/imports/controls/imagine/ProgressBar.qml:import QtGraphicalEffects 1.12
src/imports/controls/imagine/qmldir:depends QtGraphicalEffects 1.0
src/imports/controls/material/RectangularGlow.qml:   A cross-graphics API implementation of QtGraphicalEffects' RectangularGlow.
tests/auto/qquickapplicationwindow/data/clearfocusondestruction.qml:import QtGraphicalEffects 1.12
tests/auto/qquickpopup/data/toolTipCrashOnClose.qml:import QtGraphicalEffects 1.13
tests/manual/styles-cover-flow/CoverFlowDelegate.qml:import QtGraphicalEffects 1.12
{noformat}

I'm going to trust that what Laszlo said here is the case:

{quote}
Those effects will be lost for the time being. We'll figure out something for it, but this is quite off-topic here.
{quote}
In any case, I will not fix breakages in qtquickcontrols2 due to qtgraphicaleffects. I don't have the knowledge to replace these, and I'm going to take Laszlo's lack of response to your question about shaders as a confirmation that he has it under control. :)","24 Oct '19 11:26;mitch_curtis;{quote}
E.g. do we want to build all modules which depends on qtdeclarative and modules which depends those modules etc. or do we wan't to restrict the dependencies chain somehow.
{quote}
My naive idea was just to build and test qtquickcontrols2 as part of qtdeclarative integrations, but yeah, I guess the problem applies elsewhere too. I don't have a good answer for that.

{quote}
But I'm just saying that we also have limitations with the capacity which we need to take on account.
{quote}
I understand that, but was curious who decides the capacity; who decides how much we spend on that.","24 Oct '19 11:36;lagocs;> In any case, I will not fix breakages in qtquickcontrols2 due to qtgraphicaleffects. 

That's completely ok. Things like this are tracked under QTBUG-74406. There are no expectations for leaf modules to worry about all this yet.

 

 ","24 Oct '19 12:00;hehalmet;<< I understand that, but was curious who decides the capacity; who decides how much we spend on that.

Well, we'll make the proposal to Tuukka T. and if he think that it's reasonable he will put it forward.","24 Oct '19 12:03;mitch_curtis;{quote}
That's completely ok. Things like this are tracked under QTBUG-74406. There are no expectations for leaf modules to worry about all this yet.
{quote}
Sweet.

In the context of this quote
{quote}
More generally, merging anything with Quick that is not prepared for the RHI based rendering path is not quite a good idea at this point, because we'd need to purge it in dev anyways.
{quote}

I assume that all of the ""lack of preparedness"" is summarised in QTBUG-78631, and that this shouldn't prevent qtquickcontrols2 from being merged into qtdeclarative, should we go with that option? What I mean is: these issues would have to be fixed in qtquickcontrols2 regardless of whether it's a part of qtdeclarative or not (should we go with that option), and the solution is always going to be to remove the dependency to qtgraphicaleffects and use some custom shaders or something?

So then perhaps we can ignore the qtgraphicaleffects part of this for now and focus on the relationship between qtdeclarative and qtquickcontrols2.","24 Oct '19 13:42;mitch_curtis;Seeing Aapo's latest email, it sounds very much like Simon's idea of moving qtquickcontrols2 into qtdeclarative may be more realistic:

{quote}
The current maintenance is so much effort that we barely have time for development of CI, but rather emergency updates. 
{quote}"
QtQuick Test test suites directly from PySide2,QTBUG-82557,294502,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,qt.team.quick.subscriptions,tero.pelkonen,tero.pelkonen,27 Feb '20 10:37,27 Feb '20 10:41,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Testing: QuickTest,,,,0,reported_by_support_standard,,,"Users have requested possibility to do QtQuick Test test suites directly from PySide2.

User use case:

""

We would like to run some end-to-end tests on the entire application, starting from the QML front-end. However, the Qt pages on Qt Quick Test ([https://doc.qt.io/qt-5/qtquicktest-index.html)] suggest that we should set up a C++ test harness to do this. We would prefer to avoid this given that we would like to avoid having to set up a C++ development tool chain just to run these tests.

""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0nn3r:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Extend QTextDocument signaling capabilities,QTBUG-80491,289630,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,esabraha,karimpinter,karimpinter,03 Dec '19 08:26,25 Feb '20 00:58,18 Feb '21 09:41,,5.13.2,5.14.0 Beta3,,,,,,,,,,,,,,,,,,,,,GUI: Text handling,,,,1,Reported_by_support_standard,,,"To be able to keep more instances of QTextDocument in sync, QTextDocument should have signals on changes on Fonts like setDefaultFont and on changes on MetaInformation and Title too, so using those they can be synchronized.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0mw93:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Allow using const pointers as parameters of C++ functions called by QML ,QTBUG-82354,293871,Suggestion,Open,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,qt.team.quick.subscriptions,mitch_curtis,mitch_curtis,19 Feb '20 17:59,21 Feb '20 17:07,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Core: Object Model,,,,0,,,,"I have an invokable function in C++ that should be const with const parameters:

{code}
Q_INVOKABLE QPoint findClosestAvailableTilePos(const QPoint &tilePos, const SceneItemComponent *sceneItemComponent = nullptr) const;
{code}

I register it with QML like this:

{code}
qmlRegisterUncreatableType<SceneItemComponent>(""Isle"", 1, 0, ""SceneItemComponent"", ""SceneItemComponent should not be created in QML"");
{code}

If I try to call this with a SceneItemComponent object in JavaScript, the parameter simply becomes null in C+\+. Changing the parameter to a non-const SceneItemComponent* is a workaround, but not that nice, because it means that everywhere I use this function in C++ has to be adapted (and sometimes const_casted).

It would be better if it were possible to use the const type in QML and just get an error if any non-const operations (getters, setters, invokables) were performed on it, if that's even possible. I don't know if e.g. moc even stores constness of functions, or whether such a change to the QML engine would affect performance adversely... but it would be nice to have.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0nk47:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"21 Feb '20 17:06;ulherman;The core of the matter is this:

{code}
Q_DECLARE_METATYPE(const QQuickItem *)
Q_DECLARE_METATYPE(const QObject *)

void tryStuff() {
    const int constItemType = qMetaTypeId<const QQuickItem *>();
    const int mutableItemType = qMetaTypeId<QQuickItem *>();
    const int constQobjectType = qMetaTypeId<const QObject *>();
    const int mutableQobjectType = qMetaTypeId<QObject *>();

    QQuickItem *mutableItem = new QQuickItem();
    QVariant itemVar = QVariant::fromValue(mutableItem);

    qDebug() << itemVar.canConvert(constItemType);
    qDebug() << itemVar.canConvert(mutableItemType);
    qDebug() << itemVar.canConvert(constQobjectType);
    qDebug() << itemVar.canConvert(mutableQobjectType);
}
{code}

Prints:
{code}
false
true
false
true
{code}

# The Q_DECLARE_METATYPE should not be necessary.
# The conversions should all be allowed, but mutable-to-const conversions are actually not.

Until QMetaObject and QVariant understand mutable and const pointers, we need to keep the pointers to all QML types mutable.",,,,,,,,,,,,,,,,,,,,,
Expose QOpenGL2PaintEngineExPrivate pvmMatrix ,QTBUG-82388,293988,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,lagocs,doug_rogers,doug_rogers,20 Feb '20 18:35,21 Feb '20 01:35,18 Feb '21 09:41,,5.14.1,,,,,,,,,,,,,,,,,,,,,,GUI: OpenGL,,,,0,,,,"The pvmMatrix matrix is used to render 2D primitives when rendering to an OpenGL surface.  To match the rendering pipeline of Qt when overloading QGraphicsItem painter, this matrix is very useful. 

In my example, I am rendering an image with a complex shader, but want the benefits of a QGraphicsItem that is managed by a QGraphicsView.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Windows,,,,,,"0|i0nkq7:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Support for iOS 11 Files app,QTBUG-74321,275186,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,qt.team.quick.subscriptions,pekarjal,pekarjal,11 Mar '19 10:46,18 Feb '20 14:42,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Quick: Dialogs,,,,2,,,,"Not sure if the component is right for this suggestion, but anyway

Apple has introduced Files app in iOS 11 which allows applications to open different files from the file system. Currently Photos application is launched from Qt to open image files from the gallery when using FileDialog with ""shortcuts.pictures""

Suggestion is to support also Files app to open wide variety of files from the iOS file system within Qt application, perhaps similar way as FileDialog shortcuts.pictures is now working. Maybe even launch the Files app if the shortcut is ""shortcuts.documents""",,,,,,,,,,,,,,,QTBUG-67522,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,iOS/tvOS/watchOS,,,,,,"0|i0kmtj:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"06 Feb '20 11:35;tomaslov;Could someone please evaluate the priority on this? I think it is a very good suggestion, and it would make it even easier to use Qt for iOS apps. ",,,,,,,,,,,,,,,,,,,,,
Instruction variation how to use qml-file instead of ui.qml-file,QTBUG-82271,292866,Suggestion,Open,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,treinio,tero.pelkonen,tero.pelkonen,05 Feb '20 08:04,17 Feb '20 23:45,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Documentation,,,,0,reported_by_support_standard,,,"[https://doc.qt.io/qtdesignstudio/quick-converting-ui-projects.html]

Currently the page has good step by step instructions how to use ui.qml-files exported from Qt Design Studio.

Qt Support run into a customer who wanted to use qml-file instead. 

Instead of using QQuickView it is needed to use QQmlApplicationEngine when working with qml-file.

Could these instructions be updated how to deal with qml-files? ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0nean:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
QDeclarativeGeoMap with custom QQuickGeoMapGestureArea possible?,QTBUG-79063,286323,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,paangele,DanielSt,DanielSt,07 Oct '19 13:15,15 Feb '20 10:42,18 Feb '21 09:41,,5.13.1,,,,,,,,,,,,,,,,,,,,,,Location: Maps/Navigation,,,,1,,,,"I have written my own QQuickGeoMapGestureArea derived map gesture area due to the problems with the existing implementation. This can only be used with a custom Qml component which is basically a copy&paste of the QDeclarativeGeoMap code. The only difference is that it is using the custom gesture area.

Is it somehow feasible to change the official QDeclarativeGeoMap class so that custom gesture areas can be assigned to it?",,,,,,,,,,QTBUG-68173,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0mdfz:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"07 Oct '19 13:51;paangele;[~DanielSt] What problems with the existing implementation are you referring to? perhaps QTBUG-68771 ?  if you have a fix for that, we would be happy to accept it. So far i concluded it was a problem in MouseArea..","09 Oct '19 15:24;DanielSt;Gestures work well until you place a MouseArea on top of the Map. Then panning often fails (QTBUG-75731) and sometimes pinch&zoom (QTBUG-68771). These bugs are not fun for the end user. Another problem (very use case specific) is that a PinchArea cannot be placed on top of the Map because it consumes everything (not only the pinch&zoom gesture but also panning and so on).

I have stripped down the MapGestureArea to our needs so that we do not need a MouseArea on top of it. In detail, the area emits double-clicked, clicked, wheel, and pressAndHold events. It also provides a mechanism for sending pinch events (pinchStarted, pinchUpdated, pinchFinished) without zooming the map.","09 Oct '19 20:18;paangele;Setting it to P3 since i think the real fix here is to fix mousearea and the input handlers to work with flickables ([~srutledg])
At the moment it's only possible to handle the events in a QGeoMap subclass, but not to change the gesture area itself. It's a CONSTANT property so in principle it could be changed without breaking source compatibility. [~ablasche] ? 

[~DanielSt] and as an alternative approach, in case these bugs are not going to be fixed in their respective modules, how about adding, instead, a stripped down mouse area that that has no issues with underlying input-hungry elements? After all, what is that you need in such a full-item area? pressed, released, clicked, doubleclicked ?","10 Oct '19 09:55;paangele;a third alternative could be to give the gesture area also clicked, pressed, released and doubleclicked signals?","11 Oct '19 09:26;DanielSt;Double click is used for map zooming, press and hold for context menus. The pressed/released event can be used for instance for stopping automatic panning from a location source.

I would go for the third alternative where the gesture area provides the clicked signals. Especially because other map UI components (Apple MapKit, Google Maps, ...) offer mouse click events by default.

It would also be nice if the PinchArea (maybe MouseArea too) and Input Handlers (TapHandler, etc. who do not work on top of a Map because they completely consume the events) provide an option (property) so that they internally use the touch events but then pass them through as if they do not exist (I hope it's clear what I mean). This way we could place a PinchArea/TapHandler on top of the map while the map receives full touch events.","14 Oct '19 08:42;ablasche;my preferred option is to fix the mouse area and input handlers. If this fails  I could also imagine to add a secondary implementation which can be chosen via a new API. This would require a very good explanation what the pros & cons are of each implementation.","15 Oct '19 16:04;paangele;So i guess that IF QTBUG-68173  gets fixed, then we are good right?","16 Oct '19 05:35;DanielSt;We are discussing the gesture area's problems since +3 years now :P with little progress. Maybe the best option is to completely remove the hard dependency from the map and allow custom gesture areas as suggested by [~paangele]. This way, we could at least add custom solutions/workarounds for the existing touch bugs more easily.","16 Oct '19 11:10;paangele;Note: i did not suggest that. And i would actually not push for it, since i don't think it's a maintainable approach (the API to do so is private and subject to change, so it would be very much a ""do at your own risk""). If [~ablasche] vouches for it, i will of course add a setter for that.
Until then my favourite solutions would be 1) a fixed taphandler that supports multiple touchpoints ([~srutledg] has a WIP patch, hopefully finalized soon?).
if 1) is not converging, then my backup solution would be to add support for 1-2 fingers press/click/hold to the gesture area directly.
MouseArea at this point seems to be sort of frozen, and not going to get any multipoint support/fixes, that is at least apparent.","15 Feb '20 10:41;paangele;[~DanielSt] so it seems after all that this is not going to happen for Qt5.
However, there could be one way around it.
It's possible to create your own plugin, subclassing  QGeoMap, and implementing the event handling there. However, i believe, this would not allow to expose extra signals such as a 2 finger doubleclick. 
But if you happen to look into this, and it works for you, feel free to document the workaround here :-)",,,,,,,,,,,,
Separate the AlwaysInUse part of the CoreLocation plugin so that it is an optional one ,QTBUG-76718,280548,Suggestion,Open,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,,andysh,andysh,26 Jun '19 09:41,06 Feb '20 20:42,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Location,,,,1,Reported_by_support_standard,,,"Separate the AlwaysInUse part of the CoreLocation plugin so that it is an optional one. This can be done in a similar way to how the NSPhotoLibrary support is included in qtbase, the reason being that if the main plugin references the requestAlwaysAuthorization setting then Apple will expect the Info.plist entry to be set appropriately. As a result this can indicate that the application will use battery power even when it is not active because of this setting, even if the application never turns this on.

By making it optional then it makes it easier to only have to specify this when it is explicitly going to be used by the application itself.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,iOS/tvOS/watchOS,,,,,,"0|i0lgvb:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Text type word eliding when wrapMode is set to Text.WordWrap,QTBUG-81651,292297,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,qt.team.quick.subscriptions,tero.pelkonen,tero.pelkonen,24 Jan '20 07:15,24 Jan '20 07:19,18 Feb '21 09:41,,5.12.6,5.14,5.9.5,,,,,,,,,,,,,,,,,,,,Quick: Core Declarative QML ,,,,0,reported_by_support_standard,,,"Users have requested to have multiline eliding with Text, when using wrapMode: Text.WordWrap.

Currently words will go over the text area when WordWrap is used.

Example code:
{code:java}
Text {
        id: name
        text: ""aaaaaaaa bbbbbbbbbbbbbbbbbbbbbbbbbbbbbb aaaaaaaaaaaaaaaaaaaaaaaa bbbbbbbbbbbbbbbbbbbbbbbbbbbbbb aaaaaaaaaaaaaaaaaaaaaaaa bbbbbbbbbbbbbbbbbbbbbbbbbbbbbb aaaaaaaaaaaaaaaaaaaaaaaa bbbbbbbbbbbbbbbbbbbbbbbbbbbbbb""

        height: 150
        width: 50
        maximumLineCount: 100
        elide: Text.ElideRight
        wrapMode: Text.WordWrap

        Rectangle {
            anchors.fill: parent
            color: ""gold""
            z: -1
        }
    }{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0nazz:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
QSvgGenerator paths are not closed,QTBUG-81475,291858,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,,irfan.omair@digia.com,irfan.omair@digia.com,16 Jan '20 22:34,16 Jan '20 22:36,18 Feb '21 09:41,,5.14.0,,,,,,,,,,,,,,,,,,,,,,SVG Support,,,,1,Reported_by_support_premium,,,"When line join between first and last element of the path are rendered with painter.path(), the exported svg when loaded in chrome or safari shows missing line join.

if we look at this svg tutorial [https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Paths]

it looks like looks like in order to have the line join happen in chrome, a 'z' needs to be added as the last element of the path, which is a ""close path"" command and QSvgGenerator never write a 'z' to the path.

interestingly when same exported svg is loaded in QSvgWidget it renders it correct.

 

Attached example generates a svg and when this saved svg is loaded in chrome top missing join is visible. 

 ",,,,,,,,,,,,,,,,,,,"16 Jan '20 22:35;irfan.omair@digia.com;QTBUG81475.zip;https://bugreports.qt.io/secure/attachment/91272/QTBUG81475.zip","16 Jan '20 22:36;irfan.omair@digia.com;image002 (7).png;https://bugreports.qt.io/secure/attachment/91274/image002+%287%29.png","16 Jan '20 22:36;irfan.omair@digia.com;image003 (3).png;https://bugreports.qt.io/secure/attachment/91273/image003+%283%29.png",,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Windows,,,,,,"0|i0n8lr:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Consider opening up the tools/scripts that build Qt's Documentation Snapshots for Qt Automotive Suite,QTBUG-75994,279003,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,docteam,kdpalara,kdpalara,23 May '19 09:22,13 Dec '19 06:10,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Documentation,,,,0,QtAS-related,,,"The Qt Automotive Suite is a collaboration between The Qt Company, Luxoft, and KDAB.

In Luxoft, when my distributed team and I work on documentation, we use the Qt Documentation Snapshots (https://doc-snapshots.qt.io/qtautomotivesuite-dev/qtautomotive-index.html) every day as part of our collaboration, as a documentation testing tool.

There are modules that are renamed, changed, documentation topic titles updated all the time. This is inevitable. But right now, when something breaks, the only solution is to send an e-mail to [~treinio]. Because the whole system is a black box.

It would be more efficient, productive, and collaborative, if these scripts/tools can be opened up to include the Luxoft Qt Automotive contributors as well. Then we can also prevent these breakage, or even fix them immediately.

We discussed this at the Future of Qt Workshop ([~paulwicking]), but it wasn't clear what the final agreement was. [~vhilshei] -- is this possible?",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0l7nr:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"25 May '19 16:11;vhilshei;Indeed, that's what we want to do; however, the various systems are not in a shape where we can share how they are set up. It's a collection of scripts, running on a home-grown and hand-groomed system. So, step one is to put things into code and under version control, in a way that allows us to provision things reasonably reliable from a repository. Not sure what we will use for that, we have some experience with Ansible, Puppet, and CFEngine in the house, but of course just scripting things is better than nothing and might be good enough for a start. That work was preempted by the gerrit upgrades, but I think we can start this now.","03 Jun '19 06:55;kdpalara;Hi Volker, thanks for your response. Hypothetically, when do you see this happening? What's the timeline like? Who will be assigned to it?","03 Jun '19 14:37;vhilshei;Hey Kavindra, what we (ie [~paulwicking], [~treinio] and I) discussed is this:
* we want to continuously and automatically update documentation (snapshots for all branches, published nightly, including ""last updated"" date)
* we want maintainers of external modules to be able to test their documentation changes, using exactly the same stack as we are using to publish to doc.qt.io

The former has higher priority for us than the latter, but ultimately both of these have a lot in common: we need to make sure that the stack we use to build and deploy documentation is fully automated, which starts with documenting it before turning that documentation into scripts and code for config management software. That code can then be shared with anyone, and the intention is that you can just run the same stuff that we run. And, once the entire deployment process to doc.qt.io is fully automated, any change pushed to gerrit will land on the web page as well.

Of course, things will not all happen at once, so this will require a few iterations.

As to how long this takes: I'm not in the business of crystal balling, but hope that we can make some first steps before the summer break.","02 Sep '19 14:31;kdpalara;Hi [~vhilshei], [~paulwicking], [~treinio]

Just wondering what the status of this work is so far. Currently I'm having some issues finding out why the Snapshots are out of sync and don't reflect the current state of our docs. Beyond this log file: https://doc-snapshots.qt.io/qt5-5.13/lastbuild.log which says that the latest snapshots were built today, it's not possible to identify any other clue as to why the snapshots don't match our content.

We could really use this opening-up of the snapshots tool.","11 Dec '19 16:47;kdpalara;Hi [~paulwicking], I'm guessing this isn't going to happen? It's been awhile now.","13 Dec '19 06:10;paulwicking;Hi [~kdpalara]! With the invention of mini-coin, this (in terms of making the publishing infrastructure public) has become a less of a priority. Mini-coin solves much of the problem as it allows for generating the docs and serving them over http locally, the major difference being that it isn't actually published to qt.io. Work is still ongoing in terms of automating the publishing process; a lot has already been done, but there's still a bit of a distance until we cross the finish line. As this isn't a business priority, and given the limited capacity of the team, I'm sorry to say I cannot predict when it might be completed in a meaningful way. ""A while"" seems fitting.",,,,,,,,,,,,,,,,
HTTP2: Transparently re-send idempotent requests after GOAWAY,QTBUG-75573,278002,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,tpochep,mgoetz2,mgoetz2,03 May '19 15:13,10 Dec '19 11:08,18 Feb '21 09:41,,5.12,,,,,,,,,,,,,,,,,,,,,,Network: HTTP,,,,1,reported_by_support_standard,,,"This is a follow-up of https://bugreports.qt.io/browse/QTBUG-73947

GOAWAY seems to be a regular thing to get.

In HTTP/1.1 the requests are already re-sent, AFAIK here: https://code.woboq.org/qt5/qtbase/src/network/access/qhttpnetworkconnectionchannel.cpp.html#_ZN29QHttpNetworkConnectionChannel19handleUnexpectedEOFEv
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0l20v:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"05 May '19 23:23;hmoffatt;This needs to be in 5.12 also IMHO. If Qt does not transparently retry that is a lot of extra work for the caller. Especially since Qt already has automatic redirects for example.","07 May '19 10:13;tpochep;I would need a proper description of how the server is configured (I presume it's Apache) to reproduce/debug the issue.

 ","07 May '19 11:25;hmoffatt;Do the developers on the related bug have a test setup to reproduce these issues?

My configuration is absolutely uninteresting. I am serving files from a WSGI app using mod_wsgi in Apache. I have observed this problem when downloading 6+ files in parallel from the server with one QNAM.","07 May '19 14:23;tpochep;Ah, so nothing special on Apache side? When I probably will be able to reproduce this.","18 Jun '19 00:03;hmoffatt;Any news here?","28 Jun '19 10:03;tpochep;> Any news here?

This ticket is about ... what we already do. While it says re-send idempotent, we do not abort streams with ids below or equal to the lastStreamID. Which is arguably incorrect, according to RFC 7540 (6.8):

{quote}

On streams with lower- or equal-numbered identifiers that were not closed completely prior to the connection being closed, reattempting requests,

transactions, or any protocol activity is not possible, with the exception of idempotent actions like HTTP GET, PUT, or DELETE. 

{quote}

So I have to abort any protocol activity on some streams to resolve this ticket.","28 Jun '19 10:43;tpochep;Markus, please, clarify what you are asking for. If we have to initiate a new connection/H2 session - then requests don't have to be idempotent. If you are talking about the same connection/H2 session - we already do what this ticket asks for.","08 Jul '19 07:14;hmoffatt;What I am expecting is that I can launch a bunch of requests at once with QNAM and they all complete successfully, no matter if the server cancels some with GOAWAY or what. I don't want to get a protocol error response, as an end user of QNAM that should not be my problem.","10 Jul '19 22:57;hmoffatt;What is the current status here please? Does Qt transparently retry when the server sends GOAWAY? Or is the caller expected to do this?","11 Jul '19 08:45;vhilshei;Hi Hamish, as per our understanding, we are treating the requirement to have QNAM transparently handle all GOAWAY responses, including those that mandate a re-request with a new connection, as a feature suggestion, not a bug. As we see it, QNAM already handles the situation where a GOAWAY can be handled client-side by sending a new request over the existing connection/session (as per the fix for QTBUG-73947).

Requests that require a new connection/session don't have to be idempotent, so the language in this ticket's summary and discription is somewhat inaccurate. That case is not handled by QNAM today, so until that is implemented, callers are expected to handle that scenario.","11 Jul '19 09:38;mgoetz2;[~vhilshei] There seems to be a misunderstand here. It *is* a bug and even a regression. The HTTP 1.1 code DOES do the re-send, the HTTP2 code does not. So applications need to disable HTTP2 in Qt if they don't implement the handling themselves in the application :-( 

[~hmoffatt] If this helps you, this is how we handled it application side in the ownCloud client: https://github.com/owncloud/client/pull/7227","11 Jul '19 09:47;mgoetz2;My point is: An idempotent request like GET needs to be re-tried by QNAM automatically. (like it was in HTTP1.1)
A non-idempotent request (POST) must be re-tried by the application.
If you say it is the case (i don't think it is?) then I'll shut up :-)","15 Jul '19 07:09;tpochep;This logic can be trivially implemented by an application. For QNAM - it's too much work: right now we do not abort requests on streams with ID <= last stream ID sent by server (idempotent or not, RFC is ambiguous and self-contradicting here, saying no protocol activity on non-idempotent, but then 'can eventually be completed'). We can not start new streams in this session, thus a new connection must be established and requests re-tried. RFC says  about this operation: 'CAN', not 'SHALL' or 'MUST'. So, application can resend them. From QNAM point of view the logic you require would be wrong. We cannot retry again and again, potentially connecting again and again. We report an error and thus sending those requests after a reply finished with error would be some kind of creepy activity on QNAM side (and I suspect some applications may have already implemented this logic with retrying requests). As for 'what is the current status' - this is a new feature requested, it's an optional (orthogonal to and not required by H2 protocol), so - the answer 'some future release' (5.15 maybe, or 5.12.x).","15 Jul '19 08:18;hmoffatt;I expected that GOAWAY would be treated at least like HTTP redirect. ie Qt should follow it. I guess that could be considered a feature request though it's a pretty basic function and the code should be no more complicated than the redirects case.

So it looks like I have to implement this myself for now. Is QNetworkReply:ProtocolFailure the value to look for?","15 Jul '19 09:57;tpochep;If GOAWAY frame contains error code NO_ERROR, for the streams with IDs above lastStreamID we finish replies with QNetworkReply::ContentReSendError.",,,,,,,
Make it possible to update the surface when the WindowStaysOnTop flag is changed,QTBUG-77164,281669,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,qt.team.graphics.and.multimedia,andysh,andysh,24 Jul '19 11:46,29 Nov '19 15:36,18 Feb '21 09:41,,5.12.4,,,,,,,,,,,,,,,,,,,,,,QPA,,,,1,Reported_by_support_standard,,,Make it possible to update the surface when the WindowStaysOnTop flag is changed. This can be done by removing the surface from the layout and then updating the setZOrderMediaOverlay flag. This would also need to be done when the application loses focus to ensure it is correctly back on top again too. Currently adding/removing the WindowStaysOnTop flag has no effect as it is set at the time of the creation of the QtSurface.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Android,,,,,,"0|i0lnfj:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"25 Jul '19 11:01;vestbo;Just adding a note that this is a general problem with the QWindow API. The only place where we explicitly destroy and recreate the surface is in setParent. All other functions are undefined in terms of if the platform can apply the property directly without destroy+create. I'll try to pull up other related reports and patches.","25 Jul '19 11:06;andysh;Do you mean the surface as in the QSurface? In this case this is specifically down inside the Android code at least as it is set in the QtSurface constructor. It can be changed if it is removed from the layout first as the flag can be changed and the surface readded back to the layout. No need to recreate it at least.

I am speaking purely in terms of Android here and not the general Qt classes here (in case of confusion).","25 Jul '19 11:43;vestbo;I'm talking about QWindow::create() and destroy(), which results in QPlatformSurfaceEvent::SurfaceCreated and QPlatformSurfaceEvent::SurfaceDestroyed events. 

Some platforms like macOS and Android will deal with a setFoo that can't be applied directly to the native window by internally recreating the native window, e.g. QCocoaWindow::recreateWindowIfNeeded(). That's a workaround for the concept of QWindow ""recreation"" not existing on the QWindow/QPlatformWindow level. Ideally a platform would just need to report to QWindow whether or not any given setFoo property update is possible ""in place"", and if not, QWindow would do the destroy+create.",,,,,,,,,,,,,,,,,,,
[Integrity] Posix Pipes Cause Big CPU load Under Integrity ,QTBUG-74246,275053,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,kiollila,karimpinter,karimpinter,06 Mar '19 12:55,20 Nov '19 10:45,18 Feb '21 09:41,,5.12.1,5.13.0 Alpha 1,,,,,,,,,,,,,,,,,,,,,Core: Event loop,,,,0,Reported_by_support_standard,,,"In general POSIX fifos have very bad implementation in Integrity OS in terms of speed. When there is usage of fifo, the Integrity FileServer (a VAS/process used to process the file system requests) has very high CPU load. QT is using fifo inside event dispatcher (QThreadPipe) and the usage is only intended to wake up the event dispatcher thread. This is standard way to implement “poll” over sockets and ability to cancel the poll(kind like semaphore), but in Integrity this generate very high CPU load - roughly about 50% CPU of one core is going to FileServer and it can raise up to 70-80% in some situations.

Integrity documentation suggests another way to implement poll over sockets/semapohore/timers. In short new implementation is using:
- Clock + Activity objects to implement timers
- Semaphore object to implement QThreadPipe (wakeup)
- PollItem to wrap socked fds with Activity
- The poll call is replaced with WaitForActivity call

Note that wrapping the socket fds with PollItem is library in Integrity, used to create Activity for socked fd.
Documentation of this functionality inside Integrity documentation seems limited but there is an example how to use it: AsyncSocketEvents. You should have this example in Nvidia PDK.
",,,,,,,,,,,,,,,,,,,"20 Mar '19 08:56;kalin;0001-event-dispacher-poll-optimization.patch;https://bugreports.qt.io/secure/attachment/82170/0001-event-dispacher-poll-optimization.patch",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Integrity,,,,,,"0|i0km0f:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"20 Mar '19 08:58;kalin;Proposal patch is attached.",,,,,,,,,,,,,,,,,,,,,
[WebRTC] screencapture should bring up a selection dialog in webengine,QTBUG-80054,288493,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,qt_webengine_team,karimpinter,karimpinter,14 Nov '19 13:06,15 Nov '19 14:10,18 Feb '21 09:41,,5.13.2,5.14.0 Beta3,,,,,,,,,,,,,,,,,,,,,WebEngine,,,,3,Reported_by_support_standard,,,"Would be nice if the WebEngine would display a dialog on Desktop Linux, to select FullScreen/APP/Window for the  screencapture, like it does for example in Chromium.",Desktop linux with X11,,,,,,,,,,,,,,,,,,"14 Nov '19 13:06;karimpinter;chromium-screencapture.png;https://bugreports.qt.io/secure/attachment/89172/chromium-screencapture.png",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Linux/X11,,,,,,"0|i0mplr:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Improve QtTemporaryFile documentation regarding templates,QTBUG-79927,288194,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,vertries,eswcvlad,eswcvlad,11 Nov '19 12:05,12 Nov '19 11:03,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Documentation,,,,0,,,,"Consider the following example of creating a QTemporaryFile with a dynamic explicit template:
{quote}{{{color:#800080}QTemporaryFile{color} tmp(}}{{DirPath + ""{color:#008000}/""{color} + BaseName + {color:#008000}"".XXXXXX""{color});}}{quote}
In the current state the documentation fails to answer the following questions:
 # What happens, if _BaseName_ also contains _XXXXXX_? Which of the patterns will be replaced? First, second or both?
 # What happens, if _DirPath_ contains _XXXXXX_? Will it be also replaced or dirname is considered static and the pattern will be searched only in the file name part?

Currently only the explicitly added pattern will be replaced, since pattern is searched from the end of the string, and the search stops as soon as any pattern was found. Also no pattern will be searched in the _DirPath_, since search also stops at _/_. But as it stands, this cannot be relied upon, since this is not documented...",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0mnuv:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Feature Request: Propagate the hover events in nested MouseArea ,QTBUG-79875,288060,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,qt.team.quick.subscriptions,shmittal,shmittal,08 Nov '19 07:37,08 Nov '19 07:39,18 Feb '21 09:41,,5.13.1,,,,,,,,,,,,,,,,,,,,,,Quick: Core Declarative QML ,,,,0,Reported_by_support_standard,,,"It would be great if we can have the functionality to allow mouse hover events to propagate to underlying Mouseareas. Something similar to mouse clicks, as clicks can propagate with propagateComposedEvents set to true. 

Please refer the attached sample for better understanding of the requirement. ",,,,,,,,,,,,,,,,,,,"08 Nov '19 07:38;shmittal;qtbug79875.zip;https://bugreports.qt.io/secure/attachment/88959/qtbug79875.zip",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0mn27:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add rating system to documentation,QTBUG-79691,287781,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,docteam,assam,assam,01 Nov '19 12:38,01 Nov '19 12:39,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Documentation,,,,0,,,,"The Qt documentation (especially online) is a very good resource, however, some pages can be missing information or outdated. Having a star rating system on each page can greatly improve the quality of the documentation. I highly suggest adding this feature.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0mle7:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Feature Request: API needed to access default value of Mouse Double Click Distance ,QTBUG-76949,281037,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,srutledg,shmittal,shmittal,08 Jul '19 09:45,31 Oct '19 12:30,18 Feb '21 09:41,,5.13.0,,,,,,,,,,,,,,,,,,,,,,"GUI: Basic Input System (keyboard, mouse, touch)",,,,2,Reported_by_support_standard,,,"Currently, there is no way to access the default value for MouseDoubleClickDistance, something similar to QStyleHints::mouseDoubleClickInterval().
Same is applicable to TouchDoubleTapDistance also.

There should be some API to get this information. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0ljqf:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"31 Oct '19 12:30;mraynelson;My impression is this is a problem on high-resolution Android devices. I am unable to reliably detect double click on such devices, I suspect due to narrow distance that this API would help me avoid. Please consider getting this into Qt 5.12.6. ",,,,,,,,,,,,,,,,,,,,,
Collision detection for Qt3D,QTBUG-79654,287721,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,seanharmer,tero.pelkonen,tero.pelkonen,31 Oct '19 08:09,31 Oct '19 08:10,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Qt3D,,,,0,reported_by_support_standard,,,Users have requested to have collision detection/support for physics engine implemented in Qt3D.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0ml0v:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
QML Network Transparency error handling,QTBUG-77046,281330,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,qt.team.quick.subscriptions,returnx,returnx,15 Jul '19 07:48,23 Oct '19 12:09,18 Feb '21 09:41,,5.12.3,5.12.4,,,,,,,,,,,,,,,,,,,,,Quick: Controls 2,Quick: Core Declarative QML ,,,0,,,,"In QtQuickContols2 StackView network transparency, no way exists for handling network errors...
 for example when network is unavailable or server is down we cannot load qml file from HTTP URL, so not any signals emit from StackView for error handling, just Network module writes error in stderr directly.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0llif:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
QHttpServer: Content-Encoding support,QTBUG-79220,286697,Suggestion,Open,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,mikhailsvetkin,jasonapk,jasonapk,14 Oct '19 16:06,22 Oct '19 19:44,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Network,,,,0,,,,"The Content-Encoding header of a HTTP request is optional and can have several values. ( [https://en.wikipedia.org/wiki/HTTP_compression] ) While it is unusual to get a  non-multipart POST/PUT request that has one of these encodings, the area where Qt operates this is probably desirable to support with custom servers and clients. (e.g. JSON over bandwidth limited connections, pay-per-usage connections (cell networks) etc.)

Additionally, this header should be supported for normal HTTP multi-part parts as well. 

What is being requested is transparent decompression, such that if request body is written to an QIODevice, that what is written is the body with the decompression already applied. 

There should be a way to turn this off as well, deferring decompression until later. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,QTBUG-60105,9223372036854775807,,,,,,,,,"0|i0mfjr:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
QHttpServer: Huge body handling,QTBUG-77284,281898,Suggestion,Open,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,mikhailsvetkin,sylvaingarcia,sylvaingarcia,01 Aug '19 10:08,22 Oct '19 19:44,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Network: HTTP,,,,2,,,,"Current implementation stores body content within a QByteArray.

This could lead to extremely high memory consumption for some usage (eg.: huge file uploading).

It could be a great idea to be able to create some routes that manage bodies in a specific way (through QHttpServerRouterRule).",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,QTBUG-60105,9223372036854775807,,,,,,,,,"0|i0lorz:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"01 Aug '19 10:11;sylvaingarcia;We could change QHttpServerRequest's body handling to use a QIODevice rather than QByteArray. Default handling could use a QBuffer, and an QHttpServerRouterRule could specify another QIODevice to use (eg.: QFile).

You can check my PR on our fork here: [https://github.com/se-edge/qthttpserver/pull/2]","14 Oct '19 07:17;jefernan;It's supported from the beginning:
https://codereview.qt-project.org/gitweb?p=qt-labs/qthttpserver.git;a=blob;f=src/httpserver/qhttpserverresponder.cpp;h=5285233f45ebe87f8ede706e84b8731fd24629a3;hb=HEAD#l175","14 Oct '19 13:25;jasonapk;Question about this, even absent of a multipart upload, can the server handle a request body that is gzipped* and transparently un-gzip it? i.e. Content-Encoding:gzip header

 

*gzip,compress,deflate","14 Oct '19 14:57;jefernan;No, it's not supported and it should support it. Can you open a suggestion in a QTBUG to implement it?","14 Oct '19 16:07;jasonapk;Opened: https://bugreports.qt.io/browse/QTBUG-79220","14 Oct '19 17:24;jefernan;Thank you!","15 Oct '19 16:12;sylvaingarcia;No, this is not about the response body but the request.

Our use case is to stream request's body (that might be partial or chuncked) to an IO device without storing data into RAM.

For example: upload a 10Go file to an embedded QtHttpServer with only 512Mo RAM :)","15 Oct '19 18:35;jasonapk;That was my understanding. I POST large JSON and files regularly.  Also, why I would appreciate gzip/compress content-encoding. :)","16 Oct '19 08:02;jefernan;Ok, then it is a valid suggestion.

Thanks a lot.",,,,,,,,,,,,,
Clarify in the documentation when a scrollbar would be shown when attached to a Flickable,QTBUG-76896,280907,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,qt.team.quick.subscriptions,andysh,andysh,04 Jul '19 06:31,16 Oct '19 23:35,18 Feb '21 09:41,,5.12.4,,,,,,,,,,,,,,,,,,,,,,Documentation,Quick: Controls 2,,,0,Reported_by_support_standard,,,"Clarify in the [documentation|https://doc.qt.io/qt-5/qml-qtquick-controls2-scrollbar.html] when a scrollbar would be shown when attached to a Flickable. For some it is not clear how it is decided when it is shown when the different policies are used as it feels like the policy indicates that it will always be visible when it is needed and so on. Therefore it should be clarified what the triggers actually are so it is clear.",,,,,,,,,,,,,,,,,,,"16 Oct '19 23:31;miketrahearn;ScrollBarOptions-MacOS.png;https://bugreports.qt.io/secure/attachment/88227/ScrollBarOptions-MacOS.png",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0lizj:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"12 Jul '19 08:37;kdpalara;Hi [~mitch_curtis] / [~ulherman] -- do you know how this works? If you have the info, I'm happy to add it to the docs.","15 Jul '19 11:17;mitch_curtis;Thanks Kavindra! Unfortunately I would need to look into it to be sure, but am on another project at the moment so can't right now.","15 Jul '19 12:25;kdpalara;[~mitch_curtis] That's fine :) I believe Ulf is OOF for a few weeks. I'll ping him when he's back. Good luck on your project.

[~srutledg] Hi, do you happen to have any info for this ticket that I could use?","16 Jul '19 13:00;mitch_curtis;Andy, can you give an example of when the behaviour contradicted the documentation? From looking at the documentation, the criteria for each enum value is quite clear to me, so it would be good to know what makes this report a bug.","16 Jul '19 13:11;andysh;Actually I intended it to be a suggestion, I must have forgotten to switch from Bug to Suggestion when I made it. 

What it needs is an indication of what the actual triggers are, because if it is attached to a Flickable then it takes control of active and therefore it is not always shown even if the policy explicitly requests it. So Flickable dictates when it is shown based on the need and platform and so on. The documentation is not contradicted at all, but in some cases it is just not clear as to what it really depends on.","16 Jul '19 13:36;mitch_curtis;{quote}
if it is attached to a Flickable then it takes control of active and therefore it is not always shown even if the policy explicitly requests it.
{quote}
That sounds like a bug.","16 Jul '19 13:39;andysh;Well, thats for you to decide, I didn't think it was in any case.","16 Jul '19 13:50;mitch_curtis;Can you please ask the customer to explain the circumstances under which ""it is not always shown even if the policy explicitly requests it""? If we can reproduce that then we can figure out if it's intentional or not (and update the documentation accordingly if necessary).","16 Jul '19 13:56;andysh;I will dig out the example I did and attach it.","16 Oct '19 23:35;miketrahearn;Somewhere in the history of this issue and the INC that caused it, someone said: ""the current trend is to always auto-hide the scroll bar unless you are scrolling"".
I attached the file  !ScrollBarOptions-MacOS.png|thumbnail! to show that there are (at least on this platform) options to change the OS behaviour - and this seems to be determined by whether you are using a trackpad or mouse, to give the expected behaviour. All this to say, I'm not sure that hard coding a policy in your app is the right way because it isn't a one-size-fits-all solution. It may need an additional ""input dependent responsive"" mode. Food for thought.",,,,,,,,,,,,
Add binding to OpenGl image structures and atomic operations,QTBUG-79251,286800,Suggestion,Open,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,lemire_p,aleph0,aleph0,16 Oct '19 07:09,16 Oct '19 08:04,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Qt3D,,,,1,,,,"A common use case in CAD applications is the heavy usage of transparent objects. A common approach to [Order Independent Transparency|https://en.wikipedia.org/wiki/Order-independent_transparency] is the usage of a so called A-Buffer using the OpenGL image data structure.

A very nice introduction for this approach might be found in:

https://stackoverflow.com/q/16934695/5762796

This mentioned solution for Order Independent Transparency is memory and time efficient and requires just two passes. Older approaches as Depth Peeling are quite more complex and requires many passes, depending on the scene complexity.

Now, Qt3D lacks the support for `QParameter` connecting Image structures, and also atomic operations, to the fragment shaders, especially the OpenGL command glBindImageTexture is not yet implemented in Qt3D.

In order to cover more uses cases, including CAD applications, it would be a great benefit to support the OpenGL image structure.

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0mg2f:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"16 Oct '19 07:44;seanharmer;Agreed this wold be very nice to have.","16 Oct '19 08:04;lemire_p;The image support is in already ([https://code.qt.io/cgit/qt/qt3d.git/tree/tests/manual/shader-image-qml]). What's missing is the atomic buffer support, we'll see how hard it is to add.",,,,,,,,,,,,,,,,,,,,
Material.System should follow system theme on Android Q and up,QTBUG-78913,285924,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,qt.team.quick.subscriptions,mhoeher,mhoeher,01 Oct '19 14:23,02 Oct '19 07:54,18 Feb '21 09:41,,5.13.0,,,,,,,,,,,,,,,,,,,,,,Quick: Controls 2,,,,3,,,,"In QQC2's Material theme, we can currently select between the Light, Dark and System theme, where the System theme seems to decide between Light and Dark based on the system color palette.

Android Q introduced support for a system wide dark mode, which apps might or might not follow, depending on their preferences. Currently, when I use Material.System on an Android Q device (Pixel 3), it always uses the Light theme, even if I set the system theme to Dark.

It would be great if on Android versions that support it, the Material.System setting would follow the system preferences.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Android,,,,,,"0|i0mb2n:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"02 Oct '19 07:54;srutledg;Wow it's about time... I always wondered why they didn't have that system-wide setting.  They have a font size setting (and we still have major scaling problems on my phone at least), but left the theme up to the applications all these years.",,,,,,,,,,,,,,,,,,,,,
web_engine_library_info is very limiting,QTBUG-78646,285337,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,qt_webengine_team,ajpatterson,ajpatterson,20 Sep '19 19:32,26 Sep '19 08:32,18 Feb '21 09:41,,5.9,,,,,,,,,,,,,,,,,,,,,,WebEngine,,,,0,,,,"web_engine_library.info.cpp lets you specify QTWEBENGINEPROCESS_PATH but almost nothing else. The executable can be relocated to a specific location, but outside of qt.conf, there's no way to specify the locations of icudtl.dat or the *.pak files required to load it.

In my case, I'm building a plugin for Adobe Illustrator. I'm able to relocate all the Qt DLLs I need to my own plug-in directory, and I can use QTWEBENGINEPROCESS_PATH to relocate the web engine process .exe to my plug-in directory, but I'm currently forced to put the icudtl.dat & *.apk in the same directory as Illustrator.exe.

Yes, I could create a qt.conf and place it in the same folder as IIllustrator.exe, but I know for a fact that there are other plug-in developers who use Qt – I've managed to co-exist with them in all other ways for years (kudos to Qt for that!).

It's baffling to me that there is an environment variable for the web engine executable, but not for anything else. Surely it would be trivial to add them? Failing that, is there any reason why the path look-up code never tries the directory where the web engine executable is located? That one feels like an obvious candidate that was overlooked.",,,,,,,,,,,,,,,,,,,"24 Sep '19 18:27;ajpatterson;pak.png;https://bugreports.qt.io/secure/attachment/87583/pak.png",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,macOS,Windows,,,,,"0|i0m7lb:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"24 Sep '19 18:29;ajpatterson;Just to make it more annoying, in the situation I describe in the description, I have to have the .pak files in *two* places. QtWebEngine – in my plugin, in the main thread – loads the .pak files from wherever web_engine_library_info tells it to. But QtWebEngineProcess.exe doesn't know to look there, so it looks in its immediate folder. As a result, not only do I have to have the *.pak in two places, they are in fact loaded in both places:

!pak.png!

I'd actually prefer it if QtWebEngine followed the same search pattern as whatever QtWebEngineProcess.exe is doing – which is what I suggested int he description. Namely, check the process executable's folder first (or at least include in the search list). At any rate, it's pretty clear so long as they're not doing the same set of searches, there are going to be headaches in this situation. ",,,,,,,,,,,,,,,,,,,,,
Provide example for Navigator,QTBUG-78699,285443,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,paangele,DanielSt,DanielSt,23 Sep '19 13:19,23 Sep '19 15:46,18 Feb '21 09:41,,5.13.1,,,,,,,,,,,,,,,,,,,,,,Location: Maps/Navigation,,,,0,,,,"An example for the Navigator (https://doc.qt.io/qt-5/qml-qt-labs-location-navigator.html#details) should be provided with the following features:
# Search a route.
# Navigate along the route using the current location (from a position source).",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0m88v:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
QToolBar : Support for expanding multiple rows together,QTBUG-75800,278388,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,qt.team.quick.subscriptions,nagrohn,nagrohn,14 May '19 05:50,06 Sep '19 01:50,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Widgets: Widgets and Dialogs,,,,0,Reported_by_support_premium,,,"It is possible to shrink multiple rows at the same time. However, expanding doesn't work in the same way. When a user grabs the most right shrunk row and drag it to expand, only the most right row is expanded. Please see the attached image for more details. Sample code is attached. ",,,,,,,,,,,,,,,,,,,"14 May '19 05:51;nagrohn;QTBUG75800-sample.zip;https://bugreports.qt.io/secure/attachment/83834/QTBUG75800-sample.zip","14 May '19 12:26;nagrohn;ToolBar.png;https://bugreports.qt.io/secure/attachment/83850/ToolBar.png",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0l49r:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
QRemoteObjectHost need a function to set local server access option,QTBUG-72921,271993,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,bstottle,ngocanh198,ngocanh198,09 Jan '19 08:42,28 Aug '19 19:24,18 Feb '21 09:41,,5.12.0,,,,,,,,,,,,,,,,,,,,,,Remote Objects,,,,2,Reported_by_support_standard,,,"When I run directconnectserver example code as SYSTEM user, and run directconnectclient as normal user. Client cannot connect to server, because QLocalServer use platform default access policy.

=> Need a function similar to QLocalServer::setSocketOptions

 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Windows,,,,,,"0|i0k593:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[evdev] Add support for evdev multipoint touch pressure input event (ABS_MT_PRESSURE),QTBUG-72053,270311,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,srutledg,tuomas.vaarala,tuomas.vaarala,27 Nov '18 08:37,27 Aug '19 13:31,18 Feb '21 09:41,,5.11.2,,,,,,,,,,,,,,,,,,,,,,"GUI: Basic Input System (keyboard, mouse, touch)",,,,0,Reported_by_support_standard,,,Currently we only handle touch pressure input event for single touch (ABS_PRESSURE) and supporting the same for multipoint touch (ABS_MT_PRESSURE) is requested.,Embedded Linux,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Linux/Other display system,,,,,,"0|i0jvj3:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"03 Jan '19 14:31;christopherbraun_bsh;Hi [~srutledg] and [~tuomas.vaarala], any update on this issue? cheers Christopher","07 Mar '19 15:40;srutledg;Are we talking about qtbase/src/platformsupport/input/evdevtouch ?

Any ideas on what hardware we could test this?

It's for a touchscreen, not touchpad, right?","14 Mar '19 13:18;naveenchandra;Hi [~srutledg] yes it is for touch screen and not for touchpad.

And yes we are talking about the qtbase/src/platformsupport/input/evdevtouch. 

To be more specific the following file : *qevdevtouchhandler.cpp.*

I will add an additional comment on the hardware where you could test this.

 

 ","15 Mar '19 12:02;naveenchandra;Hi [~srutledg] you can use any *Multi touch* supported hardware to simulate and test this.","27 Aug '19 13:31;naveenchandra;Hi [~srutledg], Any update on this issue?

 

 ",,,,,,,,,,,,,,,,,
QLabel display iPhone Screenshots fail,QTBUG-77295,281920,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,bibr,wuyu,wuyu,02 Aug '19 03:54,07 Aug '19 01:41,18 Feb '21 09:41,,5.13.0,,,,,,,,,,,,,,,,,,,,,,Widgets: GraphicsView,,,,0,,,,"Example：  attachment(testQLabelSetpixmap.rar)

{color:#800000}ui{color}->{color:#800000}label{color}->{color:#00677c}setPixmap{color}({color:#800080}QPixmap{color}({color:#008000}"":/image/haha.png""{color}).{color:#00677c}scaled{color}({color:#800000}ui{color}->{color:#800000}label{color}->{color:#00677c}size{color}(), {color:#800080}Qt{color}::{color:#800080}KeepAspectRatio{color}, {color:#800080}Qt{color}::{color:#800080}SmoothTransformation{color})); display Success.

{color:#800000}ui{color}->{color:#800000}label_2{color}->{color:#00677c}setPixmap{color}({color:#800080}QPixmap{color}({color:#008000}"":/image/iPhoneScreenshots.jpg""{color}).{color:#00677c}scaled{color}({color:#800000}ui{color}->{color:#800000}label_2{color}->{color:#00677c}size{color}(), {color:#800080}Qt{color}::{color:#800080}KeepAspectRatio{color}, {color:#800080}Qt{color}::{color:#800080}SmoothTransformation{color})); display fail.

 

Explain: {color:#008000}iPhoneScreenshots.jpg is iPhone Screenshots.{color}

 

 

 ",,,,,,,,,,,,,,,,,,,"02 Aug '19 03:52;wuyu;testQLabelSetpixmap.rar;https://bugreports.qt.io/secure/attachment/85874/testQLabelSetpixmap.rar",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,macOS,Windows,,,,,"0|i0lowv:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Improve error message in case of no suitable simulator installations (was: Cannot build for iOS Simulator),QTBUG-77222,281774,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,qtbuildsystem,con,con,29 Jul '19 08:14,06 Aug '19 10:24,18 Feb '21 09:41,,5.12.4,5.13.0,,,,,,,,,,,,,,,,,,,,,Build tools: qmake,,,,0,rc4100,,,"Checked with Qt 5.12.2 & Qt 5.13.0

{noformat}
10:13:03: Running steps for project widgets-qmake...
10:13:03: Starting: ""/Users/ziller/QtOnline/5.12.2/ios/bin/qmake"" /Users/ziller/temp/widgets-qmake/widgets-qmake.pro -spec macx-ios-clang CONFIG+=iphonesimulator CONFIG+=simulator CONFIG+=qml_debug
10:13:03: The process ""/Users/ziller/QtOnline/5.12.2/ios/bin/qmake"" exited normally.
10:13:03: Starting: ""/usr/bin/make"" -f /Users/ziller/temp/build-widgets-qmake-Qt_5_12_2_for_iOS2_Simulator-Debug/Makefile qmake_all
make: Nothing to be done for `qmake_all'.
10:13:04: The process ""/usr/bin/make"" exited normally.
10:13:04: Starting: ""/usr/bin/make"" -j8
xcodebuild build  -project widgets-qmake.xcodeproj -scheme widgets-qmake   -configuration Debug  -destination ""id="" -destination-timeout 1  ENABLE_ONLY_ACTIVE_RESOURCES=NO 
xcodebuild: error: missing value for key 'id' of option 'Destination'
{noformat}",,,,,,,,,,,,,,,QTBUG-70180,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,iOS/tvOS/watchOS,,,,,,"0|i0lo27:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"29 Jul '19 09:13;con;I had to dig into the Makefile and mkspecs/.../devices.py to find out that I miss a simulator installation of a suitable iOS version >= 11.0.","06 Aug '19 08:34;kkohne;[~con], is it enough to just add a final {{print()}} to devices.py?","06 Aug '19 10:24;con;The way xcodebuild.mk is using that I'd think that the result would be something like

{{xcodebuild build  -project widgets-qmake.xcodeproj -scheme widgets-qmake   -configuration Debug  -destination ""id=the output that we get from that print statement"" -destination-timeout 1  ENABLE_ONLY_ACTIVE_RESOURCES=NO }}
and no idea what xcodebuild does _then_.

Also I think it would make machine-processing the output of devices.py more difficult. It also outputs the information that there is no device matching the filter - by not printing any.
I have no idea about makefiles, but if it would be possible to change
{noformat}
GENERIC_SIMULATOR_DESTINATION := ""id=$(shell $(MAKEFILE_DIR)devices.py $(EXPORT_DEVICE_FILTER) | tail -n 1)""
{noformat}
in xcodebuild.mk to something like (pseudo code):
{noformat}
GENERIC_SIMULATOR := $(shell $(MAKEFILE_DIR)devices.py $(EXPORT_DEVICE_FILTER) | tail -n 1)
if (isEmpty $(GENERIC_SIMULATOR)
    echo ""Could not find find device matching '$(EXPORT_DEVICE_FILTER)'""
GENERIC_SIMULATOR_DESTINATION := ""id=$(GENERIC_SIMULATOR)""
{noformat}
IMO that would be good.
",,,,,,,,,,,,,,,,,,,
QObject::startTimer enqueues in reverse order on same tick,QTBUG-76797,280714,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,thiago,pderocco,pderocco,30 Jun '19 04:21,01 Aug '19 01:30,18 Feb '21 09:41,,5.12.3,,,,,,,,,,,,,,,,,,,,,,Core: Object Model,,,,0,,,,"If I create multiple timers with QObject::startTimer, all with the same duration, and they are launched close enough together that they end up scheduled on the timer tick, they perversely seem to fire in the reverse order. They should fire in FIFO order.

Use case: I'd like to use a timer to simulate a comm link (e.g., serial, USB, MIDI, etc.) with a fixed delay, representing each message with a separate timer, since that takes almost no code. What I wind up having to do is create my own message queue and use a single timer, but that takes about a page of code. And since I'm doing it in QML (with a tiny C++ interface module), the JavaScript needed to do that becomes a major hotspot in my code.

Since the order the timers fire seems consistent, it ought to be simple to fix this. Perhaps there's a < somewhere there should be a <= in the code.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Windows,,,,,,"0|i0lht3:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"01 Jul '19 09:11;manordheim;Which platform/Operating System is this occurring on? Have you seen if it is reproducible on other platforms?","01 Jul '19 10:04;pderocco;Windows 7, 32-bit and 64-bit. I was using console.log to display each timer launching and each timer firing, and it was pretty clear that it was tick related. If I launched, say, 100 timers, I might get the first third of them in reverse order, then the remaining two thirds in reverse order, as though a tick occurred at that point. I haven't tested 5.13.0, because I rewrote my app so that it no longer does this, but if this can be fixed, I'd like to go back to the older simpler way of using a timer per message.","03 Jul '19 11:51;tvete;Thank you for your report. The order of timer events is undefined, so this is technically a suggestion, even if it is a good one. :)","03 Jul '19 17:06;pderocco;If it's truly ""undefined"", then if I launch a one minute timer, then launch another one 30 seconds later, I wouldn't be entitled to expect that the first one would happen in 30 seconds, and the second in another 30 seconds. The same for one second timers launched half a second apart. As the time scale is reduced, the point at the order becomes ""undefined"" is itself ""undefined"", and unknowable except by trial and error, because nothing tells you what the actual tick rate is, let alone what tick timers actually get assigned to.

Yes, I'm being pedantic. ;)","06 Jul '19 12:41;thiago;It's undefined which order timers that have expired are delivered. They will not be delivered in the order of creation (most likely they're delivered by their timer ID).

But obviously timers that have not expired are not delivered and therefore they will be delivered after those that have expired.","08 Jul '19 09:00;pderocco;[~thiago] ""It's undefined which order timers that have expired are delivered."" 

That's not strictly true. If one timer expired one day ago, and another expired just now, then they've both ""expired"", and your statement would imply that their order of delivery is undefined, meaning the first one might not actually be delivered until now. That's thankfully not true. Replace ""day"" with ""second"" and it's still not true. Replace ""second"" with ""tenth of a second"" and it's still not true. Replace ""tenth of a second"" with ""millisecond"", and it may randomly be either true or false. But there's no way to know at what point it can become true.

Your statement implies that for two timers A and B, A can expire before B, in which case A will be delivered before B, A can expire after B, in which case A will be delivered after B, or A and B can expire at the same time, in which case their delivery order is undefined. But there's really no such thing as ""at the same time"", just ""on the same tick"", which is unknowable. In fact, if I launch A with a 100ms duration, and then launch B with a 105ms duration, if the tick period is 10ms, I might still receive B before A. This is wrong because a later launched timer should never be delivered before an earlier launched timer, unless the later one has a shorter duration, and this proper ordering is _perfectly easy to achieve in practice_, if the code is written correctly. (If a later one has a shorter duration than an earlier one, then it's understandable and acceptable that their delivery order would be unpredictable at the margin.)

I looked through the code, and found where timers are registered. For Windows, it's in C:\Qt\Qt5.13.0\5.13.0\Src\qtbase\src\corelib\kernel\qeventdispatcher_win.cpp. They are added to the back of a list (d->timerVec), irrespective of their durations. I've been unable to find where the actual timeout causes this list to be scanned and the expired timers to be turned into messages added to the event queue, but I believe the event queue must be strictly FIFO or lots of things unrelated to timers would break. So if you or anyone can point me to the code where timer expiration is detected and reported, I could probably figure this out further.","08 Jul '19 13:18;thiago;No, I really meant what I said, though I wasn't clear. I meant timers that have expired since the last time we delivered timer events for this thread. That may have been 500 microseconds ago or two days ago -- the time between deliveries is not controlled by Qt, but controlled by the OS (scheduler, whether the machine went to suspend) and the application (what it did in response to the last set of events delivered).

bq. f I launch A with a 100ms duration, and then launch B with a 105ms duration, if the tick period is 10ms, I might still receive B before A

That's exactly what might happen if the thread slept for 105 ms or more. We don't control the scheduling, so if multiple timers expired, they're all delivered, in arbitrary order.

If the thread slept for 100 ms or more but less than 105, then B should not be delivered if they're both precise timers.

Another aspect to take into consideration are CoarseTimers (not implemented on Windows). In that case, then Qt builds in a 5% error into all timers so they tend to cluster together. Since 100 is within 5% of 105, both timers should always wake up together, forever, even if after 21 wake ups, timer B is 1 wake-up short.","31 Jul '19 07:53;pderocco;( Finally back from vacation.)

{quote}If I launch A with a 100ms duration, and then launch B with a 105ms duration, if the tick period is 10ms, I might still receive B before A.

That's exactly what might happen if the thread slept for 105 ms or more. We don't control the scheduling, so if multiple timers expired, they're all delivered, in arbitrary order.
{quote}
Yes, and that's the problem. If the thread slept for a day, because other stuff in the system hogged the CPU, then all timers within that day would fire in a random order. That's pretty useless.
Is it really the case that every single timer that I launch in Qt results in the OS being asked to schedule a separate message? That's insane. Qt should be maintaining its own schedule of timers, in order of expiration, and whenever the message loop has nothing left to do, it should wait for further input with a time limit equal to the earliest item in the schedule. I think that's how most message loop systems do timers. I've certainly written application code that worked that way, and it's really simple. The OS should have nothing to do with it, other than providing a way to wait for input (ppoll in Linux, WaitForMultipleObjects in Windows) that has a time limit.
Where is this code, among the 250000 files in the source tree? I'd like to see how it works.","01 Aug '19 01:30;thiago;bq. Is it really the case that every single timer that I launch in Qt results in the OS being asked to schedule a separate message?

No. We keep our own list of timers and just tell the OS what the timeout for the soonest wake-up is.

bq. Qt should be maintaining its own schedule of timers, in order of expiration

We do, on Unix. On Windows, they're kept in a hash by timer ID, which means the order is arbitrary and changes randomly from start of the application to start.",,,,,,,,,,,,,
Missing string types overview ,QTBUG-77020,281229,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,kdpalara,silicomancer,silicomancer,12 Jul '19 06:55,29 Jul '19 07:59,18 Feb '21 09:41,,5.13.0,,,,,,,,,,,,,,,,,,,,,,Core: QString and Unicode,Documentation,,,3,,,,"There are several string types in Qt like QString, QByteArray, QLatin1String, QStringLiteral, QStringRef and QStringView (not sure if there are missing some more).

For beginners (but even for advanced developers) it is hard to understand the use cases for these types.

Please add a detailed comparison chapter/table to the Qt documentation that helps selecting the right type. Don't forget to link it to each of the above types' chapters.

Maybe it could be useful to explain tr() in that context.

 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0lkwv:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"12 Jul '19 10:10;Eddy;Note that {{QStringLiteral}} is just a special ""constructor"" for a compile-time {{QString}} (likewise, {{QStringViewLiteral}}, {{QByteArrayLiteral}} for {{QStringView}} and {{QByteArray}}), rather than a separate type.  None the less, it does contribute to the ""which should I use"" problem.","16 Jul '19 05:54;kdpalara;[~Eddy] Hey, if you're interested in helping to clarify this -- I have time to help document it. Let me know.","16 Jul '19 10:50;Eddy;Just to be clear: this isn't an attempt to write the requested addition of the documentation: it's my best shot at describing the types in a way that'll let a competent technical writer do that.  I am also not an expert on these container types.  I imagine [~thiago] and [~mmutz] can give you a better account; and I won't be surprised if they point out errors in what follows.

First we have two containers:
* {{QByteArray}} is a container for raw bytes; although it does apply Latin-1 semantics to them in some cases (a confusing and misguided detail, IMO), its real purpose in life is to contain data, without interpreting it (although its API provides client code with ways to scrutinise it, enabling the client to interpret it).  In particular, {{QByteArray(""text with internal \0 bytes"", 26)}} doesn't stop short at the internal {{\0}} byte, it carries around all 26 bytes up to the final s just before the close-quote; and {{QByteArray(""text with internal \0 bytes"", 27)}} even includes the implicit {{\0}} byte at the end of the string literal.
* {{QString}} is a container for UTF-16 text; it expects its data to be well-formed UTF-16 and (somewhat) understands how to operate on it as a Unicode string (although with limitations, e.g. it treats a surrogate pair as two separate 16-bit tokens, rather than as a single character, so its {{size()}} is the UTF-16-length of the text, not the number of characters in it).

Each of those ""owns"" its data, in the sense that when the {{QByteArray}} or {{QString}} object is destroyed, the data it contains becomes inaccessible; the memory containing the data is released back to the system for re-use by other objects.
(There are some exceptions; support for the literals, below, involves these containers knowing when the data they contain is held in static memory, rather than heap memory, so as to avoid heap-releasing memory that didn't belong to the heap to begin with.  Clients of these classes, however, don't normally need to care about that.)
Both use copy-on-write mechanisms, so that creating copies of these types is cheap, but creating a new one (even if its contents are a portion of the original's) always involves allocating memory to contain its data.

Next we have two views:
* {{QLatin1String}} refers to a piece of memory containing bytes, which it interprets as ISO-Latin-1-encoded text.
* {{QStringView}} likewise refers to a patch of memory, this time interpreted as UTF-16 encoded Unicode text.

A view lets one refer to and interpret the contents of some memory; but it provides no way to modify that memory.  It knows where the data is in memory, by recording its start-point and size, but it doesn't ""own"" that memory; something else must take responsibility for storing the data in that memory and ensuring the referenced memory continues to hold the data for the lifetime of the view object.  For example, a {{QLatin1String}} can provide access to the data of a {{QByteArray}}; but it can equally provide access to a {{C}}-string literal, such as one types in source code like {{QLatin1String(""C-string literal"")}}, or any other sequence of bytes in memory.  Likewise, {{QStringView}} can provide access to a {{QString}} or a C++11 UTF-16 Unicode literal like {{QStringView(u""UTF-16 literal"")}}.

This ability to wrap data held by other objects makes views useful in APIs that only need read access to some data, e.g. to parse it or use it as a key in a look-up; instead of needing one overload of the API for each possible owner of the data, the API accepts a view; to enable all APIs taking the view to accept (in effect) a new ""owner"" type of the data, it suffices to add to the API the ability to wrap this new ""owner"" type.
On the other hand, if an API accepts a view and needs to save a copy of it, it has to allocate memory in which a container object can store the copy; where passing in a copy-on-write container would let the copy re-use the memory from the original; in such APIs, while a view-overload is typically worth including, an overload accepting the type used as internal container is more efficient.

The {{QStringRef}} type provides a reference to some portion of a {{QString}}; it is, in some ways, like a view (it depends on the {{QString}} to ""own"" the data and keep it available for the lifetime of the {{QStringRef}}, for example), but is less flexible - it must reference a {{QString}}, it can't reference any other owner of UTF-16 data.  The flip-side of that is that it remembers the {{QString}} it refers to, which can be useful in some cases (for example, when it refers to the whole of the {{QString}}, its {{toString()}} can return a copy of that {{QString}}, whose copy-on-write sharing of the underlying string data saves the need to allocate memory in which to store a new copy of that data).  Like a view, a {{QStringRef}} can only be used to read and interpret the data it refers to; it cannot be used to modify the underlying {{QString}}.

Although a view or {{QStringRef}} can't be used to modify the data it describes, it can be modified, typically by making it refer to a sub-range of the data it previously referred to.  It is a modifiable data-type that provides access to constant data owned by something else.

Finally, we have the literals.  Each of these is a compile-time way to write a simple string (just as one would write a {{C}}-string, although the string literal macros wrap the text that looks like a {{C}}-string in a way that actually makes it a C++-11 Unicode string) to serve as a constant expression in code.  We have {{QStringLiteral}}, {{QStringViewLiteral}} and {{QByteArrayLiteral}} to construct compile-time values of {{QString}}, {{QStringView}} and {{QByteArray}}, respectively.  The compiler sets up the string or byte data of the constant, along with the rest of the data structure that wraps it, so that the {{QString}}, {{QStringView}} or {{QByteArray}} object simply exists already at run-time, without having to be created while the program runs.  This simplifies writing the code and saves some time when the program runs.  If a literal is used repeatedly, compilers and linkers may even optimise out the duplication, storing just one copy of the literal data and making each of the container objects refer to that one copy, instead of duplicating the data in the binary produced by the linker.

Note that {{QLatin1String}} is sufficiently simple that it doesn't need a separate {{QLatin1StringLiteral}}; a simple {{QLatin1String(""text"")}} wraps a plain {{C}}-literal (the {{""text""}}) with a simple structure that points to its start and knows how long it is.  Consequently, when {{QLatin1String}} is used with a {{C}}-literal parameter, it has all the virtues of the literals above.

When code calls for a fixed string, there's more than one way to do it.  Some old code uses {{QString::fromLatin1(""text"")}}; this is seldom better than the other options, though, as it necessarily allocates memory at run-time in which to store an expanded copy of its literal (here, {{""text""}}) and converts the single-byte data to populate that memory with a copy of the literal, taking up two bytes per character instead of only one.  It is usually better to use one of:
* {{QLatin1String(""text"")}} when the APIs with which it is to be used can handle a {{QLatin1String}} without needing to convert it to a {{QString}} (e.g. {{QString}}'s various comparison functions can compare a {{QString}}, or portion thereof, to a {{QLatin1String}} without conversion); this just stores the literal at compile-time, using one byte per character (as in {{C}}), avoiding allocation and conversion.
* {{QStringLiteral(""text"")}} when the string is to be used with an API that must have a {{QString}}.  This uses twice as much memory to store the literal, and converts it to UTF-16, but at least it does the conversion at compile-time, the memory it uses is allocated at link-time as read-only data and it doesn't use any read-only data to store an un-expanded version of the string.
","16 Jul '19 11:15;kdpalara;This is cool. Thank you. I was told to hunt in the Qt Dev Mailing list for some more of this info, but your input looks interesting so far.

I'll set up a patch in the next few days and perhaps Thiago can look at it when he has some time. I'll add you to it as well Ed, and let's see how it goes. ","16 Jul '19 11:28;mitch_curtis;It would be great to have either a Dos and Donts sections or some kind of detailed case-by-case code examples for when to use certain types. Overviews are nice but they tend to be a bit... abstract and wall-of-texty, so more concrete examples would be awesome.","16 Jul '19 11:35;kdpalara;[~mitch_curtis] Who can provide these examples? ","16 Jul '19 11:51;mitch_curtis;Unless someone from the core team steps up, asking on the dev mailing list would be your best bet... that or you could write some examples that are deliberately wrong and wait for people to line up to correct you with the proper code. :D

Another alternative would be a flowchart - [I love those|https://doc.qt.io/archives/qt-5.11/qtqml-cppintegration-overview.html#choosing-the-correct-integration-method-between-c-and-qml]! :D As an example:

{noformat}
                                  [ Do you repeat the string in the file? ]
                                      /                                  \
                                     NO                                  YES
                                    /                                      \
                       [ Is the string used in a plugin? ]           [ Does the string contain Unicode characters? ]
                       /                     \                        /                              \
                      NO                     YES                     NO                              YES
                     /                         \                    /                                  \
              [ QStringLiteral ]         [ QLatin1String ]     [ QLatin1String ]                  [ QString::fromUtf8 ]
{noformat}","16 Jul '19 12:01;alexandru.croitor;If we ever get some kind of do's and dont's section, I think mentioning examples on how to use (or not to use) c++ references (&) with these types would also be helpful.","16 Jul '19 12:06;kdpalara;I'll write it...but you'll have to give these examples [~alexandru.croitor] ;)","16 Jul '19 13:13;thiago;I can also send you my ""String Theory"" presentation from a Dev Days past that went over this.

As for {{QLatin1StringLiteral}}: the objective is that we won't need {{QStringLiteral}} in Qt 6 in the first place. {{QStringLiteral(""text"")}} becomes simply {{u""text""}}, though until C++2a we may want to keep the macro because of the constexpr-vs-performance problem of obtaining string lengths ({{std::char_traits<char16_t>::length}} vs {{qustrlen}}).","17 Jul '19 09:40;kdpalara;[~thiago] Yes, please. I'll put a draft together and see where we get.","17 Jul '19 09:49;alexandru.croitor;[~kdpalara] I'm asking because I don't know myself : )","26 Jul '19 18:38;mmutz;It's simple: pass 'small' trivially-copyable types by value (passes in registers, except on archaic ABIs such as Windows), pass other types by const-&. Pass by value  if the function is a perfect sink for the argument (unconditionally moves from), and you expect much more rvalue arguments that lvalue ones.

[~Eddy]'s summary is to the point, with one exception: we needed QStringViewLiteral when we couldn't rely on char16_t (which was - suprise - on Windows, where, however, wchar_t filled that rule). Now that we depend on char16_t, QStringViewLiteral(""Foo"") is best spelled u""Foo"". We should probably deprecate it.

There are plans for QUtf8StringView, but to implement it as well as QStringView, we need char8_t (C\+\+20). By C\+\+20, we could have: QByteArray - std::byte, QLatin1String - char :( there's no way there's ever going to be a charl1_t in the language, QUtf8StringView - char8_t, and most of the uses of constant strings can be just u8""Foo"", u""Foo"".
 ",,,,,,,,,
Export Wayland xdg_toplevel app ID to allow changing the icon of a Window,QTBUG-77182,281702,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,johanhelsing,jmux,jmux,25 Jul '19 11:12,25 Jul '19 12:20,18 Feb '21 09:41,,5.13.0,,,,,,,,,,,,,,,,,,,,,,GUI: Window management,QPA: Wayland,,,1,,,,"Since wayland-protocols 1.18, the set_app_id call got an amendment, which explicitly states that an app ID can be changed at runtime (nothing was stating the opposite before). And since it's a per xdg_toplevel property, I want to use it to change the application icon of my windows, based on the loaded document. I'll just quote my commit message from the wayland-protocols change:

LibreOffice is one big binary with explicit brandings for different
application modules. This is represented in X11 by a different
WM_CLASS setting for a window. The WM_CLASS is changed based on the
loaded document at runtime. As a result LibreOffice already offers
multiple desktop files with different icons, StartupWMClass
entries and application names.

This amendment of the set_app_id request just explicitly specifies
the use case to change a surfaces' app ID at runtime, so a compositor
implementor is made aware of it. Just as the WM_CLASS, a change of
the app ID should result in an update of the propertes of a surface
depending on the app ID, like the window icon specified in the
desktop file or a re-grouping of the surfaces in a task manager.

The original LibreOffice bug report is here: [https://bugs.documentfoundation.org/show_bug.cgi?id=125934]

So now I would like to get the app_id exposed via a QWindow API, so I can set the icon for my toplevel window. I did a little brain storming in comment #3 of the LO bug report:

""So thinking about this a bit more, maybe there should be an overload for QWindow::setIcon, which accepts the desktop file as a QString. IMHO it shouldn't accept a file name on other platforms as a convenience to load an icon. Or just allow a desktop file per QWindow? QIcon::fromTheme shouldn't work, as the icon is specified in the desktop file, not the theme. Maybe a QIcon::fromDesktopFile?""

Or maybe it should just be a an API exposed for a Wayland client like QtWayland  already does for the compositor side?

I can hack something up, but IMHO the code itself will probably be trivial, after we could agree on the interface to implement, as it already works for the QGuiApplication::desktopFileName API. There is also some hacky LO patch, which uses KWayland to call set_app_id, but it creates a 2nd XdgSurface, which is wrong, but correctly sets the windows icon.",KDE / kwin running with the Wayland backend.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Linux/Wayland,,,,,,"0|i0lnmn:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Considering using DataWriter on the StreamSocket OutputStream instead of the stream directly,QTBUG-76233,279609,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,owolff,andysh,andysh,06 Jun '19 07:21,23 Jul '19 14:13,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Connectivity: Bluetooth,,,,3,Reported_by_support_standard,,,"Considering using DataWriter on the StreamSocket OutputStream instead of the stream directly for QBluetoothSocket as OutputStream will indicate that it has written the data right away although this is not necessarily the case. By using DataWriter it is possible to follow the progress of the writing so we can emit bytesWritten() when they are actually written.

For reference:
https://github.com/microsoft/Windows-universal-samples/blob/master/Samples/BluetoothRfcommChat/cs/Scenario1_ChatClient.xaml.cs#L315 - shows the StreamSocket using a DataWriter",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Windows,,,,,,"0|i0lba7:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"16 Jul '19 10:44;owolff;Microsoft advises against usage of FlushAsync in their help page ([https://docs.microsoft.com/en-us/uwp/api/windows.storage.streams.datawriter.flushasync#Windows_Storage_Streams_DataWriter_FlushAsync).] As far as I can see, this is the only place that would give insight into the process of the operation or am I missing something?","16 Jul '19 11:33;andysh;I might be wrong but could you use StoreAsync and then set it to call the Completed handler when done? I have no idea if this is the way to go but it looked viable - https://docs.microsoft.com/en-us/uwp/api/windows.storage.streams.datawriterstoreoperation.completed#Windows_Storage_Streams_DataWriterStoreOperation_Completed","23 Jul '19 14:13;owolff;Does https://codereview.qt-project.org/c/qt/qtconnectivity/+/268425 fix the issue?",,,,,,,,,,,,,,,,,,,
Make QCommandLineParser output optionally machine readable (ie --helpjson) to support auto-completion of process *arguments* in system shells,QTBUG-74594,275894,Suggestion,Open,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,dfaure_kdab,d3fault,d3fault,20 Mar '19 22:58,09 Jul '19 06:57,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Core: Other,,,,0,,,,"If QCommandLineParser's help data was output in a machine readable format (json, etc), then shell auto-completion of process *arguments* could be configured in an automated fashion (at least for Qt apps that use QCommandLineParser). Ideally the output json format would be generic so that Gtk/etc could share the same format.

One could modify QCommandLineParser itself to add this functionality, or create a new class that takes a populated QCommandLineParser in it's constructor (QCommandLineParser might need to declare this new class a ""friend"", however it's essentially just iterating over the public QCommandLineParser::optionNames and QCommandLineParser::positionalArguments). The latter is probably the cleaner approach.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0kq1r:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"21 Mar '19 05:58;thiago;David, do you think this can be easily implemented?","21 Mar '19 15:00;dfaure_kdab;Yes, this sounds easy to implement – except the part about negotiating a common format with other implementations :).

If it can be done ""externally"", then one could start implementing this outside QtCore first.","24 Mar '19 11:51;d3fault;I agree negotiating would be difficult, and probably isn't worth doing ;-). I just meant that care should be taken to keep the format generic enough that other toolkits/frameworks/libs can use it.

??If it can be done ""externally"", then one could start implementing this outside QtCore first.??

The idea is that programmers don't have to add/change any lines of code to get this new functionality: using QCommandLineParsers is all it takes.

Since a spec might need to be born out of this, it's worth thinking ahead about whether or not QCommandLineParser will ever add ""enum values"" for QCommandLineOption. For example: --mode foo, --mode bar, etc... where only foo and bar are accepted after --mode, not any string. This implies that QCommandLineParser would do input validation/sanitization, and yea I am definitely getting ahead of myself here... but the reason I'm mentioning it here/now is: the auto-completion in system-shell that this bug report proposes... could also work for those hypothetical ""enum values"". Auto-completion of ""foo"" and ""bar"" after the --mode option would be useful. It might be a good idea to include the ""enum value"" stuff in the ""json spec"" even with QCommandLineParser not [yet?] supporting them, just so that the json spec never has to change/break in the future.","25 Mar '19 21:31;thiago;If this is meant to be parsed by shell functions, then *JSON* is not the ideal format. A simpler space-separated list might be easier.","26 Mar '19 01:05;d3fault;At first when I read your suggestion about using a space-separated format I was on board, until I thought more about those hypothetical ""enum values"". If using a space-separated format, we should probably disallow spaces in ""enum values"". ex: --mode ""hi mom"" should probably be disallowed (and enforced in QCommandLineOption code+doc). Granted, I've never seen an ""enum value"" with a space in it like that, but on the shell side of things as long as it's surrounded by quotes it's treated as a single argument. Using a space separated format and allowing ""enum values"" with spaces would mean we'd need to introduce an escape character, which is a big red flag to me and we're better off sticking with JSON.

A whitespace-delimited format might be simpler in the less-dependencies sense, but more complicated in the ""oh great now I have to write a parser"" sense. Every shell vendor has to write their own parser, and even simple-yet-custom formats are error prone. Also in this day and age any self respecting programming environment can parse JSON with ease.

??If this is meant to be parsed by shell functions??

What do you mean shell functions? Ideally the auto-complete cache would be populated during application installation (like man pages), but it could also be called on demand (app --helpjson) whenever TAB is pressed (and hopefully still cached). I'd think most shells would be written in C/C++/etc and not Bash/etc, so having access to a JSON parser wouldn't be a problem.","26 Mar '19 02:11;thiago;What cache? I was thinking that the completion mechanism would run {{command --complete}} and parse the output on-demand.

On that note, GCC 9 has a {{--complete}} option.","26 Mar '19 03:00;d3fault;A cache definitely isn't necessary, I just thought it might be a good optimization rather than executing a large binary blob every time tab is pressed. Oh well optimizations aren't even worth talking about at this point (and it's the responsibility of the shell vendors anyways).

Since gcc ( --complete ) and clang ( --autocomplete ) have this functionality already, we should just use whatever format they use... assuming their formats are generic and identical to one another (and not specific to any particular shell).","26 Mar '19 03:26;d3fault;Upon further [investigation|https://github.com/fish-shell/fish-shell/issues/4174], it appears clang takes a different approach than what I've described. Clang assumes the responsibility of completing your prefix for you: ex: `clang --autocomplete=-std` will output: "" -std-default= -std: -std= -stdlib=""... but I was thinking of just dumping every possible option/value to stdout and letting the shell vendors setup/do the completion using that data. Admittedly I don't know how auto-completion is going on behind the scenes in any shells... maybe the way clang does it is more optimal.

Also if we used the word --complete instead of --helpjson then we're more likely to conflict with user options of the same name. An already existing app with with args --partial and --complete isn't too far fetched.","26 Mar '19 04:57;thiago;I guess we should first figure out how completion works behind the scenes. But I'm pretty sure JSON *isn't* it. It's very hard to process it in shell. There may be other uses for that, but not for shell.

As for what the option is, we could give it a ""qt"" prefixed one or an environment variable that would cause QCommandLineParser to simply print that and stop.","26 Mar '19 07:10;d3fault;+1 for a space delimited format, we just have to disallow spaces in ""enum values"" in QCommandLineOption.

Skimmed a [bash completion tutorial|https://iridakos.com/tutorials/2018/03/01/bash-programmable-completion-tutorial.html] and it doesn't look like bash's completion supports spaces in completed words. I could be wrong but don't care enough to keep digging. It's not a big deal disallowing spaces in ""enum values"" in QCommandLineOption... and disallowing spaces would probably lead to the most compatibility with all shells.","26 Mar '19 07:23;d3fault;From QTBUG-74692:
??Sounds interesting. Spaces should be allowed regardless of the outcome of that discussion.??

Ok I investigated further and bash completion does support spaces in the option names. It uses the typical escape character: \.

To test yourself (don't worry it's temporary and goes away when you exit bash):
$ complete -W ""hi\ mom foo bar"" ls
$ ls h<tab>

However it's worth pointing out that bash completion isn't putting double quotes around ""hi mom"" like it should! Probably a bug because nobody really uses spaces in option ""enum values"".","27 Mar '19 06:23;d3fault;Ok here's how to makes spaces work nicely in bash completion:

$ complete -o filenames -W ""hi\ mom foo bar"" ls
$ ls h<tab>
gives:
$ ls hi\ mom

$ ls ""h<tab>
gives:
$ ls ""hi mom""

so that will makes the process treat it as 1 arg instead of 2","08 Jul '19 22:02;d3fault;Thinking about it more, I still think the output format should be JSON. Reason: we should export the human readable arg *description* in a machine readable format as well. It's not unfeasible that an auto-completing terminal could use the human readable arg description alongside the ""argument flag""/name actual... even if no terminals do this today. There's some old quote that comes to mind but I can't find the source of it: ""always pass along all information unless the receiver explicitly requests you do not"".

I don't think anyone would have to parse the JSON in a bash script. The developer of bash would write (in c++) a trivial utility to parse the JSON and convert it to the space-delimited format that bash uses (and in this case, he would disregard the human readable arg description). Additionally, I see no reason for the output format to cater to bash specifically: why not PlatformX's TerminalY, which maybe uses an XML format to store it's auto-completion data?",,,,,,,,,
QtHttpServer is missing the possibility to handle multipart bodies,QTBUG-76906,280931,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,mikhailsvetkin,lmussier,lmussier,04 Jul '19 12:22,06 Jul '19 13:19,18 Feb '21 09:41,,5.12.0,,,,,,,,,,,,,,,,,,,,,,Network,,,,0,,,,"Most of the time multi-part is used because to handle big data upload/download.

Since multi-part requests are handled completly handled internally by QHttpServerRequest, there is no way to stream data directly to ""something"" (i.e a file).

I don't look at QHttpServerResponse but the same feature should be added as well, with the same goal, be able to handle hudge data chunks.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0lj4v:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Provide information about rendering progress in QWebEnginePage,QTBUG-76183,279503,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,qt_webengine_team,krzysztof_sakowski,krzysztof_sakowski,04 Jun '19 10:04,05 Jun '19 09:57,18 Feb '21 09:41,,5.12.1,,,,,,,,,,,,,,,,,,,,,,WebEngine,,,,0,,,,"*Scenario 1:*
1. Run the snippet below (the image will be downloaded and saved in cache)
2. Run the snippet again

*Actual result:*
See attached image scenario_1.png (only red background is rendered).

*Expected result:*
The image is fully rendered. 

*Scenario 2:*
1. Uncomment the line that disables cache
2. Run the snippet

*Actual result:*
See attached image scenario_2.png (bottom part of the image is not rendered).

*Expected result:*
The image is fully rendered. 

Adding delay using timer helps but it not suitable fix for production use.

{code:c++}
#include <QApplication>
#include <QWebEngineProfile>
#include <QWebEngineView>

auto html =  ""<!DOCTYPE html>""
""<html lang=\""en\"">""
""<head>""
""  <meta charset=\""UTF-8\"">""
""  <style>""
""  img { max-width:100%; max-height:100%; }""
""  div { height: 270px; width: 540px; }""
""  body { margin: 0; background-color: red; }""
""  </style>""
""</head>""
""<body>""
""<div>""
""  <img src=\""https://eoimages.gsfc.nasa.gov/images/imagerecords/73000/73751/world.topo.bathy.200407.3x5400x2700.png\"">""
""</div>""
""</body>""
""</html>""
;

int main(int argc, char *argv[])
{
    QApplication app(argc, argv);

//    QWebEngineProfile::defaultProfile()->setHttpCacheType(QWebEngineProfile::NoCache);

    QWebEngineView view;
    view.show();
    view.resize(540, 270);

    QObject::connect(&view, &QWebEngineView::loadFinished, [&view](bool isOk) {
        if (!isOk)
            return;
        view.grab().save(""qt_page.png"", ""PNG"");
    });

    view.setHtml(html);
    return app.exec();
}
{code}
",,,,,,,,,,,,,,,,,,,"04 Jun '19 09:55;krzysztof_sakowski;scenario_1.png;https://bugreports.qt.io/secure/attachment/84421/scenario_1.png","04 Jun '19 09:55;krzysztof_sakowski;scenario_2.png;https://bugreports.qt.io/secure/attachment/84420/scenario_2.png",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0lanz:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"05 Jun '19 09:57;mibrunin;As the [documentation of loadFinished|https://doc.qt.io/qt-5/qwebenginepage.html#loadFinished] states, the signal only provides information about the load status, not rendering or script execution.

It may be possible to provide some information about the rendering progress, but it can be relatively unreliable considering that layouts etc. change dynamically. It might be possible to get some more information using JS.

Making this a suggestion.",,,,,,,,,,,,,,,,,,,,,
Print to QImage/QPaintDevice,QTBUG-76099,279280,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,qt_webengine_team,allan.jensen,allan.jensen,29 May '19 08:32,29 May '19 08:40,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,WebEngine,,,,1,,,,"We could add another print call that prints to a QImage or a QPaintDevice instead of to a QPrinter. This could help solve some of the issue behind QTBUG-46129 and QTBUG-44986, and shouldn't be that different from our handling of QPrinter.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,QTBUG-63232,9223372036854775807,,,,,,,,,"0|i0l9bb:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"29 May '19 08:37;emdek;Such call should of course contain optional parameter to specify {{QRegion}}, and {{QWebFrame::RenderLayers}} equivalent or at last some way to control visibility of the scrollbars, if possible.",,,,,,,,,,,,,,,,,,,,,
QtWayland.Compositor: xwayland support,QTBUG-75590,278023,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,johanhelsing,damianatorrpm,damianatorrpm,04 May '19 11:47,29 May '19 06:59,18 Feb '21 09:41,,5.12.3,5.13.0 Beta3,,,,,,,,,,,,,,,,,,,,,QPA: Wayland,,,,0,,,,"I am very impressed on the amazing QML wayland compositor functionality! 

What component to choose to report bugs against? =>
{code:java}
import QtWayland.Compositor 1.0{code}
 

I find that the only thing missing for this to be useful on Desktop Linux (like grefsen) is xwayland support.

Qt and GTK application work fine with ShellSurfaceItem and XDGshell/6/Wlshell protocol.

Do you believe this is something that would be possible to have in Qt?",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Linux/Wayland,Linux/X11,,,,,"0|i0l25j:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"06 May '19 09:23;johanhelsing;[~damianatorrpm], this should be possible, yes. If I remember correctly, [~plfiorini] added XWayland support to the liri-shell compositor, which is based on Qt Wayland (or is it using it unmodified?), maybe Pier has some comments?","07 May '19 08:45;plfiorini;Liri Shell uses Qt Wayland Compositor unmodified ever since its formal release with Qt 5.8.
I have made a XWayland implementation that you can use from a QML compositor: [https://github.com/lirios/qml-xwayland]
Feel free to use it. It would be cool if more people get onboard and help me with the development.","07 May '19 09:25;esabraha;[~plfiorini] Thanks! Would this be something that can eventually be contributed to Qt?","07 May '19 09:58;plfiorini;There's some GPL2+ code from kwin that should be rewritten (it's not so much) and other stuff inspired by weston (which is MIT).","07 May '19 10:18;damianatorrpm;[~plfiorini] Thanks. I had a look at qml-xwayland and it provides the possibilty to add xwayland windows to Qt Wayland Compositor. I find a bit strange that for the XWayland windows one has to use XWaylandQuickShellSurfaceItem instead of standard WaylandQuickShellSurfaceItem. The pure-qml example has a Repeater of WaylandQuickShellSurfaceItem's.

Maybe regarding the MIT and GPL2+ code the kwin maintainer can be asked to re-license the code in question, instead of rewriting it?

I have limited knowledge about X but I could try to make xwayland use WaylandQuickShellSurfaceItem?","07 May '19 10:25;plfiorini;Because unlike QWaylandQuickShellSurfaceItem, I don't want to use QWaylandShellSurface there since this is not really a compositor extension.","29 May '19 06:14;damianatorrpm; 


{code:java}
Pier Luigi Fiorini added a comment - 07 May '19 9:58 AM
There's some GPL2+ code from kwin that should be rewritten (it's not so much) and other stuff inspired by weston (which is MIT).
{code}
 
Including kwin's [~mgraesslin] maybe he would agree to re-licence the code used in qmlxwayland to LGPL","29 May '19 06:59;plfiorini;It's not that much code though, it's basically just calls to xcb in a Window class.",,,,,,,,,,,,,,
Consider renaming setUrlRequestInterceptor() to installRequestInterceptor() to avoid confusion,QTBUG-75135,277036,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,qt_webengine_team,emdek,emdek,12 Apr '19 10:22,14 May '19 15:45,18 Feb '21 09:41,,5.13.0 Beta 1,,,,,,,,,,,,,,,,,,,,,,WebEngine,,,,0,,,,"Old and new name are very similar which makes it easy to confuse and not notice warnings in some circumstances, moreover, even noticing them can confuse users at first glance.
Also note that Qt Creator (4.6.2) suggests both methods and (obviously) deprecated version is listed first.
Obviously {{QWebEnginePage::setUrlRequestInterceptor()}} would have to be renamed too, for consistency.

There already exists {{QWebEngineProfile::installUrlSchemeHandler()}} so it could be considered to use similar naming for the interceptor, like {{installRequestInterceptor()}} or similar.

Also it could be a good idea to make it clear which type of handler / presenter / interceptor / whatever should use {{install}} and which {{set}}.","Kubuntu 18.10, 64 bit",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0kwtb:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
QWebEngineNotification::icon should be renamed to image after changing type from QIcon to QImage,QTBUG-75132,277033,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,qt_webengine_team,emdek,emdek,12 Apr '19 10:02,14 May '19 15:45,18 Feb '21 09:41,,5.13.0 RC 1,,,,,,,,,,,,,,,,,,,,,,WebEngine,,,,0,,,,"In (probably) all Qt APIs getter named {{icon()}} is used with {{QIcon}} type, while {{image()}} with {{QImage}} type, while recent API change introduces {{icon()}} with {{QImage}} type, which is inconsistent.

And yeah, it's called that way in web API itself, but this is just a wrapper and should follow naming conventions used in Qt.

https://codereview.qt-project.org/#/c/256497/5/src/core/api/qwebenginenotification.h","Kubuntu 18.10, 64 bit.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0kwsn:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"12 Apr '19 13:01;emdek;As noted by *kiburtse* on IRC, there is also {{badge}} property that could be exposed later (although this one might be harder to use with existing notification systems), so it makes more sense to name it this way.
Moreover, it makes sense to expose it as {{QImage}} since it's preferred format for notification servers under Linux (fd.o spec for DBus based notifications) and macOS, even if the first choice of the user (until proper notifications add on module will arrive) might be {{QSystemTrayIcon}} which accepts only {{QIcon}}.

I wonder if it would be feasible to teach {{QIcon}} to play nice with {{QImage}} (globally, for all users of {{QtGui}}), so it could be used to (optionally) pass {{QImage}}, to avoid breaking compatibility or inventing separate set of getters, setters and signals.

Yet it still remains kind of inconsistency.",,,,,,,,,,,,,,,,,,,,,
Be able to get the QWebEnginePage that has made a custom request in QWebEngineUrlRequestJob,QTBUG-75608,278044,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,qt_webengine_team,andysh,andysh,06 May '19 07:11,09 May '19 15:55,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,WebEngine,,,,0,Reported_by_support_standard,,,Be able to get the QWebEnginePage that has made a custom request in QWebEngineUrlRequestJob. This would allow for nuanced handling as the information about the page can be used to do the modification needed to the job.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0l2a7:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"06 May '19 11:55;allan.jensen;I am afraid we don't get that data. Note in 5.13, there is a work-around possible, in that you can set a url request interceptor on a page, and use that to add extra headers to the request.",,,,,,,,,,,,,,,,,,,,,
Doc: Define lifetime of documentation,QTBUG-74786,276271,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,docteam,paulwicking,paulwicking,28 Mar '19 13:02,29 Apr '19 11:21,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Documentation,,,,0,DocWorkshop03.19,,,e.g. QSoftwareRenderer,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0ksc7:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Doc: Establish ""gold standard"" example documentation",QTBUG-74791,276276,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,docteam,paulwicking,paulwicking,28 Mar '19 13:05,29 Apr '19 11:02,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Documentation,,,,0,DocWorkshop03.19,,,"- Examples that build on top of each other, without repeating already covered topics.
- Enables more complex example projects, dividing them into smaller parts/chapters.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0ksdb:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Doc: Inline editor of online docs,QTBUG-74808,276293,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,docteam,paulwicking,paulwicking,28 Mar '19 13:16,21 Apr '19 01:43,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Documentation,,,,1,DocWorkshop03.19,,,"Implement inline editing of documentation on doc.qt.io in the browser, tied to editors Qt Account for permissions/access/CLA etc.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0ksh3:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"01 Apr '19 11:05;treinio;Convert to Epic?","11 Apr '19 13:33;paulwicking;Possible tool? [https://codemirror.net/index.html]","21 Apr '19 01:43;dourouc05_;Maybe something like https://www.oxygenxml.com/xml_web_author.html could also be looked into? ",,,,,,,,,,,,,,,,,,,
Doc: Increase use of pictures/graphics in docs,QTBUG-74795,276280,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,docteam,paulwicking,paulwicking,28 Mar '19 13:08,17 Apr '19 23:57,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Documentation,,,,0,DocWorkshop03.19,,,"Must ensure uniform representation of graphics (templates).

Investigate possibility of generating class inheritance diagrams?",,,,,,,,,,,,,,,QTCREATORBUG-16076,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0kse7:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"15 Apr '19 08:35;gbk;Many years ago, we generated a page that had a tree listing of the class inheritance.","15 Apr '19 08:42;leenam;Qt Creator Manual currently has 350+ screenshots, so guidelines are needed to ensure uniform representation and avoid repetitive work when taking them.","17 Apr '19 23:57;dourouc05_;From a translator point of view: would it be possible to have the sources along the images, so that translation can be performed easily? (Obviously not for screenshots, but rather for diagrams drawn by hand.)",,,,,,,,,,,,,,,,,,,
Allow bindValue with QSqlTableModel::setFilter,QTBUG-75190,277158,Suggestion,Open,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,mabrand,asbuch,asbuch,15 Apr '19 15:54,16 Apr '19 05:50,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,SQL Support,,,,0,,,,"Would it be possible to support bindValue() with the setFilter() method of QSqlTableModel?

At present the QSqlTableModel::setFilter() method is useless for many applications because there is no way to guard against SQL injections in the filter string. Of course, one could try to do the required SQL value escaping by hand, but the correct way to do this might depend on the database server that is used, and in any case Qt already has the capability to escape SQL values. Or one could use QSqlQueryModel, but this model is read-only. My attempts to call ""model.query().bindValue(key,value)"" for QSqlTableModels have not been successful.

Now that I am at it, it would also be very useful to have a method like QSqlTableModel::setLimit(int maxResults) that limits the number of records that can be downloaded by select(). This would make QSqlTableModel much easier to use with large tables.

I have seen other people ask about these features on discussion forums, for example this one from 2010: 
https://www.qtcentre.org/threads/36890-Using-bindValue-with-QSqlTableModel-setFilter()

Thanks in advance!

Anders Buch

 ","I am using Python with PyQt5.QtSql, but I believe this issue is just as relevant with C++ Qt5.  The issue is OS-independent.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0kxhb:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
No way to retrieve the full namespace resolution list,QTBUG-74906,276521,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,thiago,bsipos-rkf,bsipos-rkf,02 Apr '19 18:40,03 Apr '19 14:07,18 Feb '21 09:41,,5.11.3,,,,,,,,,,,,,,,,,,,,,,XML: Stream Reader/Writer,,,,0,,,,"Some XML processing (e.g. reading an XML schema document) relies on qualified names within attribute or element text. In order to resolve the qualified-name to namespace-and-name it is necessary to use the namespace declarations which apply to the scope of the element being processed.

Currently there is no way to get the full stack of namespace declarations from the QXmlStreamReader. Though the reader itself keeps track of this for its own qualified-name processing logic, it is not exposed through a public API.

Only the namespace declarations created on the current start element are observable by the current API, not the full set of namespace declarations which are in-scope for that element (or the current token more generally).",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0ktuv:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add license option in new configure system,QTBUG-71231,268564,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,qtbuildsystem,liaqi,liaqi,18 Oct '18 08:27,26 Mar '19 13:40,18 Feb '21 09:41,,5.12,,,,,,,,,,,,,,,,,,,,,,Build System,,,,0,,,,"Qt supports different licenses, and different modules/plugins have different options.

Should have a main switch for this purpose. For example, if LGPL v3 was chosen, which parts were enabled or disabled based on that.",,,,,,,,,,,,,,,QTPM-633,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0jl6n:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"18 Oct '18 08:57;buddenha;see also my comments on QTPM-633.","19 Oct '18 12:51;johanhelsing;[~liaqi], please set a priority for this.","22 Oct '18 15:23;buddenha;haha, nope. that's a feature request, not a bug, and as such cannot be P1. whether we consider it important is for PM to decide, but judging by the (lack of) response to my previous proposals, it seems like ""ehh, whatever"" (i.e., it's the customers' problem to ensure license compliance).","22 Oct '18 17:50;liaqi;I see ""QTPM-633"" is P1, so...","03 Jan '19 15:11;kkohne;Very similar to QTBUG-46704","26 Feb '19 13:53;kkohne;Gearbox discussion: Excluding modules based on license options is possible, but where to draw the line? After all we compile in a lot of Third-Party code which a slew of different licenses ...

What might work is single arguments, like , ""-no-gpl3"", that excludes any gpl3 only modules when configured with -opensource.","26 Mar '19 13:40;tpyssysa;Gearbox: 4GearboxHandling flag removed. This would be nice, but there has not been much customer need for this. We will concentrate on informing users, when the sources contain open-source licenses and not consider implementing this. Another reason is that when we move to CMake, the existing configure tool will become obsolete.  ",,,,,,,,,,,,,,,
"Be able to specify the extra properties, for example page range, when calling printToPdf()",QTBUG-73497,273292,Suggestion,Open,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,davidsz,andysh,andysh,04 Feb '19 17:21,20 Mar '19 12:12,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,WebEngine,,,,3,Reported_by_support_standard,,,"Be able to specify the extra properties, for example page range, when calling printToPdf(), as this will allow it to render a PDF that is not passed via QPrinter but still be able to choose the other options that a user might want.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0kckf:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Provide API function for one-shot signal-slot connection,QTBUG-74547,275818,Suggestion,Open,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,thiago,eudoxos,eudoxos,19 Mar '19 10:49,19 Mar '19 15:24,18 Feb '21 09:41,,5.12.2,,,,,,,,,,,,,,,,,,,,,,Core: Event loop,,,,0,,,,"Occasionally, a legitimate need for creating one-shot connection arises – a QObject::connect which will be disconnected after the first dispatch. There are several posts about how this should be implemented by users. Due to various corner-cases (such as some kind of helper object being stale if a connection is deleted due to one of the endpoints being deleted), those solutions are either overly complicated or incomplete.

This is a question a recent (my own) question at SO [https://stackoverflow.com/questions/55000571/qt5-one-shot-connection-to-lambda/55198427#55198427] asking for contemporary (c++11, supporting lambdas and such) solution.

Supporting this functionality in Qt API itself (e.g. by adding a Qt::OneshotConnection bit to Qt::ConnectionType) would make respective tasks less verbose, more future-proof and higher-quality.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0kplb:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
When a QSqlRecord is generated either with a tablename or from a QSqlQuery then it should have any default values set as a value already,QTBUG-74370,275307,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,andysh,andysh,andysh,13 Mar '19 07:05,13 Mar '19 07:06,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,SQL Support,,,,0,Reported_by_support_standard,,,When a QSqlRecord is generated either with a tablename or from a QSqlQuery then it should have any default values set as a value already unless it is for a row that exists in which case it would take the already available value. This means that if it is used for an insert query it will have a valid value set to avoid null being set by accident due to the fact it is a generated field.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0knjj:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Print to printer for WebEngineView,QTBUG-73989,274269,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,qt.team.quick.subscriptions,poikelin,poikelin,21 Feb '19 18:45,06 Mar '19 10:22,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Quick: Dialogs,WebEngine,,,0,Reported_by_support_standard,,,Currently QML API is missing printing to actual printer even though it is possible with the widgets API.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0kijj:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"06 Mar '19 10:18;mibrunin;This would depend on exposing QPrinter, the printer settings and possibly some dialog to QML or through Qt Quick components, so this is not a WebEngine-only task (or rather, the major part of this is outside of WebEngine).

I am not aware of current plans to do so, but it would be worth consideration IMHO.","06 Mar '19 10:22;poikelin;It would also help a lot if there was just a c++ interface for the QML component that could be used like the widgets one",,,,,,,,,,,,,,,,,,,,
show webengine availability for given toolchain,QTBUG-71579,269282,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,releaseteam,michal,michal,05 Nov '18 10:32,05 Mar '19 14:11,18 Feb '21 09:41,,5.11.2,,,,,,,,,,,,,,,,,,,,,,Packaging & Installer,,,,2,,,,"It would be really nice to see information in the maintenance tool which toolchain supports / does not support webengine . Currently (Qt5.11.2) allows selecting Web Engine with MSVC-2015 installation. However, installer does not install webengine since webengine only works with msvc2017.

This could be simply implemented as warning or error (even on separate page), when toolchain msvc2015/mingw is selected together with webengine.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0jpkv:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"31 Jan '19 11:53;michal;https://lists.qt-project.org/pipermail/development/2019-January/069418.html","05 Mar '19 14:11;michal;Please note people are still reporting bugs about missing webengine for msvc2015, is there any chance to implement warning or error page ?",,,,,,,,,,,,,,,,,,,,
Feature Request: Ability to select multiple folders from FileDialog,QTBUG-74193,274946,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,qt.team.quick.subscriptions,shmittal,shmittal,04 Mar '19 08:49,04 Mar '19 08:56,18 Feb '21 09:41,,5.12.1,,,,,,,,,,,,,,,,,,,,,,Quick: Dialogs,,,,1,Reported_by_support_standard,,,"It would be great to have a feature to select multiple folders from FileDialog in QML, 
Currently, if selectFolder property is set to true, selectMultiple is implicitly considered as false. Same is mentioned in https://doc.qt.io/qt-5/qml-qtquick-dialogs-filedialog.html#selectFolder-prop. 

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Windows,,,,,,"0|i0kld3:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Feature Request : Differentiate between dialog inputs for a same Role e.g. Yes, YestoAll",QTBUG-71816,269766,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,qt.team.quick.subscriptions,shmittal,shmittal,15 Nov '18 09:43,13 Feb '19 09:36,18 Feb '21 09:41,,5.12,,,,,,,,,,,,,,,,,,,,,,Quick: Controls 2,,,,4,Reported_by_support_standard,,,"Unlike Dialog for controls 1, Dialog of controls 2, there are no signals for yes and No clicked. 

And there should be something like clickedButton so that user can decide on basis of the button clicked e,g Yes or YestoAll. 

It would be better if there are direct APIs like onYes, onNo. And something to differentiate between buttons of the same Role. ",,,,,,,,,,,,,,,QTBUG-67168,QTBUG-59423,,,"06 Feb '19 07:23;tomaslov;screenshot-1.png;https://bugreports.qt.io/secure/attachment/80704/screenshot-1.png",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Windows,,,,,,"0|i0jsiv:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"15 Nov '18 09:52;mitch_curtis;Linking QTBUG-59423 because it also mentioned something similar to this:

{quote}
So, either we need an additional signal in the Dialog, like clicked() with a button or a button role [...]
{quote}","06 Feb '19 11:41;tomaslov;We have  switched to the QQC2 dialogs to get coherent styling throughout the app, but run into this issue. 

If we have a dialog with (Yes), (Yes to all) and (No), we don't see a way to distinguish between (Yes) and (Yes to all). 

And in the common case of (Yes), (No) and (Cancel), we can't distinguish between ""no"" and ""cancel"". Is there a simple workaround for this, or is QQC2 dialogs not usable for this? If so, P3 is way too low for this issue.
 !screenshot-1.png|thumbnail! 

","13 Feb '19 09:36;grecko;[~tomaslov] There is a workaround, but not very pretty :

    
{code}
Connections {
    target: dialog.footer
    onClicked: {
       if (button === dialog.standardButton(DialogButtonBox.Yes))
           ...
       if (button === dialog.standardButton(DialogButtonBox.YesToAll))
           ...
    }
}
{code}

You could extend that in a more generic way in a custom {{Dialog}} or {{DialogButtonBox}} like so :

{code}
signal standardButtonClicked(int standardButtonValue)
onStandardButtonClicked: print(standardButtonValue)

property var standardButtonList: [Dialog.Ok, Dialog.Open, Dialog.Save, Dialog.Cancel, Dialog.Close, Dialog.Discard, Dialog.Apply, Dialog.Reset, Dialog.RestoreDefaults, Dialog.Help, Dialog.SaveAll, Dialog.Yes, Dialog.YesToAll, Dialog.No, Dialog.NoToAll, Dialog.Abort, Dialog.Retry, Dialog.Ignore, Dialog.NoButton]

Connections {
    target: dialog.footer
    onClicked: dialog.standardButtonClicked(dialog.standardButtonList.find(standardButtonValue => dialog.standardButton(standardButtonValue) === button))
}
{code}",,,,,,,,,,,,,,,,,,,
Tumbler flick behavior editing,QTBUG-73234,272729,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,qt.team.quick.subscriptions,miikapernu,miikapernu,23 Jan '19 15:07,23 Jan '19 16:03,18 Feb '21 09:41,,5.12.0,,,,,,,,,,,,,,,,,,,,,,Quick: Controls 2,,,,2,Reported_by_support_standard,,,"Adding the following features to Tumbler would make them more usable:
 * Possibility to edit the tumbler flick deceleration and acceleration and maximum velocity.
 * Possibility to disable 'spin' animation pause when clicking a 'spinning' tumbler.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0k953:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"23 Jan '19 15:14;mitch_curtis;{quote}
Possibility to disable 'spin' animation pause when clicking a 'spinning' tumbler.
{quote}
Please elaborate on this.","23 Jan '19 15:21;miikapernu;When you click on a flicked tumbler the animation stops instantly. While an index is selected, the tumbler is frozen and the selected item won't be naturally positioned in the center until the tumbler is clicked again. Upon receiving a click after the pause the tumbler will slowly position the item correctly.",,,,,,,,,,,,,,,,,,,,
Progress reporting for QSceneLoader,QTBUG-73213,272690,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,seanharmer,poikelin,poikelin,23 Jan '19 06:59,23 Jan '19 07:02,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Qt3D,,,,0,Reported_by_support_standard,,,"To better support loading of large scenes, some kind of progress reporting would be nice.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0k8wf:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[NFC] QNearFieldShareManager::setShareModes implementation is missing on Linux,QTBUG-72661,271443,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,ablasche,karimpinter,karimpinter,18 Dec '18 13:10,18 Dec '18 19:31,18 Feb '21 09:41,,5.12.0,,,,,,,,,,,,,,,,,,,,,,Connectivity: NFC,,,,1,Reported_by_support_standard,,,"Qt NFC module is missing QNearFieldShareManager::setShareModes implementation on Linux.
Either it should be implemented or the documentation should mention, that it is missing.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Linux/X11,,,,,,"0|i0k1vj:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"18 Dec '18 16:42;ayden;Please fix for QT version 5.9.6 also, or provide a backwards-compatible patch.","18 Dec '18 19:31;ablasche;Converted to Suggestion as this is a feature request.

[~ayden], this cannot be done for Qt 5.9.6 because Qt's 5.9 branch is closed for feature development. Any other patch than severe critical bugs would be rejected. In fact, the next available feature branch is Qt 5.13.

Even so, this implementation is not very high priority. We are currently investigating whether and/or how to the neard backend as it is very little maintained and has had quite a few bad bugs for years. Before we have finished this investigation and potentially resulting implementations, it makes no sense to implement feature.",,,,,,,,,,,,,,,,,,,,
[Windows] Perform pairing when reading/writing a secure attribute,QTBUG-72529,271221,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,owolff,ThiemoVanEngelen,ThiemoVanEngelen,13 Dec '18 08:57,14 Dec '18 12:49,18 Feb '21 09:41,,5.12.0,,,,,,,,,,,,,,,,,,,,,,Connectivity: Bluetooth,,,,0,,,,"Code has been added for Windows/WinRT to scan and connect to a BLE device without the need to first pair with the device outside of the Qt application. The behaviour is however still quite different from other platform with respect to secure characteristics. On other platforms, scanning, connecting and reading/writing unsecure characteristics can be done without pairing and as soon as a secure characteristic is read/written, the OS handles the pairing and the read/write succeeds. In the Windows/WinRT implementation, this does not happen automatically and an error is returned by Qt. It would be nice if Qt could start the pairing automatically and continue with the reading/writing.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Windows,WinRT,,,,,"0|i0k0i7:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Dynamic OpenGL option on Linux?,QTBUG-72128,270461,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,lagocs,mandriver,mandriver,29 Nov '18 12:13,07 Dec '18 10:35,18 Feb '21 09:41,,5.12.0,,,,,,,,,,,,,,,,,,,,,,GUI: OpenGL,,,,4,,,,"In Debian we are having a discussion whether to build Qt with {{-opengl desktop}} or {{-opengl es2}} on ARM64 (aarch64) and some other architectures.

There are users which want the desktop implementation (for desktops and some boards), and there are users who want the OpenGL ES implementation (for mobile devices and other boards).

We are currently considering shipping two (conflicting) sets of Qt libraries, but it would be nice if there was an option to select OpenGL at runtime, based on environment variable or commandline flag (via dlopen or some other mechanism).",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Linux/Wayland,Linux/X11,,,,,"0|i0jwgf:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"29 Nov '18 13:06;rhertzog;FTR, the discussion in debian-devel is here: [https://lists.debian.org/debian-devel/2018/11/thrd2.html#00457]
In this discussion someone pointed out that Qt is able dynamically select which backend to use on Windows:

[http://doc.qt.io/qt-5/windows-requirements.html#dynamically-loading-graphics-drivers]

The request here is to have the same (or a similar) mechanism work for Linux too. The fact that this is is a build-time decision in Linux is widely considered as a bad design decision and really hampers the work of Linux distributions that want to be able to offer best-in-class support for both mobile- and desktop-class computers.

 ","29 Nov '18 13:52;lisandropm;-According to <[https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=798408]> libglew-dev and libgles2-mesa-dev disagree over GLsizeiptr. It might be solvable maybe by using plugins though.-

Forget it, it has been just solved.","07 Dec '18 10:35;lagocs;The ideal solution is to have a -opengl dynamic configure option working similarly to what we have on Windows, meaning no GL, GLESv2, EGL, etc. libraries are pulled in anymore in such builds (neither for Qt libs nor for applications). That is where this is a regression for applications: if they call glWhatever directly, or, less likely but possible, rely on QT_OPENGL_ES_2 or similar being defined to differentiate between ES and non-ES code paths, they break when built against a -opengl dynamic build of Qt. For Windows Qt switched over to shipping binaries prebuilt with -opengl dynamic one release after introducing the feature, distros (the ones that take -opengl dynamic into use in their builds of Qt) should then probably follow something similar since some apps will need changes.

Internally this needs a bunch of plumbing, like dlopening libGL / libEGL / libGLESv2, while also dealing with things like EGL_KHR_get_all_proc_addresses not guaranteed to be present. Most of this is in some platform plugin (xcb, eglfs, minimalegl), they all need to be covered and tested, which is where things get annoying. The rest of Qt should be easy since it is already prepared to operate when not linked to a GL lib (everything goes through QOpenGLFunctions). 
",,,,,,,,,,,,,,,,,,,
Add cross-platform sensors example showcase,QTBUG-72329,270811,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,lpotter,paangele,paangele,05 Dec '18 15:27,05 Dec '18 15:27,18 Feb '21 09:41,,5.12,,,,,,,,,,,,,,,,,,,,,,Sensors,,,,0,,,,"Ideally, porting to Qt5 and extending something like:
https://github.com/richardmg/SensorApp",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0jyfr:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Feature Request: Styling a tab of tabWidget by specifying the index,QTBUG-72063,270337,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,qt.team.quick.subscriptions,shmittal,shmittal,27 Nov '18 14:21,27 Nov '18 14:22,18 Feb '21 09:41,,5.12,,,,,,,,,,,,,,,,,,,,,,Widgets: Style Sheets,,,,1,Reported_by_support_standard,,,"It would be nice if there is some option to style a tab of a QTabWidget by specifying tab index in style sheet. SomeThing like:

{code:java}
setStyleSheet(""QTabBar::tab:[3] { font: bold; }"");
{code}

Right now, there is no direct way to have different styling for different tabs. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Windows,,,,,,"0|i0jvov:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
QPushButton missing the function to set the label alignment,QTBUG-71383,268860,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P2: Important,,qt.team.quick.subscriptions,oneeyeman1,oneeyeman1,24 Oct '18 21:27,25 Oct '18 15:41,18 Feb '21 09:41,,5.11.2,,,,,,,,,,,,,,,,,,,,,,Widgets: Widgets and Dialogs,,,,0,,,,"Hi,

Summary says it all.

 

One can use stylesheet to set the label alignment, but there is no method to set it programmatically thru the C++ interface.

 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0jn07:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
qmllint should warn about incorrect on assignments,QTBUG-91157,313358,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,ulherman,fabiankosmale,fabiankosmale,16 Feb '21 13:40,17 Feb '21 15:38,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,6.4,QML: Tooling,,,,0,qmlnext,,,"When encountering an on assignment, qmllint should verify that the type is actually a QQmlPropertyValueSource or an interceptor, and warn otherwise. Moreover, if there a binding is set on a property, and we have an on assignment with a QQmlPropertyValueSource, we should also warn. Note that binding + interceptor is a supported usecase.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,QTBUG-79331,9223372036854775807,,,,,,,,,"0|i0ql9z:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Reduce the amount of unused space in offline docs,QTBUG-89829,310774,Suggestion,In Progress,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,treinio,miikapernu,miikapernu,05 Jan '21 14:18,17 Feb '21 13:29,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Documentation,,,,1,Reported_by_support_standard,,,"Qt docs viewed in Qt Creator help mode have large margins between each element (headings, tables etc) meaning there's a lot of unused empty space in the docs.

=> reduce the amount of empty space",,,,,,,,,,,,,,,,,,,"12 Feb '21 07:47;leenam;doc-offline-style-spacing-for-headings.png;https://bugreports.qt.io/secure/attachment/104874/doc-offline-style-spacing-for-headings.png",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0q6db:",9223372036854775807,9223372036854775807,,,,,Da Vinci sprint 28,,,,,,,,,"11 Feb '21 09:58;veshivas;The latest version of Qt Creator uses lighthtml backend, which offers standard browser-like experience.","11 Feb '21 23:22;6th;Well that's not the answer I was hoping to see. - why does this answer justify ""**  Won't Do"" - can't the styles be adjusted for some use of empty space efficiency?","12 Feb '21 07:50;leenam;Styling is tricky, because we have so many opposing opinions. We have bug reports asking us to use the online style also offline, even though it has lots of whitespace.

However, according to general readability principles, there should be more space before a heading than after it, to visually tie it into the following text paragraph. So I agree with you here. 

Our CSS is not very flexible, so I don't know whether this is an oversight or a CSS issue.","12 Feb '21 12:12;veshivas;Well, the litehml backend is still limited in functionality compared to full-fledged browser. That being said, it looks like the offline CSS can be adapted to use less bottom margin for h2 titles. I notice that our online style uses `0.75em` bottom margin, but the offline version uses `30px` for top and bottom. We could align these margins with the online style. Reopening this bug.","13 Feb '21 05:58;6th;Thank you. That sounds rather good to me and at the least, consistent so hopefully less future maintenance by being parity too.",,,,,,,,,,,,,,,,,
QQuickFramebufferObject is a problematic texture provider,QTBUG-83942,298194,Suggestion,Open,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,qt.team.graphics.and.multimedia,mbrasser,mbrasser,01 May '20 14:25,17 Feb '21 12:05,18 Feb '21 09:41,,5.15.0 Beta4,,,,,,,,,,,,,,,,,,,,,,Quick: SceneGraph,,,,0,,,,"QQuickFramebufferObject is a QSGTextureProvider, which is a very nice/useful optimization, but leads to unexpected behavior when mirrorVertically is true, because ShaderEffect/QtGraphicalEffects do not know about the need to mirror.

An easy ""fix"" would be to turn off this optimization in that case. But I think this is a generic deficiency with texture providers (e.g. see also https://bugreports.qt.io/browse/QTBUG-77396) that could perhaps be improved by additional API in Qt 6. For example, what about adding a bool (or expandable set of flags) to QSGTextureProvider that allowed for more context about the texture being provided to the ShaderEffect?

Another issue is that smooth is not respected when QQuickFramebufferObject is being used as a QSGTextureProvider

 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0o6fb:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"02 May '20 23:57;anwojcie;Please provide platform information","06 May '20 10:42;smd;Something we want to adress for Qt6?

If not, feel free to lower pri","17 Feb '21 12:05;lagocs;QQuickFbo is a legacy compatibility enabler at this point (OpenGL only), in Qt 6. However, extending the context communicated for a texture provider is a valid suggestion regardless. Then again, it needs to be evaluated if there is sufficient value in here since just sending extra metadata does not mean the consumers (ShaderEffect, Qt Quick 3D, etc.) will want to, or will be able to, do anything with the information.",,,,,,,,,,,,,,,,,,,
[Feature Request] Secondary semantic render pass support in QQuick3D,QTBUG-90570,312131,Suggestion,Open,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,qt.team.graphics.and.multimedia,ttgil,ttgil,24 Jan '21 22:46,17 Feb '21 11:55,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,6.x,Quick: 3D,,,,0,,,,"We have a need for a secondary render pass that draws objects with no shading, but with specific class-identifying colors for participating items.  The specific use case is in generating semantic segmentation maps for machine learning from a synthetic 3D scene.  So, we'd need a ""normal"" rendered view of the world, plus a second view of the same scene rendered with different object classes colored with their semantic class identifying color. 

In Qt3D this was achievable using an extra framegraph branch and adding a second technique to a material that is only used on the secondary pass. 

Perhaps others might find such a feature useful for this and other purposes as well? 

Example:

!qquick3d_semantic_example.jpg!

 ",,,,,,,,,,,,,,,,,,,"24 Jan '21 22:45;ttgil;qquick3d_semantic_example.jpg;https://bugreports.qt.io/secure/attachment/104306/qquick3d_semantic_example.jpg",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0qeb3:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"01 Feb '21 08:07;janichol;Thanks for the suggestion.  No plans right now for this, but I understand it's a valid use case, and something I'll consider going forward.",,,,,,,,,,,,,,,,,,,,,
QLibrary does not give absolute path to loaded library,QTBUG-91152,313341,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,thiago,carlturner,carlturner,16 Feb '21 10:17,16 Feb '21 16:12,18 Feb '21 09:41,,5.15.1,6.0.0,,,,,,,,,,,,,,,,,,,,,Core: Other,Core: Plugins,,,0,,,,"QLibrary offers no way to check the absolute path the library was actually found in if it was found by searching system paths, which would be a useful feature (for informing users what versions of the library were loaded, and loading other resources in the same location as the library). This information should be fairly easy for QLibrary to provide, I imagine?

I tentatively filed this as a bug since the documentation states that fileName() ""returns the fully-qualified file name of the library"", although it does then state ""including the full path to the library *if* one was given in the constructor or passed to setFileName()"" [my emphasis], which you may feel clears it up. But my understanding of ""fully-qualified"" would require the resolution of ambiguous names like ""mylib123"" not just to ""libmylib123.so"" but to ""/usr/lib/libmylib123.so"".

Regardless of whether this is a bug, having access to the full path would be very useful in certain cases. (I am currently using boost::dll to find the path, which isn't ideal! I need this to work around a quirk of another library.)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0ql6n:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"16 Feb '21 16:11;thiago;bq. This information should be fairly easy for QLibrary to provide, I imagine?

No. It depends on how many steps of {{dlopen}} it tried. If you gave QLibrary a full path, then it is easy. If you didn't, then {{dlopen}} may have used one of its internal search paths (including environment variables) and found it before QLibrary tried specific paths.",,,,,,,,,,,,,,,,,,,,,
Improve documentation for *XYModelMapper QML Type,QTBUG-80828,289504,Suggestion,Open,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,treinio,-vix-,-vix-,29 Nov '19 13:46,16 Feb '21 12:15,18 Feb '21 09:41,,5.14.0,,,,,,,,,,,,,,,,,,,,,,Documentation,,,,0,,,,"Based on my experience, the documentation for HXYModelMapper and VXYModelMapper QML Types is not so complete and clear.

Moreover no official examples are available, and so it's almost impossible to understnad how to use them.

I suggest to improve the documentation and to provide official usage examples.

As an example, in the Detailed description I would modify in the following way:

A *vertical* model mapper is used to create a connection between a line, spline, or scatter series and the data model *(TableModel is the natural choice)* that *has a X and a Y column and* holds the *data point coordinate for the XYSeries in rows*.

If I'm right the HXY and VHY Detailed Description sections are swapped (VXY holds 2 columns and one row for every point in the series).",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0q6dg:",9223372036854775807,9223372036854775807,,,,,Da Vinci sprint 25,Da Vinci sprint 26,Da Vinci sprint 27,Da Vinci sprint 28,,,,,,"09 Jan '20 13:38;leenam;We looked at HXYModelMapper documentation at [https://doc.qt.io/qt-5/qml-qtcharts-hxymodelmapper.html], and it could use code examples.

Also, the doc content needs to be checked.","11 Jan '21 10:26;paulwicking;May be valid for 6.1 and 5.15 (not 6.0).",,,,,,,,,,,,,,,,,,,,
Add openssl libs for Android runtime,QTBUG-89053,308973,Suggestion,Open,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,hehalmet,assam,assam,02 Dec '20 08:46,15 Feb '21 06:17,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Packaging & Installer,,,,0,,,,"Android tests for ssl fails or do weird behavior because the openssl libs are not packaged with the apk, for testing on CI, the libs available at [https://github.com/KDAB/android_openssl] could be cloned during the staging, and the tests could be changed to use that.

 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Android,Linux/X11,,,,,"0|i0pwav:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"03 Dec '20 05:44;hehalmet;Hmm. Could you describe more specific what we should do in provisioning phase? And how does this affect to build phase?","03 Dec '20 07:52;assam;We could do this:
 * Download the repo mentioned above to /opt/android for example, no need to download the whole repo just 1 level is enough 
 * then ssl tests .pro/cmakelists.txt could be modified to use that path (could be a separate patch, done by me or the maintainers of qt network)","04 Dec '20 07:27;hehalmet;If we clone [https://github.com/KDAB/android_openssl.git] to /opt do we still need [https://code.qt.io/cgit/qt/qt5.git/tree/coin/provisioning/common/linux/openssl_for_android_linux.sh] script?

Or do we add it like this way?

https://codereview.qt-project.org/c/qt/qt5/+/325402","04 Dec '20 14:37;assam;I didn't see that script, but I think we should this this [script|https://github.com/KDAB/android_openssl/blob/master/build_ssl.sh#L84] instead which will account for the correct name suffix.

what about instead of cloning that repo, we could just build it on CI, using the [build script|https://github.com/KDAB/android_openssl/blob/master/build_ssl.sh#L84] in there, it accounts for different Qt versions, or even better, we could build it first hand and package it and keep in the CI storage so it can be fetched directly with no delay, the same way QEMU binaries are handled?","07 Dec '20 07:20;hehalmet;Yes, we can do that. But we should leave the build phase there also so that 3rd party people are able to redo it if needed. So the script would fetch the built package from CI storage and if it does don't exist then the script would build it. 

About the build part. We need to have it in the provisioning script, because we wan't verify the script changes in CI. If we use fetched script then the script changes aren't verified by the CI. Can you make the needed changes to that patch then I can comment on those? I can also cache the prebuilt package to CI storage. 

 ","07 Dec '20 13:58;assam;To account for external builds, I think we can do this:
 * Internally we do the have a cache package that we just extract in provisioning.
 * If that cache package is not found, we do the cloning for that repo only the last commit is needed, no need to clone the whole repo history.",,,,,,,,,,,,,,,,
QDoc: Induce configuration variables from .qdocconf,QTBUG-89851,310808,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,docinfrastructure,paulwicking,paulwicking,06 Jan '21 12:19,11 Feb '21 09:56,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Build tools: qdoc,,,,0,OKR1-Q12021,,,"If missing, QDoc should be able to induce the {{project}} and {{qhp.<project>.file}}  variables from the base name of the .qdocconf file. Consider other candidates for induction while at it :)


Feature request from Eskil via https://codereview.qt-project.org/c/qt/qt5compat/+/327528/3",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0q6kv:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"07 Jan '21 08:51;treinio;Good idea. Some projects that use hand-rolled make targets for invoking qdoc/qhelpgenerator may still prefer to use custom values for these variables, but we can do this automatically if they're missing, and maybe generate warnings if the defined values do not conform to Qt module conventions.",,,,,,,,,,,,,,,,,,,,,
"quick3d: need feature for supporting custom texture type/format, and custom resource management.",QTBUG-90986,312947,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,janichol,niqingliang2003,niqingliang2003,07 Feb '21 08:25,11 Feb '21 07:44,18 Feb '21 09:41,,6.0.1,,,,,,,,,,,,,,,,,,,,,6.x,Quick: 3D,,,,0,,,,"like 1D/3D texture, and extra data format, in vulkan at least.

currently, no 3d texture support, and data format is only part than vulkan.
and the 4x memory / memory leak is not acceptable for large custom/dynamic geometry.

for resource management:
can alloc buffer accessed by both cpu and gpu, can be readonly or read/write, for saving memory and accessing/modified simply.

maybe the ability of inserting some low level (vulkan) command when drawing contents of View3D is the final solution.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0qj0f:",9223372036854775807,9223372036854775807,,,,,,,,,,,,5.0,,,,,,,,,,,,,,,,,,,,,,,
QQuick3DTexture: add support for custom 'QSGTexture',QTBUG-90994,312960,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,janichol,niqingliang2003,niqingliang2003,08 Feb '21 03:45,11 Feb '21 07:44,18 Feb '21 09:41,,6.0.1,,,,,,,,,,,,,,,,,,,,,6.x,Quick: 3D,,,,0,,,,"current QQuick3DTexure support setting sourceItem, but for simple custome texture, sub class QQuickItem is too complex, so expect we can sub class QSGTexture directly to support custome (raw texture, e.g. 3d texture).",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0qj33:",9223372036854775807,9223372036854775807,,,,,,,,,,,,4.0,,,,,,,,,,,,,,,,,,,,,,,
"Expose more extensive version information (SDK, deployment target)",QTBUG-91072,313140,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,vestbo,vestbo,vestbo,10 Feb '21 14:10,10 Feb '21 18:11,18 Feb '21 09:41,,6.x,,,,,,,,,,,,,,,,,,,,,,Core: Other,,,,0,,,,"Both Android and Apple OSs have the concept of build SDK version and minimum runtime targets. It would be beneficial to expose these in a cross platform (or platform specific manner), assuming these are details users need to care about.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0qk1j:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"10 Feb '21 17:08;thiago;QSysInfo can return some of that. In other platforms, we can record some compiler information.

I'll defer to you on what information may be useful.","10 Feb '21 17:29;vestbo;QSysInfo might be the home for such an API, true. 

For reference, this is the API we have for Apple OSes:
{code:java}
class Q_CORE_EXPORT QMacVersion
{
public:
    enum VersionTarget {
        ApplicationBinary,
        QtLibraries
    };

    static QOperatingSystemVersion buildSDK(VersionTarget target = ApplicationBinary);
    static QOperatingSystemVersion deploymentTarget(VersionTarget target = ApplicationBinary);
    static QOperatingSystemVersion currentRuntime();

private:
    QMacVersion() = default;
    using VersionTuple = QPair<QOperatingSystemVersion, QOperatingSystemVersion>;
    static VersionTuple versionsForImage(const mach_header *machHeader);
    static VersionTuple applicationVersion();
    static VersionTuple libraryVersion();
};
{code}","10 Feb '21 18:11;thiago;I don't understand what it is for, but the usual rule of thumb of when to use QPair: never :-)",,,,,,,,,,,,,,,,,,,
Support system-specific over-rides for QLocale::setDefault()'s initial value,QTBUG-90972,312927,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,Eddy,Eddy,Eddy,05 Feb '21 16:05,09 Feb '21 17:27,18 Feb '21 09:41,,6.2,,,,,,,,,,,,,,,,,,,,,,Core: Locales (i18n),,,,0,,,,"As noted in QTBUG-90971, a platform may have a notion of ""system"" locale that can be over-ridden locally by a parent process (e.g. via environment variables) when launching a child.
On platforms that provide dedicated APIs to access the system locale, these APIs may not take account of such an override.
At present, the default locale used until {{QLocale::setDefault()}} is called is {{QLocale::system()}}.
Code that needs the system locale can access it as {{QLocale::system()}}; programs that want to use the system locale by default even if an override was used can do so by calling {{setDefault(system())}}, so having some other initial default locale, that takes account of any over-ride that may be in effect, would not prevent an application from having the Qt5 behaviour ({{system()}} as initial default).

Proposal, for {{QSystemLocale}}:
* replace {{fallbackUiLocale()}} with a {{fallbackLocale()}} that's used where {{fallbackUiLocale()}} currently is (not all of which is UI-related, e.g. the system locale global's initialization from it); it should be specified to reflect the system locale (as described by {{query()}}), in so far as it can be determined, but (as at present) _must not_ be {{QLocale::system()}}.
* add a {{defaultLocale()}} which may return the {{fallbackLocale()}} (provided this does not return the default-constructed {{QLocale()}}) or {{QLocale::system()}} and will be called at most once, to initialize the default locale as if by being passed to {{QLocale::setDefault()}} before any QLocale is instantiated.  It, naturally, _must not_ return a default-constructed {{QLocale()}}.

This would let macOS (for example) return an environment-derived {{defaultLocale()}} that differs from a system-derived {{fallbackLocale()}}, without {{QLocale::system()}} being inconsistent (e.g. claiming to be {{en_US}} while using Finish number formatting), while allowing environment settings to control the default locale in use.
",,,,,,,,,,,,,,,QTBUG-90971,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0qiw7:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"05 Feb '21 16:14;Eddy;This would, of course, be a behaviour change for any platform whose {{defaultLocale()}} doesn't return {{QLocale::system()}}. However, resolution of QTBUG-90971, i.e. making {{QLocale::system()}} consistent with itself on macOS when its system settings are contradicted by environment variables, will necessarily be a behaviour change, that can be mitigated by having the default locale continue to be determined by (the CLDR data for the locale named by) environment variables.","05 Feb '21 22:19;buddenha;fwiw, i made some relevant/related comments in one of the last qtranslator(-related) changes, regarding the usefulness of such a function for the autotest. i think you might have even been on the review.","08 Feb '21 10:21;Eddy;I take it that would be [this one|https://codereview.qt-project.org/c/qt/qtbase/+/324710/2/tests/auto/corelib/kernel/qtranslator/tst_qtranslator.cpp#160]:
{quote}
i totally see why we're kinda hitting a dead end here: faking {{uiLanguages()}} is &hellip; tricky:

* under unix, it would involve clearing the cache by accessing private data and setting {{$LANGUAGE}}
* on windows, it appears impossible. that could be fixed by making {{QSystemLocalePrivate::uiLanguages()}} use {{GetThreadPreferredUILanguages()}} (which can be overridden) instead of {{GetUserPreferredUILanguages()}}. speaking of which, the indirection via function pointer is not necessary with today's supported windows versions.
{quote}","08 Feb '21 13:57;Eddy;Note to implementer: the {{tests/auto/corelib/text/qlocale/syslocaleapp/syslocaleapp.cpp}} test-app uses a default-constructed {{QLocale}}, not {{QLocale::system()}}; this shall need amended as part of implementing the present proposal.","09 Feb '21 15:59;thiago;I don't understand the beginning of the description. The set of environment variables and other system API make up one single ""system"" locale. This is the default default and the user can override with {{setDefault}} for the current process only (won't apply to children, won't apply after restarting).

What's the third?","09 Feb '21 17:27;Eddy;On macOS, changing environment variable makes no difference to the system locale.
The parent of a Qt process might set the environment variables, but this won't affect what the macOS system APIs report as system locale; however, the environment variables will be seen by the Qt process (and its children, if any).
It's possible we should simply ignore the environment on macOS, as a result, but the idea here is that the default default locale would be based on the environment variables, that {{QLocale::system()}} shall then ignore (it currently has an inconsistent mess because it takes some information from the environment and the rest from the system APIs, which may be entirely incompatible with each other).
Letting the default-default use the env vars would give the Qt process a way to access what might be configured via the shell that started the Qt process.","09 Feb '21 17:27;Eddy;It's possible [~vestbo] might be able to give a more coherent account of the details.",,,,,,,,,,,,,,,
Add support for Chinese Calendar System,QTBUG-89824,310763,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,Eddy,blumia,blumia,05 Jan '21 12:56,09 Feb '21 10:53,18 Feb '21 09:41,,6.0.0,,,,,,,,,,,,,,,,,,,,,,Core: Date/Time,,,,1,,,,"Right now Qt only support ""Julian"", ""Islamic Civil"", ""Jalali"",
""Milankovic"", ""Persian"", ""Islamic"", ""islamic-civil"", ""islamicc"",
""gregory"", ""Gregorian"" calendar system. Adding a custom calendar system requires
subclass QCalendarBackend which is a private Qt API.

Chinese lunar calendar is widely used in mainland China and all major calendar applications like Google Calendar and Outlook both support set the Chinese lunar calendar as an alternate calendar system to make it display on the month view of the calendar. ICU also already supports Chinese calendar.",,,,,,,,,,,,,,,QTBUG-56923,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,mkalinow,All,,,,,,"0|i0q6av:",9223372036854775807,9223372036854775807,,,,ablasche,,,,,,,,,,"05 Jan '21 14:10;Eddy;As noted in the comment in {{qcalendar.h}}, a contribution would be welcomed.  I can work with anyone seeking to contribute a calendar, to fit it into the existing structure and adapt the {{util/locale_datatbase/}} python scripts to extract data for it from CLDR, but large parts of that contribution must be done by someone familiar with how the calendar works and is used (and who can read Chinese, as I won't even be able to tell whether an implementation works correctly &hellip;)
","05 Jan '21 15:38;blumia;> and I now see you've filed that ticket while I was writing,
> so let's take any further discussion there,

What a coincidence :)

> The plan has always been to make it possible to add custom calendars, in
> a similar manner to the various existing plugin mechanisms.  However, as
> you note, the backend base is in a private header; this is partly
> because we know we shall need some adaptations to its API and won't know
> what those shall be until we're more familiar with what further
> calendars need it to support.

I understand that. Actually, my original intent is to get KDE Plasma's
calendar applet to be able to display Chinese calendar system as an alternate
calendar system which can be displayed together with the main Gregorian
calendar dates. I already did an implementation that makes use of ICU4C
to get Chinese calendar dates, since it seems the use of Qt's private API is not 
acceptable for making this feature into KDE, that's the reason I ask if it could
be a public API.

> I note that the LDML (see below) date formats don't make any
> mention of day-of-month names, it only has formats using numbers for the
> day of the month.  So presumably no CLDR-supported locale uses names for
> days of the month in its standard formats.

CLDR had a proposal that mentioned the day-of-month issue [1], but it seems there is no future discussion about the day name issue (it's the only proposal I could found on the CLDR website). I also checked how Google Calendar did the day name translation. They use ICU4J to get the calendar dates, but for translation of day names, found out they are just using the regular form as to how Android applications does regular text localization to translate the day names.

[1]: http://cldr.unicode.org/development/development-process/design-proposals/chinese-calendar-support

> The month name methods do get passed the year; the idea was that this
> would enable the methods to determine which months in that year, if any,
> are leap months, so that it can adapt the naming suitably.  Does that
> suffice?

I guess it is sufficient, at least in the Chinese calendar system :)

> As for identifying leap months and leap days, see https://codereview.qt-project.org/c/qt/qtbase/+/261857

Aha, that's exactly what I mean. isLeapMonth() will do the job!

> As noted in the comment in qcalendar.h, a contribution would be welcomed. I can work with anyone seeking to contribute a calendar

I'd like to contribute but probably not in source code form (i.e. by submitting patches directly). As a Chinese, I use the Chinese lunar calendar system all the time, but I never really look into the how-to-calculate-and-get-the-date part, even ICU gets the date calculation wrong for once [2] so I'm not really sure about how easy or complex it could be to implement a fully working Chinese calendar system without using a 3rdparty lib.

[2]: https://www.v2ex.com/t/505601 (Chinese website, indicates that Google Calendar display the wrong Chinese lunar calendar date on Nov.8, 2018, which should be 十月初一 but display as 十月初二.)

I may need to do some more resource about how the calendar system working, let me know if you have any other questions about Chinese calendar system and I'd love to help <3
","05 Jan '21 19:54;estan;[~Eddy] Hey, saw the discussion leading up to this issue on qt-development@. Through some googling I found this (old!) design proposal for Chinese calendar support in CLDR: https://sites.google.com/site/cldr/development/development-process/design-proposals/chinese-calendar-support

Just thought I should drop this here.","09 Feb '21 10:12;blumia;Ah, I got this information today that related to the day name locale thing:

> I note that the LDML (see below) date formats don't make any
> mention of day-of-month names, it only has formats using numbers for the
> day of the month. So presumably no CLDR-supported locale uses names for
> days of the month in its standard formats.

https://unicode-org.atlassian.net/browse/CLDR-6979
http://cldr.unicode.org/index/downloads/cldr-25?tmpl=%2Fsystem%2Fapp%2Ftemplates%2Fprint%2F&showPrintDialog=0

In CLDR 25 or above, they added a new zh number system “hanidays”, for use with calendars. ""hanidays"" means Han-character day-of-month numbering for lunar/other traditional calendars.

QLocale::toString() can be used for this case but I haven't tried. Since it's a numbering system than a locale, not sure if it supports something like QLocale(""hanidays"").

By the way, to test the result quickly, we can use the JavaScript Intl module, see the following code below. Sadly QML cannot make use of it.

{code:javascript}
new Date().toLocaleString(new Intl.Locale('zh-CN', { calendar: 'chinese', numberingSystem: 'hanidays' }))
{code}
","09 Feb '21 10:53;Eddy;Thanks for that - now I have some idea where to start investigating.  This may require some substantial work, though !",,,,,,,,,,,,,,,,,
Add support for IBM CP 850 to enable decoding of DOS executable outputs on Windows (QProcess),QTBUG-90988,312951,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,thiago,alundra,alundra,07 Feb '21 14:48,09 Feb '21 07:08,18 Feb '21 09:41,,6.0.1,,,,,,,,,,,,,,,,,,,,,,Core: QString and Unicode,,,,0,,,,"IBM 850 unicode support is important to be able to print correctly QProcess outputs on Windows.
Qt5 had the support but Qt6 miss this support.

Maybe there is an undocumented way to have cross plartform printing of QProcess result in a correct way?

I discovered this bug when I wanted to print the result of CMake call from QProcess:
{code:java}
QProcess compileProcess;
compileProcess.start(""cmake"", {""--build"", ""."", ""--config"", ""Release""});
compileProcess.waitForFinished();
QByteArray allStandardOutput = compileProcess.readAllStandardOutput();
// Convert allStandardOutput to QString using the IBM 850 or the good unicode encoding{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Windows,,,,,,"0|i0qj1b:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"07 Feb '21 17:04;thiago;You shouldn't hardcode CP850 because isn't guaranteed on Windows. It can be something else on different Windows versions. You need to use some Windows API to determine what it was, so at that point you can also use Win32 API to do the decoding.

Additionally, most Windows console executables will print using the ANSI codepage (CP 1252 for Western Europe incl. English Windows versions), not CP850.

For that reason, I'm setting this to a lower priority suggestion. I don't think we'll ever implement it.","07 Feb '21 17:29;alundra;Thanks for the fast answer on it!
I tried to check the Win32 API but I could not find a clear answer about what is the best process to achieve the best result at that point.","07 Feb '21 18:26;thiago;Start by finding the API to tell you what the DOS codepage is.

Are you sure cmake is outputting CP850, not CP1252?","07 Feb '21 19:18;alundra;I saved the output to a file and I got it correctly printed using CP850.
 I found this API indeed which can give the correct code page to use: [https://docs.microsoft.com/en-us/windows/console/getconsoleoutputcp]

Not sure but it looks like then we can use this function to convert to wide char and then surely QString can take it as parameter: [https://docs.microsoft.com/en-us/windows/win32/api/stringapiset/nf-stringapiset-multibytetowidechar]

I wonder if there is a way to have the UTF8 bytes directly.","07 Feb '21 20:58;thiago;Did your file have any non-US-ASCII character? Otherwise, your test was null.

{{MultiByteToWideChar}} does not use the DOS CP, but the ANSI one (CP 1251) and is supported in QStringConverter. It's the only exception we've made to the Unicode encodings and Latin1 in this class.","07 Feb '21 21:33;alundra;It contains accent because the text is French. I would certainly have never noticed this with english only text :)","08 Feb '21 03:44;thiago;I think I see the problem. CMake, being often run from the Command Prompt window, despite being a Windows Console application, opted for CP 850 encoding of its translations. I don't know if it transcodes on the fly depending on what {{GetConsoleOutputCP}} returns or if it is hardcoded to CP850 for French. That means any IDEs interacting with CMake need to reverse the process.

Either way, that doesn't change my initial assessment of priority. This is a Windows problem, not a cross-platform one. and it's even restricted to a few applications. You can use Win32 API or ICU for this.","08 Feb '21 09:07;alundra;QStringConverter contains the encoding value ""System"", this is the local code page surely. One value ""Console"" could be added to support the console code page. That would certainly be the best suggestion here to have Qt supporting correctly this case for System and Console. I don't know how the other platform works, maybe for the other platforms Console code page is the same as System code page?","08 Feb '21 23:08;thiago;That's a solution, indeed. But we'd need to document clearly that the distinction is per-process that you launch and has nothing to do with whether it has a graphical interface or not. There's no way to know what it will use. You simply have to know what the process will do before it does that.

Because this is a mess and does not happen on any other platform (on all of them there's only one 8-bit encoding, so System is the same as UTF8) and is confusing anyway, I set the priority to low. And I'm being honest with you that I don't think anyone will find the time to implement this, document, write tests for it. It's too corner case.","08 Feb '21 23:09;thiago;By the way, does cmake print the accents correctly if you run {{chcp 65001}} in that console first?","09 Feb '21 07:08;alundra;On the test I made just now all using the ""cmd"" of Windows and calling that when I start the ""cmd"" directly as first command then calling cmake commands, I can see the accent correctly printed in the ""cmd"".",,,,,,,,,,,
Qt5 documentation should give hints on debugging Qt code with GDB.,QTBUG-84165,298653,Suggestion,Open,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,nick_bennett,basile-starynkevitch,basile-starynkevitch,11 May '20 14:13,08 Feb '21 10:18,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Documentation,,,,0,,,,"It would be nice if the *documentation suggested _concrete_ ways to debug Qt5 code with GDB* on Linux.

 

In particular *how to use GDB watchpoints*, since Qt5 wants to be position independent code and requires the executable using it to be PIC also.

 

See [this|https://stackoverflow.com/q/61726987/841108] for additional context and motivations.

 

The context is the [RefPerSys|http://refpersys.org/] GPLv3+ project (*for Linux x86-64 _+only+_,* source code on [https://gitlab.com/bstarynk/refpersys] ... current {{git commit}} being [dae216918be51c0c025d|https://gitlab.com/bstarynk/refpersys/-/commit/dae216918be51c0c025d8d57369d186db08e4923] on May 11th 2020), which generates at runtime some C++ code (of course using Qt5), compile it as a plugin, then does a {{dlopen}} on the resulting _shared object_.

 

Thanks for reading.

 

Regards.

 

*Basile Starynkevitch* - near Paris in France

[http://starynkevitch.net/Basile/index_en.html]

[basile@starynkevitch.net|mailto:basile@starynkevitch.net]

 

 

 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,QTBUG-84088,9223372036854775807,,,Linux/X11,Linux/Yocto,,,,,"0|i0eruk:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"12 May '20 07:17;leenam;We have some information about using breakpoints while debugging in the Qt Creator Manual: [https://doc.qt.io/qtcreator/creator-debug-mode.html]

There, we refer the users to the GDB manual for more information about watchpoints, though. 

Please let us know if the information in the topic above is in any way useful to you and how we could improve it.","20 May '20 07:56;tarjasundqvist;Gearbox meeting, please evaluate if this should be implemented for Qt 5.15.","29 Jan '21 10:36;rampe;Detached from https://bugreports.qt.io/browse/QTBUG-84373. [~nick_bennett] please evaluate this.",,,,,,,,,,,,,,,,,,,
CMake Build: Do not rely on only pkg-config for FindXYZ CMake modules,QTBUG-86283,303585,Suggestion,Open,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,crscott,cadam,cadam,27 Aug '20 13:47,08 Feb '21 09:52,18 Feb '21 09:41,,6.0,,,,,,,,,,,,,,,,,,,,,,Build System: CMake,,,,0,cmake_qt6,easy_task,,"Currently we have some {{PkgConfig::XYZ}} CMake targets which will always require {{pkg-config}}.

I found the following:
{code:java}
cmake/FindWrapSystemHarfbuzz.cmake
cmake/FindWrapBrotli.cmake
cmake/FindGTK3.cmake
cmake/FindXRender.cmake
cmake/FindXKB_COMMON_X11.cmake
cmake/FindLibsystemd.cmake
cmake/FindLibproxy.cmake
cmake/FindDirectFB.cmake
cmake/FindLibudev.cmake
cmake/FindATSPI2.cmake
cmake/FindLibb2.cmake
cmake/FindMtdev.cmake
cmake/FindTslib.cmake {code}

The following find CMake modules have both {{pkg-config}} and CMake {{find_path}} and {{find_library}} calls in one module:

{code}
cmake/3rdparty/extra-cmake-modules/modules/ECMFindModuleHelpers.cmake
cmake/3rdparty/extra-cmake-modules/find-modules/FindEGL.cmake
cmake/3rdparty/kwin/FindLibdrm.cmake
cmake/3rdparty/kwin/FindLibinput.cmake
cmake/3rdparty/kwin/Findgbm.cmake
cmake/3rdparty/extra-cmake-modules/find-modules/FindX11_XCB.cmake
cmake/3rdparty/extra-cmake-modules/find-modules/FindGLIB2.cmake
cmake/3rdparty/kwin/FindXKB.cmake
cmake/FindWrapSystemHarfbuzz.cmake
cmake/FindWrapSystemPCRE2.cmake
cmake/FindZSTD.cmake
cmake/FindMySQL.cmake
cmake/FindGSSAPI.cmake{code}

The FindXYZ CMake modules should have both capabilities to be able to work in scenarions when {{pkgconf}} package is not installed.",,,,,,,,,,,,,,,QTBUG-88661,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,QTBUG-88540,9223372036854775807,,,,,,,,,"0|i0p13b:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"31 Aug '20 13:13;kkohne;Good catch! ","12 Jan '21 04:35;crscott;After taking a bit of a look at the find modules involved, this is actually a fairly significant task. For each module, the following will need to be done:

* Update the find module structure to use PkgConfig if available, failing back to regular {{find_...()}} calls if not available or {{pkg-config}} couldn't find the requested module.
* Work out what the right header is and what path it is expected to be under.
* Work out the expected name of the library.
* Update the find module to produce an appropriately named target that doesn't refer to {{PkgConfig::}}.
* Update all repos to use the new target instead of {{PkgConfig::*}}.

Some of the modules that don't rely on pkgconfig being available still have problems with their implementations (using variable names that don't follow the recommended CMake naming convention, not making use of the imported target that the PkgConfig module can provide, etc.). It would seem appropriate to update those as part of this work so that they all operate in a consistent manner.

I'll likely tackle this work in chunks and put up patch sets for a few modules at a time.","12 Jan '21 06:26;crscott;Also note that some of those modules probably only expect to be used on a subset of platforms. E.g. {{FindATSPI2}} looks like it would only be used on Linux. Is it reasonable that on those platforms, it is expected that {{pkg-config}} is available? If so, then we can probably leave those Find modules alone and focus on just those that need to work where {{pkg-config}} might not be present/required (likely a much smaller subset).","14 Jan '21 07:06;crscott;After working through each of the listed Find modules, I think only Libb2 and perhaps GTK3 need consideration. The rest either use pkg-config as an optional hint rather than requiring it, or they are really only expected to be used on Linux where pkg-config is pretty much expected to be available. I don't think there's much value in putting time into generalising the rest of the find modules apart from these two.

Even in the case of GTK3, it's questionable whether it would actually be used on Windows and we explicitly disable its auto detection on Apple platforms. Once again, it seems that we are only likely to use it on platforms where we expect pkg-config to be available. That being the case, I propose we don't mess with updating the GTK3 Find module either. That just leaves Libb2, for which I've put up a change for review. Unless anyone has an objection, I'll consider this issue completed once that is merged.","14 Jan '21 08:14;cadam;The Qt qmake build did not rely on existence of pkg-config.

If we are fine with Qt CMake requiring pkg-config to be installed, then I guess we'll have to issue a FATAL_ERROR if pkg-config is not installed on Linux.","31 Jan '21 23:35;crscott;QTBUG-90572 discusses using the {{ECMFindModuleHelpers}} module from qtbase as a potentially better way of implementing various Find modules. If that covers much of the logic needed, then it may still make sense to switch over some of these Find modules to using that instead for robustness reasons.",,,,,,,,,,,,,,,,
QSyntaxHighlighter::rehighlight() shouldn't mark the document changed,QTBUG-90405,311767,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,esabraha,bhaller,bhaller,18 Jan '21 23:31,04 Feb '21 20:37,18 Feb '21 09:41,,5.15.2,,,,,,,,,,,,,,,,,,,,,,GUI: Text handling,,,,0,,,,"Calling rehighlight() on a QSyntaxHighlighter ends up calling QTextDocumentPrivate::contentsChanged(), which marks my document window as dirty.  Rehighlighting shouldn't mark the text document as changed, it seems to me.  Note that this is being triggered for me on macOS by the user switching from light mode to dark mode; I want different highlighting colors to be used in dark mode, so I call rehighlight().  But the document becomes dirty as a result.  I think I will have to work around this by setting a flag, around my call to rehighlight(), that prevents the document from dirtying inside that call, which is kinda gross.",macOS 10.15.7,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,macOS,,,,,,"0|i0qc8v:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"19 Jan '21 00:03;bhaller;Realizing this, I have now also observed that simply toggling the ""syntax highlighting enabled"" checkbox in my app's prefs causes the document to be marked dirty.  Another example of why  QSyntaxHighlighter should probably never mark the document as having changed.  (Or perhaps it needs to be considered to have changed for internal purposes, to display etc., but it should not cause a ""document changed"" signal to be emitted, it seems to me.)","20 Jan '21 08:08;fabiankosmale;Well, the documentation of contentsChanged states ""This signal is emitted whenever the document's content changes; for example, when text is inserted or deleted, or *when formatting is applied*."" (emphasis mine). And syntax highlighting does apply formatting in general (like making keywords bold), so I think emitting the signal is in line with our documentation.

But maybe what you actually want is a currently non-existing signal which only deals with text insertions or deletions? Alternatively, could you expand on why you think that contentsChanged should not be emitted?
","20 Jan '21 17:29;bhaller;""Well, the documentation of contentsChanged states...""  Hmm.  Well, perhaps this stance might seem overly philosophical, but I would interpret that statement as meaning ""when formatting in applied to the document that affects its *persistent* state, and would, e.g., be saved to disk"".  Syntax highlighting is not ""formatting"" in that sense; it is ephemeral, a matter of changing the visual appearance of the document for presentation to the user, not of changing the ""true"" content of the document as it would save to disk (since syntax highlighting is typically done on documents that are persisted as plain text, such as code, even though their representation in-memory is as syntax-highlighted rich text).

But if you disagree, fair enough; I can see that this is debatable.  In that case, then yes, a new signal that says ""the document has changed, not just in an ephemeral way, but in a way that would change its on-disk representation, and therefore means that the document's window should mark itself as dirty and in need of saving"" ought to be added, I suppose.  Such a signal ought to exclude changes that are due to syntax highlighting.  Since Qt doesn't really know how the app intends to persist the document – an app certainly _could_ save out the syntax-colored rich text content to disk, although I'm not aware of any app that does – perhaps the unambiguous way to define the signal would be ""the _character_ content of the document has changed"", excluding all changes to formatting.  I think that would probably fit the bill.","04 Feb '21 02:05;admin;This is an automated message.

It seems information was provided which causes this issue to leave the ""Need more Info"" state. If this is a mistake feel free to reverse the state change. Alternatively, the issue may be closed altogether if the received information supports it.","04 Feb '21 20:37;treinio;Moved -> suggestion",,,,,,,,,,,,,,,,,
Support FIDO2 resident credentials,QTBUG-90941,312866,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,qt_webengine_team,maximbaz,maximbaz,04 Feb '21 16:46,04 Feb '21 18:50,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,WebEngine,,,,0,,,,"When calling [navigator.credentials.get()|https://developer.mozilla.org/en-US/docs/Web/API/Web_Authentication_API], a website can pass optional [allowCredentials|https://developer.mozilla.org/en-US/docs/Web/API/PublicKeyCredentialRequestOptions/allowCredentials] parameter (and this works today with QtWebEngine), but since it's optional it can also choose not to pass it.

What happens in the latter case is that the website doesn't tell anything about which credentials a user should use, instead it just tells to use [resident credentials|https://developers.yubico.com/WebAuthn/WebAuthn_Developer_Guide/Resident_Keys.html], credentials stored on the security token itself.

QtWebEngine does not support this, it will show the following error:

_Resident credentials or empty 'allowCredentials' lists are not supported at this time._

This can be reproduced on [https://webauthn.io|https://webauthn.io/] with a small quirk:

1 - Registration

Enter any username, click on ""Advanced settings"" and set ""Register with Resident Key"" as ""Required"". Now click ""Register"", enter PIN and it should succeed.

At the time of creating this issue, this doesn't work because of QTBUG-90938, because PIN popup cannot be shown - so just repeat this in Chromium to proceed with repro steps, this doesn't prevent you from reproducing this actual issue.

2 - Login

Enter the same username you used during registration. 

Now we need to make a small adjustment to webauthn.io because it doesn't expose such option via config:

Open Dev Tools, find in the sources of webauthn.io one place where `navigator.credentials.get()` is used, add the code below just before that line and press Ctrl+S:
{code:java}
delete makeAssertionOptions.publicKey.allowCredentials;
{code}
!image-2021-02-04-17-40-45-884.png|width=557,height=132!

Now you can press ""Login"", and you will see this error:

!image-2021-02-04-17-43-56-288.png|width=555,height=409!

 

Just to clarify, PIN is not needed for the login, only for registration, so QTBUG-90938 is not the cause of this specific issue.

 

*UPDATE:*

 

I experimented some more and discovered that it is possible to register multiple users on the same card, in which case browser is expected to ask which credentials user wants to login with.

To reproduce, follow the steps above to register two usernames, say ""abcd"" and ""abcde"".

Make sure to register both of them with ""Resident credentials"" enabled.

Keep following the repro steps above and delete `allowCredentials` before `navigator.credentials.get()` is called.

Now, browser doesn't pass any information from the website to the card, so the card doesn't know which of the two users to pick. Chromium will show the following dialog:

!image-2021-02-04-19-43-21-324.png|width=540,height=319!

 Just like QTBUG-90938, such a dialog needs to either be handled by QtWebEngine itself, or an API needs to be provided for the applications to do so.",,,,,,,,,,,,,,,,,,,"04 Feb '21 16:40;maximbaz;image-2021-02-04-17-40-45-884.png;https://bugreports.qt.io/secure/attachment/104684/image-2021-02-04-17-40-45-884.png","04 Feb '21 16:43;maximbaz;image-2021-02-04-17-43-56-288.png;https://bugreports.qt.io/secure/attachment/104683/image-2021-02-04-17-43-56-288.png","04 Feb '21 18:43;maximbaz;image-2021-02-04-19-43-21-324.png;https://bugreports.qt.io/secure/attachment/104685/image-2021-02-04-19-43-21-324.png",,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0qiiv:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"04 Feb '21 17:22;allan.jensen;Any examples of sites requiring this feature?","04 Feb '21 17:35;maximbaz;I personally started looking into this because I spotted the issue on [mailcow|https://github.com/mailcow/mailcow-dockerized] - [demo instance|https://demo.mailcow.email/] 

To register: login with admin/moohoo and you will see FIDO2 right away

To login: on the demo instance, use ""Key login"" button next to login","04 Feb '21 18:50;maximbaz;I updated the description to include another example where browser needs to be able to show a dialog to ask a question, similar to QTBUG-90938, but now it's a select with data coming from the security key.

Now we know there are multiple different dialog windows that need to be supported, hope this helps deciding how to implement this :)",,,,,,,,,,,,,,,,,,,
TableView and ListView should get row and column delegates,QTBUG-90824,312665,Suggestion,Open,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,qt.team.quick.subscriptions,andre,andre,02 Feb '21 07:57,03 Feb '21 15:41,18 Feb '21 09:41,,Some future release,,,,,,,,,,,,,,,,,,,,,,Quick: Other,,,,0,,,,"ListView has a delegate to render an item, and a highlight delegate to create a highlight for the current item. Normally, the highlight is behind the items, which works well except when you want to use something like alternating row colors. In such cases, you have to give each delegate a background color, which in turn doesn't play nice with the highlight. 

TableView from QtQuickControls 1 had separate properties to rowDelegate and columnDelegate, that you could use to render a background for a row or a column. I would like to suggest to bring that feature to both ListView and QtQuick.TableView. This would separate the contents of the items in the view from their background, also making it possible to have the highlight move _between_ the this background rowDelegate (and columnDelegate) and the item contents on top. ",,,,,,,,,,,,,,,QTBUG-83612,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0qhef:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"02 Feb '21 12:33;richard;This is a good suggestion, but one of the main problems with TableView in Controls 1 (and Controls 1 in general), is that it has performance issues. And this is mainly because the delegates it offers are quite complex. So from lessons learned, we wan't to keep TableView (and ListView) as lean and mean as possible, and by default create and recycle as few delegate items as possible. When more complex delegates are needed, we leave it to the application to write delegates that fits the need of the application (e.g with the help of a [DelegateChooser|https://doc-snapshots.qt.io/qt6-dev/qml-qt-labs-qmlmodels-delegatechooser.html])","02 Feb '21 14:14;andre;DelegateChooser doesn't help here. The problem is that delegates are created as a single item, and that z ordering in QML is not global. That makes it impossible to have the highlight stacked under the actual item contents in cases where you need something like an alternating background color. Building the highlighting in the delegates themselves is possible, but you would loose the animation between the items. 

I am aware that Controls1 had performance issues, but I don't see how this really makes the delegates more complex. It just moves a little complexity between what would now be in the delegates (like, having a colored rectangle as the root with a color dependent on the index and then a Text as child item that contains the actual text) to a rowDelegate (which would get the colored rectangle while the delegate would simplify to a simple Text item). The row delegates could be recycled by default and would be opt-in anyway. Do you really think this would have a big impact? 

If I were to think about how I would implement this requirement now, I cannot imagine the solution to ""lighter"" than would be possible with my proposal. ","03 Feb '21 08:22;richard;Ok, I understand your use case better now. I'll keep the task open to see if we can find a way to support this more easily. At the same time, you should be able to achieve the same effect by creating an extra TableView that draws the background delegates behind your main TableView like this:
{code:java}
    TableView {
        id: tableBackground
        anchors.fill: tableView
        syncView: tableView
        model: tableView.model
        syncDirection: Qt.Vertical | Qt.Horizontal
        delegate: Rectangle {
            implicitWidth: 150
            implicitHeight: 50
            color: ""green""
        }
    } {code}

At the end of the day, this shouldn't be noticeable more costly for your application than if we did it all inside one TableView.","03 Feb '21 15:41;andre;Thank you, not a bad idea, but doing that for ListView will require actually adding a {{syncModel}} property onto ListView.",,,,,,,,,,,,,,,,,,
Qt Quick Controls 2 should provide a KDE Plasma style,QTBUG-90863,312745,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,qt.team.quick.subscriptions,hurlevent,hurlevent,03 Feb '21 10:57,03 Feb '21 12:55,18 Feb '21 09:41,,6.1,,,,,,,,,,,,,,,,,,,,,,Quick: Controls 2,,,,0,,,,"The sliders, progress bars, and some other controls doesn't look how I would expect them to.

 

Steps to reproduce:

Run Kubuntu 20.10 with Plasma 5.19.5. 

And choose a Application Style that isn't ""Fusion""

Run the qtquickcontrols2/tests/manual/nativestyle program and notice that the different controls/widgets are not quite native looking.

Their appearance doesn't change when you change the Application Style.",Kubuntu 20.10,,,,,,,,,,,,,,,,,,"03 Feb '21 10:57;hurlevent;SlidersNotNative.png;https://bugreports.qt.io/secure/attachment/104622/SlidersNotNative.png",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Linux/X11,,,,,,"0|i0qhuf:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"03 Feb '21 11:39;fabiankosmale;Well, that's due to qqc2-desktop-style not working with Qt 6, isn't it?","03 Feb '21 11:42;mitch_curtis;We don't have native Linux styles. I don't know if Widgets do either? Pretty sure it's just the Fusion style.

The style(s) would need to be added (I don't see anyone doing this anytime soon, but patches are welcome either way) and we'd need some way of detecting which style to use when on Linux in order to default to that style.

If you believe we should add this, we can convert this to a suggestion.","03 Feb '21 11:58;fabiankosmale;I'm not 100% up-to-date on the KDE side, but:
KDE always created their own native style for Qt. For Qt 5+Plasma 5, QML gets styled with qqc2-desktop-style, which reuses the Widget style (see https://invent.kde.org/frameworks/qqc2-desktop-style).
The issue here is that we don't commit to a stable native styling API for QQC2 (IIRC), so it's a bit hard for KDE to provide a native style like we do ourselves for Mac+Win.","03 Feb '21 12:01;hurlevent;[~mitch_curtis] Good to know. That means that this isn't really a bug.

Maybe this is something that I could work on in the future, what do you think [~javihria] and [~vhilshei]?","03 Feb '21 12:54;mitch_curtis;{quote}
The issue here is that we don't commit to a stable native styling API for QQC2 (IIRC), so it's a bit hard for KDE to provide a native style like we do ourselves for Mac+Win.
{quote}
Yep, that's QTBUG-67062.",,,,,,,,,,,,,,,,,
Effect atlas,QTBUG-90818,312655,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,qt.team.graphics.and.multimedia,mbrasser,mbrasser,02 Feb '21 00:01,02 Feb '21 08:36,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Quick: Graphical Effects,Quick: SceneGraph,,,0,,,,"A UI with a large number of (usually small) effects often can't be effectively batched by the renderer. One approach to solving this might be API for ShaderEffectSource and/or item.layer, such that a set of source items are drawn to a common atlas.

For example:
{code:java}
Text {
    text: ""Hello World""
    layer.enabled: true
    layer.atlas: ""TextAtlas"" // or reference to an Atlas item?
    layer.effect: ...
}{code}
where the above would result in the text being rendered into a shared atlas, and that atlas becoming the source texture for the effect.

 

 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0qhcf:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Use Conan for package management,QTBUG-75206,277222,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,qtbuildsystem,ovidiub13,ovidiub13,16 Apr '19 16:32,29 Jan '21 10:37,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Build System,,,,3,,,,"Conan ([https://conan.io|https://conan.io/]) is a C/C++ package manager, which speeds up the integration of C/C++ libraries into your own project. It's written in Python and available on probably all desktop platforms.

 

It offers integration into different build systems, e.g. cmake and qmake ([https://docs.conan.io/en/latest/integrations]).

 

There has been some work by [~frederik] and [~ovidiub13] on using Qt with KDE via Conan. We have the Bintray organizations for [Qt|https://bintray.com/qt] and [KDE|https://bintray.com/kde]. And there is a [Qt Conan recipe|https://github.com/bincrafters/conan-qt] made by the Bincrafters community.

It would be very useful for the community to have Qt modules available as Conan packages.

If Qt is to be shipped as separate modules, the Conan recipes can be shipped with the sources. While building the Qt binaries the Conan packages could also be built and published.

I connected this ticket to QTBUG-74397 on the *Package management* part.",,,,,,,,,,QTBUG-74405,,,,,QTBUG-73858,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0kxuv:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"17 Apr '19 09:25;jbornema;How can Qt's build system be of assistance when building conan Qt packages?","17 Apr '19 10:46;ovidiub13;I've updated the description to better clarify my request.","23 Apr '19 08:36;kkohne;We're actually evaluating different package managers right now for use with Qt : QTBUG-74405  . I suggest we wait for the results of this first.","23 Apr '19 11:14;nierob;I was investigating a bit how to add conan packages output directly to our CI. It is maybe not strait forward, because of qmake reloaction and inter-module dependencies, but it is not rocket science either. CI is already producing binaries that could be used in this context. ",,,,,,,,,,,,,,,,,,
Improve QML's error handling,QTBUG-89719,310521,Suggestion,Open,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,qt.team.quick.subscriptions,igor-baidiuk,igor-baidiuk,29 Dec '20 08:22,29 Jan '21 08:08,18 Feb '21 09:41,,5.15.2,6.0.0 Beta2,,,,,,,,,,,,,,,,,,,,6.x,QML: Declarative and Javascript Engine,,,,0,qmlnext,,,"Hello!

Summary:
 # Add interception API point to QML engine which is invoked when engine performs call from QML/JS to native code
 # Allow creation of user-defined JS exception types from native code and/or addition of custom info to exception instances
# Add distinct type instead of QQmlError to report exceptions through QQmlEngine's signal. That type should keep as much exception information as possible, including unmodified message, stack trace and additional info.

Rationale:
GUI applications are usually complex, much more complex than CLI ones. And while strategy ""terminate on any unexpected errors"" is Ok for small CLI utility, it's usually not acceptable for large GUI product. Some errors come unexpected during product development, and most of them should be intercepted and logged, and app should be allowed to continue. Here's where QML's exception-unfriendliness comes into play. According to what I've read in docs and to answers on forum, one is required to return some error value in case of failure and propagate it manually upwards the stack. Such approach both produces boilerplate and is error-prone itself. Not to mention it requires special code tuning and works only with Q_INVOKABLE methods which can return something. Exceptions could be used as uniform solution to the issue, by first transforming C++ ones to JS ones, thus unifying exception flow, and them catching them at the bottom of stack and doing something useful to them like reporting. More importantly, this can be opt-in from app developers, with local modifications to Qt sources and no need to support C++ exceptions explicitly.

Details:
I'm now participating in development of QML-based desktop application. And we use exceptions as a way to report errors. What came to my eye is that QML engine is unfortunately very exception-unfriendly both in native and interpreted part, unlike Qt Widgets.

First of all, stack unwinding through QML engine code causes unavoidable program state corruption, to the point of unrelated random crash at random location. This could have been mitigated if we had overridable virtual method in QJSEngine or QQmlEngine similar to QCoreApplication::notify, in which case application developers could override that method, add catch-block and transform C++ exception to JS one. Unfortunately we don't have one.

Second, QQmlEngine::warnings signal is fired on any message-like event, mixing actual JS exceptions with service messages. It would be really nice to have signal specifically for that case. QQmlError, as noted even in source comments, is more like log message than actual error.

Third, QJSEngine allows to spawn only fixed set of error types. This prevents transfer of additional information in exception context. I had to pack JSON into description to pass that information.

Fourth, QQmlError itself isn't the best type for representing exceptions. It keeps only single frame of stacktrace, loses all possible additional information and exception type, and warps error message by adding JS-specific things like actual error type name to description string. Would be nice to have some kind of string-value map or JSON object.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,QTBUG-69097,9223372036854775807,,,All,,,,,,"0|i0q54v:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"04 Jan '21 14:35;mitch_curtis;{quote}
What came to my eye is that QML engine is unfortunately very exception-unfriendly both in native and interpreted part, unlike Qt Widgets.
{quote}
I don't think there's any guarantee that Qt Widgets is exception-safe:

{quote}
Preliminary warning: Exception safety is not feature complete! Common cases should work, but classes might still leak or even crash.
{quote}
https://doc.qt.io/qt-5/exceptionsafety.html

I don't think this is going to change any time soon, either.
","04 Jan '21 18:08;igor-baidiuk;[~mitch_curtis]
Well, I didn't say QWidgets are completely exception-safe. I just said QML is exception-unfriendly unlike them.
Isn't this an additional argument to have some ""catcher hook"" in QML, to allow user code isolation?","05 Jan '21 09:09;mitch_curtis;I was referring to your claim that Qt Widgets is exception-friendly. As far as I know that's not the case. I'm not arguing for or against the feature you're requesting, but rather trying to clarify that exception safety is very limited in Qt. ","28 Jan '21 16:06;ulherman;You can throw any QJSValue through QJSEngine::throwError() now. Does that help?","28 Jan '21 16:08;ulherman;There is also QJSEngine::catchError() now. Together, those should do what you need.","29 Jan '21 07:06;igor-baidiuk;[~ulherman] Unfortunately it doesn't. Please check my comments on limitations of those methods.
To reiterate:

1. QJSEngine::throwError requires engine instance. So client code must put it to some global variable. Multiple modules == multiple global variables. `qjsEngine` doesn't do the job if object wasn't created by JS or had JS context explicitly associated with it.
2. C++ code must be JS-aware. More importantly, it must figure out whether it was called from JS directly or it was called indirectly by other method called by JS, i.e. whether we need to wrap exception as JS error or not.
3. No distinction between exceptions and diagnostics messages. All are handled through QQmlError.
4. QJSEngine::throwError allows to throw only limited set of predefined exception types.
5. Conversion from JS error to QQmlError loses lots of context

BTW there's no mention of QJSEngine::catchError. Please check https://doc.qt.io/qt-6/qjsengine.html.","29 Jan '21 08:08;ulherman;The generic throwError(QJSValue) and catchError() are new in 6.1. I understand your other concerns, but I don't think we will be able to address them anytime soon. Patches are welcome, though, as always.",,,,,,,,,,,,,,,
Allow Q_INVOKABLE Constructors to Throw Exceptions in QJSEngine,QTBUG-85424,301433,Suggestion,Open,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,qt.team.quick.subscriptions,rweickelt,rweickelt,03 Jul '20 21:14,28 Jan '21 15:48,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,6.2,QML: Declarative and Javascript Engine,,,,0,qmlnext,,,"When calling the constructor of a C++ class from within JS, it would be nice if the constructor could throw JS exceptions. Because the invoking engine instance is not known at creation time of the object, ugly workarounds like storing the engine in a global variable are needed.

Suggestion 1:
- a factory function parameter in QJSEngine::newQMetaObject() which takes QJSEngine as parameter and which would create the C++ object instead. Just like C++ singletons are created by QQmlEngine.
- The factory function should take QJSValueList as parameter in order to call an appropriate constructor

Suggestion 2:
- make QJSEngine* a required first parameter for invokable constructors",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,QTBUG-35361,9223372036854775807,,,,,,,,,"0|i0opcn:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Unhandled Promise Rejections in QJSEngine,QTBUG-82637,294710,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,qt.team.quick.subscriptions,gpbeta,gpbeta,03 Mar '20 10:24,28 Jan '21 15:15,18 Feb '21 09:41,,5.13.2,5.14.1,,,,,,,,,,,,,,,,,,,,6.2,QML: Declarative and Javascript Engine,,,,0,qmlnext,,,"MDN: [https://developer.mozilla.org/en-US/docs/Web/API/Window/unhandledrejection_event]
 Node.js: [https://nodejs.org/api/process.html#process_event_unhandledrejection]

It would be nice if {{QJSEngine}} will have the ability to catch the unhandled promise rejection events, so that we can, for example, print the unhandled error messages to console just like common errors do by default.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,QTBUG-35361,9223372036854775807,,,All,,,,,,"0|i0noan:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add wrapper class for JNI arrays,QTBUG-86231,303308,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,rampe,morte,morte,25 Aug '20 02:04,26 Jan '21 07:15,18 Feb '21 09:41,,5.15,6.0,,,,,,,,,,,,,,,,,,,,6.x,Extras: Android,,,,2,,,,"Array exchange between Java and native C++/Qt code is common need.

As there exists QAndroidJniObject which does not cover arrays, wrapper class for Java arrays needed as well.",,,,,,,,,,,,,,,QTBUG-84128,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Android,,,,,,"0|i0dymn:y8y",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"01 Sep '20 12:48;assam;Currently, JNI arrays can be exchanged between java and Qt but it needs manual parsing, for example:
{code:java}
if (objArray.isValid()) {
    QJniEnvironment env;
    const jsize length = env->GetArrayLength(static_cast<jarray>(objArray.object()));
    for (int i = 0; i != length; ++i) {
        m_entries << QJniObject(env->GetObjectArrayElement(
                                static_cast<jobjectArray>(objArray.object()), i)).toString();
    }
}{code}
Otherwise, could you explain in more detail what you're looking for, please?",,,,,,,,,,,,,,,,,,,,,
quick3d: no texture3d support,QTBUG-89703,310467,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,janichol,niqingliang2003,niqingliang2003,28 Dec '20 03:10,25 Jan '21 11:48,18 Feb '21 09:41,,6.0.0,,,,,,,,,,,,,,,,,,,,,6.x,Quick: 3D,,,,1,Reported_by_support_standard,,,"no texture3d support in quick3d.

in https://doc.qt.io/qt-6/qml-qtquick3d-texture.html:

'A texture is technically any array of pixels (1D, 2D or 3D) and its related settings, such as minification and magnification filters, scaling and UV transformations.'
'The Texture type in Qt Quick 3D represents a two-dimensional image.'",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0q4vr:",9223372036854775807,9223372036854775807,,,,,,,,,,,,7.0,,"30 Dec '20 01:24;niqingliang2003;any comments?","20 Jan '21 05:38;niqingliang2003;can we improve it to higher priority? or some workaround to support it?
I'm using quick3d to do volume rendering, but don't know how to do.

I want to use 2d to simulate 3d in shader (512x512x512, the final 2d resolution will be (512 x 256k), but the size is too big, d3d11 limit to 16k, and refuse to create it.
vulkan no any effect, opengl said need version 140 (Qt 6.0 dropped 'shaderInfo' in CustomMaterial). 

and then I found a bugreport about textrure array supporting in custommaterial, can fixed, but can't find any doc/code about how to use.

So how to do it?","21 Jan '21 03:26;niqingliang2003;https://forum.qt.io/topic/122181/3d-volume-texture-in-qtquick3d-custommaterial
another thread for this problem.","25 Jan '21 11:48;niqingliang2003;or some tutorial to add extra format support by userself?
I checked the code, both base/gui/rhi and quick3d need improve.
but I can't find some mothod to add something simply.

compile whole qt is complex to me.",,,,,,,,,,,,,,,,,,
Built-in dark style,QTBUG-88597,308094,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,qt.team.quick.subscriptions,poikelin,poikelin,18 Nov '20 08:39,25 Jan '21 10:24,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Widgets: Styles,,,,1,Reported_by_support_standard,,,"It would be great if there was built-in dark style or perhaps dark theme for Fusion style. It could be done in application with palette of course, but something that is ready to use inside Qt would be nice.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0pr6n:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"18 Nov '20 08:46;bleze;There is a range of different palette approaches to be found online, however none of them look really great and there is the also the icons to consider.

Comparing with DevExpress they have color themes for their skins (The Bezier) making it easy to change the look.

Something similar for Qt would be nice to be able to set both a skin like Fusion and then a color theme for it. It could also be a whole skin like FusionDark, but I personally like the color theme idea better.","25 Jan '21 09:22;juergen_skrotzky;You can try my dark theme palette + stylesheet:
[https://github.com/Jorgen-VikingGod/Qt-Frameless-Window-DarkStyle]


But it has some issues with Qt 5.15. It seems the Qt 5.15 ignores the QPalette:Window value of Fusion style :(

 ","25 Jan '21 09:39;bleze;[~juergen_skrotzky] I recently upgraded to 5.15. Did you report this bug, so it hopefully will get fixed? PS. Thanks for your link which is one of the mentioned approaches I found online :)","25 Jan '21 10:24;juergen_skrotzky;The guys from LXQt had the same issue:
[https://github.com/lxqt/lxqt-qtplugin/issues/54]

and reported it: [https://code.qt.io/cgit/qt/qtbase.git/commit/src/widgets/kernel/qapplication.cpp?h=5.15&id=0a93db4d82c051164923a10e4382b12de9049b45]",,,,,,,,,,,,,,,,,,
Qt-webengine does not support s390x,QTBUG-90550,312093,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,qt_webengine_team,skriesch,skriesch,22 Jan '21 14:17,22 Jan '21 22:08,18 Feb '21 09:41,,6.0.0 Beta2,,,,,,,,,,,,,,,,,,,,,,WebEngine,,,,0,,,,"If you want to build qt-webengine for the platform s390x, that is undefined. If you are looking into the source code, that isn't listed anywhere as a supported architecture.

IBM customers and open-source contributors want to develop more and more on IBM Z and LinuxONE. Therefore, that should be added as a supported architecture.","s390x
Linux",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Linux/Other display system,,,,,,"0|i0qe3b:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
enable system wide one finger swipe for tablets,QTBUG-82734,294993,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,srutledg,herrdeh,herrdeh,08 Mar '20 10:13,21 Jan '21 19:40,18 Feb '21 09:41,,5.14.0,,,,,,,,,,,,,,,,,,,,,,"GUI: Basic Input System (keyboard, mouse, touch)",,,,0,,,,"Hello everybody,

I'm very new to QT, so please accepte my apologies if I completely misplaced this RFE.

I had certain success with installing and using manjaro KDE on a X64 tablet. The experience is summed up [HERE.|https://forum.manjaro.org/t/tablet-howto-draft-for-a-wiki-page-help-appreciated/121979]

With manjaro/KDE, the machine is useable in an acceptable manner, but to give it the typical look-and-feel of a tablet, it seriously lacks the ""one finger swipe"" feature - the ability to move window contents, as we are used with smartphones or (android or iOS) tablets.

I filed a RFE at KDE , but the fellow there replied that -  if you want it system wide - it needs to be implemented at ""QScrollView"" - [HERE at KDE bug tracker.|https://bugs.kde.org/show_bug.cgi?id=417302].

I cannot rate this answer from the technical point of view, I just want to state the user's point of view:
 * Today, few single apps support swipe with one finger, most others don't. We cannot expect millions of apps to integrate one finger swipe support. (It yet did not happen)
 * If it can be implemented within QT, it may be useful to integrate a switch/control to switch it on and off. This switch could as well be linked with the discovery of a touch screen within the system, personally I tend to distrust these automatisms...
 * The missing one finger swipe feature is THE CORE FEATURE which makes the look and feel of a x64 tablet unpleasant at the moment. All other glitches are solveable or acceptable.

Hope all the above makes some sense to the experts.

Cheers,

herrdeh

 

 ",,,,,,,,,,,,,,,QTBUG-10684,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Linux/Wayland,Linux/X11,,,,,"0|i0nprr:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"08 Mar '20 18:47;srutledg;I agree in principle that we ought to do that.  I especially hate it that Konsole doesn't scroll that way (but that goes for a lot of non-Qt terminals too).  I even started writing my own terminal because of that (which is nowhere near done, and not published).  An earlier effort is yat https://github.com/jorgen/yat and I have a fork of that one too.

In Qt 5, you can use QScroller to make scrolling work in individual applications.  But we don't promise to keep that working the same way in Qt 6.  It feels a bit hacky to me.  It was done for Qt 4, and there were no changes to its functionality during the Qt 5 series.

The obstacles are:
- as soon as you reserve single-finger-swipe for scrolling, you will need another way to select text.  That means we should implement it the same way it's done on iOS and Android: long-press to start selecting, then you get handles that you can drag.  But on those platforms, we need the OS to do it for us, because the OS provides the handles, and we didn't want to implement it in a way that requires faking it (and being perpetually out of sync with any design changes in the OS).  So, it's done via the input method.  But there is no backend for that on Linux.
- Linux needs text selection handles implemented via the QPA plugins, for feature parity (once on Wayland and once on xcb, probably)
- the company prefers to have us spend time making Qt Quick better rather than adding features to widgets.  I think if we took care of text selection handles on Linux, it would work with both Quick and Widgets though.  But re-architecting how animated scrolling works in widgets will not be likely to get prioritized; meaning someone will have to do it in his/her spare time, if at all.
- widget rendering is usually not done on the GPU; so while you are scrolling, you will see high CPU usage as it re-renders the widget over and over.  You are not likely to get 60FPS: it will look more choppy than it does in Qt Quick.
- so really we need a way to use GPU acceleration just for scrolling content that has already been rendered, without turning on the whole OpenGL paint engine.  And again, who has time to develop that?

Long-term, the Qt company expects new applications to be written with Qt Quick.  One goal for the Qt 6 series is to continue developing Qt Quick Controls so as to remove the temptation to use widgets for new code.  (Right now it's still understandable, because the offering is incomplete compared to widgets.  The development workflow is pretty good with widgets too.)  Imperative QPainter API is incompatible with the idea of using GPU acceleration for everything.  You need a scene graph to decouple the order of updating your widgets/controls from the order in which they get rendered, to optimize for the GPU's capabilities.  Rendering must be done in batches, not willy-nilly.  A declarative language is a good fit for populating the scene graph.  And unfortunately the result is it doesn't seem like widgets have a bright long-term future.","17 Mar '20 11:33;herrdeh;Hello, thank you very much for your profound answer. I see I found THE man...
 
I could not understand all of the technical details, but it looks like a quite complicated and long-lasting affair, likely to last years. True?
 
Is there something which can be done in the meanwhile?","17 Mar '20 11:58;srutledg;Use Qt Quick for new applications.","22 Mar '20 12:04;herrdeh;For the less understanding folks:

You say programmers should use qt quick for new application, this will be the future?

Can existing application be shifted to qt quick? - Will programmers have to do that some day anyway? - So may it be a good idea to pre-draw that shift, in oder to make an app tablet usable?","23 Mar '20 10:48;srutledg;If I had my way, and the magical ability to get a lot done into the near future, I'd like to make widgets work better for such applications too, so that you'd have both alternatives.  But we have our limits.

Qt Quick is the future, yes.  That way we know what to focus on.  But in practice, some applications are still better written as widget applications, so far.  (Many classic desktop office applications, for example: word processors, drawing, diagramming and such.)  We have to close that gap to make sure that Qt Quick is the future.

What do you mean by ""pre-draw that shift""?

So far, for scrolling we only have Flickable.  Item Views inherit it, which is not really great architecture.  I wanted to change that, but we didn't change it yet.  I hope we can all eventually agree that we should.  At least QScroller is an independent component.  In Qt Quick, the ability to scroll any item inside a viewport should be a separate facet too.  But tight coupling is inevitable anyway: the item has to be told what part of itself to render.  This is what's completely lacking in Qt Quick so far.  If you put a TextEdit inside a Flickable, it doesn't know what part of itself to render, so it puts every glyph into the scene graph, which takes much more time and memory than it should.  (The positive side is that text layout and populating all those glyphs is only done once, and then you can smoothly scroll through the whole thing with the CPU basically idle.)  And that's why you shouldn't write a word processor in Qt Quick yet; at least, not if your documents are more than a page or two long.  The widget solution is the paint event, which carries a region: each time the widget should redraw, it will be told what region to draw.  We don't use events that way in Qt Quick, for some reason.  I don't know the history: was that idea brought up and rejected, or the architects at the time didn't think of it, or they just underestimated the cost of populating the scene graph with all the glyphs in an entire document?  It only costs memory on the CPU side; we have culling to avoid sending out-of-bounds geometry to the GPU.  And every time, in any context, one person brings up that kind of performance problem, another person will always say that the amount of system memory is always growing anyway, so who cares if the kind of word processor that you already had on DOS back in the 90's, that ran in 640K (or on 68K macOS with only a couple of megabytes), now takes gigabytes of memory to do the same job on a modern OS.  You have better aesthetic design now, and smoother scrolling now, whee.  That kind of thinking brings us the movement to Electron, too.  Qt should focus on performance more than the everything-in-the-browser movement does; that's one way we say that Qt is better, and that it's worthwhile for the web-developer youngsters to bother learning C++ and QML.  And yet, improvement of the features generally results in using more memory.

One problem is that you don't really know the absolute y coordinate of a piece of text (say, the start of a paragraph) unless you've done the layout of the whole document (done all the word-wrapping etc. and figured out the coordinates of every glyph).  Layout is the expensive part.  It's rather like the case when a ListView or TableView has delegates of varying sizes: we can't afford to instantiate each delegate, set up all the model bindings, etc. just to ask what its width and height are, and then throw it away until it becomes visible.  Flickable deals with that via the originX/originY properties: they are usually zero, but if during scrolling it determines that the total content needs more or less space than was estimated, those properties tell you where the content is currently estimated to start from.  (And to me it seems that it could somehow be a bit more aggressive about updating those earlier and more often.)  So I think maybe we can do document layout incrementally too, and the parent Flickable's contentY can be adjusted on the fly; but I haven't tried yet.  But I think TextEdit should always be placed inside a Fickable, not changed to inherit Flickable.  That way we will have the freedom to replace Flickable with something else later on, something that's broken down into smaller components.  That's what qtdeclarative/tests/manual/pointer/content/FakeFlickable.qml is a prototype of.  Then TextEdit needs to somehow be told what region of itself is currently visible in Flickable's viewport.  I.e. either we need something like widget paint events, or else we need to do item tree introspection at runtime.  TextEdit needs to find its parent Flickable, which sounds like trouble (breaking encapsulation, violating the separation of concerns principle); or Flickable needs to inform its own children of their visible regions, which is something I've been able to prototype, using Image as the child.  (There might also be a case for large images not to load their entire contents into memory.  I want to have tiling some day.  But maybe it's less urgent than this.)  Either way, TextEdit (and Text too) needs to be smart enough to populate a reasonably larger region around the viewport, so that you can do some cheap scrolling over short distances, not re-rendering at every frame like widgets do; but also use only a reasonable amount of memory.  (""rendering"" in this context means instantiating or updating scene graph nodes, not painting)

I wonder if somebody else has already solved the region-limited text rendering problem in their own application.  If there is any Qt Quick word processor that's worth using, they would have needed to solve it.

Anyway, I think that such flaws as those are the main reason I hesitate to say that every application should be rewritten with Qt Quick right now.   But it's part of the definition of success that we will be able to say that some day.  Sometime during the Qt 6.x series, hopefully.  For 6.0 we are just trying to remove as many obstacles as possible.
","23 Mar '20 11:17;srutledg;Another way to deal with the original request though is to send the swipe event as a QNativeGestureEvent.  I.e. put an external gesture recognizer in charge, rather than dealing with raw touch events in Qt Quick.  I.e. use libinput gesture recognition on Wayland and X11.  That might be the future, but I need to test libinput gestures soon to find out how well it really works.  It would mean that Flickable would need to react to QNativeGestureEvent with type() Qt::SwipeNativeGesture, which is probably not too much work to get started.  Currently only the pinch gesture is delivered that way (to PinchArea and PinchHandler); whereas scrolling is done via mouse, touch, wheel events (or QScrollEvents in the case of QScroller in widget applications, but not in Qt Quick).  However, currently native gesture events don't get grabbed by any items or pointer handlers in Qt Quick; each event is delivered as if it was the first one: by visiting all items under the current cursor position.  In Qt 6 we probably should handle grabbing of any kind of input event in the same way (to make sure that when one Item or Handler takes control of handling a particular gesture, it keeps handling it until the gesture ends).  There might be some problems lurking when we start trying to do that; we'll see.","24 Mar '20 19:38;herrdeh;Still, I'm far away to understand in depth what you are talking about, but it sounds a little promising, doesn't it ?

I'm a little embarrassed that it's so little I can do about it, but hopefully, I made you think a bit; hopefully you can regard it as a good thing...",,,,,,,,,,,,,,,
QObject::dumpObjectInfo should print property bindings,QTBUG-89859,310816,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,fabiankosmale,andreasbuhr,andreasbuhr,06 Jan '21 14:56,21 Jan '21 09:04,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,6.2,Core: Object Model,,,,0,,,,QObject::dumpObjectInfo prints existing signal/slot connections. It would be nice if it also printed existing property bindings.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,QTBUG-89505,9223372036854775807,,,,,,,,,"0|i0q6mn:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Automatically create q${module}global.h headers,QTBUG-90492,311943,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,qtbuildsystem,jbornema,jbornema,20 Jan '21 15:46,20 Jan '21 15:51,18 Feb '21 09:41,,6.0.0,,,,,,,,,,,,,,,,,,,,,6.2,Build System: CMake,,,,0,,,,"We have those q${module}global.h headers containing export macros like this:
{noformat}
#ifndef QTWIDGETSGLOBAL_H
#define QTWIDGETSGLOBAL_H

#include <QtGui/qtguiglobal.h>
#include <QtWidgets/qtwidgets-config.h>

QT_BEGIN_NAMESPACE

#ifndef QT_STATIC
#  if defined(QT_BUILD_WIDGETS_LIB)
#    define Q_WIDGETS_EXPORT Q_DECL_EXPORT
#  else
#    define Q_WIDGETS_EXPORT Q_DECL_IMPORT
#  endif
#else
#  define Q_WIDGETS_EXPORT
#endif

QT_END_NAMESPACE

#endif // QTGUIGLOBAL_H
{noformat}
They're almost the same for every macro and could be automatically generated by CMake.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,QTBUG-80897,9223372036854775807,,,All,,,,,,"0|i0qd7r:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"20 Jan '21 15:47;fabiankosmale;Should be doable with GenerateExportHeader + maybe some plumbing","20 Jan '21 15:51;Eddy;What's the algorithm for determining which {{#include}} headers are needed at the start ?",,,,,,,,,,,,,,,,,,,,
Support horizontal scrolling with Shift modifier key,QTBUG-75949,278888,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,srutledg,pointedstick,pointedstick,21 May '19 21:13,15 Jan '21 05:51,18 Feb '21 09:41,,5.12.0,,,,,,,,,,,,,,,,,,,,,,"GUI: Basic Input System (keyboard, mouse, touch)",,,,1,,,,"All Qt scrollviews implement horizontal scrolling with a scroll wheel by requiring that the Alt key is held down to scroll horizontally. The use of the Alt key to trigger this scroll behavior is unique to Qt; all other GUI toolkits and apps have since standardized on the Shift key instead. Users familiar with this convention are likely to try Shift+scroll on a Qt app, see that it doesn't work, and get mad at the app developer.

 

It might be worth considering switching the horizontal scrolling modifier to Shift in the interests of cross-platform usability, or making Shift+scroll work in addition to Alt+scroll",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0l6y7:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"21 May '19 22:49;davidedmundson;That's not quite correct.

 

Qt Scrollviews do not have any code to do horizontal/vertical switching onmodifiers.

 

QtXCB has code to swap the angle for any wheel event if alt is held.

 

 ","21 May '19 23:01;pointedstick;Okay then I guess this is a request for a change in QtXCB. :)","14 Jan '21 20:16;srutledg;So do you think we need some sort of API to configure it, e.g. add it to QStyleHints/QPlatformTheme?  Change the default to shift and use an env var to change it back?","14 Jan '21 21:14;pointedstick;I have no opinions regarding configurability, but if that's what it takes to get shift+scroll by default, I wouldn't object. :)","15 Jan '21 05:49;srutledg;The consequences of changing the default are unknown, I suppose.  Probably more than one person has muscle memory for that, just because it's been that way.  We could just change it anyway and wait for somebody to write a bug saying that it changed in a way they don't like, but maybe that's an avoidable aggravation if somebody actually likes it the way it is.",,,,,,,,,,,,,,,,,
Allow system wide shortcut customization,QTBUG-90334,311634,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,srutledg,georgeb,georgeb,14 Jan '21 17:25,15 Jan '21 03:00,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,"GUI: Basic Input System (keyboard, mouse, touch)",,,,0,,,,"+General:+

Qt defines a couple of Shortcuts. Some of them are externally consistent (like ctrl+C,...), some are not externally consistent (like Alt+Mousewheel for horizontal scrolling)

 

+Suggestion:+

Enable the possibility to customize externally inconsistent shortcuts systemwide (which is probably almost everything except for Ctrl+C/X/V).

 

+Benefit:+

On each OS a Qt app is used, it feels more unified and integrated into the system.

( I think it's a good idea to allow shortcuts to be configured by OSs and not by toolkits ).

 

+Specific:+

Qt defines Alt+Mousewheel for horizontal scrolling. However, this collides on Ubuntu systems, because

1) they use Shift+Mousewheel for horizontal scrolling.

2) they define Alt+Mousewheel for desktop zoom and window dragging/resizing.

 

+References:+

https://bugs.kde.org/show_bug.cgi?id=431554",,,,,,,,,,,,,QTBUG-75949,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0qbhr:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"14 Jan '21 19:32;pointedstick;See also https://bugreports.qt.io/browse/QTBUG-75949 which requests that Shift be made the modifier with no option available to change it. it seems like most other toolkits use Shift+Scroll as horizontal scrolling nowadays, so if Shift+Scroll was made possible I doubt anyone would want to move back to Alt+Scroll.","14 Jan '21 20:09;srutledg;I didn't know about that.  Alt+mousewheel is for switching desktops on openbox.

So do you think we need some sort of API to configure it, e.g. add it to QStyleHints/QPlatformTheme?  Change the default to shift and use an env var to change it back?

bq. Enable the possibility to customize externally inconsistent shortcuts systemwide (which is probably almost everything except for Ctrl+C/X/V).

You mean something extensible for all shortcuts?  That sounds ambitious.  Any particular API you have in mind for that?","15 Jan '21 02:58;georgeb;Simply making shift+mousewheel the new default ( QTBUG-75949 ) would be a solution to this specific use case. I would welcome such a change, because I'm used to shift+wheel.

 

However, I think there's another more general issue going on here:

Shortcuts are decided by toolkits/systems for ""arbitrary"" (good) reasons. Talking /for/ or /agains/ a specific shortcut is mostly a matter of opinion only. So mostly there is no global/objective ""good"" or ""bad"".
{quote}You mean something extensible for all shortcuts? That sounds ambitious. Any particular API you have in mind for that?
{quote}
I would suggest a file in a dictionary/key-value-like form:
{quote}
\{
 ""action1"": ""shortcut"",
  ""action2"": ""shortcut"",
   ...

\}
{quote}
 

+Reference:+

Example for GTK apps:

Some gtk apps offer an `~/<appname>/accels.scm` file for setting up shortcuts per user per app. It looks like this:
{quote}{{; Thunar GtkAccelMap rc-file -**- *scheme --*}}
 {{; this file is an automated accelerator map dump}}
 {{;}}
 {{; (gtk_accel_path ""<Actions>/ThunarBookmarks/38c32fe51d2eb4a7ca74a372f3e23e82"" """")}}
 {{; (gtk_accel_path ""<Actions>/ThunarStandardView/invert-selection"" """")}}
 {{; (gtk_accel_path ""<Actions>/ThunarLauncher/open-in-new-tab"" ""<Primary><Shift>p"")}}
 {{; (gtk_accel_path ""<Actions>/ThunarWindow/zoom-in"" ""<Primary>plus"")}}
 {{; (gtk_accel_path ""<Actions>/ThunarWindow/reload"" ""<Primary>r"")}}
 {{; (gtk_accel_path ""<Actions>/ThunarLauncher/open"" ""<Primary>o"")}}
 {{; (gtk_accel_path ""<Actions>/ThunarWindow/empty-trash"" """")}}
 {{; (gtk_accel_path ""<Actions>/ThunarWindow/zoom-in-alt"" ""<Primary>equal"")}}
 {{; (gtk_accel_path ""<Actions>/ThunarWindow/view-side-pane-menu"" """")}}
 {{; (gtk_accel_path ""<Actions>/ThunarWindow/open-network"" """")}}
{quote}
{{( Of course, what I'm suggesting above is a systemwide / all-user solution; not a per-user solution )}}",,,,,,,,,,,,,,,,,,,
Add wolfSSL backend.,QTBUG-85653,301936,Suggestion,Open,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,tpochep,tpochep,tpochep,17 Jul '20 19:47,14 Jan '21 19:33,18 Feb '21 09:41,,6.x,,,,,,,,,,,,,,,,,,,,,,Network: SSL,,,,2,,,,"Given how friendly wolfSSL  is (API/design-wise), we can provide a full-blown back-end. The initial port should be quite straightforward. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,mkalinow,All,,,,,,"0|hzzyp5:",9223372036854775807,9223372036854775807,,,,ablasche,Qt6_Foundation_Sprint 15,Qt6_Foundation_Sprint 16,Qt6_Foundation_Sprint 21,Qt6_Foundation_Sprint 22,Qt6_Foundation_Sprint 23,Qt6_Foundation_Sprint 24,,21.0,,,,,,,,,,,,,,,,,,,,,,,
CutsomMaterial model specific properties,QTBUG-89947,310962,Suggestion,Open,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,janichol,alexey89,alexey89,08 Jan '21 22:11,11 Jan '21 08:33,18 Feb '21 09:41,,6.0.0,,,,,,,,,,,,,,,,,,,,,,Quick: 3D,,,,0,,,,"It is possible to use one material for multiple models this way:

 
{code:java}
Model
{
    ...
    materials: [
        material1
    ]
}
Model
{
    ...
    materials: [
        material1
    ]
}
Model
{
    ...
    materials: [
        material1
    ]
}

CustomMaterial
{
    id: material1
    baseColor: ""red""
}
{code}
It works, but if the CustomMaterial should work in a slightly different way for each model, then a separate instance of CustomMaterial has to be created for each model. If there are hundreds of models and the CustomMaterial is complicated it leads to huge overhead.

I would suggest 3 ways to solve this problem:

1) add  MODEL_INDEX property to CustomMaterial shader. The index should be set in each Model instance and it will be possible to distinguish the models in the attached shader.

2) add ""materialProperties"" property to Model:

 
{code:java}
Model
{
    materialProperties: MaterialPropertues
    {
        property var baseColor: ""red""
    }
}{code}
The property value will be available in the attached shader.

3) Add ""currentModel"" property to CustomMaterial:
{code:java}
CustomMaterial
{
    property var baseColor: currentModel.color
}{code}
This way it will be possible to set different color for each Model with using only one CustomMaterial instance.

 

 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Windows,,,,,,"0|i0q7in:",9223372036854775807,9223372036854775807,,,,,,,,,,,,5.0,,"11 Jan '21 08:33;janichol;At least we will have this concept with instancing in 6.1 (already available to try if you pull the dev branch).  It's not exactly the same as you describe since instancing assumes that you have 1 model and in your case each model could be different but use the same mesh.  We may have to implement something similar to what you are describing to make lightmapping work correctly with shared materials (since each instance of a model/material [draw call] would have a seperate lightmap lookup even if they used the same material).
In the instancing case you could via the instance buffer associate per instance data to each of the separate material instances.  There are some new keywords for custom materials to facilitate this.
I'll keep this suggestion open though because I think we will need something more like what you describe though in the 6.2 timeframe.",,,,,,,,,,,,,,,,,,,,,
Replacement for QUrl::topLevelDomain(),QTBUG-87808,306668,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,tpochep,emdek,emdek,22 Oct '20 19:10,07 Jan '21 13:33,18 Feb '21 09:41,,6.0.0 Beta1,,,,,,,,,,,,,,,,,,,,,,Network,,,,0,,,,{{QUrl::topLevelDomain()}} was moved as private API as part of QTBUG-80308 which makes it way harder to for example compare domains in custom cookie jars (likely including cookie store filter in QtWebEngine too) etc.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0pisn:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"07 Jan '21 13:33;skunkos;Same question from me? How should we extract TLD ouf of URL now?",,,,,,,,,,,,,,,,,,,,,
Add validation mode for QProperties,QTBUG-89864,310823,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,fabiankosmale,andreasbuhr,andreasbuhr,06 Jan '21 17:20,07 Jan '21 09:07,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Core: Object Model,,,,0,,,,"There is plenty of opportunity to get QProperties wrong. When formulating a QML binding in terms of other properties which have neither NOTIFY nor BINDABLE, one gets a warning like ""QQmlExpression: Expression qrc:/main.qml:15:9 depends on non-NOTIFYable properties"". When doing the same in C++, no error and no warning is generated. This will lead to bugs. To help people find these bugs, it would be nice to have a ""validation mode"":

In ""validation mode"", properties evaluate in each read access. If the value changes, even though their dirty flag is not set, they generate an error.

This validation mode could be implemented inside of ifdefs, then there is no overhead when it is unused. But then, using validation mode would require a recompile of QT.

Or it could be steered by an environment variable. That would make the validation mode very usable (just run ""QT_PROPERTIES_VALIDATION=1 ./myapplication"") but every read access to a property having a binding would need to check this flag. Given that it has to check the dirty flag in each read anyway, the performance hit might be very small.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,QTBUG-89505,9223372036854775807,,,,,,,,,"0|hzzyoy:x00o0950i",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
QMatrix4x4 operator* with QVector3D is unclear,QTBUG-89708,310486,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,lagocs,juan.casafranca,juan.casafranca,28 Dec '20 11:28,04 Jan '21 15:39,18 Feb '21 09:41,,5.15.2,6.0.0,,,,,,,,,,,,,,,,,,,,,GUI: OpenGL,GUI: Painting,,,0,,,," QVector3D documentation says `""The QVector3D class represents a vector or vertex in 3D space."" `

QMatrix4x4 provides an operator* to transform a QVector3D. This has several issues:
 # Using * remembers of an algebraic operation, which is incorrect between a 4x4 matrix and a 3x1 vector. This is implement as if the QVeector3D was a QVector4D with a 1 in the w coordinate and doing the mathematical operation.
 # By doing that, it fails the purpose of QVector3D being a vector or a vertex, since its always considered a vertex. You can't consider a vector because when transforming it with a QMatrix4x4 its going to be treated as a vertex. 
 # Thee operator* remembers of the algebraic operation, so one could think that the distributive property applies, but it doesnt.

Consider the following code:
{code:java}
QMatrix4x4 worldMatrix;
 QVector3D p;
worldMatrix * p - worldMatrix * QVector3D(0,0,0);
{code}
 
p here is a vector, so when applying the worldMatrix transformation, I dont wan't the traslation. That is why I need to remove it with the `worldMatrix * QVector3D(0,0,0)`.

One could also consider that the code could be refactored as:
{code:java}
QMatrix4x4 worldMatrix;
 QVector3D p;
worldMatrix * p; // in algebra, multiplying by a null vector returns a null vector
{code}
which doesn't give the same result. 

I would suggest deprecating and removing all the non mathematical operations and use proper algebra for these operations. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0q4zz:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"28 Dec '20 13:18;peppe;Given that map / mapVector also exist in QMatrix4x4, I'd suggest this overall plan:

# Deprecate all operator* overloads between QMatrix4x4 and QVector3D / QPoint / QPointF
#* For op*(QMatrix4x4, QVector3D) suggest to use map/mapVector, depending on the semantics
#* For op*(QMatrix4x4, QPoint(F)) suggest to use map
#* For op*(QVector3D / QPoint(F), QMatrix4x4), add a replacement method (preMap? Not 100% convinced)
# Extend the documentation of all the map overloads to clearly state that the mapping is done considering these as points (i.e. extend to 4d homogeneous vector with w = 1, pre or post multiply, divide by w)","04 Jan '21 15:22;Eddy;bq. it fails the purpose of QVector3D being a vector or a vertex, since its always considered a vertex. You can't consider a vector because when transforming it with a QMatrix4x4 its going to be treated as a vertex. 

[~juan.casafranca] suggested work-around: {{QVector4D}} has (since at least 4.6.0) constructors taking {{QVector3D}} and the value (defaults to 0) for the fourth component; so simply using {{matrix4x4 * QVector4D(vector3)}} should get you a suitable {{QVector4D}}, treating the vector as a vector instead of a vertex.  If you need that as a {{QVector3D}}, you can use {{toVector3D()}} or {{toVector3DAffine()}} as appropriate (the former ignores the lost component, the latter divides by it).  There are similar constructors from {{QPoint}} and {{QPointF}}, along with {{toPoint()}} and {{toPointF()}} to come back with.

(Note: {{QMatrix4x4}}'s implementations of {{operator*()}} with {{QVector3D}}, {{QPoint}} and {{QPointF}} test {{if (w == 1.0f)}}; it might make sense to use a {{qFuzzyCompare(w, 1.0f)}} test instead.)","04 Jan '21 15:39;peppe;There's also simply map(QVector3D) and mapVector(QVector3D) that do the right thing.

I'm proposing to deprecated these ""mixed"" operator* overloads.",,,,,,,,,,,,,,,,,,,
QEvent::FileOpen Single vs. Multiple Events,QTBUG-89774,310617,Suggestion,Open,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,,csparker247,csparker247,04 Jan '21 01:46,04 Jan '21 10:38,18 Feb '21 09:41,,5.15.2,6.0.0,,,,,,,,,,,,,,,,,,,,,GUI: Drag and Drop,,,,0,,,,"This is a resurrection of [an old discussion|https://lists.qt-project.org/pipermail/interest/2018-January/029175.html] from the Qt lists. In essence, dragging multiple files to the app icon results in multiple QEvent::FileOpen's being emitted, even though the [NSApplicationDelegate receives the file list in a single event|https://github.com/qt/qtbase/blob/6.0/src/plugins/platforms/cocoa/qcocoaapplicationdelegate.mm#L240]. I understand this use case, but would like to propose adding a way to retrieve the original list of dropped files.

I personally don't have much preference for the way in which this is implemented. The original discussion proposed augmenting the FileOpen event with a pluralized urls() or files() method. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0q5pr:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"04 Jan '21 10:37;vestbo;The use-case makes sense. One approach would be to deprecate file/url and replace with files/urls.",,,,,,,,,,,,,,,,,,,,,
"Vulkan: Consider suppressing BestPractices ""validation"" message about depth-stencil buffer",QTBUG-89763,310595,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,lagocs,lagocs,lagocs,02 Jan '21 17:07,02 Jan '21 17:34,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Qt RHI,,,,0,vk_nonstd_valid_warnings,,,"{code}
vkDebug: Validation: 0: Validation Performance Warning: [ UNASSIGNED-BestPractices-vkAllocateMemory-small-allocation ] Object 0: handle = 0x7f40f4649fc0, type = VK_OBJECT_TYPE_DEVICE; | MessageID = 0xdc18ad6b | vkAllocateMemory(): Allocating a VkDeviceMemory of size 45056. This is a very small allocation (current threshold is 262144 bytes). You should make large allocations and sub-allocate from one large VkDeviceMemory.
vkDebug: Validation: 0: Validation Performance Warning: [ UNASSIGNED-BestPractices-vkBindMemory-small-dedicated-allocation ] Object 0: handle = 0x7f40f4649fc0, type = VK_OBJECT_TYPE_DEVICE; | MessageID = 0xb3d4346b | vkBindImageMemory(): Trying to bind VkImage 0xfd50000000fd5[] to a memory block which is fully consumed by the image. The required size of the allocation is 45056, but smaller images like this should be sub-allocated from larger memory blocks. (Current threshold is 1048576 bytes.)
{code}

This is as expected, and happens when a Qt Quick window or layer size is under a certain threshold. BestPractices is a category that needs to be enabled via vkconfig. Nonetheless it could be that we should filter this message out.

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0q5kv:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Qt Assistant add an option to opt-out from using qhc cache,QTBUG-82193,293563,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,jkobus,abi,abi,16 Feb '20 14:06,22 Dec '20 14:46,18 Feb '21 09:41,,5.14.0,6.0,,,,,,,,,,,,,,,,,,,,,Tools: Assistant,,,,3,,,,"Currently Qt Assistant will cache qhc file, for things like providing Bookmarks support. Such approach often just works but it also often doesn't work and the only solution is to delete the cached .qhc file manually. Looking for reference on the internet, this has been discussed for around a decade now, on different help forums. Solution being to (manually) delete the cached .qhc file. In FreeCAD we would like to provide help files included in an AppImage format. I shared some details here:

 

https://bugreports.qt.io/browse/QTBUG-12050

 

AppImage works in a way it always changes its runtime location, on each AppImage start. Help will therefore work only on the first run, on the second run it will fail to work, due to cached  qhc file getting involved. I tired to programmatically unregistered and register the help files, at each AppImage start, but it fails and Qt Assistant doesn't provider a reason  why. In addition i wanted to add support for picking up help files from two locations, one located in home folder and one in system wide location. For such use case cached qhc file will start to cause issues again. As if the help files are first found in home folder and at any time somebody decided to use the system provided help files, removing the ones from home folder will left the cached qhc file intact. The system provided help files will again fail to work correctly, until manually deleting the  cached qhc file.

 

In short, it would be nice to have an option to opt-out of qhc cache usage.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0nicn:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"22 Dec '20 14:46;moonmartin;Given the hard caching and the challenges to get a re-built help collection to be used in program upgrades, this is a useful feature that we would like.

 

Even better would be to fix the caching so that it is dumped if a checksum-compare between cached and new help collection shows that they are not the same.",,,,,,,,,,,,,,,,,,,,,
"Please allow qdbuscpp2xml to understand simple, custom types",QTBUG-72522,271201,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,thiago,sredman,sredman,13 Dec '18 06:41,17 Dec '20 23:55,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Build tools: Other,,,,2,,,,"It would be very helpful to me if qtdbuscpp2xml were able to annotate the resulting XML with custom, but simple, types. In other words, with types which are derived by using typedef on an already-dbus-compatible type.

I am working on a Qt-based application which makes significant use of DBus. On DBus, I pass simple things like QStrings, qint32, and qint64. These all mean more to me than simple numbers. Some are IDs, others are timestamps, and some are human-readable.

It would help me keep track of what is going on if I were able to `typedef fooID_t qint64` and then be able to pass this on DBus. I use qtdbuscpp2xml and qtdbusxml2cpp to generate DBus interfaces. Unfortunately, the qtdbuscpp2xml step is not able to handle typedefs, even for simple types. I could fix the xml by hand, but that sounds like something a machine should be able to do for me!

For my real-world use-case, please see here: [https://phabricator.kde.org/D17553] . I have many similar types in the same program which I would love to be able to name!",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0k0dz:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"17 Dec '20 23:55;fboni;You can create a temporary fix to this if you recompile a custom qtdbuscpp2xml:

[https://techbase.kde.org/Development/Tutorials/D-Bus/Cpp2XmlPlugin]

 

An example here:

[https://github.com/z3ntu/razer_test/tree/master/scripts]

https://github.com/z3ntu/razer_test/blob/master/scripts/generate_dbus_xml.sh",,,,,,,,,,,,,,,,,,,,,
When accessing a webpage that will access the WebMIDI APIs it will fail due to the fact that QWebEnginePage does not grant permission to use it,QTBUG-78128,284200,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,qt_webengine_team,andysh,andysh,09 Sep '19 07:56,16 Dec '20 12:25,18 Feb '21 09:41,,5.13.1,,,,,,,,,,,,,,,,,,,,,,WebEngine,,,,1,Reported_by_support_standard,,,"When accessing a webpage that will access the WebMIDI APIs it will fail due to the fact that QWebEnginePage does not grant permission to use it. This is because Qt has no support for this feature on the permissions level. If you try to access it then it will output:

{code}
[93655:775:0909/095102.236061:ERROR:permission_manager_qt.cpp(82)] Not implemented reached in ProfileAdapter::PermissionType QtWebEngineCore::toQt(content::PermissionType)Unsupported permission type: 6
{code}
",,,,,,,,,,,,,,,,,,,"11 Sep '19 07:01;andysh;MIDI.html;https://bugreports.qt.io/secure/attachment/87059/MIDI.html",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0m1mn:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"11 Sep '19 07:01;andysh;An example using the attached example HTML can be used for this.","11 Sep '19 07:33;timaccorsair;*Steps to reproduce:*
 # Download the attached MIDI.html file
 # Open QtCreator and compile the SimpleBrowser example
 # Load the MIDI.html file in SimpleBrowser by using an url like
""file:///Users/alex/Desktop/MIDI.html""

*Result:* You see the error ""Could not access your MIDI devices!""
Expected result: SimpleBrowser should let you access the WebMIDI API. If you
open the same local URL in Chrome, you see ""MIDI access!""

 

Note that the attached MIDI.html file uses the WebMIDI APIs. It basically only calls
""navigator.requestMIDIAccess().then(onMIDISuccess, onMIDIFailure);""
If you open this local file in Chrome, Chrome will give you access to WebMIDI
APIs. If you compile the Qt SimpleBrowser example and load the local MIDI.html file,
you are not able to access WebMIDI.","12 Nov '19 10:46;michal;It looks like this not just about permissions , I guess this also requires WebUSB API support so you can access your device no , or what is the uses case here ?

Could you explain what midi device you want to use ?","24 Nov '20 14:50;the compiler;I think WebUSB support has been added to QtWebEngine in more recent versions (for FIDO U2F tokens and such)? I thus suspect the only remaining bit to get this working is probably the permission system?

(FWIW, I'm not interested in this personally, but just had an user ask for support)","16 Dec '20 12:25;admin;This is an automated message.

It seems information was provided which causes this issue to leave the ""Need more Info"" state. If this is a mistake feel free to reverse the state change. Alternatively, the issue may be closed altogether if the received information supports it.",,,,,,,,,,,,,,,,,
Cross-platform wakelock API,QTBUG-89477,309854,Suggestion,Open,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,vestbo,fabiankosmale,fabiankosmale,14 Dec '20 12:21,16 Dec '20 11:50,18 Feb '21 09:41,,6.0,,,,,,,,,,,,,,,,,,,,,,QPA,,,,0,,,,"It would be useful to have a truly cross-platform API to acquire a wakelock. On mobile platforms, this would prevent the screen from turning off, on desktop platforms it could be used to inhibit screen-savers and standby.

Implementation wise, this could map to setting FLAG_KEEP_SCREEN_ON on android/view/Window on Android and setting the idle timer to false on iOs. Linux features systemd inhibitor locks, which might be useful.

Prior art in other toolkits: 
- https://pub.dev/packages/wakelock
- https://www.npmjs.com/package/react-native-android-wake-lock",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0q1cn:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"14 Dec '20 12:52;vestbo;This is a great feature request, thanks!

On first look this might make sense as a QScreen function, but on the other hand it's not just about not dimming the screen, so perhaps QGuiApp makes more sense. That's also where we have the applicationState, which is related.","16 Dec '20 11:50;sorvig;Looks like the iOS equivalent is UIApplication.idleTimerDisabled: https://developer.apple.com/documentation/uikit/uiapplication/1623070-idletimerdisabled",,,,,,,,,,,,,,,,,,,,
Layouts are unnecessarily strict about anchor usage,QTBUG-89357,309613,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,qt.team.quick.subscriptions,w00t,w00t,10 Dec '20 10:42,15 Dec '20 14:55,18 Feb '21 09:41,,5.15,,,,,,,,,,,,,,,,,,,,,,Quick: Layouts,,,,0,,,,"Layouts presently restrict any use of anchors by children, with the following message: ""Detected anchors on an item that is managed by a layout. This is undefined behaviour; use Layout.alignment instead""

While I can understand that such a warning makes sense, it is overly strict, and (particularly in the case of 'baseline', which does not have an appropriate replacement in 'alignment' terms), restrictive.

I think that the more correct thing to do would be something like QQuickAnchorsPrivate::checkHValid: check that the set anchor ""directions"" do not conflict with the layout's settings.

See the code below for an example.

 
{code:java}
import QtQuick 2.6
import QtQuick.Layouts 1.2

Item {
    RowLayout {
        Rectangle {
            id: marker
            width: 10
            height: 10
            color: ""red""
        }

        Text {
            anchors.baseline: marker.verticalCenter
            text: ""Hello, world""
        }
    }
}
{code}
 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0pzxz:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"10 Dec '20 11:05;mitch_curtis;{quote}
While I can understand that such a warning makes sense, it is overly strict, and (particularly in the case of 'baseline', which does not have an appropriate replacement in 'alignment' terms), restrictive.
{quote}
This implies there are other cases where it is overly strict besides baseline. Can you please share an example of such a case?","10 Dec '20 11:08;mitch_curtis;FYI, there is some (possibly) relevant discussion on the change that added it:

https://codereview.qt-project.org/c/qt/qtdeclarative/+/212535","15 Dec '20 14:55;kkohne;Took the liberty to make this a suggestion, because the code is working as intended (even though one can argue it should work differently)",,,,,,,,,,,,,,,,,,,
Change or document interaction between sizePolicy and minimum/maximum size,QTBUG-74856,276416,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,qt.team.quick.subscriptions,jochen.ulrich_cm,jochen.ulrich_cm,01 Apr '19 08:21,08 Dec '20 17:06,18 Feb '21 09:41,,5.12.0,5.9.6,,,,,,,,,,,,,,,,,,,,,Widgets: Layout,,,,0,Reported_by_support_standard,,,"When a widget inside a layout has {{sizePolicy}} set to {{Fixed}} but also has set a {{minimumSize}} which is smaller than the size hint, the widget behaves like having the size policy set to {{Maximum}}, meaning the widget can be shrunk down from the size hint to the minimum size.

I guess analogous behavior can be observed with {{maximumSize}}.
h4. Expected Behavior

The widget has a size fixed to the size hint unless the size hint is smaller than the {{minimumSize}} in which case the size is fixed to the {{minimumSize}}.
h4. Suggestion

Either change the behavior as described above (see expected behavior) or document that having a minimum or maximum size makes the widget behave different from its {{sizePolicy}}.","MacOS 10.14

XCode 10.1",,,,,,,,,,,,,,,,,,"01 Apr '19 08:23;jochen.ulrich_cm;Form.ui;https://bugreports.qt.io/secure/attachment/82534/Form.ui",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,macOS,,,,,,"0|i0kt7r:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add itemToScene transformation to QQuickItem as property,QTBUG-85126,300690,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,qt.team.quick.subscriptions,frederikgrünzahn,frederikgrünzahn,18 Jun '20 12:57,04 Dec '20 06:54,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Quick: Other,,,,0,,,,"Dear Qt Developers,

i am developer of a larger system with QML and i found rough edges, I will post suggestions as my time allows:

In scene graphs system, as found in games or even the older GraphicsFramework it is common to access the localToScene transformation of an item (aka world orientation), that is position, rotation relative to common reference point (world coordinates) - not so in QtQuick. Here it is not exposed from internal rendering scenegraph. Why ?

Common use case:

Wiring of two items/subitems with spline ""cables"" requires to track the world position of that item. Ofc. mapToItem function exists, but they lack a signal, when the hierarchy changes.

Suggestion: expose transformation to QML/C++, post transformationChanged signal, when hierarchy was updated.

Current workaround: Install listeners in all parent items of the one being tracked -> cumbersome, not performant.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0ol0f:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Provide a means to get the system macOS font with monospaced digits,QTBUG-88760,308391,Suggestion,Open,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,esabraha,andysh,andysh,23 Nov '20 11:42,30 Nov '20 16:46,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,GUI: Font handling,,,,2,Reported_by_support_standard,,,"On macOS the Cocoa API provides a means to get the system font but with monospaced digits - https://developer.apple.com/documentation/appkit/nsfont/1528205-monospaceddigitsystemfontofsize?language=objc - which stops it from appearing to change the position of the digits when updating from 1 to 2 for instance. This would make it easier for numbers to be displayed which on Windows do have the same width even with proportional width fonts. A monospaced font is not ideal here because it is used for everything and not just digits and therefore it would look out of place and considerably different to other applications on the same setup.

There is more information about the problem in general with non monospaced digits here - https://blog.usejournal.com/proportional-vs-monospaced-numbers-when-to-use-which-one-in-order-to-avoid-wiggling-labels-e31b1c83e4d0 - which show cases the problems more clearly.",,,,,,,,,,,,,,,,,,,"30 Nov '20 16:46;ls@4js.com;number_width_differs.png;https://bugreports.qt.io/secure/attachment/100830/number_width_differs.png","30 Nov '20 16:43;ls@4js.com;qt5table.zip;https://bugreports.qt.io/secure/attachment/100829/qt5table.zip","30 Nov '20 16:32;ls@4js.com;wigglingDigits.zip;https://bugreports.qt.io/secure/attachment/100828/wigglingDigits.zip",,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,macOS,,,,,,"0|i0psx3:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"30 Nov '20 16:35;ls@4js.com;For those stumbling across that issue on their macs: attached program  [^wigglingDigits.zip]  sorts out the scalable proportional fonts available on the system into the fonts having equal width digits vs the fonts having wiggling digits. For example ""Lucida Grande"" or ""Helvetica Neue"" fortunately still have digits with equal width by default. But one never nows what the font designers of Mac OS will plan in addition ...
One can see in this program  [^qt5table.zip] that even the simplest numeric table column will look terribly unaligned when having a font using non equal width digits (the position of the decimal point is changing...)
 !number_width_differs.png|thumbnail! 
",,,,,,,,,,,,,,,,,,,,,
QCoreApplication::installTranslator without LanguageChange Event,QTBUG-85891,302456,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,cnn,domezuk,domezuk,05 Aug '20 08:22,24 Nov '20 14:18,18 Feb '21 09:41,,5.15.0,6.0.0 Alpha,,,,,,,,,,,,,,,,,,,,,Core: Locales (i18n),Quick: Other,Widgets: Widgets and Dialogs,,1,,,,"Installing or removing a QTranslator generates a LanguageChange event for the QCoreApplication instance. A QApplication instance will propagate the event to all toplevel widgets.

Using the translator functionality within QML/Javascript modules and functions that are loaded dynamically the event is not necessary (the retranslateUi function for the new object is called anyway). The event bring a lot of degradation when using dynamics loaded modules that contains similar translation. In order to prevent translation conflicts, prior to call a QML/Javascript function, it necessary to install the translator and remove it after it is used.

The installTranslator and removeTranslator functions use private members so it is not possible to modify the behavior by creating a derived class. In order to prevent the event a workaround is needed, consisting in setting that the nextLanguageChangeEvent should not be considered, and modify the event member function to do so.

I suggest to modify the API of the member functions, by adding a parameter that let the developer decide if the LanguageChange event should be send or not 
 For compatibility the parameters should default to true.

bool QCoreApplication::installTranslator(QTranslator *translationFile, bool changeEvent = true)

bool QCoreApplication::removeTranslator(QTranslator *translationFile, bool changeEvent = true)

A further improvement could be to add a system that prevent translations defined in a module to interfere with other translations. Currently when two Translator contain the same context the last installed overwrite the previous one. That could easily bring translation conflicts when using modules created by different developers.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,mkalinow,All,,,,,,"0|i0ovcv:",9223372036854775807,9223372036854775807,,,,ablasche,,,,,,,,,,"05 Aug '20 19:22;thiago;How often are you installing translators that this is appearing as a performance degradation?","06 Aug '20 06:36;domezuk;Within our software, the QJSEngine is used to allow users to create their own extensions for printing, exporting, calculation, etc. We dynamically load the scripts and when doing it, we also need to install the translator specific for the extension. When using the external script to do calculations, the installTranslator can be called many times with a negative impact in performance. 
 The current Translator management is not well suited for using the QJSEngine  to create extensions for the software. 
 Here are some improvements that would be necessary to better support application's user's defined script:
 # Disable LanguageEvent when installing/removing a translator.
 # List of installed Translator
 # Translator mechanism that allows to create a compartment. An installed Translator will only be used for a specific module and does not have effect on others part of the program (that may have the same context).
 (better solution for point 1) In this case when installing a Translator, the LanguageChange event should only have effect on the concerned elements and not impact on all the interface.",,,,,,,,,,,,,,,,,,,,
MSVC: Embed debug visualizer definitions in PDB,QTBUG-83396,296905,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,qtbuildsystem,mecfc,mecfc,08 Apr '20 13:24,23 Nov '20 11:57,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Build System,,,,1,,,,"The MSVC linker allows [embedding debugger visualization definitions (.natvis files) into output PDB's|https://docs.microsoft.com/en-us/cpp/build/reference/natvis-add-natvis-to-pdb]. Each Qt module could include its own visualizer file(s) to be embedded in the PDB generated by a debug build of that module. Debugging Qt applications in Visual Studio using these natvis-enhanced PDB's would then allow custom visualization of Qt types in the ""Watch"" window, instead of the default ""raw"" view. This would be possible just by linking to the Qt libraries. No additional extension/add-in would then be required.

(In what concerns the [Qt Visual Studio Tools|https://bugreports.qt.io/projects/QTVSADDINBUG] extension, having the .natvis files embedded in the Qt libraries eliminates the risk that the .natvis installed by the extension and the types in the Qt libraries are out of sync.)",,,,,,,,,,,,,,,QTVSADDINBUG-743,QTCREATORBUG-21710,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Windows,WinRT,,,,,"0|i0nzg7:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"21 Apr '20 08:43;kkohne;This sounds sensible to me. Maybe something for 5.15.1?

[~davschul], would Qt Creator CDB integration also benefit from this?","22 Apr '20 05:15;davschul;Partially I would guess. I haven't checked yet whether cdb has natvis support. But if that's the case, everything that has no explicit entry in our qttypes.py dumper script would benefit from it.","22 Apr '20 06:39;jbornema;It might just work out of the box AFAIU [1].
The main question is whether the python dumpers collide with this. There's no way around trying it out, I guess. :-D

[1] https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/native-debugger-objects-in-natvis","22 Apr '20 06:53;kkohne;First step is arguably to make it a configure argument. We can then still flip the switch for the official releases after testing.
","23 Nov '20 11:30;owolff;I had a look at embedding the natvis files into Qt's pdb files and ran into [https://developercommunity.visualstudio.com/content/problem/234531/natvis-in-pdb-is-only-applied-to-associated-dll-vs.html] (there is a ""Show comments"" button on that page). Visualizers that are embedded into modules can only be used inside these modules. So Qt's visualizers can only be used if debugging Qt itself if they are embedded like that.

I guess we have 2 options now. Both would improve the situation as we would have Visual Studio visualizers that are specific to Qt versions. Common ground: We bundle Qt's natvis files into Qt installations
1) We could automatically link these natvis files into user code that uses the according Qt module when in debug. 
    - Can we make sure that they are always linked or can we at least cover most use cases? cmake, qmake, ...?
2) We could try to dynamically add the natvis' information to the IDE in use.
    - How is that done in Visual Studio? How much work is that for Creator and is it worth the effort?","23 Nov '20 11:54;mecfc;Option 1 seems cleaner but has a couple of drawbacks:
 * Same .natvis files replicated all over
 * Stepping into a module not linked with the Qt .natvis (e.g. third-party provided with a void pointer to a Qt type) will break debug visualization

Option 2 will have a visible impact in users' systems. According to the [debugger documentation|https://docs.microsoft.com/en-us/visualstudio/debugger/create-custom-views-of-native-objects?view=vs-2019#BKMK_natvis_location], it could be done in one of the following ways:
 # Add the .natvis files to the user's project (e.g. *{{qmake -tp vc}}* generates corresponding items in the .vcxproj)
 # Create a VS extension that the user can install containing the .natvis for a particular version of Qt, i.e. every version of Qt would have its own .vsix package; the user would then need to manually install it (the Qt installer/maintenance tool could provide that option for pre-built versions)
 # As part of the installation of Qt, copy .natvis files to the VS ""magical"" location (e.g. {{%USERPROFILE%\Documents\Visual Studio 2019\Visualizers}})","23 Nov '20 11:57;owolff;One main target is to get rid of the ""version mess"" we are having right now. I think neither 2.2 nor 2.3 really help with that issue :) We need natvis files per Qt version, so I think if we go with Option 2, the natvis file somehow should be added to the project/solutiion",,,,,,,,,,,,,,,
qtserialbus many compile errors,QTBUG-85609,301853,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,qtbuildsystem,psnarf,psnarf,15 Jul '20 20:22,16 Nov '20 14:27,18 Feb '21 09:41,,6.0.0,,,,,,,,,,,,,,,,,,,,,,Build System,,,,0,,,,"Linux g++ v10.1

I know qtserialbus will be going away soon, since both the serial and parallel ports are replaced by USB3, but meantime, git clone as of this date fails to compile.

qt5/qtserialbus/src/serialbus/qmodbusclient_p.h missing '#include <climits>': line 45 refers to INT_MIN which is defined in climits.

qt5/qtserialbus/src/serialbus/qmodbuspdu.cpp:442:89: warning: ‘constexpr QChar::QChar(char)’ is deprecated: Use fromUtf8, QStringLiteral, or QLatin1String [-Wdeprecated-declarations]

qt5/qtserialbus/src/serialbus/qmodbustcpclient_p.h:90:93: error: no matching function for call to ‘QOverload<QAbstractSocket::SocketError>::of(QAbstractSocket::SocketError(QAbstractSocket::*)() const)’

qt5/build/qtbase/include/QtCore/../../../../qtbase/src/corelib/global/qglobal.h:1216:34: note: candidate: ‘template<class R, class T> static constexpr decltype (ptr) QNonConstOverload<Args>::of(R (T::*)(Args ...)) [with R = R; T = T; Args = \{QAbstractSocket::SocketError}]’

note: template argument deduction/substitution failed:
In file included from qt5/qtserialbus/src/serialbus/qmodbustcpclient.cpp:38:
qt5/qtserialbus/src/serialbus/qmodbustcpclient_p.h:90:93: note: types‘R (T::)(QAbstractSocket::SocketError)’ and ‘QAbstractSocket::SocketError (QAbstractSocket::)() const’ have incompatible cv-qualifiers
QOverload<QAbstractSocket::SocketError>::of(&QAbstractSocket::error) 


 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0oruf:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"15 Jul '20 22:41;psnarf;Sorry, I forgot about the CAN bus used in various vehicles. That's not going away any time soon. Guess I'm desktop-centric.

 ","16 Jul '20 07:21;jbornema;This module needs porting to Qt6. Or at least the deprecation warnings must be turned off for the module.",,,,,,,,,,,,,,,,,,,,
QObject: Add option to warn for duplicated connections,QTBUG-88454,307819,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,thiago,mallers,mallers,12 Nov '20 10:20,15 Nov '20 00:35,18 Feb '21 09:41,,5.15.1,,,,,,,,,,,,,,,,,,,,,,Core: Object Model,,,,0,,,,"Add getenv() to QObjectPrivate::connectImpl() to activate logging of duplicated connections like ""const bool isLogDuplicatedConnection = qgetenv(""CORE_CONN_SHOW_DUPLICATED"");"".

The option could force a *Qt::UniqueConnection* type when not already set, then check as normal for existing connection - but only log a duplicated connection w/o returning - i.e. break out the ""while (c2)"" and continue w/ creating a new connection.

_Note: Or add a new logging category for this purpose._ ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0ppn3:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"13 Nov '20 12:50;mallers;See a working prototype example:
{code:java}
 QMetaObject::Connection QObjectPrivate::connectImpl(const QObject *sender, int signal_index,
                                             const QObject *receiver, void **slot,
                                             QtPrivate::QSlotObjectBase *slotObj, Qt::ConnectionType type,
                                             const int *types, const QMetaObject *senderMetaObject)
{
    if (!sender || !receiver || !slotObj || !senderMetaObject) {
        const char *senderString = sender ? sender->metaObject()->className()
                                          : senderMetaObject ? senderMetaObject->className()
                                          : ""Unknown"";
        const char *receiverString = receiver ? receiver->metaObject()->className()
                                              : ""Unknown"";
        qWarning(""QObject::connect(%s, %s): invalid nullptr parameter"", senderString, receiverString);
        if (slotObj)
            slotObj->destroyIfLastRef();
        return QMetaObject::Connection();
    }

    const bool isShowDuplicated(qEnvironmentVariableIsSet(""QT_CORE_CONN_SHOW_DUPLICATED"") && !(type & Qt::UniqueConnection));
    if (isShowDuplicated)
        type = static_cast<Qt::ConnectionType>(type | Qt::UniqueConnection);

    QObject* s = const_cast<QObject*>(sender);    
    QObject *r = const_cast<QObject *>(receiver);    
    QOrderedMutexLocker locker(signalSlotLock(sender),
                               signalSlotLock(receiver));
    if (type & Qt::UniqueConnection && slot && QObjectPrivate::get(s)->connections.loadRelaxed()) {
        QObjectPrivate::ConnectionData *connections = QObjectPrivate::get(s)->connections.loadRelaxed();
        if (connections->signalVectorCount() > signal_index) {
            const QObjectPrivate::Connection *c2 = connections->signalVector.loadRelaxed()->at(signal_index).first.loadRelaxed();            
            while (c2) {
                if (c2->receiver.loadRelaxed() == receiver && c2->isSlotObject && c2->slotObj->compare(slot)) {
                    if (isShowDuplicated)
                    {
                        const char* senderString = sender->metaObject()->className();
                        const char* receiverString = receiver->metaObject()->className();
                        QMetaMethod method = QMetaObjectPrivate::signal(senderMetaObject, signal_index);
                        qWarning(""QObject::connect(%s::%s, %s): duplicated connection"", senderString,
                            method.methodSignature().constData(),
                            receiverString);
                        break;
                    }
                    slotObj->destroyIfLastRef();
                    return QMetaObject::Connection();
                }
                c2 = c2->nextConnectionList.loadRelaxed();
            }
        }
        type = static_cast<Qt::ConnectionType>(type ^ Qt::UniqueConnection);
    }    std::unique_ptr<QObjectPrivate::Connection> c{new QObjectPrivate::Connection };
  c->sender = s;
    c->signal_index = signal_index;
    QThreadData *td = r->d_func()->threadData;
    td->ref();
    c->receiverThreadData.storeRelaxed(td);
    c->receiver.storeRelaxed(r);
    c->slotObj = slotObj;
    c->connectionType = type;
    c->isSlotObject = true;
    if (types) {
        c->argumentTypes.storeRelaxed(types);
        c->ownArgumentTypes = false;
    }    QObjectPrivate::get(s)->addConnection(signal_index, c.get());
    QMetaObject::Connection ret(c.release());
    locker.unlock();    QMetaMethod method = QMetaObjectPrivate::signal(senderMetaObject, signal_index);
    Q_ASSERT(method.isValid());
    s->connectNotify(method);    return ret;
}
{code}","13 Nov '20 16:13;thiago;Do you want to contribute this to Qt? It will be much faster to review it there and get it accepted, because I have no plans on working on this any time soon (maybe [~ogoffart] could be convinced).","14 Nov '20 09:28;mallers;I am not prepared to contribute.

Creating unexpected duplicated Connections can leak a lot of Memory. Our stress test was running for 160h w/ continously creating unwanted duplicate Connections w/ additionally bad Impact on the overall Performance.

Please add my request as soon as possible to help other developers checking very fast if unexpected duplications take place.","15 Nov '20 00:35;thiago;Expect it at the earliest in 2022. Probably never.",,,,,,,,,,,,,,,,,,
Add QSettings XML storage format compatible with Android SharedPreferences,QTBUG-86235,303322,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,rampe,morte,morte,25 Aug '20 07:41,09 Nov '20 09:44,18 Feb '21 09:41,,5.15,6.0,,,,,,,,,,,,,,,,,,,,6.0.0,Core: I/O,Extras: Android,,,2,,,,"QSettings should support SharedPreferences compatible XML storage format to ease integration between native C++/Qt and Java application components (QSettings::XmlFormat that can be QSettings::NativeFormat on Android)

Settings values set at C++/Qt side via QSettings could be accessible at Java side via SharedPreferences and vice versa.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Android,,,,,,"0|i0dymn:y8w",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Create wrappers to handle Java ArrayList for QStringList or even QList,QTBUG-84128,298618,Suggestion,Open,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,assam,assam,assam,11 May '20 11:04,09 Nov '20 09:42,18 Feb '21 09:41,,6.0,,,,,,,,,,,,,,,,,,,,,,Extras: Android,,,,1,,,,"For convenience, it makes sense to add wrappers to handle QStringList and Java ArrayList, and potentially ArrayList of generic objects.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0ee29:9",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Support more convenient variable assignments in configure ,QTBUG-88210,307442,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,qtbuildsystem,jbornema,jbornema,05 Nov '20 12:25,05 Nov '20 12:42,18 Feb '21 09:41,,6.0.0 Beta2,,,,,,,,,,,,,,,,,,,,,,Build System: CMake,,,,0,cmake_qt6,,,"The qmake-based configure can take variable assignments for
*  libraries, like OPENSSL_INCDIR=/where/ever
* variables prefixed with QMAKE_

For the CMake-based configure we could support setting CMake variables like this
{noformat}
configure ... CMAKE_INTERPROCEDURAL_OPTIMIZATION=ON
{noformat}

in addition to the of the more explicit way that's already possible

{noformat}
configure .. -- -DCMAKE_INTERPROCEDURAL_OPTIMIZATION=ON
{noformat}

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,QTBUG-80897,9223372036854775807,,,All,,,,,,"0|i0pndj:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add CMake facility to read .yaml files,QTBUG-88112,307232,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,qtbuildsystem,jbornema,jbornema,02 Nov '20 15:05,02 Nov '20 15:11,18 Feb '21 09:41,,6.0.0 Beta2,,,,,,,,,,,,,,,,,,,,,,Build System: CMake,,,,0,,,,... to read dependencies.yaml,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,QTBUG-77376,9223372036854775807,,,All,,,,,,"0|i0pm4f:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Enable -Wzero-as-null-pointer-constant when building Qt,QTBUG-87749,306546,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,qtbuildsystem,peppe,peppe,21 Oct '20 07:52,26 Oct '20 14:19,18 Feb '21 09:41,,6.0,,,,,,,,,,,,,,,,,,,,,,Build System,,,,0,,,,"qttools, qtdeclarative and qt3d had recently build failures due to 0 used as nullptr; nobody noticed until a few signatures changed.

The warning in question should be enabled (as error) when building all of Qt, not just during headersclean.

For Windows, see QTBUG-87713.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0pi2n:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"23 Oct '20 20:35;liaqi;Is it because Ubuntu 20.04 got Insignificant which has warnings-as-errors?","26 Oct '20 14:19;kkohne;Needs to be added to QtInternalTargets.cmake",,,,,,,,,,,,,,,,,,,,
Add configure option to create CMake trace files,QTBUG-87814,306679,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,qtbuildsystem,jbornema,jbornema,23 Oct '20 06:53,26 Oct '20 14:13,18 Feb '21 09:41,,6.0.0 Beta1,,,,,,,,,,,,,,,,,,,,,,Build System: CMake,,,,0,,,,"It would be convenient to have a configure option that enables trace files for
* the main cmake run 
* for every cmake script we're running with cmake -P (QtProcessConfigureArgs.cmake, QtFinishPrlFile.cmake, ...)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0piv3:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Implement accessibility for subclasses of QAbstractItemView,QTBUG-87645,306342,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,smd,shoogle,shoogle,15 Oct '20 19:07,16 Oct '20 08:45,18 Feb '21 09:41,,5.15.1,,,,,,,,,,,,,,,,,,,,,,GUI: Accessibility (a11y),Widgets: Itemviews,,,0,,,,"Qt provides accessible interfaces for its built-in item views:
 * QAccessibleTable provides accessibility for QListView and QTableView
 * QAccessibleTree provides accessibility QTreeView

Unfortunately, no accessibility is provided for custom item views (i.e. user-created classes that derive from QAbstractItemView) despite the fact that the model structure is unchanged.

 Instead, Qt users are forced to implement their own accessibility by deriving from QAccessibleInterface, QAccessibleTableInterface, and friends. This requires a lot of effort to get right, and the reality is that most people won't bother to do it. This means most custom views are likely to be inaccessible.

If a Qt user does go to the effort of creating a custom accessibility interface for a custom item view, the end result is likely to be very similar to QAccessibleTable or QAccessibleTree. In fact, I have tried using QAccessibleTable as an interface for the [Pie Chart Example|https://doc.qt.io/qt-5/qtwidgets-itemviews-chart-example.html] (which derrives from QAbstractItemView) and found accessibility works perfectly well! However, I had to compile QAccessibleTable myself since it is not part of the public API.

 This problem can be resolved by either (or both!) of the following:
 # Install QAccessibleTable as the default accessible interface for all subclasses of QAbstractItemView.
 # Add QAccessibleTable and QAccessibleTree to the public API so that Qt users can install them manually in custom interface factory functions.

This approach might not work for all item view, as some might be very complicated or have other requirements. In those cases it will still be necessary for Qt users to implement accessibity the hard way (inherit from QAccessibleInterface, etc.), but for the majority if cases it should be good enough to borrow QAccessibleTable, and I think we can all agree that some accessibility is better than none!","All environments on desktop platforms (Windows, macOS, Linux).",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0pgvb:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
API to query objects inside a 3D volume,QTBUG-83721,297556,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,qt.team.graphics.and.multimedia,pakerane,pakerane,23 Apr '20 08:50,16 Oct '20 08:29,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,6.x,Quick: 3D,,,,0,,,,A public API that allows user to define a 3D volume and get a list of objects inside that volume would be useful in some use cases.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,javihria,,,,,,,"0|hzzyrb:5r1iz9",9223372036854775807,9223372036854775807,,,,janichol,,,,,,,,8.0,,,,,,,,,,,,,,,,,,,,,,,
Allow single key shortcuts without modifiers with input methods,QTBUG-81233,291216,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,vestbo,poikelin,poikelin,08 Jan '20 10:09,15 Oct '20 12:11,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,GUI: Complex Input methods,QPA,QPA: X11/XCB,,0,Reported_by_support_standard,,,"Currently single key shortcuts don't work with complex input methods with xcb + ibus at least. The key event is pushed directly to ibus. This could probably be changed so that it tries for shortcut first and if that is not accepted, sends it to ibus.",,,,,,,,,,,,,,,,,,,"12 May '20 06:20;dwlee.hancom;main.cpp;https://bugreports.qt.io/secure/attachment/94697/main.cpp","12 May '20 06:20;dwlee.hancom;shortcut-2020-01-07_15.10.35.mp4;https://bugreports.qt.io/secure/attachment/94698/shortcut-2020-01-07_15.10.35.mp4",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Linux/X11,,,,,,"0|i0n5fz:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"31 Jan '20 07:39;liaqi;Is it related with window manager?","31 Jan '20 11:54;poikelin;no","11 Mar '20 06:18;dwlee.hancom;debian10 and fedora31

xcb + ibus (This can be fixed in a workaround using the QAbstractNativeEventFilter)

wayland + ibus (QAbstractNativeEventFilter does not work in wayland)

The same occurs when the input is not in English. 

(It will also occur in platform plugins, not in xcb / wayland)

 

qtbase/src/plugins/platforms/xcb/qxcbkeyboard.cpp

QXcbKeyboard::handleKeyEvent()

qtwayland/src/client/qwaylandinputdevice.cpp

QWaylandInputDevice::Keyboard::handleKey(or static sendKey of other version)

 

*pseudocode:*

QWindow *window = targetWindow->window();

QWindowSystemInterfacePrivate::KeyEvent keyEvent(window, time, *QEvent::ShortcutOverride*, qtcode, modifiers,

        code, sym, state, text, m_isAutoRepeat);

QGuiApplicationPrivate::processWindowSystemEvent(&keyEvent);

if (keyEvent.eventAccepted) {

    return;

}

 

{color:#505f79}bool filtered = false;{color}

{color:#505f79}if (auto inputContext = QGuiApplicationPrivate::platformIntegration()->inputContext()) {{color}

{color:#505f79}    QKeyEvent event(type, qtcode, modifiers, code, sym, state, text, m_isAutoRepeat, text.size());{color}

{color:#505f79}    event.setTimestamp(time);{color}

{color:#505f79}    filtered = inputContext->filterEvent(&event);{color}

{color:#505f79}}{color}

 

I think, Create a QKeyEvent(QEvent::ShortcutOverride) and send it before processing on platform inputcontext.

It seems to be able to handle it using Qwidget's event() or application's eventFilter. It would be nice if it applies to qt sources.

 

 

 

 

 

 

 

 ","12 Mar '20 09:09;liaqi;So this feature works fine on other applications? for example, gtk apps.","14 Oct '20 05:43;dwlee.hancom;[~poikelin] 

Is there any progress?",,,,,,,,,,,,,,,,,
Add support for Bluetooth Mesh,QTBUG-87319,305870,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,ablasche,andysh,andysh,09 Oct '20 14:30,14 Oct '20 09:46,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Connectivity: Bluetooth,,,,0,Reported_by_support_standard,,,"Add support for Bluetooth Mesh, this is available in Bluez on Linux at least",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0pe2v:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add benchmark results to JUnit XML,QTBUG-87377,305953,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,macadder,boernsen,boernsen,12 Oct '20 11:25,12 Oct '20 12:38,18 Feb '21 09:41,,5.15.0,,,,,,,,,,,,,,,,,,,,,,Testing: qtestlib,,,,0,,,,"The ""-xml"" output of QTest contains benchmark results as expected. However, the ""-junitxml"" output is lacking them.

This prevents easy integration of the benchmark results into popular CI/Build-Server software such as Jenkins or Atlassian Bamboo.

The actual issue is that there is no specific entry for that in the specification of JUnit XML ([https://llg.cubic.org/docs/junit]), so a work around needs to be found.

See QTBUG-87318 for a test project and more comments. It only fixed the missing durations, but not the missing benchmark results.",,,,,,,,,,,,,,,QTBUG-87318,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0pelb:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"12 Oct '20 11:36;boernsen;Maybe, an additional test case with something like ""_benchmarkResult"" in its name could be added for each benchmark test containing the actual benchmark time whereas the original test case correctly keeps the durations:

 
{code:java}
❯ ./QTBUG-87318 -junitxml
<?xml version=""1.0"" encoding=""UTF-8"" ?>
<testsuite name=""Test"" timestamp=""2020&#x002D;10&#x002D;12T11:01:57+02:00"" tests=""4"" failures=""0"" errors=""0"" time=""0.202591"">
  <properties>
    <property name=""QTestVersion"" value=""6.0.0""/>
    <property name=""QtVersion"" value=""6.0.0""/>
    <property name=""QtBuild"" value=""Qt 6.0.0 (x86_64&#x002D;little_endian&#x002D;lp64 shared (dynamic) release build; by Clang 12.0.0 (clang&#x002D;1200.0.32.2) (Apple))""/>
  </properties>
  <testcase name=""initTestCase"" result=""pass"" time=""0.000149""/>
  <testcase name=""compare"" result=""pass"" time=""0.000081""/>
  <testcase name=""benchmark"" result=""pass"" time=""0.202080"">
  <testcase name=""benchmark_benchmarkResult"" result=""pass"" time=""0.100000"">
  </testcase>
  <testcase name=""cleanupTestCase"" result=""pass"" time=""0.000001""/>
  <system-err/>
</testsuite>
{code}
Note that the test case name here already is ""benchmark"", so the general idea is to have a name like: <test case name>_benchmarkResult","12 Oct '20 12:26;boernsen;Alternatively, the benchmark metric could be considered as name suffix, e.g. <test case name>_WalltimeMilliseconds",,,,,,,,,,,,,,,,,,,,
Feature Request: functionality to change Tabs for Tabbed QDockWidgets like normal tabWidget,QTBUG-87251,305698,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,qt.team.quick.subscriptions,shmittal,shmittal,07 Oct '20 11:17,07 Oct '20 11:17,18 Feb '21 09:41,,5.15.1,,,,,,,,,,,,,,,,,,,,,,Widgets: Main Window,,,,0,Reported_by_support_standard,,,"Currently, If QdockWidgets are tabbed, user cannot change Tabs by pressing CTRL+Tab like it is with QtabWidget. 
It would be better if similar functionality can be provided for dockWidgets too.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0pd27:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Feature request: Chart Legends should be rotated when aligned left/right to chart,QTBUG-87175,305547,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,e0348803,shmittal,shmittal,05 Oct '20 14:47,05 Oct '20 14:48,18 Feb '21 09:41,,5.15.1,,,,,,,,,,,,,,,,,,,,,,Charts,,,,0,Reported_by_support_standard,,,"When legend of chart is placed on left or right of the chart, it is better to rotate the legend text by 90 degrees to make it vertical. 
chart->legend()->setRotation(90) does not help, text is still horizontal. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0pc6f:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Request: QMediaPlayer + QAudioProbe support for AV Foundation/macOS ,QTBUG-87142,305488,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,valentyn.doroshchuk,j9ac9k,j9ac9k,04 Oct '20 04:17,05 Oct '20 09:07,18 Feb '21 09:41,,5.15,,,,,,,,,,,,,,,,,,,,,,Multimedia,,,,0,,,,"Hello Qt team,

This request is part of the Multimedia component.

 

Setting the source of QAudioProbe to a QMediaPlayer will always return false on macOS.  Looking at the most recent multimedia backends page here: [https://wiki.qt.io/Qt_5.13_Multimedia_Backends] it shows that Audio Probe for Media Player functionality is not supported on AV Foundation platforms.

 

I don't know what it would take to support that functionality, but that would be greatly appreciated if it could made to work alongside the Windows and Unix counterparts.  My use case is creating a simple media player and plotting the waveform that is currently in the buffer, as well as doing some other signal processing for display purposes.

 

Doing some quick searches through the Apple API, there is an AVAudioBuffer NSObject here, although I don't know what work would be involved in tying in the Qt support for it: [https://developer.apple.com/documentation/avfoundation/avaudiobuffer]

 

Thanks for your work!",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,iOS/tvOS/watchOS,macOS,,,,,"0|i0pbv3:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Why is it not possible to specify ""No Click Through"" for Mac/OSX anymore? ",QTBUG-86610,304412,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,qt.team.quick.subscriptions,cculianu,cculianu,14 Sep '20 03:49,05 Oct '20 09:06,18 Feb '21 09:41,,5.15.1,,,,,,,,,,,,,,,,,,,,,,Widgets: Widgets and Dialogs,,,,0,,,,"So there is some history here.  See: https://bugreports.qt.io/browse/QTBUG-41126

The short story is Qt used to have ""WA_MacNoClickThrough"", which was then removed, then it was added again some time ago. then removed again.
h3. Why does this matter? 

The problem with removing this attribute it is that macOS by default has all Windows use ""no click through"". So the inability to specify this makes it hard to make a truly native macOS app, for one.

Moreover, for some applications this behavior is very much desired and crucial.
h3. My use-case:

I have developed a movie player using Qt (something that works a bit like VLC). The player has the capability of toggling _pause/play_ if the user clicks on the video in the window (sort of standard functionality for all movie players). If the app is not the foreground app, however, I don't want users clicking on the window to automatically pause/play the video!

I ended up having to do all sorts of ugly hacks and workarounds to get this working properly using various Qt events.  That didn't always work as expected and was complex.  I threw that away and ended up ""swizzling"" or ""monkey patching"" the QNSView class to change the behavior of Objective-C method: 
 * {{(BOOL) acceptsFirstMouse:}}

 

{{As you can imagine – this is less than ideal.  I would prefer to just be able to specify WA_MacNoClickThrough.}}

{{Please bring back *WA_MacNoClickThrough*!!}}

 ","macOS, Qt 5.15.1.  But this problem exists on all recent Qt versions.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,macOS,,,,,,"0|i0p5of:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Checking if a process is running on various platforms,QTBUG-87019,305241,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,cnn,simonplatten,simonplatten,29 Sep '20 05:44,29 Sep '20 06:50,18 Feb '21 09:41,,5.15.0 RC2,5.15.1,,,,,,,,,,,,,,,,,,,,,Core: Other,,,,0,,,,"I would like a multi-platform way of checking if a process is already running and if it is getting it's process id.

Presently this doesn't appear to be possible.","I'm working on an application that will run on all platforms including mac, linux and windows.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Android,Linux/Other display system,macOS,QNX,VxWorks,Windows,"0|i0pahz:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Compress Linux debug info packages with dwz,QTBUG-82681,294813,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,qtbuildsystem,annulen,annulen,05 Mar '20 01:27,27 Sep '20 10:59,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Build System,Packaging & Installer,,,0,,,,"In QTBUG-3934 we've got debug_info packages released for Linux. However, it's easy to find out that these debug_info packages are a few times larger, than corresponding MSVC debug_info packages, even if we look only at sizes of 7z archives.

It's possible to improve this situation by using dwz tool (https://fedoraproject.org/wiki/Features/DwarfCompressor)  which reduces size of DWARF files without altering their meaning. Applying dwz substantially reduces not only size of uncompressed files, but size of 7z archive as well

This commit adds dwz to provisioning of RHEL 7.6 where our Linux binaries are built, and also contains numbers of size savings which I've obtained for QtWebKit: https://codereview.qt-project.org/c/qt/qt5/+/292717

I can imagine 2 ways of implementing this: add support directly to build system, i.e. new {{configure}} option or feature and underlying qmake code, or run it separately on build artifacts.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0nouf:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"18 May '20 12:54;kkohne;I agree this would be nice to have. However, since we're in the middle of the switch to CMake it's certainly not high priority, and has to wait.","27 Sep '20 10:59;annulen;Also, dwz has multifile mode which optimizes a set of files and moves common information from them into separate file, thus reducing duplication. This mode is probably easier to use if dwz is run on build artifacts as a separate step.",,,,,,,,,,,,,,,,,,,,
Add option to set c++ header file suffix,QTBUG-86364,303771,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,docinfrastructure,poikelin,poikelin,01 Sep '20 07:27,14 Sep '20 12:19,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Build tools: qdoc,,,,0,Reported_by_support_standard,,,"qdoc generates include statement in each class documentation which simply uses the class name. However qdoc could also be used for projects which don't use extensionless header files like Qt does.

It is possible to workaround with {{\inheaderfile}} but this needs to be added for every class. It would be nice if there was a global option to automatically add some extension, for example .h, .hpp, .hxx, .hh etc.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0p26f:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Make QDoc output valid HTML,QTBUG-73026,272291,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,docinfrastructure,paulwicking,paulwicking,14 Jan '19 15:49,14 Sep '20 12:19,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Build tools: qdoc,,,,0,,,,"As noted [in review|https://codereview.qt-project.org/#/c/248563/23/tests/auto/qdoc/qdocfileoutput/expected_output/qdoctests-qdocfileoutput.html], QDoc generates HTML containing no longer valid attributes. QDoc should generate output that passes the [W3C validator|https://validator.w3.org].",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0k6hr:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Investigate possible QDoc + Qt Creator integration,QTBUG-74797,276282,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,docinfrastructure,paulwicking,paulwicking,28 Mar '19 13:11,14 Sep '20 12:19,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Build tools: qdoc,,,,0,DocWorkshop03.19,,,Is LSP viable route?,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0ksen:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"02 Apr '19 19:57;dourouc05_;Just for the record: what do you expect from such an integration? ","03 Apr '19 07:43;gbk;I think the idea was to let the user write a qdoc comment for a function or class and run qdoc on it immediately and display the comment as it would look in html. It would be based on this one: https://bugreports.qt.io/browse/QTBUG-74788?jql=labels%20%3D%20DocWorkshop03.19","03 Apr '19 13:40;paulwicking;That, and also possibly serve as basis for displaying docs as popup hints also in other IDEs. That's the intention behind asking if the language server protocol (LSP) is worth looking into.",,,,,,,,,,,,,,,,,,,
QDoc: Make autolinker resolve overloads from function signature and link correctly,QTBUG-71588,269323,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,docinfrastructure,paulwicking,paulwicking,05 Nov '18 15:54,14 Sep '20 12:19,18 Feb '21 09:41,,5.12.0,,,,,,,,,,,,,,,,,,,,,,Build tools: qdoc,,,,0,,,,"The autolinking feature in QDoc doesn't respect links to overloaded function signatures, and overload targets must therefore be linked using the {{\l}} command. However, in certain circumstances, this command fails to resolve the link target even when the autolinker does. I suggest we let the autolinker work with overloaded functions as well.

Discovered while working on QT3D_REGISTER_ASPECT in {{qt3d/src/core/aspects/qabstractaspect.cpp}}.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0jptz:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Mandatory details when using svg-files with Image Qml,QTBUG-86579,292729,Suggestion,Open,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,docteam,tero.pelkonen,tero.pelkonen,03 Feb '20 08:18,11 Sep '20 09:51,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Documentation,,,,0,reported_by_support_standard,,,"Qt support had a ticket where user was trying to use svg-file with Image Qml type.

In the documentation [https://doc.qt.io/qt-5/qml-qtquick-image.html] it was not mentioned that the pro-file should include QT += svg if svg files are used.

This could be included in the docs?",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0ndgv:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
WebAssembly: Way to style compositor window decorations,QTBUG-86539,304284,Suggestion,Open,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,sorvig,tero.pelkonen,tero.pelkonen,10 Sep '20 07:20,10 Sep '20 10:42,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,QPA,,,,1,reported_by_support_standard,,,"User informed Qt Support that they are using HighDpi and for example ""X"" for closing is shown blurry and Qt is shown as icon of the window. 

Currently there is no way to customize the Titlebar which seems to be drawn via Qt.

Could it be implemented so that this could be done via style?",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,WebAssembly,,,,,,"0|i0p4xb:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"10 Sep '20 10:42;sorvig;This does unfortunately not have high priority right now, but I think the request makes sense: If a Qt application running on the web wants to show a dialog window, then the application may be in a better position to draw suitable window decorations than Qt is.",,,,,,,,,,,,,,,,,,,,,
"New QStandardpaths::publicDirectory(); function",QTBUG-86106,302978,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,dfaure_kdab,ademmler,ademmler,18 Aug '20 12:03,09 Sep '20 12:44,18 Feb '21 09:41,,5.15.0 RC2,,,,,,,,,,,,,,,,,,,,,,Core: I/O,,,,0,,,,"I suggest to add a function to Qstandardpaths, to retrieve the shared directories also.
Mac OS X = /Users/Shared
Windows = C:\Users\public
Linux:  freedesktop.org probably has something for this.",All environments.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0oyev:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"18 Aug '20 14:49;thiago;David, what do you think?","24 Aug '20 09:21;dfaure_kdab;I don't know Windows and macOS very well... Are those two dirs about sharing with other users on the *same* machine? Do you know if there are API calls to get hold of them?

Indeed I don't really know of a Linux equivalent (other than /tmp, LOL). ~/public_html is rather about sharing with the whole world, assuming a webserver is running on the machine.","09 Sep '20 11:28;ademmler;You are right:

1. The purpose of these directories is to make data within the same host available to all users.

2. Some applications like some from Adobe, Microsoft, ColorLogic, basiccolor, Eizo use them for ""their job data"".

Job data means (images, pdfs etc. which is data all users might need to access directly from the finder/desktop.

There is of course %AppData% or ""ApplicationSupport"" directories available. But those are much harder to access - for the user.

3. Those shared directories have less complex user rights - hence this are ""writable locations"" - which is perfect for storing and sharing job data.","09 Sep '20 11:47;dfaure_kdab;Actually, there is indeed a Linux standard for this on freedesktop.org

xdg-user-dirs ([https://www.freedesktop.org/wiki/Software/xdg-user-dirs/] which is software, I can't pinpoint whether there's a spec) supports XDG_PUBLICSHARE_DIR in ~/.config/user-dirs.dirs, with a default of ~/Public ([https://cgit.freedesktop.org/xdg/xdg-user-dirs/tree/user-dirs.defaults])

([https://wiki.archlinux.org/index.php/XDG_user_directories] has more readable documentation)

We already parse user-dirs.dirs in qstandardpaths_unix.cpp, we could add QStandardPaths::writableLocation(QStandardPaths::PublicLocation) easily indeed.

But I need someone else to implement the Windows and mac support ;)","09 Sep '20 12:44;ademmler;Well I can try to implement this. But I am rather new to Qt itself ;)",,,,,,,,,,,,,,,,,
Can't remove an array from QSettings,QTBUG-85457,301506,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,,jordan,jordan,07 Jul '20 02:31,09 Sep '20 10:43,18 Feb '21 09:41,,5.12.8,,,,,,,,,,,,,,,,,,,,,,Core: I/O,,,,0,,,,"QSettings provides a way to write and read arrays, but no method exists to delete array entries. The only work-around is to read in all values, remove the index, and rewrite the array.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0oprb:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Have an example for Qt Remote Objects as this is now part of Qt 5.12 accessable in QtCreator,QTBUG-72112,270432,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,docteam,moellney,moellney,28 Nov '18 19:40,08 Sep '20 11:39,18 Feb '21 09:41,,5.12.0 RC,,,,,,,,,,,,,,,,,,,,,,Examples and Demos,Remote Objects,,,0,,,,"There seems to be no example for Qt Remote Object in Qt 5.12.

At least I could not find one in QtCreator 4.8 for the Qt 5.12 RC when looking in examples using the filter ""remote""

!image-2018-11-28-20-39-49-798.png|width=592,height=206!",,,,,,,,,,,,,,,,,,,"28 Nov '18 19:39;moellney;image-2018-11-28-20-39-49-798.png;https://bugreports.qt.io/secure/attachment/78617/image-2018-11-28-20-39-49-798.png",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0jw9z:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Adding SmartChef Webassembly demo,QTBUG-81635,291024,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,michelerossi,michelerossi,michelerossi,06 Jan '20 14:02,08 Sep '20 11:23,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Examples and Demos,QPA,,,1,,,,"I suggest to add smart Chef demo on our web page: [https://www.qt.io/qt-examples-for-webassembly]

here demo details: https://bugreports.qt.io/browse/UL-1630 

Here the source code of the application: [RELEASE |https://qtcompany.sharepoint.com/:f:/s/ProdMgmt/Ev0PXAJnNndOhVEYZyBaw5ABtBtrmbeVJZn9NbKD1kdbHA?e=8ykTQh]including MCU demo

*+WebAssembly+*
 # For the Webassembly application, please follow these instructions
 # The Webassembly package needs to be installed on webserver. Zip file is located here ([Download|https://veroltengineering-my.sharepoint.com/:u:/g/personal/ravi_dattatraya_verolt_com/EfdL9vpVw8xCqF3oM1b4fh4B8a6G59cqBwAAjyJmlrB4kQ?e=NOy1PQ]).

On the  local Webserver you will  need to add MIME
 # Instruction for Apache webserver

 # Extract content of zip to desired location on webserver
 # Enable Webassembly by updating MIME type under apache config mentioned below

                application/wasm     wasm",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,QTBUG-82936,9223372036854775807,,tpyssysa,WebAssembly,,,,,,"0|i0n4af:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"23 Jan '20 13:30;santtuahonen;Assigning back to Michele. Whoever did the demo can compile it for WebAssembly target, too. I am not needed for that.",,,,,,,,,,,,,,,,,,,,,
Improve the tabwidget qml example to make clicks on pages to function correctly,QTBUG-84551,299542,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,docteam,miikapernu,miikapernu,28 May '20 13:24,08 Sep '20 11:23,18 Feb '21 09:41,,5.15.0,,,,,,,,,,,,,,,,,,,,,,Examples and Demos,Quick: Widget,,,0,Reported_by_support_standard,,,"In the tabwidget example everything works fine as it is but if e.g. a Button is added to each ""page"" as a sibling to the Text items in main.qml the clicks will go to a button on one page only despite the correct button being drawn on top.

For reference see the attached modified version of the example. ",,,,,,,,,,,,,,,,,,,"28 May '20 13:26;miikapernu;qtbug84551.zip;https://bugreports.qt.io/secure/attachment/95136/qtbug84551.zip",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0oe9r:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Cannot dynamically remove or reorder QML ShapePaths in QML Shape,QTBUG-81515,291924,Suggestion,Open,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,ulherman,celandre,celandre,19 Jan '20 17:36,13 Aug '20 07:15,18 Feb '21 09:41,,5.11,5.12,5.13,5.14,,,,,,,,,,,,,,,,,,6.0,Quick: Other,,,,0,,,,"Hi,
For my project, I need to be able to add/remove QML ShapePaths to/from a QML Shape and z-reorder them (selected path gets on top). I can add them using myShape.data.push(newShapePath) but there is no way to remove or reorder them. My current workaround is to use a shape for each shape path but this is not efficient as I have scene with thousands of paths.

Thanks.",,,,,,,,,,,,,,,QTBUG-79263,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0n8z3:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"22 Jan '20 15:27;srutledg;And/or would it be a good idea to have a z property like Item has?","22 Jan '20 15:46;lagocs;Could QQmlListProperty be taught to handle insert and remove? It already has things like Replace and RemoveLast, so an InsertFunction and RemoveFunction would not be anything special. Then again I am not familiar with the internal details.
","23 Jan '20 08:48;srutledg;https://codereview.qt-project.org/c/qt/qtdeclarative/+/282588 should help (in 5.15): you have append and removeLast.  Not sure whether you need insert.","23 Jan '20 09:16;ulherman;There is also replace.","23 Jan '20 11:14;celandre;Thanks,
Unfortunately, Insert and RemoveAt/Remove are a must in my case. I have implemented a graph editor with undo/redo support. Each connection is a ShapePath that can be deleted (needs remove). Undoing a deletion should insert the ShapePath back to its previous index (needs insert).","03 Feb '20 12:12;ulherman;Insert is the same as a sequence of ""replace"" with one ""append"" at the end. RemoveAt/Remove is the inverse: A sequence of ""replace"" and one ""removeLast"". Since replace and removeLast are available now, you can implement your missing primitives.

I don't want to add unnecessary functions to QQmlListProperty as each addition comes with the cost of another pointer added for everyone, not only the code using the extra function.",,,,,,,,,,,,,,,,
Disappointed that the QML Tutorial only has 3 lessons (tutorials),QTBUG-85960,302568,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,docteam,lawrence.emke,lawrence.emke,07 Aug '20 23:59,10 Aug '20 09:04,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Documentation,,,,0,,,,"I stumbled across a set of documents named ""QML Tutorials"".
I thought it would be a gold mine for learning Qt QML.
But alas, it only had 3 lessons.  

https://doc.qt.io/qt-5/qml-tutorial 1,23].html

Whoever wrote them did an excellent job. I looking for the next one 
Can you please continue the series.  There is so much to learn. 
Once you start it is a disappointment that it ends only after 3 lessons.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0ow0n:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"10 Aug '20 09:03;leenam;I'm glad you liked it. :)

I'm moving this bug, because only bugs in the Qt Creator Manual or Extending Qt Creator Manual should be reported as QTCREATORBUG. Mostly, you can see the correct project from the file HTML (here, qt-5).

We do have some more QML tutorials here, as well as examples of using QML and Qt Quick: [https://doc.qt.io/qt-5/qtquick-codesamples.html#extending-qml]",,,,,,,,,,,,,,,,,,,,,
Allow access to QXcbScreen::sendStartupMessage() more directly,QTBUG-84352,299128,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,paeglis,john.lindgren@aol.com,john.lindgren@aol.com,20 May '20 15:42,06 Aug '20 07:17,18 Feb '21 09:41,,5.14.2,,,,,,,,,,,,,,,,,,,,,,QPA: X11/XCB,,,,0,,,,"QX11Info::setNextStartupId() allows an application to send a startup notification when the next window is shown. Some applications, though, want to be able to send a startup notification without showing a new window (e.g. when opening a new document in an existing window).

It doesn't appear that anything in the implementation of QXcbScreen::sendStartupMessage() actually requires a new window to be created, so please consider allowing this function to be called more directly, without the need to create a new window.",,,,,,,,,,,,,,,,,,,"25 May '20 13:08;john.lindgren@aol.com;startup-test.cpp;https://bugreports.qt.io/secure/attachment/95028/startup-test.cpp","25 May '20 13:09;john.lindgren@aol.com;startup-test.desktop;https://bugreports.qt.io/secure/attachment/95029/startup-test.desktop",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Linux/X11,,,,,,"0|i0obuv:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"25 May '20 08:16;liaqi;Please provide a complete, minimal example with enough information about how to reproduce your issue according to https://wiki.qt.io/ReportingBugsInQt .

Perhaps a pure xcb code example could also help here, and show which parts need to be replaced with Qt calls, thanks.","25 May '20 13:09;john.lindgren@aol.com;Okay, here is an example. The KF5 parts should be possible to replace with pure Qt calls, as the code is already there in Qt, just not accessible.

[^startup-test.cpp]

[^startup-test.desktop]","25 May '20 13:11;john.lindgren@aol.com;To test, try starting the application twice (without closing the first instance) from MATE using the provided .desktop file. Without the KStartupInfo::sendFinish() call you will get a stuck ""Opening ..."" notification in the taskbar.",,,,,,,,,,,,,,,,,,,
Add QSqlDatabase::indexes,QTBUG-84367,299166,Suggestion,Open,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,andysh,tasuku.suzuki,tasuku.suzuki,22 May '20 01:44,27 Jul '20 10:13,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,6.1,SQL Support,,,,0,,,,QtSql allows us to get tables and views through QSqlDatabase::tables(). It would be nice if we can get indexes in similar way.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0oc2n:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Feature Request: Option to specify bar color in VBarModelMapper ,QTBUG-85614,301859,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,e0348803,shmittal,shmittal,16 Jul '20 07:02,16 Jul '20 07:02,18 Feb '21 09:41,,5.15.0,,,,,,,,,,,,,,,,,,,,,,Charts,,,,0,Reported_by_support_standard,,,"As user can specify bar color in Barset, it would be great if it is possible with VBarModelMapper  too. 
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0orvr:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rcc generates cpp files that are not compatible with unity builds,QTBUG-81900,292891,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,hjk,sruard,sruard,05 Feb '20 10:39,25 Jun '20 13:07,18 Feb '21 09:41,,5.14.1,,,,,,,,,,,,,,,,,,,,,,Build tools: rcc,,,,0,,,,"As the Rcc creates anonymous namespace with a struct called ""dummy"", like :

namespace {
 struct initializer {
 initializer() \{ QT_RCC_MANGLE_NAMESPACE(qInitResources_qrc_maclass)(); }
 ~initializer() \{ QT_RCC_MANGLE_NAMESPACE(qCleanupResources_qrc_maclass)(); }
 } dummy;
}

you can't have unity builds with multiples generated _rcc.cpp files ( for now i am obliged to exclude them from unity build )

the compilation fail ""dummy struct already defined""

can we have a similar option to have a non anonymous namespace ?

--namespace myname

or an option to prefix dummy structure --prefixStruct maStruct ?

thx

 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0nefz:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"25 Jun '20 13:07;sruard;any news about this issue ?",,,,,,,,,,,,,,,,,,,,,
"Could not import with QLibrary::load(), required extra g++ link flags",QTBUG-84862,300158,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,qtbuildsystem,dougroyer,dougroyer,09 Jun '20 23:00,15 Jun '20 12:45,18 Feb '21 09:41,,5.15.0,,,,,,,,,,,,,,,,,,,,,,Core: Plugins,Documentation,,,0,,,,"I followed all of the documentation page instructions for QLibrary and its load() method.

However all attempts to load() failed. After debugging the Qt library code, i found that it was not resolving some symbols that WERE in the the main application.

In order for the QLibrary::load() to work, I had to link the main application on Linux, Fedora version 32, 64-bit, g++ with:

unix:

{ QMAKE_LFLAGS +=  ""-Wl,--export-dynamic""}

Once I did that, QLibrary::load() worked and my plugin worked. This is my first run-time plug-in application.

I looked for something I missed in the documentation and did not find  any.

I would suggest that the documentation ADD the above information to the QLibrary:load() documentation. Or document any generic way to specify that need.

I have NO idea if this effects other build platforms. I would suspect it effects Android.

 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Linux/X11,,,,,,"0|i0ohw7:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
StyleSheet for QPushButton's icon and label,QTBUG-84893,300211,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,qt.team.quick.subscriptions,volkanorhan,volkanorhan,10 Jun '20 14:38,11 Jun '20 06:18,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Widgets: Style Sheets,,,,0,,,,"It would be better if QPushButton's icon and label components be styleable independently from QPushButton, like QPushButton::icon and QPushButton::label. For example, I want to move the icon on the top-right corner of the button, but it is not possible using icon feature of QPushButton.

There are some workarounds like subclassing QPushButton but it would be better to support stylesheets of label and icon components of QPushButton independently.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0oi7j:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add setting attribute to disable reading from canvas,QTBUG-84486,299438,Suggestion,Open,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,qt_webengine_team,the compiler,the compiler,27 May '20 15:01,03 Jun '20 12:31,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,WebEngine,,,,0,,,,"[Canvas fingerprinting|https://en.wikipedia.org/wiki/Canvas_fingerprinting] is a way (one of many) to gather entropy for fingerprinting users based on how their browser acts. Most measures against fingerprinting can be modified at runtime (e.g. by modifying the user-agent header), but canvas fingerprinting can only be avoided by passing the {{--disable-reading-from-canvas}} flag to the underlying Chromium (try e.g. visiting https://browserleaks.com/canvas with/without that flag with simplebrowser).

It would be great if there was a {{QWebEngineSettings::WebAttribute}} to set it at runtime, so that it can be disabled when loading a page where it causes issues (e.g. playback controls disappearing on Youtube).",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0odmn:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"03 Jun '20 12:31;juri.valdmann;Looks easy, we just need a WebAttribute for {{WebPreferences::disable_reading_from_canvas}} and a test.",,,,,,,,,,,,,,,,,,,,,
" QClipboard: setting only owner, not data",QTBUG-81918,292927,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,paeglis,antenore,antenore,05 Feb '20 22:18,03 Jun '20 07:25,18 Feb '21 09:41,,5.14.0,5.14.1,,,,,,,,,,,,,,,,,,,,,QPA,QPA: Windows,QPA: X11/XCB,,0,,,,"We are planning to port a GTK+ application to Qt.
 In GTK+ you can set the clipboard with a ""owner"": the system clipboard will never be loaded with real data, only with MIME type(s). When later the data will be really needed, for example when the user pastes it inside another application, a callback/signal to your application is called, and your application will build and provide the data.
 All is accomplished with the function [gtk_clipboard_set_with_owner()|https://developer.gnome.org/gtk3/stable/gtk3-Clipboards.html#gtk-clipboard-set-with-owner]. This should be the equivalent of X11 function XSetSelectionOwner(). Under windows you can use [SetClipboardData()|https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setclipboarddata] with a NULL handle, and your window will receive WM_RENDERFORMAT/WM_RENDERALLFORMATS message later to provide the data.

Is there a similar pattern/usage for Qt?

The original question was posted here: [https://forum.qt.io/topic/105892/qclipboard-setting-only-owner-not-data]

 

Thanks!",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Linux/X11,,,,,,"0|i0nemn:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"26 May '20 16:14;sandsmark;I'm not entirely sure what problem you're attempting to solve, but have you looked at implementing a custom subclass of QMimeData and overriding QMimeData::retrieveData()?

I _think_ that should work, I think the XCB plugin only retrieves the actual data from the QMimeData you set when another application requests the property, but I haven't tested it or verified it.","26 May '20 19:05;antenore;Thanks [~sandsmark] , I'll have a look.

The use case is to copy and paste from a remote host through the RDP protocol.

So, to avoid to transfer the wrong data, before to use it I need to know the mime and than act as per the client particularities that will use it.

Let's say I'm copyng a file, some applications expect an URL, or the real data. So when the user press ctrl+c, I cannot just transfer the data, but wait till I know what is expected during the paste. Quite hard explain :-P","27 May '20 07:13;sandsmark;OK, that makes sense.

 

I don't think this is a pure XCB QPA issue, though, [~liaqi]. Ideally all QPAs should call QMimeData::retrieveData() lazily on demand (though I don't know if other platforms than X can support this).","27 May '20 07:46;antenore;[~liaqi] I agree with [~sandsmark] ideally all platform should benefit from this.",,,,,,,,,,,,,,,,,,
compile javascript in qml to webassembly,QTBUG-84182,298704,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,qt.team.quick.subscriptions,lpotter,lpotter,12 May '20 19:28,02 Jun '20 08:05,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,QML: Compiler,Quick: Other,,,1,,,,"Perhaps research if we could compile the javascript into webassembly, and then get the runtime to run webassembly for faster javascript execution. For all platforms.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0o9ef:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"01 Jun '20 08:05;santtuahonen;How relevant is this in scope of Qt 6 and QML+JS plans?","02 Jun '20 08:05;ulherman;This is rather vague and only applies to one platform. At this point, I would call it rather irrelevant.",,,,,,,,,,,,,,,,,,,,
"Improve performance of moc on Windows, perhaps by allowing multiple input files",QTBUG-81348,291541,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,fabiankosmale,aclight,aclight,13 Jan '20 23:42,29 May '20 08:33,18 Feb '21 09:41,,5.12.5,5.14.0,,,,,,,,,,,,,,,,,,,,,Build tools: moc,,,,5,,,,"h3. tl;dr:

Satisfying #include files is a substantial bottleneck for moc on Windows. This bottleneck is particularly problematic when some or all of the following conditions is true: multiple moc processes are running at once; certain UWP (Universal Windows Platform) applications are running; mocable files #include more files than strictly necessary. Changes to how a project is moced can reduce the build time of an application substantially.

The measurements made below were done using a 64-bit build of Qt 5.12.5 but I have tested 5.14.0 and get similar results.
h3. Problem:

mocing a large, complicated project with lots of mocable files can be very slow on Windows. This is primarily because each mocable file is moced by a separate instance of moc. The way that moc satisfies #include statements is that it generates a proposed full path by iterating through all paths in INCLUDEPATH and appending a leaf name to the base path. moc then tests whether the proposed file exists. This can result in hundreds or thousands of attempts to access an invalid file path during the duration of a single moc process. moc does cache the files that it finds, but this cache is not shared between moc processes.

Some numbers from an actual project with about 550 mocable files and 50 paths in INCLUDEPATH (plus about 10 more added by Qt's regular moc implementation):
||number of attempts to open a file or directory that is invalid:|20.6 milion|
||number of attempts to open a file or directory that are successful:|2.3 million|
||Total time attributed to failures:|355 seconds (cpu time)|
||Total time attributed to successes:|32 seconds (cpu time)|
||Total wall clock time attributed to all moc.exe calls:|67 seconds|

 

The above numbers were for a debug build using the msvc 2017 compiler on Windows 10 build 1903. The machine has a 16 core/32 thread AMD ThreadRipper processor, 32 GB RAM, and NVMe storage.

Profiling data collected during the build above shows that moc.exe spends >95% of the time satisfying #include statements, and almost all of this time is spent in the Windows API call {{GetFileAttributesEx}}, so the moc code itself is not directly to blame (see note 1).
h3. Additional complication:

Starting with Windows 10 build 1903, certain UWP applications can cause additional minifilter drivers to be started. Minifilter drivers insert themselves into file I/O operations and we have observed that certain minifilter drivers, when active, can substantially increase the execution time of moc.

A list of active minifilter drivers can be obtained by opening a command prompt using Run As Administrator and executing the {{fltmc}} command. Entries with a non-zero value in the ""Num Instances"" column are active. Our initial investigations suggested that the CldFlt filter driver caused moc delays while mocing files, but disabling that driver by executing 
{code:java}
sc config CldFlt start=disabled
{code}
prevented CldFlt from loading. More recently, we have seen substantial delays when the bindflt filter driver is running. This driver, even if disabled using 
{code:java}
sc config bindflt start=disabled
{code}
can be started by the OS when either the MicrosoftOfficeHub or XboxGameOverlay UWP application is started (there may be others). Based on event logs (see note 2), the former can be started without any user intervention. With a default installation of Windows 10 Home edition, the game bar is started with the Windows key + G shortcut, which may be mistakenly triggered when Ctrl+G (find again) is intended. It seems likely that XboxGameOverlay can be started without any user intervention, because the bindflt driver sometimes starts on our automated build machine when no person has used the machine for days. There may also be other UWP applications that start the bindflt filter driver.

On the same 16 core machine mentioned above, the full debug build time of our application is substantially longer when the bindflt driver is loaded:
||bindflt OFF|2:55|
||bindflt ON|7:05|

Sampling data collected indicates that the extra time is almost entirely spent in moc.exe, and as before the call to {{GetFileAttributesEx}} consumed most of that time.

 
 I also tested the build times of our application on an older laptop with a 2 core Intel Core i7-6560U processor (2.2 GHz), 16 GB, SSD hard drive. On this machine the impact of bindflt was noticeable, though not nearly as large as on the more powerful machine. I hypothesize that this is due to fewer moc.exe processes running in parallel.
||bindflt OFF:|14:06|
||bindflt ON:|15:14|

Bindflt running also has a large impact on the compile times of Qt Creator. Here are the debug build times for a Git checkout of Qt creator, using Qt 5.12.5 with msvc2017. This is on the same 16-core machine mentioned above:
||bindflt OFF:|4:45|
||bindflt ON:|7:30|

 
h3. Possible Solutions:

The simple approaches to reducing moc time include reducing the number of paths in INCLUDEPATH, removing #include statements from mocable files when possible, and reducing the total number of files that need to be moced. Some of these steps could likely be taken for our application to improve its build time, but for the sake of discussion let's assume that Qt Creator has already taken these measures yet still can cause moc.exe to take a very long time, at least in the case when bindflt is on.

In 2016, a [change|[https://codereview.qt-project.org/c/qt/qtbase/+/160755]] to moc was proposed to allow multiple input files to be moced by one instance of moc. This change was later abandoned, in part because it would have required qmake changes to make it work correctly. Ultimately, I think a change to moc that allows it to take a list of files to be moced as an input is likely to be the best one, since it would allow moc to use the same map of #include name to actual file.

For our application, I have come up with a workable but imperfect solution that concatenates all mocable headers together at build time and then runs moc on the generated header files. In testing builds of our application on the same 16-core Windows machine mentioned above, here are the build times I get using the attached moccombinepp feature versus the default moc feature:
|| ||bindflt OFF||bindflt ON||
||Default moc:|2:55|7:05|
||moccombinepp:|2:09|2:20|

So this approach substantially decreases the build time with and without bindflt active, but especially with bindflt ON.

This conclusion is also true for the 2 core Windows 10 laptop mentioned above:
|| ||bindflt OFF||bindflt ON||
||Default moc:|14:06|15:14|
||moccombinepp:|7:24|7:44|

Our project is organized as several subdir projects. We have about 5 small projects (1-2 mocable files each) and 1 giant project (~550 mocable files). In the .pro file of the giant project only, I have added this:
{code:java}
QT.core.CONFIG -= moc
CONFIG += moccombinepp{code}

 Adding the same to the .pro files of the small projects results in compile errors, but I can use the attached moccombine feature in the small projects and successfully build.


 I wrote the code in the two attached feature files myself (moccombine.prf and moccombinepp.prf) but anyone may freely use the code in whatever way they see fit. I don't think either of the current features is robust enough to be added to Qt directly, but perhaps someone with more familiarity with qmake and moc could modify them in a way that makes them more broadly useful.


 For the sake of completeness, I tested debug builds of the same application on two Macintosh machines (both iMacs, one with 4 cores and one with 6 cores). With the moccombinepp feature enabled, the build was about 20-25 seconds faster (out of a total of between 4:30 to 5:40 depending on which machine I was using). So improving how moc is run might decrease build times on Macintosh slightly, but not nearly as much as on Windows.
h3. Conclusion:

Changing the way that moc commands are generated can substantially decrease the build time of a complicated project on Windows 10. While not tested here, changing moc to allow multiple input files to be specified would likely have a similar effect and may be more robust. As more machines receive the update to Windows 10 1903 (most of our machines did not start getting this update until August of 2019) the problem of bindflt causing major increases in moc time may become more common.
h4. Note 1:

Since moc and the compiler must both satisfy #include declarations, I wondered why the msvc compiler (cl.exe) was able to do so faster and without being impacted by bindflt. I collected sampling data from cl.exe during a build and it appears that the cl.exe::CheckFileExists function makes many calls to the Windows API function [ZWQueryDirectoryFile|[https://docs.microsoft.com/en-us/windows-hardware/drivers/ddi/ntifs/nf-ntifs-zwquerydirectoryfile]]. My guess is that the file system is able to quickly check for the existence of a file when given a handle to the directory and a leaf file name but is much slower to return when {{GetFileAttributesEx}} is called, since the later presumably requires the file system to walk down the path from the root to the leaf.

h4. Note 2:

To determine which UWP applications caused bindflt to start, I opened the Windows Event Viewer application using Run as Administrator. I then chose the Open Saved Log... action from the upper right side to load Microsoft-Windows-AppModel-Runtime%4Admin.evtx and Microsoft-Windows-Containers-BindFlt%4Operational.evtx, both found within C:\Windows\System32\winevt\Logs. I then looked for events with Event ID of 2 in the Containers-BindFlt file and found events with the same time and date in the AppModel-Runtime file.","Windows 10 build 1903 and 1910

msvc 2017",,,,,,,,,,,,,,,,,,"13 Jan '20 23:16;aclight;moccombine.prf;https://bugreports.qt.io/secure/attachment/91077/moccombine.prf","13 Jan '20 23:16;aclight;moccombinepp.prf;https://bugreports.qt.io/secure/attachment/91076/moccombinepp.prf",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Windows,,,,,,"0|i0n78f:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add an Android test to avoid regressions,QTBUG-73963,274202,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,tosaraja,larss,larss,21 Feb '19 07:08,28 May '20 12:50,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Coin Configuration,Extras: Android,Testing: qtestlib,,1,,,,"The following reviews fixed some lint issues on Android:
https://codereview.qt-project.org/249990
https://codereview.qt-project.org/249484
https://codereview.qt-project.org/250690
https://codereview.qt-project.org/251191
https://codereview.qt-project.org/249658

There are 2 builds in the Qt CI building Qt for Android on Linux RHEL_7_4. But they are using the configuration option ""{{-nomake examples}}"". I do not see any job that try to build a full apk. We should add a job, using the templates from {{qtbase/src/android/templates}} and treat lint warnings as errors.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Android,,,,,,"0|i0ki5j:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add a way to remember permission authorizations,QTBUG-83476,297116,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,qt_webengine_team,the compiler,the compiler,14 Apr '20 18:03,25 May '20 16:23,18 Feb '21 09:41,,5.14.2,,,,,,,,,,,,,,,,,,,,,,WebEngine,,,,1,,,,"How permission authorization work in QtWebEngine seems to differ from what e.g. Chromium (or also other browsers) do.

With other browsers, once permission authorization is granted for a page (can e.g. use [this demo|https://www.bennish.net/web-notifications.html] to test), the webpage is allowed to send notifications without having to re-ask for permissions every time, even after the browser is restarted.

With websites like e.g. Slack, that means the user has to click the ""request permissions"" banner and grant permissions every time, only then the permissions will work.

I can see two ways to fix that:

- Currently, the docs for {{QWebEnginePage::setFeaturePermission}} say *Note: Call this method on the featurePermissionRequested() signal, as it is meant to serve pending feature requests only. Setting feature permissions ahead of a request has no effect.*. If it was possible to call {{setFeaturePermission}} during initialization, this would allow setting all remembered permissions at the start.
- Or alternatively, QtWebEngine (or the underlying Chromium) could remember granted permissions by itself, though that would make it more difficult to manage/clear remembered permissions.",,,,,,,,,,,,,,,,,,,"15 Apr '20 07:49;the compiler;screenshot-1.png;https://bugreports.qt.io/secure/attachment/93754/screenshot-1.png",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0o0pj:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"15 Apr '20 07:15;allan.jensen;I had expected the application to remember if it had granted the permission before and suppress the request for permission, but yes, it would be nice if we could do it internally.","15 Apr '20 07:49;the compiler;Do you mean the application as in the one using Qt, or the web application?

For the former: That's what I currently do in qutebrowser, but that means the website does need to re-ask for permission every time before getting it, instead of just getting it automatically. Most websites don't simply ask for the permission outright, but first display some ""please grant notification permissions"" banner first, e.g. Slack:

 !screenshot-1.png|thumbnail! ","15 Apr '20 07:55;allan.jensen;Ah, they check for permission first, which doesnt get communicated..","15 Apr '20 07:56;allan.jensen;I guess we could enable granted permission earlier, it could at least work for the non-requesting permission checky.

 

Actually that seems like that should already work for notifications and geolocation.","14 May '20 15:27;kiburtse;Since we are talking about api and not about browser, it's not a good idea to compare them directly.

I'm not sure though that it is a good idea to store these permissions persistently: it's not an api obligation rather the application's, as i see it. Hence, right now requests (from all javascript web apis like navigator.mediaDevices.getUserMedia, Notification.requestPermission or navigator.geolocation.getCurrentPosition) are never suppressed and presented to application for it to decide. For now it's consistent for all supported features. Changing this is a behavior change, so only next release?

Nevertheless, some aspects of behavior might be similar, like not emitting featurePermissionRequested (for origin-feature pairs which have explicit answer through setFeaturePermission with grant/deny) while associated QWebEngineProfile is alive. Technically, we already store them in PermissionManagerQt, so just checking like here [https://codereview.qt-project.org/c/qt/qtwebengine/+/300423] is enough, for geolocation and notifications at least.

Anyway, since permission status for the same origin is shared between pages with the same profile, and there might be hundreds of origin/feature granted/denied permissions, what's the point of 'setting all remembered permissions at the start' for every page really? Why is it better for application rather then just reply when asked by webengine api (on some javasript code execution)? [~the compiler] could you clarify the usecase?","25 May '20 16:01;the compiler;[~kiburtse] yeah, I suppose it's fine (and better from an API point of view) for the application to handle this. My main point was that, at least for notifications, there needs to be a way for the application to tell QtWebEngine about it *before* the website asks for permission, which now seems to be possible?","25 May '20 16:23;allan.jensen;It was always possible just not documented that it had any effect.",,,,,,,,,,,,,,,
Printing support for Webassembly,QTBUG-84288,298963,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,sorvig,poikelin,poikelin,18 May '20 11:51,25 May '20 10:55,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,GUI: Printing,,,,3,Reported_by_support_standard,,,Support for QPrinter+QPainter.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,WebAssembly,,,,,,"0|i0oaw7:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"25 May '20 10:55;sorvig;Google Docs implements printing the following way:
 # Generate a PDF file
 # Programmatically download + open the file in the native PDF viewer, from where the user can print .

I don't know what the exact use case is here, but something similar could be implemented with Qt:
 # Generate a PDF file with QPrinter::PdfFormat (setOutputfFileName() can be used, the file will be stored in the in-memory temporary file system.)
 # Call QFileDialog::saveFileContent() to trigger a file download. (the downloaded file may not auto-open, I'm not sure how this is done)",,,,,,,,,,,,,,,,,,,,,
Make it easier to connect a material to a mesh name inside a model,QTBUG-80021,288350,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,qt.team.graphics.and.multimedia,andysh,andysh,13 Nov '19 08:18,20 May '20 11:21,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,6.x,Quick: 3D,,,,0,Reported_by_support_standard,,,"Make it easier to connect a material to a mesh name inside a model. The following is quoted verbatium from the original requester:

""There are two parts to the problem:

1) How do I know the name of the node for which I want to adjust the material
2) With what (QML) API should this be done

The node ids are known in the designers authoring tool, but as we all know, these are NOT preserved as expected through the different format converters and often get mangled. In a recent Qt3D-based project I used the scene loader's helper functions to iterate around the post-format-conversion (gltf in this case) to tell me what the node ids became. Then I could create my own QML API based around a derived class based on SceneLoader which used objectName in a Material to match the node Id and do a switch out using the Qt3D c++ API. This allowed me to write something like this:

{code}
CustomisedSceneLoader {
    source: ""mymodel.gltf""

    NodeFinder { // this was just a Qt3D Entity
        objectName: ""exhaust""
        components: [
            Material { // just a regular Qt3D material
                id: exhaustMaterial
                // material properties
            },
            Transform {
                id: exhaustTransform
                // I could also switch out the transform
                // this was the way I made it possible to make QML bindings into the deep node tree of the model
                // but I had issues where I couldn't easily decide whether to adopt the existing transform matrix or override it.
                // - I might have subclassed QTransformNode to add a special property to decide its behaviour perhaps.
            }
        ]
    }
{code}

The customised scene loader matched the node Id with the object name and switched out the material (and deleteLater the existing one). Actually it got a bit more complex than that as I had to do complete Entity transplants and replacements to preserve the hierarchy as I was effectively introducing additional entities I ultimately didn't need) but it does work with one
drawback - I end up recreating parts of the subtree in QML but it doesn't reflect the full subtree. But all that because a scene loader with a sub tree doesn't have a QML binding mechanism. The Qt3D Studio presentation format has this in a loose sense, but you work with known databindings instead, and you can't change out the materials. QtQuick3D goes a long way to bringing this to QML and exposing more of the scene to QML bindings but needs a more declarative approach for [replacing] the materials. One question that was raised during the QtWS is about having a visual node tree in Qt Design Studio as an inspector of the tree POST-IMPORT-conversion much like the one in Qt3D Studio. This would at least give you the Ids of things.
A Node editor (as opposed to a viewer) might open up a whole host of new possibilities e.g. re-parenting for coordinate space management. You could see also (much like the node viewer in Qt 3D Studio) where materials are referenced (shared) or not. This was something else my custom scene loader would handle - because you could use QComponent::entities on a QMaterial to get the list of references.

There is much to think about here.""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,pakerane,,,,,,,"0|i0mot3:",9223372036854775807,9223372036854775807,,,,janichol,,,,,,,,5.0,,"13 Nov '19 08:19;andysh;Follow up comment:

""Please bear in mind that the feature request here is for QtQuick3D in the QML API, whereas my detailed explanation is how I did
something similar with the Qt3D QML/C++ API which already exists. Note that in the case of Qt3D, there isn't a way to say ""change the diffuse color on the existing material of some node buried in the subtree somewhere"" so that's why I used SceneLoader to ""find"" the node and replace the material with a QML one where I could then access the properties as bindings
for convenience. Qt Quick 3D already exposes the innards of the tree to a larger extent, being generated from the assets to some degree, plus, you can create data bindings from Qt Design Studio into the node tree which goes a long way to being able to ""change the diffuse color on the existing material of some node buried in the subtree somewhere"" - because you actively expose it. But the missing piece is Material *replacement* using the current array-based mechanism which isn't safe for the reasons I've already mentioned.

However one _could_ argue: 1) If the material is now totally designable by the designer (unlike in Qt3D where you are kind of encourage to write your own in the application to a certain degree) then you could use the data binding exposure to give (limited) access to the application for those properties you need to change and 2) why would the application therefore need to modify the
material if the imported one is sufficiently specified and imported appropriately? Anyway, it doesn't detract from the limitations of the current materials: [] api as already stated.""",,,,,,,,,,,,,,,,,,,,,
OAuth2: Add support for the Implicit Grant Flow,QTBUG-71187,268474,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,jefernan,SkyCoder,SkyCoder,16 Oct '18 13:19,20 May '20 08:42,18 Feb '21 09:41,,5.11.2,,,,,,,,,,,,,,,,,,,,,,Network: Authentication,,,,1,,,,"Currently, the QtNetworkAuth module only provides the ""Authorization Code Grant"" flow. It would be useful if there was also in implementation for the ""Implicit Grant"" flow, as described here in the [RFC Section 4.2|https://tools.ietf.org/html/rfc6749#section-4.2].

This one is especially useful for client-only applications and provides non-refreshable access tokens without having to use a secret. It can be used for example for the Spotify and the reddit API",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0jkmv:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"16 Oct '18 13:21;jefernan;Thanks for the suggestion!

I'll try to find some time to implement it for 5.13.",,,,,,,,,,,,,,,,,,,,,
Impossible to pick a color on the Screen under Wayland,QTBUG-81538,291970,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,johanhelsing,strangiato,strangiato,20 Jan '20 15:27,20 May '20 08:32,18 Feb '21 09:41,,5.14.0,,,,,,,,,,,,,,,,,,,,,,QPA: Wayland,,,,0,,,,"Hi

This issue was already reported to KDE developers.

https://bugs.kde.org/show_bug.cgi?id=415927

Read the comment from a developer please:

""Not sure if this can be addressed in QColorDialog. In Wayland, it is explicitely forbidden to read the screen contents. KWin offers an infrastructure for screenshot applications. I am not sure if the protocols used there use a standard that Qt could follow.

I suggest to report this to Qt developers (as a bug for QColorDialog).""

 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Linux/Wayland,,,,,,"0|i0n98v:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"20 May '20 08:32;liaqi;It should be a task of wayland compositor instead of client.",,,,,,,,,,,,,,,,,,,,,
Pixel-align horizontal text alignment,QTBUG-84021,298415,Suggestion,Open,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,esabraha,esabraha,esabraha,06 May '20 05:57,06 May '20 05:59,18 Feb '21 09:41,,6.0,,,,,,,,,,,,,,,,,,,,,,GUI: Text handling,,,,0,,,,"When centering a text item using anchors.centerIn or anchors.horizontalCenter, it will be aligned to the pixel grid to make rendering sharper.  

There is an anchors.alignWhenCentered property that can be used to disable this, if you are aiming for correctness. 

But horizontalAlignment in the Text element does not align and draws at subpixel positions if requested. 

This means that if you have items that are centered using the anchors along side Text items that are centered, and you resize the containing item, you may see some flinching due to the centering acting differently for the two.

Ideally, the two algorithms would give the exact same results, but this needs to be investigated properly first. It is also possible the problem is in the anchors itself, which seems to A. assume that the widths of items are integers and B. may be rounding each center individually (round(item1.width / 2) - round(item2.width / 2), which gives a higher error margin than round(item1.width / 2 - item2.width / 2). 

But I haven't dug very deep, so I may be reading it wrong.

Example: 
{code}
import QtQuick 2.12
import QtQuick.Window 2.12

Window {
    id: window
    visible: true
    width: 640
    height: 480
    title: qsTr(""Hello World"")

    Item {
        id: item
        anchors.top: parent.top
        anchors.bottom: parent.bottom

        PropertyAnimation {
            id: animation
            target: item
            property: ""width""
            from: 0
            to: window.width * 2
            running: true
            loops: Animation.Infinite
            duration: 20000
        }

        Text {
            id: t1
            y: parent.height / 2 - height / 2
            anchors.horizontalCenter: parent.horizontalCenter
            font.pixelSize: 16
            font.hintingPreference: Font.PreferNoHinting
            renderType: Text.NativeRendering
            text: ""Foobar""

        }

        Text {
            id: t2
            anchors.top: t1.bottom
            anchors.left: parent.left
            anchors.right: parent.right
            font.pixelSize: 16
            font.hintingPreference: Font.PreferNoHinting
            renderType: Text.NativeRendering
            text: ""Foobar""
            horizontalAlignment: Text.AlignHCenter

        }
    }

    MouseArea {
        anchors.fill: parent
        onClicked: {
            if (animation.paused)
                animation.resume()
            else
                animation.pause()
        }
    }
}
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0o7pj:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Call setHiddenUntilMouseMoves when text box is edited,QTBUG-78933,285980,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,srutledg,kerndog73,kerndog73,02 Oct '19 08:54,06 May '20 00:54,18 Feb '21 09:41,,5.14.2,,,,,,,,,,,,,,,,,,,,,,"GUI: Basic Input System (keyboard, mouse, touch)",,,,1,,,,"On macOS, when a textbox is edited, the mouse cursor is hidden. The mouse cursor is shown again when the mouse moves. This occurs no matter where the mouse is located. I've attached a gif that demonstrates this behaviour using a native mac app (iTerm2).

Qt apps don't have this behaviour. All that would be required to implement this is to insert calls to [setHiddenUntilMouseMoves|https://developer.apple.com/documentation/appkit/nscursor/1534665-sethiddenuntilmousemoves?language=objc] in various places.

I've attached an example program that demonstrates how to implement the correct behaviour.",,,,,,,,,,,,,,,,,,,"02 Oct '19 08:51;kerndog73;demo.cpp;https://bugreports.qt.io/secure/attachment/87794/demo.cpp","02 Oct '19 08:38;kerndog73;demo.gif;https://bugreports.qt.io/secure/attachment/87796/demo.gif","02 Oct '19 08:51;kerndog73;demo.mm;https://bugreports.qt.io/secure/attachment/87795/demo.mm",,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,macOS,,,,,,"0|i0mbf3:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Should support USA style Qt::weekNumber(),QTBUG-83678,297467,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,Eddy,shin1_okada,shin1_okada,21 Apr '20 08:58,28 Apr '20 07:14,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Core: Date/Time,Widgets: Widgets and Dialogs,,,0,Reported_by_support_standard,,,"QDate :: weekNumber() adopts ISO 8601, but needs support for other styles such as USA and Islamic.
 * ISO 8601: Week containing the first Thursday of the year or Week containing January 4th
 * America:  Week containing January 1
 * Islamic: Week containing the first Friday of the year

QCalendarWidget::VerticalHeaderFormat is also relevant.",,,,,,,,,,,,,,,QTBUG-7474,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,mkalinow,,,,,,,"0|i0o2uf:",9223372036854775807,9223372036854775807,,,,,,,,,,,,21.0,,"21 Apr '20 11:50;Eddy;This gets tricky.  We have an existing API with the obvious name, that does the ISO thing; so changing it will break those who use it for what it currently is.

ISO week numbering has each week seven days long; week one of one year may contain the last few days of the previous years; or the first few days of a year may belong to the last week of the previous year.
The USA week numbering has short weeks at the start and end of each year, unless the year happens to end or start at a week boundary (and each year can do at most one of those).

Does USAish week-numbering make January 1st a whole week unto itself if it happens to be whichever is the last day of the week in the USA ? i.e. can the week number of January 2nd be 2 ?

For the Islamic week numbering, is that a week numbering within the Islamic calendar, in the Gregorian calendar, or in each ?","21 Apr '20 11:57;Eddy;See also:
https://codereview.qt-project.org/c/qt/qtbase/+/268687

In that review, I proposed putting week-numbering on the calendar.
I believe the solution proposed there would do what you want for the USA.

Not sure about the Islamic case, since the locale-specific feature it uses is the start-of-week day from the locale; if that happens to be Saturday in a locale, then the week of the first Friday shall be week 1.
",,,,,,,,,,,,,,,,,,,,
Document the formats that QCamera has support for on the different backends,QTBUG-83337,296765,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,docteam,andysh,andysh,06 Apr '20 12:58,27 Apr '20 11:14,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Documentation,Multimedia,,,1,Reported_by_support_standard,,,Document the formats that QCamera has support for on the different backends as this can be useful to know,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0nylr:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"06 Apr '20 13:23;valentyn.doroshchuk;QCamera->supportedViewfinderPixelFormats() returns the list with available formats, 
and this list depends on the driver and the device. It can vary.

What exactly should be documented?","06 Apr '20 13:32;andysh;Well knowing which formats that the backend actually has support for would be handy. Because for some cases you need to find a camera (in the industrial sense) that can also support one of those formats too.","06 Apr '20 13:48;valentyn.doroshchuk;ok, you mean
to document what formats can be handled per backend? 

E.g. directshow backend currently supports:
{code}
        { QVideoFrame::Format_ARGB32, MEDIASUBTYPE_ARGB32 },
        { QVideoFrame::Format_RGB32, MEDIASUBTYPE_RGB32 },
        { QVideoFrame::Format_BGR24, MEDIASUBTYPE_RGB24 },
        { QVideoFrame::Format_RGB565, MEDIASUBTYPE_RGB565 },
        { QVideoFrame::Format_RGB555, MEDIASUBTYPE_RGB555 },
        { QVideoFrame::Format_AYUV444, MEDIASUBTYPE_AYUV },
        { QVideoFrame::Format_YUYV, MEDIASUBTYPE_YUY2 },
        { QVideoFrame::Format_UYVY, MEDIASUBTYPE_UYVY },
        { QVideoFrame::Format_IMC1, MEDIASUBTYPE_IMC1 },
        { QVideoFrame::Format_IMC2, MEDIASUBTYPE_IMC2 },
        { QVideoFrame::Format_IMC3, MEDIASUBTYPE_IMC3 },
        { QVideoFrame::Format_IMC4, MEDIASUBTYPE_IMC4 },
        { QVideoFrame::Format_YV12, MEDIASUBTYPE_YV12 },
        { QVideoFrame::Format_NV12, MEDIASUBTYPE_NV12 },
        { QVideoFrame::Format_YUV420P, MEDIASUBTYPE_IYUV },
        { QVideoFrame::Format_YUV420P, MEDIASUBTYPE_I420 },
        { QVideoFrame::Format_Jpeg, MEDIASUBTYPE_MJPG }{code}

GStreamer:
{code}
    { QVideoFrame::Format_YUV420P, GST_VIDEO_FORMAT_I420 },
    { QVideoFrame::Format_YUV422P, GST_VIDEO_FORMAT_Y42B },
    { QVideoFrame::Format_YV12   , GST_VIDEO_FORMAT_YV12 },
    { QVideoFrame::Format_UYVY   , GST_VIDEO_FORMAT_UYVY },
    { QVideoFrame::Format_YUYV   , GST_VIDEO_FORMAT_YUY2 },
    { QVideoFrame::Format_NV12   , GST_VIDEO_FORMAT_NV12 },
    { QVideoFrame::Format_NV21   , GST_VIDEO_FORMAT_NV21 },
    { QVideoFrame::Format_AYUV444, GST_VIDEO_FORMAT_AYUV },
#if Q_BYTE_ORDER == Q_LITTLE_ENDIAN
    { QVideoFrame::Format_RGB32 ,  GST_VIDEO_FORMAT_BGRx },
    { QVideoFrame::Format_BGR32 ,  GST_VIDEO_FORMAT_RGBx },
    { QVideoFrame::Format_ARGB32,  GST_VIDEO_FORMAT_BGRA },
    { QVideoFrame::Format_ABGR32,  GST_VIDEO_FORMAT_RGBA },
    { QVideoFrame::Format_BGRA32,  GST_VIDEO_FORMAT_ARGB },
#else
    { QVideoFrame::Format_RGB32 ,  GST_VIDEO_FORMAT_xRGB },
    { QVideoFrame::Format_BGR32 ,  GST_VIDEO_FORMAT_xBGR },
    { QVideoFrame::Format_ARGB32,  GST_VIDEO_FORMAT_ARGB },
    { QVideoFrame::Format_ABGR32,  GST_VIDEO_FORMAT_ABGR },
    { QVideoFrame::Format_BGRA32,  GST_VIDEO_FORMAT_BGRA },
#endif
    { QVideoFrame::Format_RGB24 ,  GST_VIDEO_FORMAT_RGB },
    { QVideoFrame::Format_BGR24 ,  GST_VIDEO_FORMAT_BGR },
    { QVideoFrame::Format_RGB565,  GST_VIDEO_FORMAT_RGB16 }
{code}","06 Apr '20 14:02;andysh;Yeah, that is the sort of thing I mean.",,,,,,,,,,,,,,,,,,
Expose QWindowPrivate::allowClickThrough,QTBUG-83713,297535,Suggestion,Open,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,qt.team.quick.subscriptions,smokris,smokris,22 Apr '20 14:53,23 Apr '20 11:08,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Widgets: Widgets and Dialogs,,,,0,,,,"On macOS, apps typically ignore clickthrough — Apple's documentation says [""By default a view does not receive mouse-down events if it isn't in the frontmost window""|https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/CocoaViewsGuide/SubclassingNSView/SubclassingNSView.html#//apple_ref/doc/uid/TP40002978-CH7-SW27].

I'd like to give my app the ability to follow that convention, but currently {{QWidgetWindowPrivate::allowClickThrough}} always returns {{true}}, causing {{[QNSView acceptsFirstMouse:]}} to always return {{YES}}.

Could you expose control over that value, either at an app-wide level, a per-window level, or a per-view level?",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,macOS,,,,,,"0|i0o39b:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"22 Apr '20 15:01;smokris;[This section of the documentation|https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/EventOverview/HandlingMouseEvents/HandlingMouseEvents.html#//apple_ref/doc/uid/10000060i-CH6-SW17] has some more explanation of when clickthrough should be allowed or ignored:
{quote}By default, a mouse-down event in a window that isn’t the key window simply brings the window forward and makes it key; the event isn’t sent to the NSView object over which the mouse click occurs. … You want the default behavior of this method in, for example, a control that affects the selected object in a window. However, in certain cases it’s appropriate to override this behavior, such as for controls that should receive mouseDown: messages even when the window is inactive. Examples of controls that support this click-through behavior are the title-bar buttons of a window.
{quote}",,,,,,,,,,,,,,,,,,,,,
Qt Lacks Drag & Drop on iOS at Least for Widgets,QTBUG-83665,297439,Suggestion,Open,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,,coroberti,coroberti,20 Apr '20 16:23,22 Apr '20 06:49,18 Feb '21 09:41,,5.14.2,5.15,,,,,,,,,,,,,,,,,,,,,GUI: Drag and Drop,QPA,,,1,,,,"Nowadays, iOS platforms have splitted screens and true Multi-Tasking.
 Most, if not all iOS apps are supporting Drag&Drop, but not Qt-based,

I can add using API guidelines Drag&Drop to QTextEdit widget and it works properly on Mac and on Windows, but not supported on iOS.

 ",,,,,,,,,,,,,,,QTBUG-83612,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,iOS/tvOS/watchOS,,,,,,"0|i0o2o7:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Improve style integration,QTBUG-83617,297327,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,qt.team.quick.subscriptions,ux,ux,17 Apr '20 09:15,20 Apr '20 20:42,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Widgets: Styles,,,,0,,,,"Currently on Linux, you need to rely on the third party {{qt5ct}} tool to be able to customize the general appearance for a better desktop integration. That tool also has to integrate its own dark palette because it's not available builtin. But more problematic, this tool can not work in all situations, typically in a Python virtualenv.

Given the following basic {{test.py}}:
{noformat}
import sys
from PySide2 import QtWidgets

if __name__ == '__main__':
    app = QtWidgets.QApplication(sys.argv)
    w = QtWidgets.QWidget()
    w.show()
    sys.exit(app.exec_())
{noformat}
If qt5ct is properly configured, {{QT_QPA_PLATFORMTHEME=qt5ct python test.py}} will work as expected. On the other hand, in a virtualenv:
{noformat}
% virtualenv venv
% . ./venv/bin/activate
% pip install PySide2
% QT_QPA_PLATFORMTHEME=qt5ct python test.py
{noformat}
Here, the theme will not work out. The reason is that the necessary .so are not available within the venv. This can be workaround setting something like {{QT_QPA_PLATFORM_PLUGIN_PATH=/usr/lib/qt/plugins/}} but this obviously require a consistency of version between what's on the system, and what's available in the venv.

All of this wouldn't be required if such a mechanism was available builtin.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0o1zz:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
RHI: QRhiTexture should provide a way to set layers,QTBUG-83343,296782,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,lagocs,jcelerier,jcelerier,06 Apr '20 19:50,07 Apr '20 16:03,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,Some future release,Qt RHI,,,,0,,,,"Currently, QRhiTexture only seems to support 1 layer (or 6 layers for the cube map case).

It would be useful to have an API to set the number of layers before build() to enable support for sampler2DArray & friends.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0nyov:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Consider controller like approach for findText() workflow,QTBUG-80858,290506,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,qt_webengine_team,emdek,emdek,17 Dec '19 19:33,01 Apr '20 12:24,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,WebEngine,,,,0,,,,"Current API for finding text on the page is simply wonky.

Attached below is draft of the API proposed for QtWebKit to allow for user friendly way to handle text search.
{code:java}
QWebFindController
{
	void clear();
	void findNext();
	void findPrevious();
	void setText(const QString &text);
	void setOptions(FindFlags options);
	QString text() const;
	FindFlags options() const;
	int matchesCount() const;
	int currentMatch() const;
	bool hasResults() bool const;
	bool isFinished() bool const;signals:
	void resultsChanged(); // matches changed (due to content changes or setters find*() calls)
	void findFinished(); // find*() calls finished
}
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0n1b3:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Support Chromium native accessibility,QTBUG-79082,286396,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,qt_webengine_team,allan.jensen,allan.jensen,08 Oct '19 10:51,01 Apr '20 11:47,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,WebEngine,,,,0,,,,We could consider a configure option that lets Chromium talk to the system accessibility layer directly. This would make us closer to how Chrome acts reduce the information lost during conversions:  Chromium accessibility -> QAccessibility -> System accessibility,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0mdt3:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
QFileDialog::getSaveFileName() makes a zombie panel,QTBUG-83163,296300,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,,bhaller,bhaller,29 Mar '20 21:00,30 Mar '20 15:43,18 Feb '21 09:41,,5.9.8,,,,,,,,,,,,,,,,,,,,,,QPA,Widgets: Widgets and Dialogs,,,0,,,,"Hi.  I'm not sure GUI: Workspace is the right component to file this against; is there a way to look up the correct component from a class name like QFileDialog?

Anyway.  My app calls QFileDialog::getSaveFileName() to run a standard save panel, with this code:

QString desktopPath = QStandardPaths::writableLocation(QStandardPaths::DesktopLocation);
QFileInfo fileInfo(QDir(desktopPath), ""graph.pdf"");
QString path = fileInfo.absoluteFilePath();
QString fileName = QFileDialog::getSaveFileName(this, ""Export Graph"", path);
if (!fileName.isEmpty())
    ...

This is done immediately after a call to QMenu::exec() to run a content menu; the user selects an item in the context menu that says ""save a graph"", and so I run a save panel to find out where to put the generated graph.  This all works great; the save panel runs, it dismisses and disappears, my graph file gets generated, and my app appears to be back in the main event loop and functioning normally.  The only sign of trouble is console logs emitted by macOS (10.15.3):

2020-03-29 16:49:42.619 QtSLiM[70268:6158410] WARNING: <NSSavePanel: 0x7f9846e22100> found it necessary to prepare implicitly; please prepare panels using NSSavePanel rather than NSApplication or NSWindow.
2020-03-29 16:49:42.624 QtSLiM[70268:6158410] WARNING: <NSSavePanel: 0x7f9846e22100> found it necessary to start implicitly; please start panels using NSSavePanel rather than NSApplication or NSWindow.
2020-03-29 16:49:42.624 QtSLiM[70268:6158410] WARNING: <NSSavePanel: 0x7f9846e22100> running implicitly; please run panels using NSSavePanel rather than NSApplication.

But now, if the very next thing that I do it to switch to a different app, and then hide that different app so that my app comes to front again, BOOM! the file dialog is back!  At this point it seems to be a zombie; it doesn't function properly and doesn't dismiss if Cancel is clicked.  I have to quit the app, there seems to be no way to recover.  These console logs are sometimes (but not always?) emitted when this occurs:

2020-03-29 16:54:00.606 QtSLiM[70363:6162092] WARNING: <NSSavePanel: 0x7fe0ff216d10> -[NSSavePanel(exportedInterface) requestAppEnabledStateForItems:replyBlock:] no longer has a delegate to respond to shouldEnableURL
2020-03-29 16:54:00.606 QtSLiM[70363:6162092] WARNING: <NSSavePanel: 0x7fe0ff216d10> -[NSSavePanel(exportedInterface) requestAppEnabledStateForItems:replyBlock:] no longer has a delegate to respond to shouldEnableURL

This situation is not triggered by my app calling QFileDialog::getSaveFileName() a second time; I have put console logs in to check for this, and this is definitely not happening.  Instead, the save panel seems to have just been temporarily hidden, and when my app comes to the front again, the hidden panel gets shown again even though it's not supposed to be running any more.

Interestingly, if I generate an event in my app before switching to the other app, the problem does not manifest.  I.e., if I click a button one time, and then switch to the other app and hide it to bring my app front again, no problem.  (Just clicking on a menu in the menu bar, without executing a menu command, does not seem to suffice, though.)  It seems like the problem has something to do with the event queue.  This is why I mentioned that I'm running the panel in response to a QMenu::exec() call; maybe that sequence of running modal event loops confuses the application logic somehow?

I realize this description is a bit strange!  But this is 100% reproducible on my machine, and I'm happy to investigate it further if you have questions.  I would very much appreciate a workaround, as this happens to bite my standard workflow, and so it keeps happening to me.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,macOS,,,,,,"0|i0nvwv:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"29 Mar '20 22:14;bhaller;This was erroneously created as a Suggestion, but should be a Bug, obviously; I didn't expect ""Create"" to inherit the last choice I made for that.  :->","30 Mar '20 10:35;vestbo;Try using show() instead of exec() on the dialog.","30 Mar '20 15:05;bhaller;This is with the class method QFileDialog::getSaveFileName(), which does everything itself.  So I'm not calling exec() on the dialog, and don't have the option of calling show() instead.  As far as I can tell there is no workaround, and it's a pretty serious bug – the app has to be quit, as the zombie panel cannot be dismissed.  I would vote for the priority of this bug being set higher than P4 (but maybe I don't get a vote :->).","30 Mar '20 15:23;vestbo;It should be possible to set. up a file dialog with the same options and call show(). ","30 Mar '20 15:43;bhaller;OK, thanks.",,,,,,,,,,,,,,,,,
API to clear undo/redo stacks for TextInput QML,QTBUG-83036,296047,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,qt.team.quick.subscriptions,shmittal,shmittal,24 Mar '20 07:08,24 Mar '20 07:08,18 Feb '21 09:41,,5.14.1,,,,,,,,,,,,,,,,,,,,,,Quick: Core Declarative QML ,,,,0,Reported_by_support_standard,,,"There is no way right now to clear the undo and redo stacks for TextInput. It would be better to have such API, something similar to QTextDocument::clearUndoRedoStacks().",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0nudj:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
WebAssembly: Use Qt Meta-Object System to generate Emscripten bindings,QTBUG-71436,268953,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,,qvignaud,qvignaud,26 Oct '18 18:06,18 Mar '20 09:55,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,QPA,,,,2,,,,"The Emscripten Embind module allow to bind C++ classes with Javascript, and use it in JS code as if it where native objects.

The fact is Embind requires exactly the same informations as the ones provided by the Qt Meta-Object System, and both are faces of the logic of exposing C++ entities to other technologies (QML, Javascript, etc).

So the suggestion is to allow the use of the Qt Meta-Object System (macros and/or MOC) to automatically generate bindings for classes when compiling with Emscripten.

Here is some example of code to illustrate this proposal:
{code:java}
class DBObject : public QObject
{
    Q_OBJECT
    
    // Here is described a Qt meta-property.
    Q_PROPERTY(int id READ id WRITE setId)

public:
    explicit DBObject(QObject *parent = nullptr);

    int id() const;
    void setId(int id);

private:
    int m_id;
};
{code}
{code:java}
class User : public DBObject
{
    Q_OBJECT

    // Here are described Qt meta-properties.
    Q_PROPERTY(QString name READ name WRITE setName)
    Q_PROPERTY(Status status READ status WRITE setStatus)
    
public:
    explicit User(QObject *parent = nullptr);

    enum Status {
        INACTIVE,
        ACTIVE,
        OTHER
    };
    // Here is declared a Qt meta-enum.
    Q_ENUM(Status)

    QString name() const;
    void setName(const QString &name);

    Status status() const;
    void setStatus(const Status &status);

private:
    QString m_name;
    Status m_status;
};
{code}
{code:java}
#ifdef __EMSCRIPTEN__
#include <emscripten/bind.h>

// And here we can see kind of copy of the informations already given to Qt meta-object system.
EMSCRIPTEN_BINDINGS(my_example) {

    emscripten::class_<DBObject>(""DBObject"")
            .property(""id"", &DBObject::id, &DBObject::setId);

    emscripten::enum_<User::Status>(""UserStatus"")
            .value(""INACTIVE"", User::Status::INACTIVE)
            .value(""ACTIVE"", User::Status::ACTIVE)
            .value(""OTHER"", User::Status::OTHER);
    emscripten::class_<User, emscripten::base<DBObject>>(""User"")
            .property(""name"", &User::name, &User::setName)
            .property(""status"", &User::status, &User::setStatus);
}

#endif
{code}
All the code in the EMSCRIPTEN_BINDINGS macro could be avoided when using Qt Meta-Object System.

The whole (working) code is available in MetaExample.tar.gz.

Emscripten reference:
 [http://kripken.github.io/emscripten-site/docs/porting/connecting_cpp_and_javascript/embind.html]
 [http://kripken.github.io/emscripten-site/docs/api_reference/bind.h.html]",,,,,,,,,,,,,,,QTCREATORBUG-22400,,,,"26 Oct '18 16:32;qvignaud;MetaExample.tar.gz;https://bugreports.qt.io/secure/attachment/77585/MetaExample.tar.gz",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,QTBUG-82936,9223372036854775807,,,WebAssembly,,,,,,"0|i0jnkv:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"01 Nov '18 01:16;lpotter;I like this idea, but wonder what the effect of doing this has on all classes would do to memory use and performance.

As well, using embind is mainly to be able to use C++ classes and members from javascript and how often do we or users really need to do this.

That said, well worth exploring.
","01 Nov '18 17:53;qvignaud;I don't think it would be desirable to export _all_ classes that way.

But maybe adding a {{qmake}} option telling what header files should be parsed for that, or including a macro like {{Q_EMBIND}} in classes declarations that should be exposed in WASM module.

This could be useful for users who wants to use Qt & WebAssembly as a background program without graphical side, and manage the webpage as a classic one, with usual JavaScript/HTML.

There is also a point liked with this, about allowing QString and Qt containers (QVector, QList, QMap, etc) to be converted in JS types (as it is natively done for std::string, std::vector and std::map by Embind). Maybe that point should have its own suggestion ?
More about this here : [http://kripken.github.io/emscripten-site/docs/porting/connecting_cpp_and_javascript/embind.html#built-in-type-conversions]",,,,,,,,,,,,,,,,,,,,
OpenSSL Server-side session resumption does not work,QTBUG-77917,283481,Suggestion,Open,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,cnn,addisonelliott,addisonelliott,29 Aug '19 02:57,17 Mar '20 07:39,18 Feb '21 09:41,,5.13.0,,,,,,,,,,,,,,,,,,,,,6.x,Network: SSL,,,,0,,,,"Hello,

 

+*Problem*+

Using QSslSocket for server-side encryption does not take advantage of session resumption, whether it be session ID's or session tickets.

 

+*What is happening*+

After digging, this is due to the OpenSSL context being recreated each time a new SSL socket is setup. As a result, the session ticket private key is not known upon reconnection and thus the session resumption is ignored. See for relevant code: [https://github.com/qt/qtbase/blob/5.12/src/network/ssl/qsslcontext_openssl.cpp#L85]**

 

+*Use case*+

I have a HTTP server written around QTcpServer that I was hoping to utilize session resumption for. In addition, there is a WIP qtlabs project that would benefit from session resumption as well: https://bugreports.qt.io/browse/QTBUG-60105. I imagine there are other performance advantages to reusing the SSL context.

 

+*Current approach*+

I've attached a patch with some *rough* proof-of-concept code that demonstrates that reusing the context allows session resumption to work.

I've used Qt for awhile now but I'm new to the Qt-development world. I'm happy to submit a patch for this issue, but I would like to discuss the best method of reusing the OpenSSL context.

I save the QSslContext (private class) in QSslConfigurationPrivate as a shared pointer. I would set this shared data pointer and that should keep the context alive so long as the configuration is saved. However, QSslConfiguration performs a deep-copy when QSslSocket::setSslConfiguration is called, so the context ends up being deleted once the socket is closed. My hack was to remove the deep-copying but I don't think this is a good idea since QSslConfiguration::sessionCipher is dependent on the QSslSocket and so shallow-copying means this will change whenever the configuration is passed to a new socket.

 

*Note:* To quickly see the important changes in my patch, go to line 1029.

 

Alternatives:
 * Original implementation of QSslContext made mention of making it public eventually, could do this and then have the user save a copy of the context as a shared pointer

 

What is the best course of action?",,,,,,,,,,,,,,,,,,,"29 Aug '19 02:55;addisonelliott;sslResumption.patch;https://bugreports.qt.io/secure/attachment/86687/sslResumption.patch",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,mkalinow,All,,,,,,"0|i0nev2:zzzzy",9223372036854775807,9223372036854775807,,,,ablasche,Qt6_Foundation_ Sprint 2,,,,,,,21.0,,"30 Aug '19 07:54;tpochep;This can only happen in Qt 6.","05 Sep '19 12:17;addisonelliott;How come this can only happen in Qt 6?

 

I think it would be good to get these changes in to at least one branch of Qt 5 in case there are applications that don't migrate to Qt 6.","15 Sep '19 12:35;addisonelliott;[~tpochep] Can you explain to me why this could only happen in Qt 6?

 

I think there is a way to implement this feature in Qt 5 without breaking compatibility and I think it would be good to get in a Qt 5 release.",,,,,,,,,,,,,,,,,,,
Provide a means to upload/download a file while the application is in the background,QTBUG-82365,293950,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,cnn,andysh,andysh,20 Feb '20 09:04,14 Mar '20 16:02,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,Some future release,Network,,,,5,Reported_by_support_standard,,,"Provide a means to upload/download a file while the application is in the background. Currently this is not possible on iOS at least because the session is not kept active when in the background. There is an article about this from ICS and how to do it with iOS here in terms of downloading at least:

https://www.ics.com/blog/downloading-large-files-ios-no-longer-nightmare

Small files are fine as they download in time before the application stops some resources, but large files get hit by this issue. So being able to do it while in the background would be handy here.

Edit: Added that it was related to uploading as well as downloading as this was missed previously",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0nkj3:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"20 Feb '20 11:30;tpochep;While the task/suggestion is very feasible, I don't see immediately, how it would fit into the QNAM's architecture (the original report mentioned the use of QNAM). It would also appear you want this functionality on all platforms, not iOS-specific?","20 Feb '20 11:49;andysh;On all platforms where it makes sense really, I don't know if another approach is needed for Android or UWP, but at least iOS does require another approach.","14 Mar '20 16:01;Harald Meyer;[~andysh] WinRT works like iOS background fetch. The approach on Android is very similar but it works only for downloads. You have to create a custom Android service for uploads. 

Android: https://developer.android.com/reference/android/app/DownloadManager.html
WinRT: https://docs.microsoft.com/en-us/uwp/api/windows.networking.backgroundtransfer.backgrounddownloader","14 Mar '20 16:02;Harald Meyer;I have working Qt code for iOS and Android here but no clue how it could be integrated with the core Qt framework.",,,,,,,,,,,,,,,,,,
Provide method to remove a single entry from QML Type Cache,QTBUG-81116,291051,Suggestion,Open,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,qt.team.quick.subscriptions,Chrisu,Chrisu,07 Jan '20 07:19,09 Mar '20 11:23,18 Feb '21 09:41,,5.13.2,,,,,,,,,,,,,,,,,,,,,,QML: Declarative and Javascript Engine,,,,2,,,,"QQmlEngine provides 2 functions for managing in-memory cache: 
* {{clearComponentCache()}} - remove all cache entries
* {{trimComponentCache()}} - remove unused entries (of which no instance exists)

*Request:*
Add a function to remove a single file from the cache. As a result a newly created instance from this QML file should contain changes to that file. Example: feature for resetting source property of Loader, after the source file was changed.

Example:
{code:java}
Loader {
  id: loader
  source: ""FileThatChanges.qml""
}

// click button after making changes to the QML file ""FileThatChanges.qml"" or another file that is included by ""FileThatChanges.qml""
Button {
  text: ""Reload""
  onClicked: {
    var src = loader.source
    loader.source = """"
    qmlEngine.removeFromComponentCache(src) // a C++ interface for this would be enough
    loader.soruce = src
  }
}
{code}


This can be done right now with the {{TypeCache}} property in {{QQmlTypeLoader}}, but it is private. So adding an accessor for {{m_typeCache}} in {{qqmltypeloader_p.h}} or a function like {{removeFromComponentCache(QString fileName)}} would be enough.

*Use case:*
Allow changes to QML files at runtime without clearing the whole cache. {{trimComponentCache()}} cannot always be used for this, because QML cache entries can reference one another, thus it won't clear entries referenced from other entries of which instances still exist (even if the sub-QML instance itself is deleted!).",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0n4gf:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"07 Jan '20 07:33;ulherman;Well, the fact that you want to forcefully delete an entry for which references from other entries still exist is a problem. Afterwards you either have dangling references or two components for the same file. This is dangerous.","07 Jan '20 10:06;Chrisu;[~ulherman] Thanks for the response; I understand that might be a problem. 

Our use case is to allow changes in QML files at runtime. Assume the only reference to a component of that file is in the root component of the QML tree (possibly as transitive reference), and that root component never does get instantiated a second time (or at least not without clearing the QML cache first). Additionally all actual instances of the component we want to remove from the cache are also destroyed (by removing them from the QML tree and deleting the objects), plus instances of components that might reference its component. 

{{trimComponentCache()}} still does not work as the root QML component has a reference to the component to delete. Even though we don't re-use that component.

So I understand the requested API is for advanced / dangerous usage. An accessor in the private API would be fine.",,,,,,,,,,,,,,,,,,,,
ScrollView is missing API to position the contentItem,QTBUG-75412,277604,Suggestion,Open,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,mitch_curtis,iamsergio,iamsergio,25 Apr '19 19:08,08 Mar '20 14:18,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Quick: Controls 2,,,,2,,,,"The QQC1 had a more rich API for this and directly exposed the flickable, allowing to change the content item's X,Y

The workarounds of looking for the flickable in the control's children or doing it indirectly via the scroll bars is not so nice ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0l05b:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"08 May '19 20:15;pestophagous;I'm not sure whether [~iamsergio] (the OP) was specifically requesting an API such as ""ensureVisible"", but that is the need that I have.

I found a way to roll my own: [https://stackoverflow.com/questions/45946637/how-to-make-flickable-ensure-the-visibility-of-an-item-inside-of-it]

But I find it surprising that such a concept is not baked into the Flickable already.  Or maybe it is, and I am misunderstanding or not reading the right docs.","08 Mar '20 14:18;mitch_curtis;From a quick look, the contentItem is always a flickable, so it should be possible to use that to position content. If it is, we could make that more explicit by documenting it. Exposing a ""flickable"" property would be more obvious and user-friendly, although a bit redundant.",,,,,,,,,,,,,,,,,,,,
QMacToolBar: Add any QWidget to a unified toolbar,QTBUG-81001,290813,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,,janfaroe,janfaroe,28 Dec '19 16:17,06 Mar '20 08:47,18 Feb '21 09:41,,5.12.0,,,,,,,,,,,,,,,,,,,,,,Extras: Mac,,,,0,,,,"It's no longer possible to add a QWidget to a unified toolbar. It was possible in 4.x and up to 5.2, I believe. Only allowing QIcon in QMacToolBar is very limiting. 

In my case, I'm having a widget with a browser like toolbar (a text field along with some buttons). 

It also affects the way that a proper Preferences window is supposed to work and look like. Buttons should be in a button group in a unified toolbar. This is not possible like it used to.

Similar request, albeit a bit more specific:
https://bugreports.qt.io/browse/QTBUG-41772?jql=text%20~%20%22QMacToolBar%22

 ",macOS,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,macOS,,,,,,"0|i0n31z:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Only use QMacPasteboardMimeAny when the format is not supported natively,QTBUG-76100,279281,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,,andysh,andysh,29 May '19 08:37,06 Mar '20 08:47,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,QPA,,,,1,Reported_by_support_standard,,,"QMacPasteboardMimeAny is always included when copy/pasting which means it can end up covering for formats that are already available either due to what Qt already supports or for formats covered by the application which has registered its own handler for a mime type. Therefore we should consider only including this if it is for a format that Qt does not support specifically or provided by the application. 

Since Qt 5 has long been out then the chances of this being needed due to compatibility with older Qt versions would be minimal at worse so excluding this type would at least mean it does not have ""com.trolltech.anymime"" included when it is not necessary.",,,,,,,,,,,,,,,,,,,"19 Jun '19 11:45;yaryar;qmacclipboard.mm;https://bugreports.qt.io/secure/attachment/84772/qmacclipboard.mm",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,macOS,,,,,,"0|i0l9bj:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"29 May '19 13:03;yaryar;I can provide additional data on this issue, will report on a proposed fix soon.

 ","19 Jun '19 11:49;yaryar;This is the proposed implementation (for Qt 5.12.3, but works equally well in 5.9.7).

 [^qmacclipboard.mm] 
",,,,,,,,,,,,,,,,,,,,
"Add an option to ""macdeployqt"" which decides which way the dylib install names should be specified (@rpath vs others)",QTBUG-75823,278503,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,,skalee,skalee,14 May '19 16:09,06 Mar '20 08:46,18 Feb '21 09:41,,5.12.3,,,,,,,,,,,,,,,,,,,,,,Build tools: macdeployqt,,,,0,,,,"h2. Problem description

Typically, install names for bundled libraries are specified in one of these ways:

# Path relative to executable (@executable_path, @loader_path).
# Path relative to LC_RPATH (@rpath).

It appears that @executable_path/@loader_path approach still has valid use cases (see https://codereview.qt-project.org/#/c/138349).  However for common applications, @rpath is generally easier to read and less problematic.

The ""macdeployqt"" tool is capable of doing both (note bug QTBUG-75762 though).  It is unclear to me on what basis it decides whether to go with one or another.  I suspect the ""-no-rpath"" option which can be passed to the ""configure"" script when building Qt from source.

h2. Suggestion

All above lead me to a conclusion that user should be able to decide which install names strategy is best suitable for given project, regardless of Qt installation settings.  Therefore, I suggest implementing one of following:

# Adding two CLI options to the ""macdeployqt"" tool: ""-rpath"" and ""-no-rpath"", which override default choice made by this tool.
# Adding one CLI option to the ""macdeployqt"" tool: ""-no-rpath"", which disables @rpath approach.  That implies that @rpath approach is used by default, which is probably a breaking change.  Note that maintainers of Homebrew Qt package seem to rely on current behaviour.
# Add some QMake variable which defines which approach is suitable for project.

h2. Side notes

# Fixing that will make QTBUG-75762 far less serious, as that bug does not occur when @rpath approach is used.
# cc [~sorvig] who is assigned to above ticket.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,macOS,,,,,,"0|i0l4zb:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
It would be nice if we have + sign button to add new Tab,QTBUG-81882,292872,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,qt.team.quick.subscriptions,irfan.omair@digia.com,irfan.omair@digia.com,05 Feb '20 08:53,27 Feb '20 11:38,18 Feb '21 09:41,,5.14.0,,,,,,,,,,,,,,,,,,,,,,Widgets: Main Window,,,,1,Reported_by_support_standard,,,It is very common on Mac and other platform to have + button on right to create a new Tab in main windows application. It would be nice if Qt has some Api for this.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,macOS,,,,,,"0|i0nebr:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
rcc: Add an option that allows a include file to be passed in (like moc's -f option) so that a pch file can be included,QTBUG-81886,292876,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,hjk,sruard,sruard,05 Feb '20 10:26,24 Feb '20 16:29,18 Feb '21 09:41,,5.14.1,,,,,,,,,,,,,,,,,,,,,,Build tools: rcc,,,,0,,,,"rcc: Add an option that allows a include file to be passed in (like moc's -b option) so that a pch file can be included in the generated qrc file

 

I have already foud this bug :

https://bugreports.qt.io/browse/QTBUG-4091

but the response was ""old bug, please report again if still valid""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0necn:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"05 Feb '20 10:45;hjk;I don't understand the use case. Can you please spell out what should work?","05 Feb '20 13:02;sruard;in my case , in our project, we are using precomiled headers, so all cpp files must include something like :

#include <EditorPrecompiledHeaders.h>

so for now i have added a post rcc.exe step who inject the header at the top of the _qrc.cpp file.

There is this option in the moc .exe to add this sort of include ( -b like "" -b EditorPrecompiledHeaders.h""   ) but not in the rcc.exe","05 Feb '20 14:27;hjk;But there is no code in _qrc.cpp that depends on anything outside, there's not even a single #include, so nothing from your  <EditorPrecompiledHeaders.h> will be used. Why should it then be included?

moc output is different, it has a few #includes","05 Feb '20 14:47;sruard;yep but theses _qrc.cpp have to be compiled & linked, so in our case we must include this precompiled header.

It's mandatory in our case for all cpps files, the compil fail if this header is not at the 1st line of the cpp","05 Feb '20 16:41;hjk;Which compiler is requiring such a thing?  Or is this some kind of project policy?","05 Feb '20 17:05;sruard;yep it's a project policy, and we using Fast Build for compilation","05 Feb '20 17:32;hjk;Ok... I am tempted to call that 'out of scope'. This seems a very unusual case, and getting the same result on the buildsystem side seem possible. 

With e.g. qmake you could have a script 'myrcc.sh'
{code}
#!/bin/bash
echo '#include <EditorPrecompiledHeaders.h>'
/path/to/realrcc ""$@""
{code}

and set QMAKE_RCC=/path/to/myrcc.sh in the .pro.


","05 Feb '20 22:43;sruard;hello again

first we are not using .pro & qmake files, we using FastBuild System, and i have already found a ""like you hack"" using Dos batch file. but i wanted something more ""clean"" solution.

Thx hjk !

 ",,,,,,,,,,,,,,
Expose QCommandLineParser to QML,QTBUG-81977,293116,Suggestion,Open,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,qt.team.quick.subscriptions,mitch_curtis,mitch_curtis,08 Feb '20 11:21,21 Feb '20 16:11,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Quick: Core Declarative QML ,,,,1,,,,"With context properties going away, accessing application arguments in QML becomes more difficult, requiring e.g. a custom singleton that forwards calls to a QCommandLineParser instance. Application arguments are very useful for controlling things like speeding up animations, etc.

So I'm proposing having e.g. a CommandLineParser singleton that exposes some API from QCommandLineParser, like isSet():

https://doc.qt.io/qt-5/qcommandlineparser.html#isSet

Users could perhaps set the parser to be used by the singleton via some static function in C++, or a function belonging to QQmlEngine.

Another alternative would be to call it something a bit more QML-friendly, like ApplicationArguments. Personally, I've created an AppArgs singleton that will do the job for my project, but I suspect everyone will have to roll their own once context properties go away.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0nfnj:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"08 Feb '20 12:40;mitch_curtis;Although... there is an issue with QCommandLineParser's API: you can't programmatically set arguments. Previously I was setting context properties based on the application arguments, and some arguments would imply others. For example:

{code}
mEngine->rootContext()->setContextProperty(""skipLoadingScreen"", fastStartup || mCommandLineParser.isSet(""skipLoadingScreen""));
mEngine->rootContext()->setContextProperty(""instantNewGame"", fastStartup || mCommandLineParser.isSet(""instantNewGame""));
mEngine->rootContext()->setContextProperty(""fastUiAnimations"", fastStartup || mCommandLineParser.isSet(""fastUiAnimations""));
{code}

Since you can't do that with QCommandLineParser, I added a forceSet function to my AppArgs singleton:

{code}
bool AppArgs::isSet(const QString &arg) const
{
    if (!mParser) {
        qWarning() << ""No parser set!"";
        return false;
    }
    return mParser->isSet(arg) || mForceSetOptions.contains(arg);
}

// Useful for e.g. tests to set arguments, since it's not possible to set
// arguments in QCommandLineParser programmatically.
void AppArgs::forceSet(const QString &arg)
{
    mForceSetOptions.insert(arg);
}
{code}

Then I use it like this:
{code}
if (fastStartup) {
    AppArgs::instance()->forceSet(""skipLoadingScreen"");
    AppArgs::instance()->forceSet(""instantNewGame"");
    AppArgs::instance()->forceSet(""fastUiAnimations"");
}
{code}

This is also useful for e.g. auto tests, where in my case I test the entire application, and I don't want to have to remember to pass ""fastStartup"" every time I set up the project in Creator (which happens more often than you'd think).","10 Feb '20 07:44;fabiankosmale;So, I think there are two issues here.
# The first issue is that you see a need for a custom singleton. Is the issue that you need to access those properties from multiple files, and that it's inconvenient to pass them down from your main entry point? Because otherwise you could just declare the properties in your main.qml and use QQuickView::setInitialProperties or one of its sibling methods.
 # The second issue is the suggestion to enable CLI parsing from QML. We could either provide a singleton which gives you an imperative API (isSet), or as an instantiable type. Maybe like Qt.labs.settings

{code:java}
 ApplicationArguments {
    property string foo // optional positional argument, only one
    property list<string> bar // can be set multiple times (ignore that list<string> does not work)
    required property int baz // mandatory argument, parsed as int
}
{code}
Alternatively, like ListModel
{code:java}
ApplicationArguments {
    Argument {
          name: ""foo""
          helpText: ""...""
    }
    Argument { 
        name: ""bar""
        argumentCount: Argument.Multiple
    }
   Argument { name: ""baz""; required: true}
}
{code}
The issue with the first is that it's a bit magic, and adding a help text will a bit hard, the issue with the second that we lack a good way to access the arguments in a typed way. There's also the question what should happen if a mandatory argument is not provided, but I think the best way would to just provide a readonly property isValid, and let the user decide what to do with it.
","10 Feb '20 08:05;mitch_curtis;{quote}
The first issue is that you see a need for a custom singleton. Is the issue that you need to access those properties from multiple files, and that it's inconvenient to pass them down from your main entry point? Because otherwise you could just declare the properties in your main.qml and use QQuickView::setInitialProperties or one of its sibling methods.
{quote}
Yep, multiple files.

{quote}
The second issue is the suggestion to enable CLI parsing from QML. We could either provide a singleton which gives you an imperative API (isSet), or as an instantiable type. Maybe like Qt.labs.settings
{quote}
The imperative API would be enough for me personally, since I'm already handling the arguments in C++, but I can see how the declarative API would be useful for people who don't want to use C\+\+.","21 Feb '20 14:59;ulherman;This is not actually a core language feature. It should be done as a separate import, qt.labs.commandline or similar.","21 Feb '20 16:11;srutledg;We've talked about having some sort of system module before; I forgot what all we had in mind to go in there.  It doesn't have to start out in Qt.labs if we are confident about the API from the beginning.",,,,,,,,,,,,,,,,,
Support javascript functions from javascript array model to delegates,QTBUG-81241,291226,Suggestion,Open,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,qt.team.quick.subscriptions,poikelin,poikelin,08 Jan '20 11:44,21 Feb '20 14:55,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,QML: Declarative and Javascript Engine,,,,1,Reported_by_support_standard,,,"In case like this:

{code}
ListView {
 model: [ { fn: function(){...} }, ... ]
 delegate: MouseArea {
  onClicked: fn()
 }
}
{code}

This could be worked around by using an array of QtObjects, but it would be nice if this also worked with plain javascript objects",,,,,,,,,,,,,,,QTBUG-76848,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0n5i7:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"21 Feb '20 14:55;ulherman;We're aiming to make the model/delegate interaction type safe. You can already do part of this with required properties, and we will add equivalent support for defining some sort of typed model data. Arbitrary JavaScript objects don't play well with this idea. I suggest keeping those functions in a list indexed by ID and passing the length of the list as model:

{code}
ListView {
    id: list

    property var functions: [ function() {...}, ... ]
    model: functions.length

    delegate: MouseArea {
        required property int index
        onClicked: list.functions[index]()
    }
}
{code}",,,,,,,,,,,,,,,,,,,,,
QXmlStreamWriter missing raiseError() and similar functions,QTBUG-82389,293989,Suggestion,Open,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,,phlucious,phlucious,20 Feb '20 21:19,21 Feb '20 04:11,18 Feb '21 09:41,,5.11.1,5.11.2,5.14.1,,,,,,,,,,,,,,,,,,,,XML: Stream Reader/Writer,,,,0,,,,"[QXmlStreamReader::raiseError|https://doc.qt.io/qt-5/qxmlstreamreader.html#raiseError]() is very useful when implementing custom XML readers, and makes it easy to check for both standard and custom errors with [hasError|https://doc.qt.io/qt-5/qxmlstreamreader.html#hasError]() and [errorString|https://doc.qt.io/qt-5/qxmlstreamreader.html#errorString]().

Oddly enough, [QXmlStreamWriter|https://doc.qt.io/qt-5/qxmlstreamwriter.html] doesn't have the same functionality. It'd be nice if it did.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0nkqf:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Feature Request: API to find intersection point of two series in Qt Charts,QTBUG-82363,293946,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,e0348803,shmittal,shmittal,20 Feb '20 08:36,20 Feb '20 08:38,18 Feb '21 09:41,,5.14.1,,,,,,,,,,,,,,,,,,,,,,Charts,,,,0,Reported_by_support_standard,,,"If a Chartview has more than one series, it would be good if some API is designed to find the intersection point of two series. 
Please refer to the attached snapshot for reference. 
",,,,,,,,,,,,,,,,,,,"20 Feb '20 08:38;shmittal;qtbug82363.PNG;https://bugreports.qt.io/secure/attachment/92222/qtbug82363.PNG",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0nki7:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Multi-Threaded program - qTzSet calls in QDateTime,QTBUG-82268,293701,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,Eddy,abde13,abde13,17 Feb '20 21:35,18 Feb '20 10:33,18 Feb '21 09:41,,5.10.1,,,,,,,,,,,,,,,,,,,,,,Core: Date/Time,,,,0,,,,"Hi,

I use QOCI to request data from Oracle. When i fetch a much data (4000 rows), Qt take 40% of time in futex . 

I investiguated and i see in qtcode/qdatetime.cpp, qTzSet() is called every row fetched (because i have a date type column) and just after localtime_r is called.

qTzSet is thread safe. Qt have a mutex lock and glibc also has => it's bad performance for many calls and many concurrents threads..

Is not necessary for me to refresh timezone every row. I export TZ environment variable before start program.

It's possible to envisage a variable macro to configure if we want refresh timezone or no when we are in multithread environnement ?

 

Thx.

 ",,,,,,,,,,,,,,,QTBUG-56899,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0nj5j:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"18 Feb '20 09:39;Eddy;If I understand the comments in the code correctly, the {{qTzSet()}} calls are there to ensure we have picked up any change to the environment that may have happened.  This is probably over-kill &ndash; relatively few processes change system time-zone more than once&nbsp;! &ndash; although we do have some tests of {{QDateTime}} itself that do so.

This looks like another reason to add an API for overtly changing the system time-zone in use by Qt (rather than implicitly changing it by setting an environment variable, which is what these {{qTzSet()}} calls are trying to handle).  See QTBUG-56899.","18 Feb '20 09:41;Eddy;All of the {{qTzSet()}} calls are in code converting between UTC and local-time.  If you consistently use UTC time (which is often a good plan and always cheaper), you'll avoid this problem.","18 Feb '20 10:33;abde13;Thx for your response. I can not work with UTC time. All application is based on zoneinfo/Europe/Paris",,,,,,,,,,,,,,,,,,,
Add BSSID support to QNetworkConfigurationManager,QTBUG-82036,293277,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,teemu.holappa,karimpinter,karimpinter,11 Feb '20 09:56,18 Feb '20 09:41,18 Feb '21 09:41,,5.14.1,,,,,,,,,,,,,,,,,,,,,,Device Creation: Device Utilities,,,,1,Reported_by_support_standard,,,"Would be nice if Qt would support BSSID, scanning and connecting too.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Other,,,,,,"0|i0ngm7:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"11 Feb '20 10:34;karimpinter;It doesn't have to be in QNetworkConfigurationManager, but would be nice if Qt Networking would support BSSID.","11 Feb '20 10:49;tpochep;With this I agree.","11 Feb '20 13:08;eninyo;note that you should add the support also for scan that gets BSSIDs and not just SSIDs so this can be use for the connect_using_bssid method (or something like that)","11 Feb '20 13:10;eninyo;[~karimpinter], what do you mean ""there""? where is it ""there""? where do you suggest to add this?","11 Feb '20 13:27;karimpinter;[~eninyo] I have updated my comment.","18 Feb '20 07:27;eninyo;[~tpochep], I saw you changed the status to ""need more info"". what extra info do you need?","18 Feb '20 08:16;manordheim;[~eninyo]: The info needed was if this is related to boot2qt/device creation or not as it's not apparent from this bugreport","18 Feb '20 09:18;eninyo;[~manordheim], yes, the source of this bug was working on the Qt image for the NVIDIA Jetson TX2 that based on b2qt.

but it might be nice to have it on windows also (or other platform). ","18 Feb '20 09:41;manordheim;[~eninyo]: Thanks for the reply! Unfortunately when it comes to supporting this in 'regular' Qt it is somewhat difficult as there are platforms where we would not have any access to this info (both scanning and connecting). On mobile platforms simply scanning usually requires extra privileges due to it being possible to use IDs for location tracking. And connecting is handled by the OS. So there would be big platforms differences which IMO we should try to avoid in the main modules.",,,,,,,,,,,,,
Add one more option for the ListView header positioning,QTBUG-76817,280766,Suggestion,Open,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,qt.team.quick.subscriptions,danilpinchuk,danilpinchuk,01 Jul '19 14:12,18 Feb '20 09:02,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Quick: Core Declarative QML ,,,,5,,,,"It's useful to have one more option for the header positioning: PullBackHeaderAligned, which allows to align the header after user moved the list.

The header behaves like PullBackHeader option but there is an additional logic: after predefined timeout it should be shown/hidden completely according to the size of visible part of it.

So, if the header has been left with more than 50% of its height, it should be pulled back smoothly, and if the header has been almost hidden by user, it should smoothly slide up.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0li47:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"13 Feb '20 09:56;smd;If you set
{code:java}
 snapMode: ListView.SnapToItem{code}
and use this patch (recently merged in 5.14)

[https://codereview.qt-project.org/c/qt/qtdeclarative/+/283961]

It should work I think. The patch changes the behavior of PullbackHeader to actually also ""snap"" the header if needed.

Will that solve the issue you are seeing?

 ","13 Feb '20 10:18;danilpinchuk;Does it work like I described? I'm not sure because I have checked the patch but found nothing related to timeout before header align procedure. Also I'm not sure that this logic should work only when snapping to items is enabled.","17 Feb '20 14:40;smd;No, it doesn't work exactly as described, but I was hoping with [https://codereview.qt-project.org/c/qt/qtdeclarative/+/283961] it was sufficient..

Anyway, there are several things I don't like with this:
 * It might align even when you don't release the mouse.
 * It should be rebased to work on top of [https://codereview.qt-project.org/c/qt/qtdeclarative/+/283961] (since it fixes several issues with regards to snapping)
 * It doesn't work with snapMode = ListView.SnapToItem
 * It uses its own timer, so that if it has snapMode = ListView.SnapToItem, it won't be synchronized to the normal ""fixup"" animation.
 * It doesn't work in reverse mode (e.g. BottomToTop or RightToLeft)

In addition, maybe it would be better to have some kind of custom ""fixup"" for header specificially (e.g. we don't add another enum), but we can for instance have a a slot where the programmer can customize the behaviour of the header, so that it would enable arbitrary header behaviors.

 ","17 Feb '20 15:06;danilpinchuk;I can agree with most of what you've said here, and I personally like the idea of custom fixup animation - in that case we could remove our patch from the Qt sources and just implement the required animation from the client side, in our qml code. All we need is the way to affect headers' position by overriding its default behavior which isn't sufficient for now.",,,,,,,,,,,,,,,,,,
Add chromedriver support to Qt Webengine,QTBUG-82046,293307,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,qt_webengine_team,karimpinter,karimpinter,11 Feb '20 13:35,13 Feb '20 10:38,18 Feb '21 09:41,,5.14.1,,,,,,,,,,,,,,,,,,,,,,WebEngine,,,,1,reported_by_support_standard,,,For testing purposes would be nice to have chromedriver support.,,,,,,,,,,QTBUG-61676,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0ngsv:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"12 Feb '20 14:55;allan.jensen;Unfortunately chromedriver depends on Extensions for its automation.",,,,,,,,,,,,,,,,,,,,,
Build with link-time optimization using mingw-w64 fails,QTBUG-75915,278764,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,qtbuildsystem,benjaminbihler,benjaminbihler,20 May '19 08:41,13 Feb '20 09:00,18 Feb '21 09:41,,5.12.3,,,,,,,,,,,,,,,,,,,,,,Build System,,,,0,mingw,,,Please see [https://stackoverflow.com/questions/56131928/how-can-i-build-qt-with-link-time-optimization-using-mingw-w64/56217145#56217145] for a problem description and also the solution.,,,,,,,,,,,,,,,,,,,"03 Jun '19 08:14;benjaminbihler;BuildCommands.txt;https://bugreports.qt.io/secure/attachment/84375/BuildCommands.txt","31 May '19 10:36;jbornema;moc-build.log;https://bugreports.qt.io/secure/attachment/84340/moc-build.log",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Windows,,,,,,"0|i0l67r:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"21 May '19 06:06;jbornema;The suggestion is to use 
{code}
QMAKE_LFLAGS_LTCG = $$QMAKE_CFLAGS_LTCG -Wl,-allow-multiple-definition
{code}
for MinGW builds.

...and the Qt DLLs this produces work fine?","21 May '19 07:32;benjaminbihler;Why not a bug? Isn't Qt supposed to work with Mingw-w64? Or does the documentation state somewhere, that link-time code generation is not supported with Mingw-w64? I had expected this to work and have perceived this as an unexpected misbehaviour (i.e. bug?!).

 

Yes, the DLLs work fine. The first error messages have occurred when building Qt5Gui.dll and after fixing the build, my application using Qt5Gui.dll among other Qt libraries works completely fine up to now. Of course this is only a sample inspection.

 ","21 May '19 08:25;kkohne;bq. Why not a bug? Isn't Qt supposed to work with Mingw-w64?

Sure it does. But MinGW has apparently problems with link-time code generation. We can consider using -allow-multiple-definition, but as someone commenting in stackoverflow already pointed out: That's a big stone to kill a sparrow ... Ideally upstream would fix the underlying problem.","21 May '19 08:56;cadam;I think the OP wouldn't mind if  {{-Wl,-allow-multiple-definition}} would only be set while building Qt libraries, and not affecting the user code.

Alternatively one could consume the Qt libraries from a different build system (e.g. CMake) where the {{QMAKE_LFLAGS_LTCG}} do not pose any threat. One needs at least CMake 3.9 in order to use [IPO/LTO|https://cmake.org/cmake/help/latest/module/CheckIPOSupported.html].","29 May '19 07:31;kkohne;Alright, this needs to be investigated further...","31 May '19 10:37;jbornema;I cannot even build moc with ltcg with or without your patch. See attachment.
I'm using Qt 5.12 and this gcc:
{noformat}
>gcc --version
gcc (x86_64-posix-seh-rev0, Built by MinGW-W64 project) 8.1.0
{noformat}","31 May '19 10:37;jbornema;What exact toolchain are you using?","03 Jun '19 08:17;benjaminbihler;>gcc --version

gcc.exe (x86_64-posix-seh-rev0, Built by MinGW-W64 project) 8.1.0

 

I have attached the commands I use for building as ""BuildCommands.txt"".

Once I had problems when I had installed MinGW-W64 into a path containing spaces. But that seems not to be the case with your build according to the log...","13 Feb '20 09:00;jbornema;There's not much we can do about this right now given the LTCG-state of MinGW.
Work around this issue by modifying your mkspec.

Re-assess this issue once we've settled on the MinGW distro for Qt 6.",,,,,,,,,,,,,
Returning query results in binary format for PostgreSQL,QTBUG-81828,292771,Suggestion,Open,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,mabrand,amiart,amiart,03 Feb '20 22:38,08 Feb '20 15:03,18 Feb '21 09:41,,5.12.6,,,,,,,,,,,,,,,,,,,,,,SQL Support,,,,0,optimization,Performance,PostgreSQL,"PostgreSQL supports sending query results in text or binary format:

[https://www.postgresql.org/docs/current/protocol-overview.html#PROTOCOL-FORMAT-CODES]

Currently, the QSQL plugin uses a text format that is less efficient than the binary format. Other libraries like Npgsql for C# use binary format and run much faster than QPSQL.

For example, getting the SQL query result:
{code:java}
SELECT seq.num::boolean AS bval, 
                seq.num::integer AS intval, 
                seq.num::double precision * 0.1 AS dblval,
                'żółwik' || seq.num AS strval, 
                '2000-01-01 00:00'::timestamp + (seq.num || ' second')::interval AS tmval 
FROM (SELECT generate_series(0, 5000000) AS num) seq;{code}

 for MSVC2015 + Qt 5.12.6 it takes:
 24786 msecs

and for .NET Framework 4.7.2 + Npgsql 4.1.2:
 12897 msecs

The tests I did show that changing the implementation from a text to binary format would give similar results as C #:

benchmarkSequence_Libpq_binaryFormat ():
 12608 msecs
 benchmarkSequence_Libpq_textFormat ():
 19828 msecs
 benchmarkSequence_QSqlQuery ():
 24786 msecs

I think it would be worth considering the binary format for QPSQL in Qt6.

Below I describe what should be done to support the binary format:
 - parse binary formats for different data types (see *send i *recv functions in PostgreSQL src\backend\utils\adt directory and [https://www.npgsql.org/doc/dev/type-representations.html])
 - split SQL queries into individual SQL commands and use the PQsendQueryParams () function with the resultFormat = 1 parameter instead of PQsendQuery ()
 - drop support for PostgreSQL 7.3, because it does not support binary format

 ",,,,,,,,,,,,,,,,,,,"03 Feb '20 22:29;amiart;Program.cs;https://bugreports.qt.io/secure/attachment/91745/Program.cs","03 Feb '20 22:29;amiart;tst_qsqlqueryformat.cpp;https://bugreports.qt.io/secure/attachment/91746/tst_qsqlqueryformat.cpp",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0ndpz:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"05 Feb '20 14:50;andysh;Worth having a look purely for performance benefits","08 Feb '20 15:03;amiart;For compatibility reasons, the text format should remain the default format, and the binary format could be activated on demand using a new function similar to QSqlQuery::setForwardOnly(bool).

It should also be noted that in binary mode queries must be broken into separate SQL commands which may affect slower execution of batch operations (multiple INSERTS or UPDATES).",,,,,,,,,,,,,,,,,,,,
Extend QtSvg support from SVG 1.2 tiny to SVG 1.1 full,QTBUG-79042,286266,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,,miikapernu,miikapernu,07 Oct '19 07:36,03 Feb '20 18:00,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,SVG Support,,,,3,Reported_by_support_standard,,,"According to the documentation currently only SVG 1.2 tiny [https://doc.qt.io/qt-5/svgrendering.html#rendering-svg-files|https://doc.qt.io/qt-5/svgrendering.html#rendering-svg-files)] is supported.

*Suggestion:* add support for SVG 1.1 (or SVG 1.2) full.",,,,,,,,,,,,,,,QTBUG-72026,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0md3r:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
It would be nice if there is an api to detect what mode is active (Dark/light),QTBUG-74210,274982,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,qt.team.quick.subscriptions,irfan.omair@digia.com,irfan.omair@digia.com,05 Mar '19 03:56,31 Jan '20 19:38,18 Feb '21 09:41,,5.12.1,,,,,,,,,,,,,,,,,,,,,,GUI: Look'n'Feel,,,,4,,,,It would be nice if Qt can provide a way to detect what is the active mode like dark mode or light mode on Mac.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,macOS,,,,,,"0|i0klkv:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"31 Jan '20 19:35;dhess;This is useful for iOS applications where you need to use the safeAreaMargins to restrict the user interface from the edges of the screen. You need to know what theme mode you are in so you can put the right color background there. Otherwise, if you are in Light mode and put a black background or Dark mode and put a white background, then you can't see the status bar.

What I've had to do in the meantime is force Dark mode with UIUserInterfaceStyle in Info.plist and then I can safely always put black there.",,,,,,,,,,,,,,,,,,,,,
Inject scripts in FIFO order,QTBUG-77765,283016,Suggestion,Open,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,juri.valdmann,juri.valdmann,juri.valdmann,22 Aug '19 09:07,29 Jan '20 12:51,18 Feb '21 09:41,,5.14,,,,,,,,,,,,,,,,,,,,,,WebEngine,,,,0,,,,"h4. Current behavior

Scripts added to QWebEngineScriptCollection are injected in pseudo-random order.

h4. Suggested behavior

Scripts added to QWebEngineScriptCollection are injected in the order they were added to the collection.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0bhj5:1",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
QSslSocket: Channel binding support,QTBUG-77783,283050,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,neustradamus,neustradamus,neustradamus,22 Aug '19 17:52,28 Jan '20 12:50,18 Feb '21 09:41,,5.12,5.12.4,5.12.5,5.13,5.13.0,5.13.1,5.14,5.14.0,5.14.0 Alpha,5.14.0 Beta 1,5.14.0 RC1,5.9,5.9.8,5.9.9,6.0,6.0.0,Some future release,,,,,,Network: SSL,,,,1,,,,"to get data  required for channel binding QSslSocket should have API to get data from SSL_get_finished()

https://paquier.xyz/postgresql-2/channel-binding-openssl/",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0lv3j:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"22 Aug '19 18:00;tpochep;Please, don't hesitate and contribute the implementation (OpenSSL, SecureTransport, SChannel). Thanks!","09 Sep '19 21:22;neustradamus;Linked to RFC5929: Channel Bindings for TLS
- https://tools.ietf.org/html/rfc5929
- https://www.iana.org/assignments/channel-binding-types/channel-binding-types.xhtml","28 Jan '20 12:50;neustradamus;Any news about this secure request?",,,,,,,,,,,,,,,,,,,
Mark explicit constructors as explicit in documentation,QTBUG-74440,275425,Suggestion,Open,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,docteam,jefernan,jefernan,14 Mar '19 13:16,24 Jan '20 15:17,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Documentation,,,,1,,,,"It is helpful to know when a constructor is marked as explicit without opening the class definition.

 

For example (QString.h): 
{code:java}
explicit QString(const QChar *unicode, int size = -1);
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0ko9b:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add support for 64bpp (16bit) image formats in QVideoFrame,QTBUG-74921,276544,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,valentyn.doroshchuk,andysh,andysh,03 Apr '19 08:48,22 Jan '20 11:01,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Multimedia,,,,0,Reported_by_support_standard,,,"Add support for 64bpp (16bit) image formats in QVideoFrame, as it is possible in gstreamer and with OpenGL to support these formats then it would be good to have this in QVideoFrame too.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0ktzz:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
provide standardized action button(s) (at least clear) in TextField,QTBUG-81541,291974,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,qt.team.quick.subscriptions,srutledg,srutledg,20 Jan '20 16:44,20 Jan '20 16:56,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Quick: Controls 2,,,,0,,,,"Anytime you use TextField to input any kind of search text, you probably want to have a clear button, because the user will change the search text often.  The way that is shown is fairly standardized, so probably each theme ought to provide standard icons and a terse way to declare that the TextField needs a clear button.

Maybe other buttons are also common like that?

",,,,,,,,,,,,,,,QTBUG-37373,QTBUG-76287,QTBUG-51023,,"20 Jan '20 16:48;srutledg;creator.png;https://bugreports.qt.io/secure/attachment/91372/creator.png","20 Jan '20 16:53;srutledg;gtk.png;https://bugreports.qt.io/secure/attachment/91382/gtk.png","20 Jan '20 16:48;srutledg;kcharselect.png;https://bugreports.qt.io/secure/attachment/91378/kcharselect.png",,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0n99r:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"20 Jan '20 16:56;grecko;Password reveals button are also common (for password fields)",,,,,,,,,,,,,,,,,,,,,
QImage Alpha Channel for TIFF files not correct for RGBI files,QTBUG-81118,291061,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,vgt,blgis,blgis,07 Jan '20 09:07,09 Jan '20 08:41,18 Feb '21 09:41,,5.14.0,5.9.7,,,,,,,,,,,,,,,,,,,,,Image formats,,,,0,,,,"If a TIFF Image in RGBI format (RGB and infrared channel) is loaded in a QImage, QImage::format() returns QImage::Format_ARGB32 and QImage::hasAlphaChannel() returns true.

In my opinion this is not really correct, because the image has no alpha channel. In my case, to handle the image correct, the application must know that the image has no alpha channel.

The TIFFTAG_EXTRASAMPLES in this case is 0 (EXTRASAMPLE_UNSPECIFIED), which, as far as I know, stands for unspecified data. In this case in QTiffHandlerPrivate::readHeaders the format is set to QImage::Format_ARGB32 .

I think there should be a way to check if QImage have an alpha channel or not. For example QImage::hasAlphaChannel() should return false and/or an own format like QImage::Format_XRGB32 is needed, for images like this.

Or if this is not possible, at least it should be a way to get more informations about the image tags over QImage, for example to read the TIFFTAG_EXTRASAMPLES . I didn't find a way to do this with QImage or QImageReader.

Example pictures in TIFF RGBI format can be downloaded here:

[https://www.lgl-bw.de/unsere-themen/Produkte/Testdaten/Testdaten-Luftbildprodukte/]

[https://www.lgl-bw.de/export/sites/lgl/unsere-themen/Produkte/Testdaten/Galerien/Dokumente/DOP_10cm_RGBI_UTM_TIF.zip]

I checked thi issue with Qt 5.9.7 and 5.14.0 on Windows 10.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Windows,,,,,,"0|i0n4if:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
It would be nice to get ATT Error string  from  QLowEnergyService,QTBUG-74753,276220,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,ablasche,irfan.omair@digia.com,irfan.omair@digia.com,27 Mar '19 22:44,09 Jan '20 06:40,18 Feb '21 09:41,,5.12.2,,,,,,,,,,,,,,,,,,,,,,Connectivity: Bluetooth,,,,0,Reported_by_support_standard,,,"This would be great if there is way to find out  ATT error string. At the moment only QLowEnergyService::ServiceError, is available.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,macOS,Windows,,,,,"0|i0ks13:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Integrate xattr into QFile,QTBUG-80835,290443,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,thiago,akiva,akiva,17 Dec '19 05:16,21 Dec '19 17:55,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Core: I/O,,,,0,,,,"QFile or a another class should integrate xattr.

[http://man7.org/linux/man-pages/man7/xattr.7.html]

""Extended attributes are name:value pairs associated permanently with
 files and directories, similar to the environment strings associated
 with a process.""

I am going to keep it light on details in case it is outright rejected.  What I would like to see though is the ability to read and write key value pairs to extended attributes on QFile, that would be mindful of of the filesystem capabilities. A structure similar to QMap would make sense to me:
{code:java}
QFile f_Foobar(""~/foobar.txt"");

f_Foobar.insert(""foo""     , ""bar""); // returns enum or ssize_t error
f_Foobar.insert(""user.foo"", ""bar""); // returns 0 for no error
f_Foobar[""user.foo""]; // returns ""bar""
f_Foobar.keys();      // returns QStringList() << ""foo"";
{code}
The benefit of this is this provides a simple and accessible way to maintain state between sessions.

The downside I see to this, is limited portability. However, we do have functionality already in Qt that is limited to certain platforms, so maybe this is fine.

 

edit:

I went ahead and created my own functional class.

The long and short of it, is that we should create a class for handling xattr, ""QXattr"", and make it a member of QFile. I am guessing a pointer who's default value is ""nullptr"", but in the constructor, will initiate it if it detects a filesystem with xattr capabilities.

Hence:

 
{code:java}
	QFile f(""/home/akiva/foobar.txt"");
	f->xattr.insert(""user.foo"", ""foo"");
	f->xattr.insert(""user.bar"", ""bar"");
	qDebug() << f.xattr.value<QByteArray>(""user.foo"");
{code}
 

 

Here is the header:

 
{code:java}
#ifndef QXATTR_H
#define QXATTR_H

#include <QObject>
#include <QFile>
#include <sys/xattr.h>

class QXattr : public QObject
{
	Q_OBJECT
public:
	explicit QXattr(QFile &parent);	

	template<typename T> bool        insert  ( const QString &name, T value ); // Returns true if properly serialized
	template<typename T> T           value   ( const QString &name ); // Gets value of name. Returns Null pointer if none found.
	template<typename T> QString     name    ( T value ); // Returns first name of given value
	template<typename T> QStringList names   ( T value ); // Returns all names of a given value
	                     QStringList names   ();          // Returns all names
	                     bool        contains( const QString &name ); // Returns true if name exists.
	                     bool        remove  ( const QString &name ); // Returns true if something was removed.	
	QString errorString(); // Last registered errno

protected:
	inline const char *fileName();
	void setErrorString(const QString &error);
	void getNames(); // Should trigger on a move action in case the filesystem changed

signals:
	void namesChanged();
	void errorStringChanged( QString error );
	// More signals will be placed here

private:
	QStringList m_Names;
	QFile &m_File;
	QString m_ErrorString;
};
#endif // QXATTR_H

{code}
Instead of ""Key:Value"" pairs, I used the wording ""Name:Value"" pairs, as that is what is used in xattr's documentation, and key implies that different types other than a string can be used.

 

In the source, I included my own library qconsoletoolkit. It accounts for the `ct_Check( ... )` lines, and can be easily changed. Anyway, here is the source:
{code:java}
#include ""qxattr.h""
#include ""qconsoletoolkit.h""

QXattr::QXattr(QFile &parent)
	: QObject(&parent)
        , m_File(parent)
{}

/* Insertion Templates */
template<typename T> bool QXattr::insert(const QString &name, T value)
{
	Q_UNUSED(name)
	Q_UNUSED(value)
	return false;
}
template<> bool QXattr::insert<QByteArray> (const QString &name, QByteArray  value)
{
	int error = setxattr(fileName(), name.toLocal8Bit().data(), value.data(), size_t(value.size()), 0 );
	ct_Check(error == -1, strerror(errno));
	this->getNames();
	return true;
}
template<> bool QXattr::insert<QString>    (const QString &name, QString     value)
{
	return this->insert<QByteArray>(name, value.toLocal8Bit());
}
template<> bool QXattr::insert<const char*>(const QString &name, const char* value)
{
	return this->insert<QByteArray>(name, QByteArray(value));
}

/* Value Templates */
template<typename T> T QXattr::value(const QString &name)
{
	Q_UNUSED(name)
}
template<> QByteArray QXattr::value<QByteArray>(const QString &name)
{
	ssize_t valueLength;
	valueLength = getxattr(fileName(), name.toLocal8Bit().data(), nullptr, 0);
	ct_Check(valueLength == -1, strerror(errno));
	if (!valueLength) { return QByteArray(); }
	QByteArray val(int(valueLength), ' ');
	valueLength = getxattr(fileName(), name.toLocal8Bit().data(), val.data(), size_t(valueLength));
	ct_Check(valueLength == -1, strerror(errno));
	return val;
}

/* Name Templates */
template<typename T> QString QXattr::name(T value)
{
	Q_UNUSED(value)
	return QString();
}
template<> QString QXattr::name<const char *>(const char* value)
{
	getNames();
	QByteArray ba(value);
	for ( int i = 0; i < m_Names.length(); i++ ) {
		if (ba == this->value<QByteArray>(m_Names.at(i))) { return m_Names.at(i); }
	}
	return QString();
}

/* Names Templates */
template<class T> QStringList QXattr::names(T value)
{
	Q_UNUSED(value)
	return QStringList();
}
template<> QStringList QXattr::names<const char *>(const char* value)
{
	getNames();
	QByteArray ba(value);
	QStringList names;
	for ( int i = 0; i < m_Names.length(); i++ ) {
		if (ba == this->value<QByteArray>(m_Names.at(i))) { names << m_Names.at(i); }
	}
	return names;
}
QStringList QXattr::names()
{
	getNames();
	return m_Names;
}

/* Regular Functions */
bool QXattr::contains(const QString &name)
{
	getNames();
	return m_Names.contains(name);
}
bool QXattr::remove(const QString &name)
{
	// Returns false if error.
	// Error can mean, that the name simply did not exist.
	if ( removexattr(fileName(), name.toLocal8Bit().data()) == -1 ) {
		setErrorString(strerror(errno));
		return false;
	}
	return true;
}

/* Convenience Functions */
const char* QXattr::fileName()
{
	return m_File.fileName().toLocal8Bit().data();
}
void QXattr::setErrorString(const QString &error)
{
	m_ErrorString = error;
	emit errorStringChanged( error );
}
void QXattr::getNames()
{
	m_Names.clear();
	ssize_t bufferLength(0);
	ssize_t nameLength;
	char *name;

	/* Determine the length of the buffer needed. */
	bufferLength = listxattr(fileName(), nullptr, 0);
	ct_Check(bufferLength == -1, strerror(errno));
	if (!bufferLength) { return; }

	/* Allocate the buffer.  */
	QByteArray buffer(int(bufferLength), ' ');

	/* Copy the list of attribute keys to the buffer. */
	bufferLength = listxattr(fileName(), buffer.data(), size_t(bufferLength));
	ct_Check(bufferLength == -1, strerror(errno));

	/* Loop over the list of zero terminated strings with the attribute keys.
	 * Use the remaining buffer length to determine the end of the list. */
	name = buffer.data();
	QStringList names;
	while (bufferLength > 0) {
		m_Names << name;
		/* Forward to next attribute name. */
		nameLength = ssize_t(strlen(name) + 1);
		bufferLength -= nameLength;
		name += nameLength ;
	}
}



{code}
 

No issues thus far.

 

 

 

 

 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Android,Linux/Other display system,Linux/Wayland,Linux/X11,macOS,,"0|i0n0xb:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
expose readyWrite signal for QUdpSocket,QTBUG-80762,290224,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,cnn,aol,aol,13 Dec '19 07:47,20 Dec '19 05:50,18 Feb '21 09:41,,5.10.0,5.11,5.12.0,5.5.0,5.6,5.7,5.8,5.9.0,,,,,,,,,,,,,,Some future release,Network,,,,0,,,,"If I intensively send large amount of data via udp, I have SndBufErrors counter in netstat growing and packets do not make it into receiver, but no errors are reported on the sender side in Qt code..

The problem was discussed earlier on mailing list [https://lists.qt-project.org/pipermail/development/2017-March/028892.html] with the following resolution: [https://lists.qt-project.org/pipermail/development/2017-March/028904.html]

But yet nothing changed in Qt..",,,,,,,,,,,,,,,,,,,"13 Dec '19 10:45;aol;udp-hub.tar.gz;https://bugreports.qt.io/secure/attachment/90165/udp-hub.tar.gz",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Linux/X11,,,,,,"0|i0mznj:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"13 Dec '19 08:31;tpochep;Don't hesitate and provide the implementation.","13 Dec '19 09:07;aol;> Don't hesitate and provide

 

definitely will do, but wouldn't it be wise to discuss such a change with core team members beforehand?

 

Instead I get a ""go <you name it> yourself"" thing. Very welcoming...","13 Dec '19 09:25;tpochep;> Very welcoming...

Yes, Qt is an open-source project/framework and you are welcome to contribute. Our gerrit and code-review procedure will be the nice place/opportunity to discuss this change. And speaking of welcoming or not, let's see what _you_ started from:

> The problem was discussed earlier on mailing list  ... But yet nothing changed in Qt..

You cannot just say - ""I want feature X, and it was discussed, why it's still not here?"" Since it's not a bug, but a feature requested, and you think it takes too long for it - well, again, you are welcome to contribute.
","13 Dec '19 09:40;aol;Do you really expect me to start working on a patch, contributing it and get to know on the review that feature is implemented not in the way core team sees it? And then redoing it from scratch according to review comments?!

 

That's not how real things are being done. I'm  disappointed with you, Timur.","13 Dec '19 10:09;tpochep;I don't expect you starting working on a patch, no. And if you are not going to do this - please, let me know and I'll close the ticket. And also, your concerns about ""redoing from the scratch"" - no, I don't think this would happen and anyway we can always help working on the best solution.

> I'm  disappointed with you, Timur.

This information is irrelevant, please, try not to make any personal statements here.","13 Dec '19 10:19;aol;> I don't expect you starting

so, where to go from here, then?

There is a bug in implementation, that causes package loss as I stated in the very first line of the description, but you're stating that I'm requesting a feature.

Do you have any expertise in Qt networking at all, or you're just triaging all incoming issues?

 

> try not to make any personal statements here

sorry to say that, but it was you, who started personal statements here, just re-read the log.","13 Dec '19 10:24;tpochep;> so, where to go from here, then?

I've re-assigned the issue. The title of your ticket is: ""expose readyWrite signal for QUdpSocket"" (which is not something existing in the current API, and thus a request of a new feature).
And then you refer to some discussion in the mailing list. If you think it's a bug - provide an example reproducing the problem with a more clear/complete description in this ticket. 
","13 Dec '19 10:45;aol;minimal example attached.

for demonstration purpose the following program accepts UDP traffic on port 22000 and multiplies it to N clients.

while running the program, one should monitor sender buffer errors w/sth like that: `watch netstat -sau | grep SndbufErrors`

 

For the clarity: There exists a plain C++ program that makes the very same thing, but delivers 100% of packets and produces no errors. The problem is, that Qt variant of that program  (attached) does not work as expected.","17 Dec '19 12:48;aol;[~thiago], you were the last on [that list|https://lists.qt-project.org/pipermail/development/2017-March/028904.html]. Unfortunately, I do not know, if you were speaking on behalf of core team or you're just a Qt user as most of list participants are.

 Anyway, I'd be glad to hear if you have any updates on the issue.","17 Dec '19 16:09;thiago;I don't think there's any ambiguity: I think we need that signal. I never volunteered to do it.","19 Dec '19 09:31;aol;[~thiago], neither there is an ambiguity, nor I was trying to point to any obligations.

I'm just wondering if you made any success in fighting this error.

 

I, for one, following your advice from the list, created a plain udp socket (not a Qt one) and used the `QSocketNotifier(sockfd, QSocketNotifier::Write, this);` but its `activated` signal was firing all the time, so, it is not very much clear, how to use your suggestion. ","19 Dec '19 16:16;thiago;You have to disable the notifier whenever you don't want to write.

When you have some data to write, you turn it on, wait for one event loop cycle to see if it fires. If it does, write one datagram. If you have no data left to write, turn it off again.","20 Dec '19 05:50;aol;> You have to disable the notifier whenever you don't want to write.

 

well, this is obvious and I was doing so.

 

Nevertheless, I have  the SndBufErrors counter of netstat growing in this case too.

The only workaround that, kind of, works is to pause sending thread for 100 ms after each write, but this is unacceptably high delay for the data.",,,,,,,,,
Signal when PDF page is visible in WebEngineView,QTBUG-79072,286363,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,qt_webengine_team,tero.pelkonen,tero.pelkonen,08 Oct '19 07:10,17 Dec '19 13:33,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,WebEngine,,,,0,Reported_by_support_standard,,,"Customer has requested for WebEngineView to have a signal when PDF is visible.

 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0mdlr:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"It's easy to call QString::lastIndexOf with Qt::CaseInsensitive as the ""from"" argument",QTBUG-80694,290082,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,thiago,a_denever,a_denever,11 Dec '19 11:45,16 Dec '19 10:52,18 Feb '21 09:41,,5.10,,,,,,,,,,,,,,,,,,,,,,Core: Containers and Algorithms,,,,0,,,,"When lastIndexOf is used with default option it gives correct results. When used with CaseInsensitive it returns (incorrect) results.

{code}
 QString bug= ""aa"";
 qDebug()<<bug.lastIndexOf(""a"", Qt::CaseInsensitive);
 qDebug()<<bug.lastIndexOf(""a"");
 bug= "" aa"";
 qDebug()<<bug.lastIndexOf(""a"", Qt::CaseInsensitive);
 qDebug()<<bug.lastIndexOf(""a"");
// 0
// 1
// -1
// 2
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Linux/X11,,,,,,"0|i0mywv:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"12 Dec '19 22:43;villevoutilainen_qt;This code is passing Qt::CaseInsensitive as the ""from"" argument, not as the ""cs"" argument. While there's room for improvement in QString's API to make mistakes like this less easy to make, there is no functionality bug here.","16 Dec '19 10:52;a_denever;Hi Ville,

Thanks for the quick reply!

Indeed very easy mistake to make assuming the default parameters.",,,,,,,,,,,,,,,,,,,,
Don't look for .qmake.stash outside build and source directories,QTBUG-73222,272710,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,qtbuildsystem,johanhelsing,johanhelsing,23 Jan '19 10:37,09 Dec '19 13:54,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Build System,,,,1,,,,"I just spent a lot of time (~1 day) trying to figure out why my Qt builds failed, and I know this has happened to a lot of other developers as well, only to figure out it was due to a stray .qmake.stash file in the parent directory of my builds.

Not only is this behavior confusing, it's also incredibly hard to understand that this was the reason building Qt failed.

All I got was a message that atomic integers was not supported on my platform, the reason was that detection of libatomic failed, because a .qmake.stash file outside the source and build directoreis contained an outdated path to the c++ header files.

I.e. from a user perspective:

1. Run configure in the wrong directory once (creates .qmake.stash, a hidden file which is hard to see)
2. Months pass without build problems, because the cached files have the correct values
3. Builds suddenly start failing because cached paths are no longer correct after a system upgrade.
4. Spend hours debugging because neither deleting the source nor build folder has any effect.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0k90v:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"23 Jan '19 12:32;Eddy;Or in the alternative: if using a .qmake.stash file from outside the \{source,build\} directories, at least notify the user that this is happening, to give them some clue.

Slight problem with ""outside the \{source,build\} tree"" is that if you're building a single module, e.g. {{qtbase}}, tools may reasonably interpret the parent of {{qtbase}} as being {{qt5}} and thus not ""outside"".  So the test for ""outside"" may be a fuzzy one, making exclusion tricky, so that informing may be a more robust option - one can afford to err on the side of crying wolf sometimes when informing; but ignoring a {{.qmake.\*}} file that should have been included, due to a false positive, would produce broken builds just as baffling to debug as the situation we want to fix here.

We could equally inform the user if the search for {{.qmake.\*}} files finds some in one directory and more higher up the directory tree.  This may be worth doing even if we are ignoring the files higher up the tree: versions of {{qmake}} older than this behaviour change aren't telling you about those stray {{.qmake.\*}} files, so being told about them by the new version may save you from trouble when building with older versions.","23 Jan '19 14:13;kkohne;I think the idea of showing a message of the absolute path whenever a {{.qmake.super}}, {{.qmake.conf}}, {{.qmake.cache}}, {{.qmake.stash}} file is read is not a bad idea, though it can get noisy. But maybe worth a try? The logic to find these are in {{QMakeEvaluator::PrepareProject()}} ...","09 Dec '19 13:54;kkohne;[~jbornema] has been trying (see QTBUG-76140), but had to revert the patch...",,,,,,,,,,,,,,,,,,,
QDateTime format should support DST char,QTBUG-79916,288158,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,Eddy,karimpinter,karimpinter,11 Nov '19 08:34,11 Nov '19 11:19,18 Feb '21 09:41,,5.12.5,5.13.2,5.14,5.9.8,,,,,,,,,,,,,,,,,,,Core: Date/Time,,,,0,Qt6,reported_by_support_standard,,"QDateTime should support DST indicating format based on German law:
[https://www.ptb.de/cms/en/ptb/fachabteilungen/abt4/fb-44/ag-441/realisation-of-legal-time-in-germany/daylight-saving-time-in-the-federal-republic-of-germany-since-1980.html?contrast=0|https://www.ptb.de/cms/en/ptb/fachabteilungen/abt4/fb-44/ag-441/realisation-of-legal-time-in-germany/daylight-saving-time-in-the-federal-republic-of-germany-since-1980.html?contrast=0]
For example:
{code}
XHH:MM -> A02:01 / B02:01
HHX:MM -> 02A:01 / 02B:01
{code}",,,,,,,,,,QTBUG-79923,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0mnn3:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"11 Nov '19 10:50;Eddy;Requires material behaviour change and significant re-working of {{QDateTime}}, so must be a Qt 6 change.","11 Nov '19 10:55;Eddy;The German law link only discusses this as follows:
bq. During the transition, the 02:00 - 03:00 CEST interval is referred to as hour 2A, and the subsequent 02:00 - 03:00 CET interval is referred to as hour 2B.

It doesn't say that the date format should show 02B:mm or 02A:mm, it just says how the hours are referred to, which I interpret as how they're referred to _as whole hours_ (e.g. a law might say something must happen in hour 2A or in hour 2B, while leaving the event's exact timing anywhere within the indicated hour).  The text gives the usual form for the date-time format, indicating which version of the hour we're in with CEST or CET.  This is what I'll aim to implement.",,,,,,,,,,,,,,,,,,,,
Add support for specifying that a framework linked against is optional,QTBUG-79352,287122,Suggestion,Open,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,qtbuildsystem,andysh,andysh,21 Oct '19 06:18,08 Nov '19 15:47,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Build tools: qmake,,,,0,Reported_by_support_standard,,,"Add support for specifying that a framework linked against is optional, as then it is possible to specify a framework which is available only for later versions of iOS and not older ones.",,,,,,,,,,,,,,,,,,,"21 Oct '19 15:06;jasonapk;Screen Shot 2019-10-17 at 4.53.47 PM.png;https://bugreports.qt.io/secure/attachment/88446/Screen+Shot+2019-10-17+at+4.53.47+PM.png",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,iOS/tvOS/watchOS,,,,,,"0|i0mhjj:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"21 Oct '19 15:06;jasonapk;For the backstory (and potential test case):
 I know Qt does not have a iOS NFC library (yet). However I'm stuck supporting one. Annoyingly older phones that don't have NFC (iPhone 6) don't ship with the library, which causes a crash because it can't be dl-ed. Apple works around this by specifying ""Optional"" linkage, and this works. But
 the problem I am having is, I'll change my source in QtCreator, *build*, and it will rewrite the xcodeproj file and produce an app that crashes. I go into XCode and specify the Library, change it to optional linkage and build & deploy it in XCode it'll work. This happens on _every_ build by QtC.

How can I get Qt/qmake/make to honor the weak linkage?
 So be clear every time I build, it removes CoreNFC and I have to add it back in in XCode, even though my LIBS line has it:
 LIBS += -framework CoreNFC

And then specify Optional linkage.

It takes some time to do in XCode because the add button is at the bottom of the linkage list, and the library appears at the top, which then needs to be changed to optional linkage. So there's a lot of scrolling involved. ","22 Oct '19 08:34;kkohne;I'm not that much into macOS/iOS, but shouldn't it be sufficient to specify

{code}
LIBS += -weak_framework CoreNFC
{code}

?","22 Oct '19 08:53;andysh;Unfortunately not, -weak_framework seems to be ignored entirely, but maybe that is what qmake needs to support","22 Oct '19 11:08;kkohne;Sorry, try

{code}
QMAKE_LFLAGS +=  -weak_framework CoreNFC
{code}

There's precedence for this in e.g. {{mkspecs/features/xctest.prf}}, {{src/testlib/testlib.pro}} ...","30 Oct '19 17:25;jasonapk;Truly excellent! That QMAKE_LFLAGS  worked!

Interestingly, it doesn't show CoreNFC in XCode Libraries as required or even optional.",,,,,,,,,,,,,,,,,
Wacom Table sends mouse events in case of modifier and click,QTBUG-79784,287924,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,srutledg,irfan.omair@digia.com,irfan.omair@digia.com,06 Nov '19 00:46,06 Nov '19 00:47,18 Feb '21 09:41,,5.12.4,,,,,,,,,,,,,,,,,,,,,,GUI: Wacom Tablet Input,,,,0,Reported_by_support_standard,,,"In case of Tablet, when Key modifier plus click with pen happens windows sends it as mouse events which can be problemetic in some application.

It would be great in this situation modifier + clicks sends not synthesized mouse events to the application.

Further Middle clicks are not handled by current tablet if this can also be looked after that would be great.

 

Attached patch tries to handle following:

Tablet events should be considered Synthesized like touch events

- Middle clicks are not handled by the current tablet support

- Modifiers+clicks send not synthesized mouse events to the application

 ",,,,,,,,,,,,,,,,,,,"06 Nov '19 00:47;irfan.omair@digia.com;Fix-tablets-windows.patch;https://bugreports.qt.io/secure/attachment/88858/Fix-tablets-windows.patch",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Windows,,,,,,"0|i0mm93:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"QFontMetrics::leftBearing & rightBearing, add handling for 32bit unicode chars",QTBUG-79538,287465,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,esabraha,miikapernu,miikapernu,25 Oct '19 09:18,25 Oct '19 09:23,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,GUI: Font handling,,,,4,Reported_by_support_standard,,,"QFontMetrics functions leftBearing & rightBearing both take a QChar as an argument which limits the char to 16 bit. Currently there seems to be no way to get the bearings for 32bit unicode chars which can't be expressed in 16 bits (such as certain emojis).

*Suggestion:* add functions to get leftBearing and rightBearing for all 32bit unicode chars.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0mjlr:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
QPainterPath properties/methods in QQuickPath,QTBUG-72690,271545,Suggestion,Open,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,lagocs,mrraffa,mrraffa,20 Dec '18 08:48,08 Oct '19 09:58,18 Feb '21 09:41,,5.12,5.13,,,,,,,,,,,,,,,,,,,,,Quick: 2D Renderer,Quick: Other,Quick: SceneGraph,,0,,,,"Hi,

in order to provide more functionalities to Canvas and Context2D types, it could be possible to add to QQuickPath some properties/methods from the embedded QPainterPath ( i.e. boundingRect() )?

Actually, QQuickPath is a little bit limited.

Thanks in advance.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0k2i7:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Allow overriding QBmpHandler hard limit on .bmp dimensions,QTBUG-79045,286280,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,vgt,miikapernu,miikapernu,07 Oct '19 09:01,07 Oct '19 09:16,18 Feb '21 09:41,,5.9.8,,,,,,,,,,,,,,,,,,,,,,Image formats,,,,1,Reported_by_support_standard,,,"QBmpHandler returns false when loading images greater than １６３８４ｘ１６３８４ preventing easy loading of large bmp files. The limit seems to have been introduced with:

https://code.qt.io/cgit/qt/qtbase.git/commit/src/gui/image/qbmphandler.cpp?h=5.9&id=5104a529ce5aea5e94101770ece188b98f20baaa

*Suggestion:* make the limit based on image file size rather than dimensions and/or allow the size limit to be overridden.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0md6n:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Feature Request: Have a concept of an ""Interface"" in QML",QTBUG-78928,285962,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,qt.team.quick.subscriptions,shmittal,shmittal,02 Oct '19 08:00,02 Oct '19 08:42,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,QML: Declarative and Javascript Engine,,,,0,Reported_by_support_standard,,,"QML is currently restricted to ""inheritance"" by means of declaring a root type from another type (be it another QML or C++ type).

Would you consider the concept of an ""Interface"" in QML e.g.


{code:java}
// MyInterface1.qml
QtObject { // or QtObjectInterface??
property real commonProperty1
property real commonProperty2
}

// MyInterface2.qml
QtObject { // or QtObjectInterface??
property color someColor
}

MyActualObject {
id: root

// supposing some kind of syntax that immediately imports the properties defined
interface MyInterface1
interface MyInterface2

// the following just works - and should be available in the code model immediately.
commonProperty1: 123
commonProperty2: 456
someColor: ""red""

Component.onCompleted: console.log(root instanceof MyInterface2) // prints true
}
{code}
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0mbb3:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"02 Oct '19 08:38;ulherman;The example above is conceptually not really an interface. An interface would declare functions to be implemented by the component well, implementing, the interface. What we see above is more of a mix-in. Is this really so much better than the following?

{code}
MyActualObject {
    id: root
    MyInterface {
        id: myInterface
        commonProperty1: 123
        commonProperty2: 456
    }
}
{code}

What use cases does the suggestion enable, that you cannot do with what we already have or what use cases are made significantly easier? We could have something like

{code}
MyActualObject {
    id: root
    with MyInterface {
        commonProperty1: 123
        commonProperty2: 456
    }
}
{code}

and then all the properties of MyInterface would be available without qualification in root. But is that really worth the effort?",,,,,,,,,,,,,,,,,,,,,
QAbstractGeoTileCache inherits QObject without using it,QTBUG-78815,285721,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,paangele,DanielSt,DanielSt,27 Sep '19 16:31,30 Sep '19 13:43,18 Feb '21 09:41,,5.13.1,,,,,,,,,,,,,,,,,,,,,,Location: Maps/Navigation,,,,0,,,,The QAbstractGeoTileCache inherits from QObject but it does not use QObject in any way. Wouldn't it be more efficient to remove the QObject inheritance?,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0m9vb:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"27 Sep '19 16:50;paangele;atm the only usage seems to me to be able to set a parent, so that it does not have to be explicitly destroyed.
I agree it could go","30 Sep '19 09:17;ablasche;Would have to be a Qt6 change","30 Sep '19 10:02;paangele;[~ablasche] it's a _p, so i guess it doesn't have to?","30 Sep '19 13:43;ablasche;ok, nevermind. you are right",,,,,,,,,,,,,,,,,,
Alt + vertical scroll -> horizontal scroll not documented,QTBUG-78550,273596,Suggestion,Open,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,treinio,gvanvoor,gvanvoor,07 Feb '19 13:55,19 Sep '19 11:02,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Documentation,,,,0,,,,"I rather accidentally found out that on windows all mouse wheel events are transformed into horizontal mouse hweel events when the alt key is pressed.

This is not necessarily a bad thing, provided it's documented somewhere. However I didn't find any documentation on the subject anywhere. To my knowledge, both QWidget::wheelEvent and QWheelEvent would be appropriate to house that information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Windows,,,,,,"0|i0kefr:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
QtWayland.Compositor: output fractional scaling,QTBUG-78121,284182,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,johanhelsing,damianatorrpm,damianatorrpm,08 Sep '19 17:35,17 Sep '19 09:34,18 Feb '21 09:41,,5.13.1,,,,,,,,,,,,,,,,,,,,,,QPA: Wayland,,,,0,,,,"Qt based KDE landed fractional scaling support. I think this is something that should be in Qt.WaylandCompositor as well, currently  a WaylandOutput{} has scaleFactor of type int: and can be set to any non-float value, depending on the screen a scaleFactor of 1 might be too small and a scaleFactor of 2 would be to big. Being able to set it to 1.7 may be optimal.  ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Linux/Wayland,,,,,,"0|i0m1jb:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"09 Sep '19 06:09;johanhelsing;What kwin implements, isn't actually full fractional scaling support... they tell the client to use the nearest integer scaling, and then resize each surface on the compositor side.

You can do that on QtWayland compositors as well, just set an integer scale in WaylandOutput, which is what the client sees, and then multiply the implicitWidth and implicitHeight of each ShellSurfaceItem and WaylandQuickItem with the remaining fraction.

As there is no such thing as fractional scaling in the Wayland protocol, I think it would be confusing to add it to WaylandOutput's API.

What we could consider, however, is support for a real fractional scaling protocol, where scaling is done in the client and there is no resizing step on the compositor side. This could be done through a custom extension for letting the compositor set a fractional scale hint and wp_viewport for sending over a non-integer scaled surface. ","14 Sep '19 04:38;damianatorrpm;Thanks for the info. I did not know that the wayland protocol supported only integer scaling,
I understand that this is not an issue with QtWayland.Compositor
",,,,,,,,,,,,,,,,,,,,
QTextEdit editingFinished signal missing,QTBUG-78288,284560,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,qt.team.quick.subscriptions,DanielSt,DanielSt,14 Sep '19 06:14,16 Sep '19 15:49,18 Feb '21 09:41,,5.12.5,5.13.1,,,,,,,,,,,,,,,,,,,,,Widgets: Widgets and Dialogs,,,,0,,,,The QTextEdit should emit a editingFinished signal when it gets out of focus.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0m3r3:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"16 Sep '19 15:49;srutledg;Yeah, that sounds useful and would follow the pattern from QLineEdit, QML TextArea (and a few others) and KTextEditor.",,,,,,,,,,,,,,,,,,,,,
Add placeholderText for editable ComboBoxes,QTBUG-77979,283686,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,qt.team.quick.subscriptions,andysh,andysh,02 Sep '19 10:20,12 Sep '19 10:28,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Quick: Controls 2,,,,0,Reported_by_support_standard,,,Add placeholderText for editable ComboBoxes. This is useful for indicating what a ComboBox is used for when it is shown for the first time to give the initial impression.,,,,,,,,,,,,,,,QTBUG-77978,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0lyqf:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"02 Sep '19 10:28;mitch_curtis;This is slightly related to QTBUG-77978, so linking to it to keep track of them all.","02 Sep '19 10:31;mitch_curtis;As [mentioned on the interest mailing list|https://lists.qt-project.org/pipermail/interest/2019-September/033733.html], one way of doing this could be to expose a textField property. That way you could do:

{code}
    textField.placeholderText: ""Enter text here""
{code}","12 Sep '19 10:28;mitch_curtis;This would require each ComboBox implementation to define a PlaceholderText item in its TextField (contentItem):

https://bugreports.qt.io/browse/QTBUG-77978?focusedCommentId=476039&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-476039",,,,,,,,,,,,,,,,,,,
Doc: Add code snippet or example that explains line spacing in QTextEdit,QTBUG-71722,269567,Suggestion,Open,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,docteam,paulwicking,paulwicking,12 Nov '18 06:46,12 Sep '19 05:04,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Documentation,,,,0,,,,"This was a request on the development mailing list: http://lists.qt-project.org/pipermail/development/2018-November/034345.html

The subsequent thread also implies an update may be required here: http://doc.qt.io/qt-5/richtext-html-subset.html

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0jrbb:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Provide means to directly iterate over QProcessEnvironment entries,QTBUG-77762,283008,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,thiago,jbornema,jbornema,22 Aug '19 08:44,23 Aug '19 08:58,18 Feb '21 09:41,,5.13.0,,,,,,,,,,,,,,,,,,,,,,Core: I/O,,,,0,,,,"QProcessEnvironment should provide a way to directly iterate over its entries.

The current way to iterate over all entries of QProcessEnvironment looks like this:
{code}
QProcessEnvironment env = QProcess::systemEnvironment();
const QStringList keys = env.keys();
for (const QString &key : keys)
    doSomething(key, env.value(key));
{code}

This is needlessly complicated and inefficient.

QProcessEnvironment should have {{begin()}} and {{end()}} which would allow us to write the code like this:
{code}
const QProcessEnvironment env = QProcess::systemEnvironment();
for (const auto &entry : env)
    doSomething(entry.key(), entry.value());
{code}
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0luuv:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Add missing standard key sequence for ""Replace""",QTBUG-76559,280291,Suggestion,Open,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,srutledg,kerndog73,kerndog73,21 Jun '19 07:24,06 Aug '19 11:14,18 Feb '21 09:41,,5.13.0,,,,,,,,,,,,,,,,,,,,,,"GUI: Basic Input System (keyboard, mouse, touch)",,,,0,,,,"[This table|https://doc.qt.io/qt-5/qkeysequence.html#standard-shortcuts] contains the standard key sequences for various platforms. The key sequence of ""Replace"" on macOS is listed as ""(none)"". Both TextEdit and Xcode use ""Ctrl+Alt+F"" to open the find-and-replace tool so I believe that ""Ctrl+Alt+F"" should be added as the ""Replace"" key sequence for macOS.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,macOS,,,,,,"0|i0lfbr:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"QMake needs to give more information on, ""A suitable version of dbus could not be found.",QTBUG-77311,281973,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,qtbuildsystem,akiva,akiva,03 Aug '19 23:54,06 Aug '19 08:28,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,WebEngine,,,,0,,,,"In trying to install QtWebEngine on Ubuntu 18.04. I get the following message:
{code:java}
➜  qtwebengine git:(c3c37b4e) ✗ /usr/local/Qt-5.12.1/bin/qmake -r -Wall -- -proprietary-codecs -ffmpeg                               
WARNING: /home/akiva/Programming/qt5/qtwebengine/configure.pri:94: Unescaped backslashes are deprecated
WARNING: /home/akiva/Programming/qt5/qtwebengine/configure.pri:94: Unescaped backslashes are deprecatedRunning configuration tests...
Done running configuration tests.Configure summary:Qt WebEngine:
  Embedded build ......................... no
  Full debug information ................. no
  Pepper Plugins ......................... yes
  Printing and PDF ....................... yes
  Proprietary Codecs ..................... yes
  Spellchecker ........................... yes
  Native Spellchecker .................... no
  WebRTC ................................. yes
  Use System Ninja ....................... yes
  Geolocation ............................ yes
  WebChannel support ..................... yes
  Use v8 snapshot ........................ yes
  Kerberos Authentication ................ no
  Support qpa-xcb ........................ yes
  Use ALSA ............................... yes
  Use PulseAudio ......................... yes
  Optional system libraries used:
    re2 .................................. no
    icu .................................. no
    libwebp, libwebpmux and libwebpdemux . yes
    opus ................................. yes
    ffmpeg ............................... yes
    libvpx ............................... no
    snappy ............................... no
    glib ................................. yes
    zlib ................................. yes
    minizip .............................. yes
    libevent ............................. yes
    jsoncpp .............................. yes
    protobuf ............................. no
    libxml2 and libxslt .................. no
    lcms2 ................................ no
    png .................................. no
    JPEG ................................. no
    harfbuzz ............................. yes
    freetype ............................. no
  Required system libraries:
    fontconfig ........................... yes
    dbus ................................. no
    nss .................................. yes
    khr .................................. yes
    glibc ................................ yes
  Required system libraries for qpa-xcb:
    x11 .................................. yes
    libdrm ............................... yes
    xcomposite ........................... yes
    xcursor .............................. yes
    xi ................................... yes
    xtst ................................. yesQt is now configured for building. Just run 'make'.
Once everything is built, you must run 'make install'.
Qt will be installed into '/usr/local/Qt-5.12.1'.Prior to reconfiguration, make sure you remove any leftovers from
the previous build.WARNING: /usr/local/Qt-5.12.1/mkspecs/features/qt_parts.prf:17: Feature qt_build_config already included
WARNING: /usr/local/Qt-5.12.1/mkspecs/features/configure.prf:5: Feature configure_base already included
WARNING: /home/akiva/Programming/qt5/qtwebengine/mkspecs/features/configure.prf:3: Feature functions already included
WARNING: /home/akiva/Programming/qt5/qtwebengine/mkspecs/features/platform.prf:32: Excess colon in front of opening brace.
WARNING: /home/akiva/Programming/qt5/qtwebengine/mkspecs/features/platform.prf:56: Excess colon in front of opening brace.
WARNING: /home/akiva/Programming/qt5/qtwebengine/mkspecs/features/platform.prf:168: Stray AND operator in front of AND operator.
 
A suitable version of dbus could not be found.
QtWebEngine will not be built.

{code}
It should tell me what version of dbus it is looking for.

 

 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Linux/X11,,,,,,"0|i0lp7b:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Please add reasonable spell checking to Qt Linguist,QTBUG-76128,279336,Suggestion,Open,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,kkohne,szykcech,szykcech,30 May '19 18:56,29 Jul '19 11:26,18 Feb '21 09:41,,5.12.3,,,,,,,,,,,,,,,,,,,,,,Tools: Linguist,,,,0,,,,"Hi

Please add reasonable spell checking to Qt Linguist. By ""reasonable"" I mean: very easy to enable. For now there is mysterious claim that it is somehow possible, but I can't find nowhere instruction for this.

thanks and best regards

Szyk Cech",,,,,,,,,,QTBUG-14462,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0l9nj:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"29 Jul '19 11:26;kkohne;This indeed would be quite handy. However, this arguably requires some Qt support for using native spell checkers.",,,,,,,,,,,,,,,,,,,,,
QPainter should support HSL composition modes,QTBUG-77083,281472,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,vgt,annulen,annulen,17 Jul '19 12:57,17 Jul '19 13:03,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,GUI: Painting,,,,1,,,,"There are 4 composition modes which are defined by W3C for CSS compositing [1] and are implemented by other painting libraries: Cairo [2], CoreGraphics [3], and Skia [4]:
* ""hue"" - hue of source and saturation and luminosity of target
* ""saturation"" - saturation of the source and hue and luminosity of target
* ""color"" - hue and saturation of source and luminosity of target
* ""luminosity"" - luminosity of source and hue and saturation of target

[1] https://www.w3.org/TR/compositing/#blendingnonseparable
[2] https://www.cairographics.org/manual/cairo-cairo-t.html#CAIRO-OPERATOR-HSL-HUE:CAPS and below
[3] https://developer.apple.com/documentation/coregraphics/cgblendmode/kcgblendmodehue, https://developer.apple.com/documentation/coregraphics/cgblendmode/kcgblendmodesaturation, https://developer.apple.com/documentation/coregraphics/cgblendmode/kcgblendmodecolor, https://developer.apple.com/documentation/coregraphics/cgblendmode/kcgblendmodeluminosity
[4] https://skia.org/user/api/SkBlendMode_Reference#Hue and below",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0lma7:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Documentation for QToolButton styling,QTBUG-77045,281317,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,docteam,e0101981,e0101981,15 Jul '19 06:06,15 Jul '19 07:23,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Documentation,,,,0,,,,"Feedback from Osama K (via feedback@qt.io): 

Currently, the documentation does not include anything for styling the menu of a QToolButton (with popup mode MenuButtonPopup) through the style sheets. It’s not clear if the menu has to be coded in a .cpp file or through some other method. I’d generally prefer not to code to minimize chances of errors occurring through code whenever possible, so it would be great if you could include documentation for a QMenu under a QToolButton. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0llfj:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
QNX on i.MX8QM - Make QNX_MAX_BUFFER_COUNT configurable,QTBUG-76851,280835,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,jmcdonnell_blackberry,patrickshelly,patrickshelly,02 Jul '19 13:36,09 Jul '19 09:09,18 Feb '21 09:41,,5.12.4,,,,,,,,,,,,,,,,,,,,,,Build System,QPA,,,0,,,,"In the QNX Screen interface, file qnxwindow.h, make MAX_BUFFER_COUNT configurable at build time. 

[https://code.woboq.org/qt5/qtbase/src/plugins/platforms/qnx/qqnxwindow.h.html#_M/MAX_BUFFER_COUNT] is hard-coded to 2. It would be nice for Qt to provide a way to configure this. Something as simple as: 
{code:java}
#ifndef QNX_MAX_BUFFER_COUNT
 #define QNX_MAX_BUFFER_COUNT 2
 #endif{code}
This will allow build time configuration.",,,,,,,,,,,,,,,QT3DS-2981,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,QNX,,,,,,"0|i0lijr:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Android asset folder deleted,QTBUG-76180,279489,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,qtbuildsystem,gaminn,gaminn,04 Jun '19 08:22,25 Jun '19 08:20,18 Feb '21 09:41,,5.11.2,,,,,,,,,,,,,,,,,,,,,,Build System,,,,0,,,,"I install some resources into asset folder during my Qt 5.11 Android app build. I noticed the asset folder is deleted during every build.

I install several hundreds MB of resources to asset folder. Is it possible to make asset folder persistent? Also I want Qt to install resources into asset folder only when a destination file does not exist or when it is older than source file. Is that possible?",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Android,,,,,,"0|i0lakv:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"04 Jun '19 08:41;kkohne;What's the build system you use?","04 Jun '19 08:57;gaminn;Qt Creator 4.7.2 on Win10. Kit is Android for armeabi-v7a (GCC 4.9, Qt 5.11.2).","25 Jun '19 08:20;kkohne;Sorry for not coming back to you earlier. To clarify things: How do you copy things in your asset folder? Do you do that from inside qmake?

A minimal example demonstrating the issue would be great.",,,,,,,,,,,,,,,,,,,
"How can I run the ""mapviewer"" example with OpenSSL installed from the Qt installer",QTBUG-76498,280097,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,aksalova,jimis,jimis,18 Jun '19 14:20,19 Jun '19 09:55,18 Feb '21 09:41,,5.13.0,,,,,,,,,,,,,,,,,,,,,,Packaging & Installer,,,,0,,,,"I install qt 5.13.0 RC3 and select the MinGW 7.3 runtimes and OpenSSL 1.1c. When I build and run ""mapviewer"" example, it is not showing any mapdata because of lack of openssl. My openssl path is

C:\Qt-5_13_0_RC3\Tools\OpenSSL\Win_x64\lib

I have changed the build and runtime environment several times to add the path to variables like LIB, LIBS, LIBPATH, LIBRARY_PATH, LD_LIBRARY_PATH as suggested from various google results.
 * How can I make it work?
 * Can we make it less complicated? For example if we install OpenSSL from a 3rd party installer, it usually goes into system lib directory and ""just works"". Even if we don't want to do that, it would be much more straightforward to print a ""hint"" to the user prompting him to install an external (and better) openssl distribution than ours.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Windows,,,,,,"0|i0le5j:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"18 Jun '19 14:38;con;Afaik Windows looks in the PATH for libraries at runtime.

[~janihe], [~kkohne], [~ankokko]: What is the purpose / expected usage pattern of an OpenSSL package that is installed somewhere unrelated to Qt ?","18 Jun '19 14:48;janihe;[~aksalova] I think you are the best one answer to this","18 Jun '19 22:07;aksalova;*""How can I make it work?""*

The most easiest way to make ""mapviewer"" example work on Windows with OpenSSL libraries provided by Qt online installer is to add OpenSSL's bin -folder (in this case C:\Qt-5_13_0_RC3\Tools\OpenSSL\Win_x64\bin) into path. If working solely on command prompt things are straightforward  but if changing path via control panel's environment variables (either user variables or system variables) please remember to restart Qt Creator to make path changes effect.

*""Can we make it less complicated?""*

Yes we could e.g. by installing our OpenSSL libraries directly to C:\Windows\System32 for 64-bit or C:\Windows\SysWOW64 for 32-bit folders (backward naming convention by operating system provider). Or we could add our install path into target machine system variable's path.

First solution is hindered by the key item that OpenSSL should not by default be included to the Qt binaries used for the Applications (created with Qt) and user must make conscious decision to enable OpenSSL. We make that more than obvious by requiring user actions on setting path variables to OpenSSL libraries. Also there have been some strong opinions that
a) we shouldn't install anything to system folders unless it is absolutely necessary (I kind of tend to agree although over time Windows system folders becomes quite a mess even without us) 
b) we should always clean up during uninstall what our installers have installed (I agree and don't want to poke Windows system folders)
c) we should not deliver OpenSSL libraries at all in the first place (legally not relevant or valid claim but gives an idea how touchy topic this has been and indirectly reason why installer works in this case as it does)

Latter solution does have few possible pitfalls while we can't anticipate what paths are already in target system and may cause potential issues to other existing programs and configurations. I messed up my own desktop environment when implementing install script even script itself was working correctly and as planned. Sure it was easily fixed by removing just set path from environment variable path but it would have been interesting try to find it out without knowing that path was modified (yes, we could always inform user about that). Also without knowing if e.g. earlier OpenSSL versions are already in path we might not get the expected result anyway.

*""it would be much more straightforward to print a ""hint"" to the user prompting him to install an external (and better) openssl distribution than ours.""*

I agree that informing user to get external OpenSSL distribution would have been a better solution but that is not my decision to make. But at least now user get OpenSSL binaries with the same configuration parameters what we use when we are building our delivery Qt binaries on Coin.

But I have nothing against changing current implementation / behavior of how OpenSSL libraries are installed from our online installer if such requirement is done.","19 Jun '19 07:11;con;bq. we should not deliver OpenSSL libraries at all in the first place

Actually I wonder why our prebuilt binaries still do not use the system API for SSL, since QTBUG-62637 is now done. Like we do on macOS.","19 Jun '19 09:45;jimis;Thanks [~aksalova]. I changed the project's build environment in the project's ""build settings"" (which also changes the run environment) by adding the path {{OpenSSL\Win64\bin}} into variable {{Path}} and {{mapviewer}} immediately worked (no restart of Qt Creator was needed)! My mistake before was twofold: 1. I was adding the ""lib"" instead of the ""bin"" path and 2. I did not try to add that to PATH as I thought this was only for binaries.

From my POV this could be more straightforward but I'm happy with what I learned, so feel free to keep or close the ticket or whatever.",,,,,,,,,,,,,,,,,
QHTTPMultiPart no longer abides by Google's new strict multipart validation process,QTBUG-72791,271712,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,cnn,akiva,akiva,29 Dec '18 01:15,19 Jun '19 03:55,18 Feb '21 09:41,,5.11,,,,,,,,,,,,,,,,,,,,,,Network: HTTP,,,,0,,,,"Recently my youtube uploading code stopped working, which relied on a basic multipart 
{code:c++}
void QNetworkTools::uploadYoutubeVideo(QFile &file, const QString &title, QString description, const QStringList &tags)
{
	/* Create Request */
	QNetworkRequest request;
	{
// There may be some useless parameters in here. They were only added as I was 
// trying to figure out if I could use them to make the upload work
		setUri(""https://www.googleapis.com/upload/youtube/v3/videos"");
		addUrlParameter(""part"", ""snippet,status"");
		addUrlParameter(""client_id"",    OAuth2.client_id());
		addUrlParameter(""redirect_uri"", OAuth2.redirect_uri());
		addUrlParameter(""scope"",        OAuth2.scope());
		addUrlParameter(""notifySubscribers"", ""False"");
		addUrlParameter(""onBehalfOfContentOwner"", """");
		addUrlParameter(""onBehalfOfContentOwnerChannel"", """");

		request.setUrl(uri());
		request.setRawHeader(""Authorization"", ""Bearer "" + OAuth2.access_token().toUtf8());
	}

	/* Video Settings */
	QHttpMultiPart* multiPart = new QHttpMultiPart(QHttpMultiPart::MixedType);
	QString body;
	{
		QHttpPart jsonPart;
		jsonPart.setHeader(QNetworkRequest::ContentTypeHeader,QVariant(""application/json""));
		body = QString(R""(
			       ""kind"": ""youtube#video"",
			       ""snippet"":
			       {
				       ""title"": ""%1"",
				       ""description"": ""%2"",
				       ""tags"": [""%3""],
				       ""categoryId"": ""27""
			       },
			       ""status"":
			       {
				       ""privacyStatus"": ""public"",
				       ""license"": ""creativeCommon""
			       },
			       ""notifySubscribers"": ""False""
			       )"").arg(title, description.remove(""\""""), tags.join(""\"",\"""")).remove(""	"");
		jsonPart.setBody(body.toUtf8());
		multiPart->append(jsonPart);
	}

	/* Video File */
	QHttpPart videoPart;
	{
		if (file.open(QIODevice::ReadOnly)) { videoPart.setBodyDevice(&file); }
		videoPart.setHeader(QNetworkRequest::ContentTypeHeader,        QVariant(""video/*""));
		videoPart.setHeader(QNetworkRequest::ContentDispositionHeader, QVariant(""Slug""));
		multiPart->append(videoPart);
	}
	QNetworkReply *reply = m_NetworkAccessManager.post(request, multiPart);

	QEventLoop waitForUpload;
	connect(reply, &QNetworkReply::finished, &waitForUpload, &QEventLoop::quit);
	waitForUpload.exec();
	disconnect(reply, &QNetworkReply::finished, &waitForUpload, &QEventLoop::quit);
}
{code}

After much confusion, I stumbled across two posts:
+https://stackoverflow.com/questions/52844182/getting-malformed-multipart-body-when-trying-to-upload-video-to-youtube
+
This one leads you to believe that google may have disabled multipart uploading. However upon further searching,
https://github.com/Elringus/UnityGoogleDrive/issues/30#issuecomment-436971836
states the following:
_Looks like Google has made validation of the multipart bodies more strict. I've had to manually compose the body, preserving all the new lines and spaces, before it finally accepted the request. Multipart uploads in the latest release should work fine now: https://github.com/Elringus/UnityGoogleDrive/releases/tag/v0.22-alpha
_

This looks like a bug unfortunately introduced by google. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0k3in:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"29 Dec '18 05:13;tpochep;> This looks like a bug unfortunately introduced by google.

So, what's this suggestion/report about? Submit it to google instead?","29 Dec '18 07:32;akiva;

I will go ahead and see if I can find where I can file a bug with them, however, 

>So, what's this suggestion/report about? Submit it to google instead?

If it is possible to create a multipart that works with google manually, as done here:

https://github.com/Elringus/UnityGoogleDrive/compare/v0.22-alpha...master#diff-1c03c3c88e2f21762c14900967089b2d

Then whatever is preventing QHttpMultiPart from achieving that should be reformed to adhere to the strict new guidelines... which appears to be a stricter delimeter. From what I can tell, he went from something like this:

            {code:java}
QByteArray(""\r\n--""+boundary+""--\r\n"");

{code}

to this:

{code:java}
QByteArray(""\r\n--""+boundary+""--"");

{code}            

ie, one less linebreak. 

","29 Dec '18 07:56;akiva;Filed a bug report with google.
Will be interesting to see if they have anything to say.
https://issuetracker.google.com/issues/122100455",,,,,,,,,,,,,,,,,,,
Pointer Handlers should expose the current pointer type,QTBUG-76381,279948,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,qt.team.quick.subscriptions,andre,andre,14 Jun '19 12:58,17 Jun '19 16:32,18 Feb '21 09:41,,5.14,,,,,,,,,,,,,,,,,,,,,,Quick: Mouse Touch and Tablet input,,,,0,,,,"It's very cool that you can select to which pointer device(s) an handler should respond using the accepted* properties, but I'd still like to reveive the actual values for these properties belonging to the current event. 

If you only want a *slightly* different reaction based on the pointer type (adjust a margin perhaps, change an icon next to the visualized touch point, or change the placement of something you drag in respect to the point because a finger covers the touch screen, or...) it is beneficial to re-use the same handler instead of defining a whole list of them which share 90% of their content but ony set one different item. 

So, I think these values should be exposed in some way. I guess the best way would be to expose them as as a set of current* properties mirroring the accepted* properties that control what is reacted to. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0ldaf:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"14 Jun '19 15:41;srutledg;I was hoping that if you use handlers declaratively (i.e. no javascript functions in them), then they are cheap enough to use multiple instances, one for each interaction that you want to achieve.  If you want to do what you are asking, then it's often no longer going to be declarative, right?  You will need if statements.

But the HandlerPoint type that is exposed via the point or centroid property (depending on the handler) has the ""current"" values.

The plan for Qt 6 so far is to have a QPointingDevice instance which will have as much information as possible about the device, and every pointing-device event will carry a pointer to the device it came from.","14 Jun '19 18:22;andre;That would not necessarily be the case. One could also use a binding using a ternary operator, something like:
{code:java}
image: handler.currentDevice == PointerDevice.Cursor ? ""cursor.png"" : ""finger.png""{code}
You say that this is available via HandlerPoint? It may be me, but I don't see that. I do see the modifiers and the pressedButtons in the documentation, but not the PointerDevice or DeviceType. Am I overlooking something?

Exposing these via the HandlerPoint would be good enough I guess.

I do understand where you're coming from, but you also have to weigh the cost of repeating code. If the code paths do something different, it makes total sense to use different handlers, but if they essentially do the same thing with a very slight variation, it does not IMO as it leads to copy/paste coding and thus, to mistakes and maintenance issues. ","17 Jun '19 16:32;srutledg;No, device type is not there currently, that's true.",,,,,,,,,,,,,,,,,,,
Documentation should mention ListView TableView attached properties limitation,QTBUG-74951,276597,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,docteam,karimpinter,karimpinter,04 Apr '19 07:02,07 Jun '19 12:31,18 Feb '21 09:41,,5.12.2,5.13.0 Beta 1,,,,,,,,,,,,,,,,,,,,,Documentation,,,,1,Reported_by_support_standard,,,"ListView/GridView/TableVIew's delegates attached properties like index, row, column are not accessible outside of the delegate, for example in case of drag and drop, drag.source.index is undefined same with any of the roles. 
The reason is that row/column/index/model roles properties are ""injected"" into the context of the delegate item from the model classes, in a bit weird way. And this context is only available from inside the delegate item, and not when they are accessed into the item from the outside. 
This is a know limitation, so the documentation should mention it.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0kubr:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
No dialogs can be shown on eglfs because createPlatformDialogHelper() is not implemented,QTBUG-76187,279518,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,lagocs,rebemlix,rebemlix,04 Jun '19 11:35,05 Jun '19 10:24,18 Feb '21 09:41,,5.12.3,,,,,,,,,,,,,,,,,,,,,,QPA: EGLFS,,,,0,,,,"I try to show some dialogs using Qt.labs.platform and this results in output like this:

 
{noformat}
qt.labs.platform.dialogs: FileDialog -> QObject(0x0)
{noformat}
This should be this code:

 
{code:java}
bool QQuickPlatformDialog::create()
{
 if (!m_handle) {
 if (useNativeDialog())
 m_handle = QGuiApplicationPrivate::platformTheme()->createPlatformDialogHelper(m_type);
 if (!m_handle)
 m_handle = QWidgetPlatform::createDialog(m_type, this);
 qCDebug(qtLabsPlatformDialogs) << qmlTypeName(this) << ""->"" << m_handle;
 if (m_handle) {
 onCreate(m_handle);
 connect(m_handle, &QPlatformDialogHelper::accept, this, &QQuickPlatformDialog::accept);
 connect(m_handle, &QPlatformDialogHelper::reject, this, &QQuickPlatformDialog::reject);
 }
 }
 return m_handle;
} 
{code}
createPlatformDialogHelper() does not appear anywhere inside qtbase/src/plugins/platforms/eglfs/ so I guess this is the culprit.",Linux on an embedded device using eglfs and Qt.Controls 2.x.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Linux/Other display system,,,,,,"0|i0larb:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"05 Jun '19 10:23;lagocs;I doubt this will ever work as there are no native dialogs available and using the widget ones means mixing QWidget and Qt Quick rendering which will not be supported in eglfs. (which supports either a single OpenGL-based QWindow or a QWidget-only UI, but not both at the same time)

For complex multi-window, multi-dialog applications one may consider using Wayland instead (which comes with its own pros and cons of course).

",,,,,,,,,,,,,,,,,,,,,
Please add QTextCodec::codecForXmll(),QTBUG-76126,279334,Suggestion,Open,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,thiago,szykcech,szykcech,30 May '19 18:49,31 May '19 17:02,18 Feb '21 09:41,,5.12.3,,,,,,,,,,,,,,,,,,,,,,Core: QString and Unicode,,,,0,,,,"Hi

Please add QTextCodec::codecForXmll() - it is usefull for text editors. There is 

QTextCodec::codecForHtml() so why not QTextCodec::codecForXmll() ?

thanks and best regards

Szyk Cech",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0l9n3:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"31 May '19 05:31;thiago;QXmlStreamReader already processes the charset marker correctly in the XML header. Why do you need to get the QTextCodec?","31 May '19 12:07;szykcech;Indeed QXmlStreamReader::documentEncoding() exists. But what I need is that case: I create plain text editor (e.g. for programmers) and I want detect xml encoding before load file. For now if I open html file it is easy, but can't say the same for xml. I must load head (e. g. first 2KB) and make encoding detection by hand (and probably in naive and not recomended way).","31 May '19 17:02;thiago;Well, there is a non-naive and well-recommended way, which is to parse the {{<?xml ?>}} tag for the {{charset}} parameter that may appear there. Without a full XML parser, the implementation in QTextCodec would be not much better than what you can write.","31 May '19 17:02;thiago;I'm accepting the suggestion, but this is not high priority for us.

Maybe you'd like to contribute it?",,,,,,,,,,,,,,,,,,
Add support for QNetworkProxyFactory so that a proxy can be returned for the requested address,QTBUG-75375,277495,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,qt_webengine_team,andysh,andysh,24 Apr '19 08:37,17 May '19 10:42,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,WebEngine,,,,0,Reported_by_support_standard,,,"Add support for QNetworkProxyFactory so that a proxy can be returned for the requested address, this allows for finer control over which proxy is returned for a given address.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,QTBUG-62089,9223372036854775807,,,,,,,,,"0|i0kzhb:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Consider disabling Chromiums default crash handler,QTBUG-70988,268038,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,qt_webengine_team,kkohne,kkohne,08 Oct '18 07:50,02 May '19 15:06,18 Feb '21 09:41,,5.12,,,,,,,,,,,,,,,,,,,,,,WebEngine,,,,1,,,,"Chromium by default installs it's own crash handler, which automatically prints a stack trace . This is convenient, but might clash with general purpose crash handlers, see e.g.

[https://www.dvratil.cz/2018/10/drkonqi-and-qtwebengine/]

 

Should we change the default here, or at least document this properly in [http://doc.qt.io/qt-5/qtwebengine-debugging.html] ?",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0jhzb:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"02 May '19 15:06;dfaure_kdab;Yes please disable it, it is very annoying that an app that uses WebEngine behaves differently than one which does not. It's just one library, it shouldn't change process-wide behavior on crashes.",,,,,,,,,,,,,,,,,,,,,
DOC: Create diagram templates,QTBUG-74777,276262,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,docteam,paulwicking,paulwicking,28 Mar '19 12:55,29 Apr '19 11:44,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Documentation,,,,0,DocWorkshop03.19,,,E.g. using draw.io ?,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0ksa7:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Doc: Improve configuration documentation,QTBUG-74785,276270,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,docteam,paulwicking,paulwicking,28 Mar '19 13:02,29 Apr '19 11:24,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Documentation,,,,0,DocWorkshop03.19,,,"As a starting point, look at what Qt Configure Tools does.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0ksbz:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Please turn 'qml-root-path' into 'qml-root-paths',QTBUG-75187,277164,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,qtbuildsystem,beholder,beholder,15 Apr '19 20:49,23 Apr '19 08:32,18 Feb '21 09:41,,5.12.2,,,,,,,,,,,,,,,,,,,,,,Build tools: Other,Build tools: qmake,,,1,,,,"In some cases, like implementing compile-time-enabled features, it might be necessary to have more than one 'qml root' for qmlimportscanner, which is already capable to handle multiple roots, but the issue is that qmake / androiddeployqt are a bit too stupid (or smart?) and disallow to use this functionality. 

Currently QML_ROOT_PATH is used as the value for 'qml-root-path' in qmake-produced '...-deployment-settings.json'. Androiddeployqt just parse json file and pass 'qml-root-path'-s value to qmlimportscanner. From the first look it should be possible to compose QML_IMPORT_PATH like '$$PWD/root1/qml $$PWD/root2/qml' as the result of which qmlimportscanner would work with two roots, but unfortunately this hack doesn't work -androiddeployqt just escapes all the whitechars. 

I fail to understand the reason for disallowing just one QML_ROOT_PATH and think it should allow to specify list of roots for better flexibility. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Android,,,,,,"0|i0kxin:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Doc: Use web style in locally built docs,QTBUG-74782,276267,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,treinio,paulwicking,paulwicking,28 Mar '19 13:00,15 Apr '19 08:49,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Documentation,,,,0,DocWorkshop03.19,,,E.g. for previewing with proper styling,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0ksbb:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
QSpinBox does not support  text-align in QSS,QTBUG-74973,276642,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,qt.team.quick.subscriptions,jcelerier,jcelerier,04 Apr '19 20:31,05 Apr '19 13:24,18 Feb '21 09:41,,5.12.2,,,,,,,,,,,,,,,,,,,,,,Widgets: Style Sheets,,,,0,,,,"Only very few widgets support this property, which is nonetheless very useful.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0kulr:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Allow setting a flag to control whether or not ComboBox's popup is allowed to obscure the contentItem,QTBUG-74957,276615,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,qt.team.quick.subscriptions,mitch_curtis,mitch_curtis,04 Apr '19 10:22,04 Apr '19 11:39,18 Feb '21 09:41,,5.12,,,,,,,,,,,,,,,,,,,,,,Quick: Controls 2,,,,1,Qt_Quick_Designer_NG,,,"Sometimes QQuickPopupPositioner will position ComboBox's popup in such a way that it hides the current item:

{code}
import QtQuick 2.12
import QtQuick.Controls 2.12
import QtQuick.Window 2.12

ApplicationWindow {
    visible: true
    width: 640
    height: 190

    ComboBox {
        model: 100
        anchors.horizontalCenter: parent.horizontalCenter
    }
}
{code}

It seems [some UIs|https://docs.microsoft.com/en-us/windows/uwp/design/controls-and-patterns/combo-box] intentionally do this:

 !combo_box_collapsed.png|thumbnail!  !combo_box_listitemstate.png|thumbnail! 

However, other styles might not want this, so a flag to control it could be useful.

How it will work is unclear, as the positioner would need to be aware of the contentItem.",,,,,,,,,,,,,,,,,,,"04 Apr '19 10:28;mitch_curtis;combo_box_collapsed.png;https://bugreports.qt.io/secure/attachment/82661/combo_box_collapsed.png","04 Apr '19 10:28;mitch_curtis;combo_box_listitemstate.png;https://bugreports.qt.io/secure/attachment/82662/combo_box_listitemstate.png",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0kufr:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"04 Apr '19 10:31;mitch_curtis;Another option might be to make the allowVertical/HorizontalFlip flags public. Then users could control whether it gets flipped at all.",,,,,,,,,,,,,,,,,,,,,
Doc: Investigate possible communication platform for doc contributors,QTBUG-74809,276294,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,docteam,paulwicking,paulwicking,28 Mar '19 13:17,01 Apr '19 10:57,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Documentation,,,,0,DocWorkshop03.19,,,"Is there something that's more accessible than IRC for contributors outside TQtC?

* Blog post about how to talk to the documentation team @TQtC
* Add a reference to #qt-documentation freenode IRC channel to our footer/header?",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0kshb:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Add ""enum values"" to QCommandLineOption, including validation",QTBUG-74692,276103,Suggestion,Open,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,dfaure_kdab,d3fault,d3fault,26 Mar '19 02:36,28 Mar '19 08:02,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Core: Other,,,,0,,,,"Highly related to, and mostly described in comments of: QTBUG-74594
-Don't start this task until whether or not to allow spaces in the ""enum values"" is resolved (ongoing discussion in QTBUG-74594).- Spaces in the ""enum values"" should be allowed, and escaped by a backslash: \. It should probably also follow the same rules as QCommandLineOption's name: ""must not be empty, must not start with a dash or a slash character, must not contain a = and cannot be repeated.""

Currently QCommandLineOption only allows you to give an option value ""description"", but it would be useful if you could supply a limited set of values for a given QCommandLineOption. ex: "" --mode foo "" and "" --mode bar "", where only foo and bar are allowed following --mode, not any string. QCommandLineParser can/should validate the values and show it's --help and call exit() accordingly.

Also worth mentioning that a ""default enum value"" (when the QCommandLineOption isn't provided by the user) should be specifiable.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0krbr:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"26 Mar '19 04:59;thiago;Sounds interesting. Spaces should be allowed regardless of the outcome of that discussion.",,,,,,,,,,,,,,,,,,,,,
"QScreen name not ""presentable"" on windows",QTBUG-74317,275179,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,qt.team.quick.subscriptions,phill11,phill11,11 Mar '19 09:50,12 Mar '19 14:05,18 Feb '21 09:41,,5.12.1,,,,,,,,,,,,,,,,,,,,,,GUI: Look'n'Feel,,,,0,,,,"The documentation for QScreen::name states that ""This property holds a user presentable string representing the screen"" 

This property returns ""\\.\DISPLAY1"" on Windows 7. Not particularly presentable.

This has been reported several times against the Windows api that Qt uses, so there are a few examples of how this can be 'fixed'. One such example is: https://social.msdn.microsoft.com/Forums/vstudio/en-US/cede9420-bc64-45e9-867c-f15920fb2c98/c-enumerate-monitor-name-get-same-name-used-in-control-panel-gt-screen-resolution?forum=csharpgeneral",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Windows,,,,,,"0|i0kmrz:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add icons to ComboBox,QTBUG-73489,273269,Suggestion,Open,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,qt.team.quick.subscriptions,broulik,broulik,04 Feb '19 12:01,04 Mar '19 09:36,18 Feb '21 09:41,,5.12.0,,,,,,,,,,,,,,,,,,,,,,Quick: Controls 2,,,,1,,,,"It should be possible to add icons to {{ComboBox}} controls and the item delegates within, just like can be done with Qt Widgets {{QComboBox}}, without having to adjust the {{contentItem}} or {{itemDelegate}}.

API-wise I suggest something similar to how {{currentText}} and {{textRole}} behaves. {{textRole}} should perhaps default to {{DecorationRole}}. A {{displayIcon}} property would default to whatever icon is assigned to the current item but can also be overridden to show a custom icon or show a static icon independent from the current item.

The difficulty lies in how to interface the {{QIcon}}-based {{DecorationRole}} of a model with QtQuick / QtQuick Controls {{Icon}}, and also how to make icons possible in models in a purely declarative way (both as JS Array and ListModel).
h2. API examples

A {{ComboBox}} which contains entries with icons and takes whatever icon the currently selected item has ({{icon}} API also purely fictional)
{noformat}
QQC2.ComboBox {
    textRole: ""label""
    iconRole: ""icon""
    model: [
        {label: ""None"", icon: ""dialog-cancel""},
        {label: ""All"", icon: Qt.icon(""qrc:/icons/all.png""}
    ]
}{noformat}
 

A {{ComboBox}} which shows only a static icon independent of the current item !image-2019-02-04-12-54-22-667.png|width=235,height=141!
{noformat}
QQC2.ComboBox {
    displayIcon.name: ""view-filter""
    model: [""All Schemes"", ""Light Schemes"", ""Dark Schemes""]
}
{noformat}
 

A {{ComboBox}} which has a custom dynamic icon based on the current item
{noformat}
QQC2.ComboBox {
    textRole: ""label""
    iconRole: ""icon""
    displayIcon.name: currentIcon.name + ""-symbolic""
    model: [
        {label: qsTr(""Red""), color: ""red"", icon: ""note-red""},
        {label: qsTr(""Green""), color: ""green"", icon: ""note-green""},
        ...
    ]
}{noformat}
 

Usecases for icons on ComboBoxes include (but are not limited to): indicating ""orientation"", application icons (e.g. chosing a default application or handler), country flags in locale settings.",Qt 5.12 on Linux,,,,,,,,,,,,,,,,,,"04 Feb '19 11:54;broulik;image-2019-02-04-12-54-22-667.png;https://bugreports.qt.io/secure/attachment/80645/image-2019-02-04-12-54-22-667.png",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0kcfb:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"03 Mar '19 12:11;mitch_curtis;I also found myself wanting something like this today. As for API, I was thinking of this:

{code}
iconNameRole: ""iconName""
// Or for URLs
iconSourceRole: ""iconSource""
{code}

If both are set, iconNameRole takes priority [as usual|https://doc.qt.io/qt-5/qml-qtquick-controls2-abstractbutton.html#icon.name-prop].

Would this API work for you?","04 Mar '19 09:36;mitch_curtis;Ah, you are also suggesting to have a separate icon for the button/background itself. That makes this a lot more complex... though I can see that it would make sense.",,,,,,,,,,,,,,,,,,,,
Merge entire format of QSyntaxHighlighter and ExtraSelection,QTBUG-74122,274824,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,esabraha,lachrymology,lachrymology,28 Feb '19 12:00,04 Mar '19 08:51,18 Feb '21 09:41,,5.11,5.12.0,5.13.0 Alpha 1,,,,,,,,,,,,,,,,,,,,GUI: Text handling,,,,2,,,,"Hi all,

would it be possible to apply the entire QTextCharFormat of ExtraSelection and overwrite the underlying QTextCharFormat of QSyntaxHighlighter?

Currently only the background and forground will be take from ExtraSelection which is a bit memory inefficient to store the entire QTextCharFormat for two QColor objects which will be used.

To check if a font is set or not - there are still functions for it. At least there is no real isValid or isNull for QFont, but if I have a look at the source of QTextCharFormat::setFont you are using a mask checking through enums if the properties are valid.
{code:java}
const uint mask = behavior == FontPropertiesAll ? uint(QFont::AllPropertiesResolved) : font.resolve();
if (mask & QFont::FamilyResolved)
  setFontFamily(font.family());
if (mask & QFont::SizeResolved) {
  const qreal pointSize = font.pointSizeF();
  if (pointSize > 0) {
    setFontPointSize(pointSize);
.. .. ..{code}
This method(s) could be used at least to merge the QTextCharFormat of QSyntaxHighlighter and ExtraSelection.

 

It would be at least a nice comfort function/option to have two layers to style the text. At first QSyntaxHighlighter which will be overwritten by ExtraSelection as next.

 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Windows,,,,,,"0|i0kkof:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"28 Feb '19 17:06;esabraha;Thanks for the report!

Is this meant to be a ""Suggestion"" report? If so, could you change the type and also update the description to describe what change you would like to suggest and how this would benefit users of Qt?

The additional information and code samples can be added in a comment so no information is lost. ","28 Feb '19 19:53;lachrymology;Yes, you're right. It's meant as suggestion, but I can't find an option to change the ticket type. *facepalm* ","04 Mar '19 08:51;esabraha;No problem, it is quite well hidden (under ""More"" -> ""Move"") :)

I have changed it.",,,,,,,,,,,,,,,,,,,
OpenGL ES3 support ,QTBUG-73955,274192,Suggestion,Open,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,tokorpip,nagrohn,nagrohn,20 Feb '19 23:03,25 Feb '19 11:37,18 Feb '21 09:41,,5.12.1,,,,,,,,,,,,,,,,,,,,,,Data Visualization,,,,0,Reported_by_support_standard,,,"When running an application that contains 3D texture feature (e.g. Custom3DVolume) , the intended drawing is done on desktop environment but not on iOS device. On iOS device, only a rectangular parallelepiped of grey color is drawn (output-on-iOS.png) and the following warnings are output. 
{code:java}
2019-02-20 23:49:00.134114+0200 qmlvolume[9298:3929372] Warning: Flat qualifier not supported on your platform's GLSL language. Requires at least GLSL version 1.2 with GL_EXT_gpu_shader4 extension.
2019-02-20 23:49:00.165187+0200 qmlvolume[9298:3929372] Shadows are not yet supported for OpenGL ES2{code}",,,,,,,,,,,,,,,,,,,"20 Feb '19 23:00;nagrohn;output-on-iOS.jpg;https://bugreports.qt.io/secure/attachment/81183/output-on-iOS.jpg","20 Feb '19 22:59;nagrohn;qmlvolume.zip;https://bugreports.qt.io/secure/attachment/81184/qmlvolume.zip",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,iOS/tvOS/watchOS,,,,,,"0|i0ki3b:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"21 Feb '19 07:55;nagrohn;The following code has been tested but no effect on the result. 
{code:java}
QSurfaceFormat fmt;
fmt.setVersion(3, 1);
fmt.setRenderableType(QSurfaceFormat::OpenGLES)
fmt.setDepthBufferSize(24);
QSurfaceFormat::setDefaultFormat(fmt);
{code}
 ","21 Feb '19 08:03;tokorpip;Data Visualization was designed to support only ES2 when it was made, so it just checks if the target is ES and ignores the version. All ES shaders are made to support ES2.

This should probably be a suggestion instead of a bug, as it is requesting new features for ES.","25 Feb '19 09:07;andysh;[~tokorpip] in that case, feel free to make it a suggestion instead.",,,,,,,,,,,,,,,,,,,
Make QQuickControl public,QTBUG-73944,274175,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,qt.team.quick.subscriptions,mitch_curtis,mitch_curtis,20 Feb '19 13:19,20 Feb '19 15:29,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Quick: Controls 2,,,,2,,,,"This would allow users to add new logic to controls, without committing to making the entire templates API public.

It would require exporting some API:

{quote}
<jpnurmi> micurtis: actually just export macros in qqc2 to make it possible to call the begin/cancel/complete methods in qquickdeferredexecute.h from outside of libqtquicktemplates2
<jpnurmi> micurtis: as it is today, when building a custom control, if you follow the structure of any built-in control, you'll get linker errors
{quote}",,,,,,,,,,,,,,,QTBUG-67062,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0khzj:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Implement Bokeh blur GraphicalEffect,QTBUG-73906,274121,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,qt.team.graphics.and.multimedia,scorp1us,scorp1us,19 Feb '19 22:56,20 Feb '19 08:01,18 Feb '21 09:41,,5.12.1,,,,,,,,,,,,,,,,,,,,,,Quick: Graphical Effects,,,,0,,,,"The Bokeh blur is very a desirable blur.  It looks like Qt 3D might already have Bokeh to some extent?

 

This is not urgent. (for me, at this time)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0khnj:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Feature Request: Vertical header for QTreeView,QTBUG-73521,273322,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,qt.team.quick.subscriptions,shmittal,shmittal,05 Feb '19 08:39,05 Feb '19 08:40,18 Feb '21 09:41,,5.12.1,,,,,,,,,,,,,,,,,,,,,,Widgets: Itemviews,,,,1,Reported_by_support_standard,,,"In QtreeView, currently, there is a horizontal header. It would be better to have vertical header too, like if a customer wants to have row numbers or header values for the vertical header. 

It would be great to have such a feature. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Windows,,,,,,"0|i0kcqv:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add support for QFlags in QMetaObject & QMetaType,QTBUG-73387,273045,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,,msarehn,msarehn,30 Jan '19 09:07,30 Jan '19 15:58,18 Feb '21 09:41,,5.12,,,,,,,,,,,,,,,,,,,,,,Core: Other,,,,0,,,,"QMetaType currently does not know about QFlags, i.e. none of the QMetaType::TypeFlags indicate it and MetaType::IsEnumeration is not set.

The latter is a little inconsistent, because if the QFlags are declared with the Q_FLAG macro, you can perfectly well get the underlying QMetaEnum with QMetaEnum::fromType() and the flags are listed as enumerators in the QMetaObject of the containing type.

My suggestion would be to either set QMetaType::IsEnumeration for QFlags or to introduce a QMetaType::IsFlags type flag.

This bug has occured to us in QtWebChannel development when trying to marshall QFlags to integers and vice-versa. The current way of detecting QFlags is rather expensive by going through the enumerators of the containing QMetaObject by name.

Then the next problem occurs: QMetaType should probably have converter functions for int -> QFlags and QFlags -> int, which it currently doesn't have.

All in all this makes working with QMetaType pretty ugly as soon as QFlags types are involved.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0kb1r:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"30 Jan '19 09:15;msarehn;Just for reference, the related bug in QtWebChannel is QTBUG-72924","30 Jan '19 15:32;thiago;Flags are not enums. The value of a flags variable is highly unlikely to contain any of the values that the QMetaEnum would contain.","30 Jan '19 15:58;msarehn;True, but QMetaEnum also supports OR'd combinations of individual enum members through QMetaEnum::valueToKeys() and QMetaEnum::keysToValue().

Anyway I agree that setting QMetaType::IsEnumeration for QFlags is not the correct approach.",,,,,,,,,,,,,,,,,,,
Expose QIODevicePrivate::setWriteChannelCount() and setReadChannelCount() to QIODevice subclasses.,QTBUG-73327,272943,Suggestion,Open,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,thiago,mpaperno,mpaperno,29 Jan '19 06:03,29 Jan '19 15:44,18 Feb '21 09:41,,5.12.0,,,,,,,,,,,,,,,,,,,,,,Core: I/O,,,,0,,,,"As the summary says, it would perhaps be useful for inheriting classes to be able to set the number of read/write channels (w/out using the Qt private headers). 

For example I have a protocol I/O service (Bluetooth HID server) which has multiple read/write channels but makes sense as one overall ""I/O device.""  I can set the read/write channels (to know which socket to use in {{readData()/writeData()}}), and that all works fine, but from what I understand in reading the QIODevice code is that my subsequent ""channels"" (after the first ""0"" channel) don't benefit from (some?) internal buffering.

It does work w/out the buffering, at least for the small packets I've been testing with so far, and I'll readily admit that I don't entirely understand all the internals of QIODevice. But having the same buffering options for channels > 0 seems like a good thing.

Thanks,
-Max",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0kafb:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Improve documentation on QSGMaterial,QTBUG-73248,272752,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,docteam,gshep,gshep,24 Jan '19 07:53,24 Jan '19 07:54,18 Feb '21 09:41,,5.12.0,5.9.7,,,,,,,,,,,,,,,,,,,,,Documentation,Quick: SceneGraph,,,6,,,,"    I suggest to update documentation on QSGMaterial. In particular append
to Detailed description a link to Qt Quick Scene Graph Renderer document.
    Also link to 'Qt Quick Scene Graph Renderer -> Batch Roots
-> Transform Nodes' should be added to QSGMaterial::RequiresFullMatrix flag
documentation with description (or even just link to Performance chapter) 'copied' from Performance
chapter - Settings this flag prevents all batching.

    The motive for this suggestion is that most developers (me to)
find the sample 'Scene Graph - Graph' and try to hack it for
their needs - custom geometry and shaders. But they may
be astonished - 'where is my triangle, its coordinates in NDC?!' -
similiar https://bugreports.qt.io/browse/QTBUG-38545 .
And then devs go to read docs on QSGMaterial, QSGMaterialShader,
QSGGeometry, QSGGeometryNode, QEtc BUT hardly to discover
the mentioned doc 'Qt Quick Scene Graph Renderer' and
comprehend what happend there actually.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0k9a7:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add a xAxisRotation property to PathAngleArc,QTBUG-73111,272464,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,qt.team.quick.subscriptions,e8johan,e8johan,17 Jan '19 12:59,18 Jan '19 10:05,18 Feb '21 09:41,,5.12.0,,,,,,,,,,,,,,,,,,,,,,Quick: Other,,,,0,,,,"When creating an ellipse, i.e. different radiusX and radiusY, using a PathArc, one can rotate the ellipse by setting the xAxisRotation property. For an PathAngleArc, this propery is not present, and the ellipse cannot be rotated without using transformations that affect the entire path.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0k7jj:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"18 Jan '19 09:59;jbornema;This is not a bug. PathAngleArc is the convenience item for PathArc which deliberately leaves out stuff to configure.
Adding the xAxisRotation property might be worthwhile though.","18 Jan '19 10:05;e8johan;I agree, it is more of a feature request.",,,,,,,,,,,,,,,,,,,,
Quick Controls 2 Material: Support for textField with floating label,QTBUG-72554,271274,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,qt.team.quick.subscriptions,dheym,dheym,14 Dec '18 08:21,16 Jan '19 21:14,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Quick: Controls 2,,,,2,,,,"The TextField described in the material design documents have a label that moves to the top when the input field have focus. It would be very nice if the material theme supported this out of the box as well, as I imagine it is something most consumers of the theme would want.

See:
https://material.io/design/components/text-fields.html#anatomy",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0k0tz:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"16 Jan '19 21:14;ceperez1996;I do think that this feature is relevant enough to get at least a P2 priority level. Some users of my apps comment requesting this behavior, because is what they expect in the Material Style. It's an elegant feature, and will put QQC2's Material Style closer to Google's Guidelines and also closer to a native implementation.",,,,,,,,,,,,,,,,,,,,,
Non native path in qtenv2.bat for MinGW64 build in Qt 5.12.0,QTBUG-72897,271940,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,releaseteam,jonjonas681,jonjonas681,08 Jan '19 09:16,08 Jan '19 09:45,18 Feb '21 09:41,,5.12.0,,,,,,,,,,,,,,,,,,,,,,Packaging & Installer,,,,0,,,,"5.12.0\mingw73_64\qtenv2.bat looks like: (A mix of / and \ occurs in path to compiler)

@echo off
echo Setting up environment for Qt usage...
set PATH=C:\Qt\5.12.0\mingw73_64\bin;C:/Qt/Tools/mingw730_64\bin;%PATH%
cd /D C:\Qt\5.12.0\mingw73_64

But should look like:

@echo off
echo Setting up environment for Qt usage...
set PATH=C:\Qt\5.12.0\mingw73_64\bin;C:\Qt\Tools\mingw730_64\bin;%PATH%
cd /D C:\Qt\5.12.0\mingw73_64

This work with current windows version 10, but there seems to be a missing call to toNativeSeparators()!

 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Windows,,,,,,"0|i0k4xb:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add toValue<t>() to QString,QTBUG-72889,271925,Suggestion,Open,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,,silicomancer,silicomancer,07 Jan '19 18:14,08 Jan '19 00:03,18 Feb '21 09:41,,5.12.0,,,,,,,,,,,,,,,,,,,,,,Core: QString and Unicode,,,,0,,,,"Please add a template conversion method ""toValue<T>(bool* ok)"" to QString. That method should do the same as the existing toXXX() methods but based on the given template type.

This function would be helpful in modern templated code and would help maintain code that converts string to types with aliases.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0k4tz:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"08 Jan '19 00:03;thiago;I created a {{toIntegral<T>}} in the past.",,,,,,,,,,,,,,,,,,,,,
Rethink QTranslator API,QTBUG-71858,269879,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,kkohne,kkohne,kkohne,16 Nov '18 16:24,07 Jan '19 10:09,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Core: Locales (i18n),,,,2,,,,"QTranslator::load() exists in three variants, of which two are really hard to use and write:

{code}
bool QTranslator::load(const QString &filename, const QString &directory = QString(), const QString &search_delimiters = QString(), const QString &suffix = QString())
bool QTranslator::load(const QLocale &locale, const QString &filename, const QString &prefix = QString(), const QString &directory = QString(), const QString &suffix = QString())
bool QTranslator::load(const uchar *data, int len, const QString &directory = QString())
{code}

Especially the first two ones are hard to use properly, and it's easy to confuse arguments (4 QString's in a row)!

I think a [Property based API|https://wiki.qt.io/API_Design_Principles#Property-Based_APIs|http://example.com] would greatly improve readability, and also allow some more flexibility, for example:

{code}
QTranslator translator;
translator.setLocale(QLocale()); // could be the default?
translator.setSearchPath("":/i18n""); // could be the default? Should we support multiple search paths?
translator.setBaseName(""app_"");
translator.load();
{code}

An implementation could also remove some features that are IMO unnecessary:
- No need to look up for files without a suffix, or a suffix different from '.qm'.
- No need to look up for files without a locale part.
- No need for setting a separate prefix, you can always specify this as part of name.

The API should instead make use cases easy which we miss so far:
- Look up translations in common places, with sane defaults (QLibraryInfo::TranslationPath, AppData/i18n ...)
- Consistenly load the same locale for different .qm files (e.g. qt_xxx.qm, myapp_xxx.qm)

Finally, the lifetime of a QTranslator object is currently problematic - it has to be installed before the first tr() call, until the last tr() call, whenever that works. Ideally the lifetime would be bound to QCoreApplication, e.g. by making QTranslator a shared object in the background.",,,,,,,,,,,,,,,QTBUG-36608,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0jt7z:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Provide the WinRT plugin for QtPositioning as part of the Windows desktop builds,QTBUG-71897,269955,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,releaseteam,andysh,andysh,20 Nov '18 07:45,19 Dec '18 06:25,18 Feb '21 09:41,,5.11.2,,,,,,,,,,,,,,,,,,,,,,Packaging & Installer,,,,1,Reported_by_support_standard,,,Provide the WinRT plugin for QtPositioning as part of the Windows desktop builds as this can be used there if the location services are turned on.,Windows 10,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Windows,,,,,,"0|i0jtov:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"18 Dec '18 10:54;janihe;Hmm, so what is really requested here? Do you want us to package some winrt binary in windows desktop packages as well? Because we are already packaging all what coin produces to our packages","18 Dec '18 11:04;andysh;Yes, it should be built though so maybe the problem is that it is not being built on the coin side for some reason?","18 Dec '18 11:16;iknd;So which target build should produce the missing plugin? All these?
|WinRT WinRT_10 (msvc2015-x86) on Windows Windows_10 (msvc2015-x86_64)
WinRT WinRT_10 (msvc2015-x86_64) on Windows Windows_10 (msvc2015-x86_64)
WinRT WinRT_10 (msvc2017-x86) on Windows Windows_10 (msvc2017-x86_64)
WinRT WinRT_10 (msvc2017-x86_64) on Windows Windows_10 (msvc2017-x86_64)|

 ","18 Dec '18 12:13;andysh;[~owolff] Can you comment? :)","18 Dec '18 12:19;owolff;With https://codereview.qt-project.org/#/c/246196/ (patch on 5.12, but too late for 5.12.0 if I remember correctly) applied, every Windows configuration in 5.12 that uses MSVC should produce the missing plugin. So it's not only WinRT but also desktop Windows that gets the plugin ""for free"". If that doesn't happen, something else is fishy.","19 Dec '18 05:57;janihe;Ok, so Andy please check first Qt 5.12.1 snapshot when available","19 Dec '18 06:25;andysh;Will do!",,,,,,,,,,,,,,,
Ability to set submenu open delay,QTBUG-72482,271122,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,qt.team.quick.subscriptions,m_kolesnik,m_kolesnik,11 Dec '18 15:13,13 Dec '18 13:38,18 Feb '21 09:41,,5.11,,,,,,,,,,,,,,,,,,,,,,Quick: Controls 2,,,,0,,,,"There is no way to set submenu close/open delay from public api. It seems that required value is hardcoded in qtquickcontrols2/src/quicktemplates2/qquickmenu.cpp  _static_ _const_ _int_ SUBMENU_DELAY = 225;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0jzwf:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"13 Dec '18 13:33;mitch_curtis;I was going to say it sounds like a good candidate for a [style hint|http://doc.qt.io/qt-5/qstylehints.html], but then we might have to make widgets respect it... for example, JP's commits to add style hints were for existing functions:

* https://codereview.qt-project.org/#/c/163816/
* https://codereview.qt-project.org/#/c/140251/
* https://codereview.qt-project.org/#/c/149344/",,,,,,,,,,,,,,,,,,,,,
Add a public index property for TableViewColumn,QTBUG-71154,268413,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,qt.team.quick.subscriptions,andysh,andysh,15 Oct '18 12:31,07 Dec '18 12:18,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Quick: Controls 1,,,,0,Reported_by_support_premium,,,Add a public index property for TableViewColumn,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0jk9b:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"15 Oct '18 13:45;srutledg;TableViewColumn exists only in Qt Quick Controls 1.x which is basically deprecated.  So adding features seems unlikely ATM.

The new QtQuick TableView does not use this type of configuration: rather it's up to the table model (or a proxy model) to provide data for each column in its data() accessor: that is, Qt Quick TableView works more like QTableView now, being column-oriented rather than role-oriented.  https://doc-snapshots.qt.io/qt5-dev/qml-qtquick-tableview.html  We still have to work on a strategy for reordering columns, e.g. for drag-and-drop reordering, or when the original table model does not match the desired presentation, or when columns need to be mapped to custom roles; but ATM we are thinking of using a proxy model for that (a subclass of QSortFilterProxyModel, for example).

But what exactly did you want here, and why?  In QQC1, the TableViewColumn declaration order determines the left-to-right order.  You want to reorder columns by setting this property?  Or just access it?","15 Oct '18 13:54;andysh;I have two patches adding minor features to TableView pending already for 5.13 because people will be using it anyway as it is quite different to the new TableView in Qt Declarative, so this is just to help plug the gaps that some people want.

The reason was that it would be ideal to be able to be able to retrieve directly within itself, it is possible already via the itemDelegate to get it (since it provides column) so this is so it can get it directly when you have access to the TableViewColumn.",,,,,,,,,,,,,,,,,,,,
Port Qml Map gesture area to input handlers or provide example,QTBUG-70973,268013,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,paangele,DanielSt,DanielSt,06 Oct '18 06:30,28 Nov '18 09:34,18 Feb '21 09:41,,5.12.0 Beta 1,,,,,,,,,,,,,,,,,,,,,,Location: Maps/Navigation,,,,0,,,,"The Qml Map gesture area is again broken with Qt 5.12 (QTBUG-65648). I think either the area should be converted to the new Input Handlers, or at least provide an example application which shows how to manually do all the gesture stuff using input handlers (I don't know if this is possible at all).",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0jhtr:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"06 Oct '18 14:33;paangele;[~DanielSt] this was the long term goal. AFAIK this is still currently not possible with the current status of the input handlers. Maybe [~srutledg] can correct me if i'm wrong. I also suspect that QTBUG-65648 would remain, if you plan to keep using mouse areas on top of maps, unless mouse area gets fixed.","06 Oct '18 17:59;paangele;[~DanielSt] you write it's broken *again*. Meaning in 5.12? 5.11? could you open a ticket with a reproducible example that works with earlier versions but breaks now?","07 Oct '18 06:17;DanielSt;The example from QTBUG-65648 is still valid. It works with Qt 5.11.1 but fails with 5.12.","02 Nov '18 12:28;paangele;[~DanielSt] any chance to test against QTBUG-70998 fix?","03 Nov '18 07:55;DanielSt;The patch works fine and fixes the double touch problem. The problems described in QTBUG-68771 are still valid but they are not so severe in general.",,,,,,,,,,,,,,,,,
Qml Map Error doesn't update when QGeoServiceProvider gets a ConnectionError,QTBUG-71960,270075,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,paangele,valerie,valerie,21 Nov '18 17:24,27 Nov '18 18:57,18 Feb '21 09:41,,5.9.1,,,,,,,,,,,,,,,,,,,,,,Location,,,,0,,,,"Hi,

I'm currently developing my own geoservices plugin and I cannot get a connectionError signal in my qml file. 

Let me explain my context :

I'm having my own mapServer generating tiles. My app allow the user to change the background map. So I'm using the same mechanism that the osm Plugin. Only one plugin, having multiples mapTypes, but mapTypes are all coming from my server. Sometimes, it can happen that my server falls. If so, it will restart, but the current port could still be busy. It will then restart on an other port. 

If so, my child class QGeoServiceProvider will emit the tileError signal. Unfortunately I cannot catch this signal in the map qml element.

I'd like to catch it to inform the app that the server falls and to get the new address, and then destroy and recreate the map qml with the new address.

It seems that the map properties Error and ErrorString are set in the QDeclarativeGeoMap:: PluginReady using the provider values.

Also if I referred to the Qml documentation for Map QML type, the error and errorString properties are describe as the last error occurred in the provider. In my plugin I only fill them in the pluginReady method and I can't find where to catch them properly.

Is there a way to make this connection in my plugin ? 

Thanks

 

 

 

 

 ",Linux (Debian) - Qt 5.9.1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Linux/Other display system,,,,,,"0|i0jue7:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"21 Nov '18 18:18;paangele;[~valerie] as you note, plugin errors are essentially set at startup. The Plugin interface itself (and the contained QGeoServiceProvider) are mainly discovery interfaces. Once the plugin attaches, if no errors, the managers are retrieved and the plugin isn't used anymore. 

Managers themselves do emit connection errors, but these aren't exposed to the user. You may notice QGeoTiledMappingManagerEngine::tileError, for example.
While i doubt this would change (tileError is normally also produced for a number of other reasons), and while i think you might actually solve this issue by redesigning a bit your application (for example by not using HTTP between the plugin and the tile generator, if you control both), one possible way around using private API is to subclass QGeoTiledMap in your plugin and subclass also QGeoTiledMapPrivate, with a getter returning the mapping manager engine that emits tile error.

You can then, from your main.cpp for example,  pull QDeclarativeGeoMap * from the qml engine, get the QGeoMap, and then use QGeoMapPrivate *get on that to eventually get hands of the mapping manager engine, and connect to its signal.","27 Nov '18 17:12;valerie;[~paangele] I did try to get the QGeoMap from the QDeclarativeGeoMap using QMetaObject::invokeMethod. It's not working, probably because the map() method isn't Q_INVOKABLE (It's working with toCoordinate or fromCoordinate). I'm using Qt 5.11.2 to test it.

To access this method my class should be _friend class_ to QDeclarativeGeoMap ?

For the moment, the best solution for me is to add a mechanism in my plugin to search the mapServer address at the creation or when it receives a NetworkError.","27 Nov '18 18:57;paangele;[~valerie] no that won't work, the method isn't invokable and it's not meant to be.

As i wrote, if you think tileError signal is enough for you, you could subclass also QGeoTiledMapPrivate. see it done, for example, in QGeoTiledMapTest or QGeoTiledMapLabs.

Once you do that, your QGeoTiledMapPrivate subclass has access to all protected members of its ancestors, including the protected QPointer<QGeoMappingManagerEngine> m_engine, that you can extract using a method",,,,,,,,,,,,,,,,,,,
"Needed more information in bool qFuzzyCompare(float p1, float p2)",QTBUG-72065,270342,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,docteam,shmittal,shmittal,27 Nov '18 14:55,27 Nov '18 14:57,18 Feb '21 09:41,,5.12,,,,,,,,,,,,,,,,,,,,,,Documentation,,,,0,Reported_by_support_standard,,,"For documentation at http://doc.qt.io/qt-5/qtglobal.html#qFuzzyCompare,
it is mentioned for function bool qFuzzyCompare(double p1, double p2) that 

_Note that comparing values where either p1 or p2 is 0.0 will not work, nor does comparing values where one of the values is NaN or infinity_

Similar information can also be added to other version of function,qFuzzyCompare(float p1, float p2). ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0jvpz:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Feature Request: QTabWidget::setCornerWidget to work with East and West position,QTBUG-72044,270297,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,qt.team.quick.subscriptions,shmittal,shmittal,26 Nov '18 19:04,26 Nov '18 19:05,18 Feb '21 09:41,,5.12.0 RC,,,,,,,,,,,,,,,,,,,,,,Widgets: Widgets and Dialogs,,,,0,Reported_by_support_standard,,,"Qt Documentation says that for TabPosition as East and West, corner Widget does not work properly, Like for the following code, pushButton is not shown for east and west postions:

{code:java}
  QPushButton *button = new QPushButton(""AddPage"",this);
  button->setGeometry(0,0,120,20);
  tabWidget->setTabPosition(QTabWidget::West);
  tabWidget->setCornerWidget(button,Qt::TopLeftCorner);
{code}

It would be nice if setCornerWidget can work with all tab postions. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Windows,,,,,,"0|i0jvg7:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
building QtWebEngine with Intel compilers?,QTBUG-71129,268352,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,qt_webengine_team,boegel,boegel,12 Oct '18 19:21,13 Nov '18 12:43,18 Feb '21 09:41,,5.10.1,,,,,,,,,,,,,,,,,,,,,,WebEngine,,,,0,,,,"I am trying to build Qt5 with WebEngine enabled using Intel compilers (2018.1.163).

I noticed that in qtwebengine/mkspecs/features/platform.prf there is a hard check that disables building of WebEngine when Intel compilers are being used:

 

 
{code:java}
linux {
  if(!gcc:!clang)|intel_icc {
    skipBuild(""Qt WebEngine on Linux requires clang or GCC."")
    return(false)
  }
  ...{code}
 

I'm (perhaps naively) trying anyway, and with the help of the patch file available at [https://github.com/easybuilders/easybuild-easyconfigs/pull/7010/files] I seem to be getting quite far, but the compilation dies at some point with a spurious ""undefined reference"" linking error.

 

Is there any more information available on why building of WebEngine is disabled with Intel compilers?",,,,,,,,,,,,,,,,,,,"08 Nov '18 21:57;boegel;qt5.err;https://bugreports.qt.io/secure/attachment/77968/qt5.err",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Linux/X11,,,,,,"0|i0jjvz:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"13 Oct '18 07:31;allan.jensen;It probably needs some fixing in Chromium. It is disabled because Chromium does not support building with the intel compiler, so we never bothered trying to patch Chromium to work with it. Then again icc is pretty good at being like gcc or clang, so it probably not a lot of fixing needed, so it is likely doable if you want to try.","13 Oct '18 07:37;allan.jensen;Please attach the linker errors, I might have suggestions for where to fix them.","08 Nov '18 21:57;boegel;There's only one ""undefined reference"" issue, see attachment [^qt5.err]","09 Nov '18 09:44;allan.jensen;Sounds like an intel compiler bug. You can probably fix it by in ui/accessibility/ax_position.h changing
  virtual AXPosition<AXPositionType, AXNodeType>& operator=(
      const AXPosition<AXPositionType, AXNodeType>& other) = default;

to an explicit implementation, as it seem this default is what isn't generated by icc.","13 Nov '18 12:43;boegel;[~allan.jensen] Thanks for the suggestion. My C++ experience is insufficient to change that virtual implementation of that operator myself to an explicit one though...",,,,,,,,,,,,,,,,,
JSON SAX like parser,QTBUG-71704,269541,Suggestion,Open,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,thiago,bubke,bubke,10 Nov '18 09:30,10 Nov '18 18:38,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Core: Other,,,,0,,,,If you read large json files into a DOM you allocating much memory. In same cases it is even not working at all. In that case it would be much nicer to have a interface where you directly fill your data structures from the parser. If would be nice if there would be low overhead interface which is using string_view for UTF8 too.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0jr5j:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"10 Nov '18 18:38;thiago;More likely a StAX-like parser than SAX, but you're right, it would be nice.

5.12 will have QCborStreamReader, we could have a QJsonStreamReader sometime in the future.",,,,,,,,,,,,,,,,,,,,,
Distinguish all spaces for QTextOption::ShowTabsAndSpaces,QTBUG-71512,269128,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,esabraha,Eddy,Eddy,31 Oct '18 13:25,31 Oct '18 13:25,18 Feb '21 09:41,,5.12,,,,,,,,,,,,,,,,,,,,,,Core: QString and Unicode,GUI: Text handling,,,0,,,,"When {{QTextOption::ShowTabsAndSpaces}} is used, we currently (since QTBUG-57479) distinguish:
* space as a dot
* tab as an arrow
* non-breaking space as a degree sign

There are diverse other characters that [Unicode classifies|https://en.wikipedia.org/wiki/Unicode_character_property#Whitespace] as space, that it would make sense to mark up similarly; for example, the thin space U+2009 and its non-breaking partner U+202F.  We can query relevant properties from {{QChar}} using its {{category() == Separator_Space}} and {{decompositionTag() == NoBreak}} tests.
(For the latter, [see here|http://unicode.org/Public//3.0-Update/UnicodeData-3.0.0.html#Character%20Decomposition].)
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0jonj:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add maniplator for QLineEdit maxLength property in QFileDialog,QTBUG-71413,268911,Suggestion,Open,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P3: Somewhat important,,qt.team.quick.subscriptions,blacava,blacava,26 Oct '18 00:42,26 Oct '18 13:20,18 Feb '21 09:41,,5.6,,,,,,,,,,,,,,,,,,,,,,Widgets: Widgets and Dialogs,,,,0,Junior_Job,,,"QFileDialog has a QLineEdit.

The default maxLength for QLineEdit is 32767 characters. This makes it impossible to select large numbers of files with large filenames.

QFileDialog hides its QLineEdit behind the PIMPL idiom, preventing developers from accessing it via subclass or otherwise, without modifying Qt source code directly.

Please add a manipulator for this property to the QFileDialog interface.",All,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0jnbj:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"26 Oct '18 13:20;frederik;I don't think this is a high priority issue for Qt as a whole. On the other hand it sounds rather straight forward, so we might accept patches towards solving this. [https://wiki.qt.io/Qt_Contribution_Guidelines] might get you started.",,,,,,,,,,,,,,,,,,,,,
Add a function to QDate to calculate the difference to another date,QTBUG-77721,282861,Suggestion,Open,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P4: Low,,Eddy,l3u,l3u,20 Aug '19 05:44,12 Feb '21 11:53,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Core: Other,,,,3,,,,"Qt currently lacks date calculation functions (like e. g., to mention a nice example, Python has), esp. the possibility to calculate the difference to another date other than the days between.

In my case, I needed the years, months and days between two dates. It's always quite tricky to do such calculations (but they are often needed I think), so it would be nice if some function to do this calculation was added to QDate ditrectly (like QDate::differenceTo(const QDate &other) or such).

The function I implemented is quite short, but it took me quite some time to get it right (and I hope it calulates correctly). Maybe you want to use this (probably as an inspiration).",,,,,,,,,,,,,,,,,,,"20 Aug '19 05:51;l3u;DateDifference.cpp;https://bugreports.qt.io/secure/attachment/86441/DateDifference.cpp",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0ltzj:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"20 Aug '19 15:12;thiago;for now: {{date1.toJulianDay() - date2.toJulianDay()}}","20 Aug '19 15:41;Eddy;bq. for now: date1.toJulianDay() - date2.toJulianDay()

Or, more tersely, using the existing method, {{date2.daysTo(date1)}}, whose implementation is exactly that difference of Julian Day numbers.
Which, IIUC, [~l3u] is already aware of (""... other than the days between"" at end of first paragraph).

As it happens, we're currently [in the process|https://codereview.qt-project.org/c/qt/qtbase/+/182341] of adding support (in 5.14) for calendars other than Gregorian; and this introduces {{QCalendar::YearMonthDay}}, a data structure which sounds like the return value we'll need for the API you're asking for.  Furthermore, the difference is essentially a calendar calculation, so would make a natural partner to {{QCalendar::partsFromDate()}}.
","20 Aug '19 17:05;Eddy;Technical details: I notice your sample code is computing an absolute difference - one could equally, given dates ""the wrong way round"", return a negative difference, in which all three fields are <= 0. Fortunately, {{QDate}} supports {{operator<}}, making it easy for callers to ensure they pass the two dates ""the right way round"".

There are then quirks and complications:
 * Is the difference between the last day of one month and the last day of the next a month ? The difference between the days that follow them is, but your sample code (quite reasonably - but are you sure it's what you want ?) either calculates it as the number of days in the second month (if it's shorter), or (if not) one month plus the number of days by which the second month's length exceeds the first.
 * Likewise, what's the difference between 2020-02-29 and 2021-02-28 ? A year, or eleven months and 28 days ? How about between 2019-02-28 and 2020-02-29 ? A year, or a year and a day ?

For both of those, I'm reasonably happy with what your code does; but then we get to lunar calendars, which have leap *months* instead of leap days:
 * If the leap month is always inserted at the same point in the year (as in the Hebrew calendar, where it's inserted between the usual 11th and 12th months; it and the next share a name but the leap month is the first of it and the next is the second of it; the last month's length is as usual but the leap month is a day longer), what is the difference between the first of the leap month and the first of the last month in either the year before or the year after ? How about between the first of the month after the leap month and the matching first of last in the years before and after ?
 * If (as in the Chinese calendar) leap months land at variable positions in the year, suppose leap year L inserts a month after month M; month M+1 is the leap month (with a special name) and month M+2 has the name usually used for month M+1; from the start of that month to the start of year L+1's month M+1, is it a year (I guess native speakers would say so) or 12 months ? From the start of month M+1 in year L-1 to the start of the same-named month M+2 in year L, is the difference a year or a year and a month ? How about differences between points in two leap years, with either, both or neither of the leap months in the interval ?

Of course, we can push those decisions onto the implementor of each calendar, but only if there's a reasonable specification of what's expected of the differences they produce.

Even the basic complication present in Gregorian, even ignoring leap years - months aren't all the same length - is sufficient to break a sort of ""transitive consistency"" one might hope for. We expect difference from A to B plus the difference from B to C to match the difference from A to C, except for differences that match, e.g. the sum has one month less than the direct but has about thirty extra days to make up for it; or the sum has one fewer year but twelve more months. When there's no such ""overflow"", surely the differences should match - but this then highlights a problem with declaring what the difference is, as I can count it in two different ways, as I'll now show you.

One month after 2019-02-28 is 2019-03-28 and from there to 2019-04-26 is 29 days, suggesting 00-01-29 as the difference from 2019-02-28 to 2019-04-26; I suspect this is the difference your code computes. However, 26 days after 2019-02-28 is 2019-03-26, which is a month before 2019-04-26, suggesting the difference should be 00-01-26. To put it another way, {{QDate(2019, 2, 28).addDays(26).addMonth(1) == QDate(2019, 2, 28).addMonth(1).addDays(29)}}; so 26 days and a month can be equal to a month and 29 days. The addition of date differences isn't abelian !

So the more I think about it, the more reservations I have about ""broken-down"" date differences being well-defined; we may be able to invent a spec that's unambiguous, but we'll at least have to document that it won't conform to some ""reasonable expectations"" folk might have.
 In particular, I'll definitely refuse to support a {{QDate QDate::operator+(QDate base, const QCalendar::YearMonthDay &diff)}} addition; let the caller chose their own permutation of the method calls in {{base.addDays(diff.days).addMonths(diff.months).addYears(diff.years)}} and deal with how the choice of permutation _shall_ affect the result.

So give me a compelling reason for why it's useful to have this API, that *must* be documented as ""shall produce confusing results sometimes"" and should probably only be used for purposes where being vaguely ambiguous isn't a problem.","21 Aug '19 15:22;l3u;Without any doubt, it's quite tricky to do such date calcuations. My approach is quite dumb: If we have e. g. February 28, it assumes that one month passed if we reach day 28 of the next month. if we have day 27, it's 27 days. I used this algrithm to calculate the time that passed since a viewed photo was taken in KPhotoAlbum (e. g. 1 year and 5 months). It's not about exact calculations, and surely, one must not use it's output to do exact date calculations (e. g. via the += operator). It's simply some convenience function I think a lot of people need and already have programmed in similar ways, so I thought a robust, reasonable Qt-side implementation doing this would be nice and save some people some headache ;-)","22 Aug '19 09:29;Eddy;I've settled on: {{dateDifference(F, T)}} is that {{\{y, m, d\}}} for which {{F.addYears\(y).addMonths(m).addDays(d) == T}}, documented with caveats about not expecting nice algebraic properties of such differences.  It's implemented on {{QCalendar}} and the draft commit won't show up for code review until various other things are sorted out, so it won't make it into 5.14.","22 Aug '19 13:12;l3u;dateDifference(F, T) returning \{y, m, d} and F.addYears( y ).addMonths(m).addDays(d) == T is definitely a reasonable approach. It's the very thing I (tried to) implement(ed). Nice :)","27 Aug '20 10:55;Eddy;[~soroush] please see [the patch here|https://codereview.qt-project.org/c/qt/qtbase/+/299229]: does it suffice for the use-case you describe in QTBUG-86249 ?
","03 Sep '20 14:19;soroush;So, I came across the following Lua code which apparently is used by Wikimedia to calculate age and date difference:
 [https://en.wikipedia.org/wiki/Module:Age]
 Thought it might give an insight into the problem.

The requirement that dateDifference(start, end) should return a (y, m, d), such that start.addYears( y ).addMonths(m).addDays(d) == end; might not be ideal. Given that promise, I am pretty sure we will have to return funny ""age"" elements like ""1 year 2 months and 32 days"" or such alike (Though I can't provide proof at the moment). That is because the common ""age"" vector space, contradicts with the requirements described in addX functions of QDate. Either addX functions should change behaviour, or new functions should be added to QDate to have dateDifference work properly (I am working on examples and maybe a formal proof).","03 Sep '20 14:42;soroush;{quote}please see [the patch here|https://codereview.qt-project.org/c/qt/qtbase/+/299229]: does it suffice for the use-case you describe in QTBUG-86249 ?
{quote}
I'm afraid not. I would rather have ""QDate[Time]Range"" or QDate[Time]Period types, and have them in QDate[Time] classes with a proper operator- implemented. The calendar system might be a property of such type, just as it is now for QDate (well, indirectly, because of that ABI thing).

The part that I find suboptimal with the current patch, is that it uses YearMonthDay type. This type is already used elsewhere to represent ""a point in time given a certain calendar system"". Given that, we will have a single type with two completely different meanings.

Please consider the fact that ""date"" is a vector space which is not closed under <-> operation. Meaning given d1 and d2 as two date vectors, d1-d2 does not belong to the ""date"" space. It should have its own vector space which could be either:
 * Closed on opetators <-> and <+>;
 * Lacks the start date as a dimension.

Or:
 * Not closed on <+> and <-> operations;
 * Includes the start date as an element.

Hence a new C++ type to cover that space.

I am aware it might be impossible for Qt5 (or even Qt6) line because of compatibility issues, though it would be great if we discuss the possibilities... ","04 Sep '20 12:29;Eddy;So date positions and date displacements (as it were) are indeed different types; date positions are a one-dimensional Euclidean space (with weird co-ordinate systems called calendars); date displacements are vectors forming a vector space (well, technically, since its a discrete space, a module over the ring of integers; a vector space is a module over a field); however, the date-range you're asking for is a date-pair type, pairing a start-date with an end-date, which sits in a space that's the cartesian product of the Euclidean date-position space with itself; this is not a vector space (or a module over the ring of integers) &ndash; any more than the Euclidean space is a vector space (although, for any given choice of origin, it can be _represented_ by displacements, in a vector space, from that origin).

{{QDate}} already supports a projection down from the Euclidean-pair space to the vector space of date-differences, {{start.daysTo(end)}}; this just reduces each pair to the number of days between them, which loses information about where those days fall in relation to any calendars, hence any ability to meaningfully describe the difference in years, months and days.  However, that's the only ""vector-like"" representation that it makes any sense to talk about.  As noted in the documentation of my proposed {{QCalendar::difference(QDate, QDate)}}, a broken-down (e.g. year-month-date) representation of date differences doesn't behave sensibly for arithmetic: indeed, such a representation of the difference is only meaningful in conjunction with a specification of how they are to be applied to the start-date to get the end-date (in my proposal, {{start.addYears(years, cal).addMonths(months, cal).addDays(days, cal) == end}} is that specification); and the only meaningful addition of the broken-down type is by applying each difference in turn, starting at a chosen start-date, in the prescribed manner, and then taking the difference from that start to the final result; but {{(y, m, d) +(z, n, e)}} is not reliably equal to {{(y+z, m+n, d+e)}} even when allowing broken-down differences to be denormal (e.g. {{m+n &ge; 12}}, {{d+e &ge; 31}}).

The result is a loss of associativity: {{(start + epsilon) + delta}} != start + (epsilon + delta)}}, so the algebraic structure of broken-down differences *will* violate folks' expectations.  Only the day-count difference actually satisfies the usual algebraic properties we expect from displacements as differences between positions.

So the fundamental problem with date differences is that the *only* ""proper {{operator-()}}"" that's well-defined and well--behaved is the simple ""number of days"" that  {{QDate::daysTo(QDate)}} gives you; anything else has weird semantics, one way or another.  It should be possible to add a date difference to any date to get the date that far from it, even if the difference was constructed from some other date as start-point; but a date-pair-as-difference can only meaningfully be added to its start date (to produce its end-date); anything else requires going via a broken-down difference with eccentric behaviour on adding (as discussed above), or using the day-count.

As to the use of {{QCalendar::YearMonthDay}} as a type with two lives (one a co-ordinate system for the Euclidean space, the other a difference between such co-ordinate triples), I recognise that it's sub-optimal, but it's primitive enough to serve both purposes without a conflict; and defining an essentially identical type with a different name would serve no practical purpose, while presenting a problem for decisions about what name to give it.

To the specific points you say above: date is not a vector space, it's a Euclidean space; although the space of positions can be (by choice of origin) expressed as a vector space (by representing each point by its difference from the origin), you can't add dates (what is 1963-06-25 + 1936-05-16 ?) nor can you scale them (what is {{3 * 1970-01-01}} ? a choice of origin can give you a date thrice as far from the origin as 1970-01-01, but it's not thrice 1970-01-01) so they're not a vector  space.  You *can* take differences between them, and those differences can be represented as (well, strictly, a module over the integers, but let's call it) a vector space.  You can scale differences and add them; the results of doing so are differences.  You can also add a difference to a date, to get a date.

So your ""d1-d2 does not belong to the date space"" is correct: such differences belong to a vector space.  it is closed under addition, subtraction and scaling; if it is represented simply by the plain integers, as a day-count, the results of doing so and adding the results to dates is well-behaved; but if we try to use a broken-down time that breaks down.

Your second proposed type, the ""includes start date as an element"" case, is essentially {{QPair<QDate, QDate>}}, which you are free to use in all the usual ways; or you could just have two [{QDate}} members in whatever date-type you're using that needs a start and end date.  However, absent a description of what *behaviour* you intend for your type to have, I see no benefit to defining this as a type in Qt itself.  I strongly suspect, furthermore, that each use-case that wants such a type, to describe a time interval, has slightly different needs and they won't all be consistent with each other.  So I'm more concerned to provide the tools that'll let each application that needs such a date-range build the one it needs, than with providing one date-range type that doesn't quite do what any of the clients of it want.

The existing {{QDate::daysTo()}} is one such tool; {{here.addDays(start.daysTo(end))}} gives you a date as far after {{here}} as {{end}} was after {{start}}, for example, implementing {{(end &minus;start) + here}}.  However, folk do commonly want a broken-down date-difference which says how many years, months and days have passed between two dates; my {{QCalendar::dateDifference()}} is an attempt to support that use-case.  Working out its details has proven tricky, because there are so many corner cases to take into account.

What other behaviours are wanted or needed ?  They also need to be specified carefully enough that there is a well-defined behaviour that can be systematically tested (and that it's possible to implement).

(Note: the Lua code you link is really all about formatting the results of a date-difference type that's not defined there, returned by a Date type's subtract operator, so presumably actually part of the Lua standard library; and it appears to be a years-months-days structure, with some other fields.)","19 Sep '20 12:12;l3u;Another nice implementation of date and time calculations is present in SQLite, where one can e. g.

{{SELECT DATETIME('2020-08-19 14:06:28', '-1 year', '-1 month', '-19 days', '+33 seconds')}}

with the result {{2019-06-30 14:07:01}}. I would introduce a {{QDateDifference}} or {{QDateTimeDifference}}, where one would, sticking to the above example, do something like

{{QDateTimeDifference difference;}}
 {{difference.setYears(-1);}}
 {{difference.setMonths(-1);}}
 {{difference.setDays(-19);}}
 {{difference.setSeconds(33);}}

and then something like

{{QDateTime newDate = existingDate.addDifference(difference);}}

or even better, overloading the += operator. The other way round, subtracting or adding two {{QDateTime}} objects should return such a {{QDateDifference}}, stripped down (like hours = 1 and minutes = 1 for 61 minutes).

One could also add a {{toDays()}} function to that new {{QDateDifference}} or {{QDateTimeDifference}} that – in this case – expresses the difference as days.","20 Sep '20 17:05;l3u;Looking at the QDateTime docs again, we already have the following functions:

{{    QDateTime QDateTime::addMSecs(qint64 msecs) const}}
{{    QDateTime QDateTime::addSecs(qint64 s) const}}
{{    QDateTime QDateTime::addDays(qint64 ndays) const}}
{{    QDateTime QDateTime::addMonths(int nmonths) const}}
{{    QDateTime QDateTime::addYears(int nyears) const}}

{{QDateTime::addMinutes}} and {{QDateTime::addHours}} could be easily added, calling {{QDateTime::addSecs}} with a proper multiplication of the passed value, no need for real new code here.

Also, we have

{{    qint64 QDateTime::msecsTo(const QDateTime &other) const}}
{{    qint64 QDateTime::secsTo(const QDateTime &other) const}}
{{    qint64 QDateTime::daysTo(const QDateTime &other) const}}

So we ""only"" would have to add {{QDateTime::minutesTo}}, {{QDateTime::hoursTo}}, {{QDateTime::monthsTo}} and {{QDateTime::yearsTo}}.

From those functions, the proposed {{QDateTimeDifference}} could be derived, e. g. via something like

{{    QDateTimeDifference QDateTime::differenceTo(const QDateTime &other) const}}

And the link is that {{QDateTime + QDateTimeDifference}} yields the same result as {{QDateTime.addWhatever}} for the single values of the {{QDateTimeDifference}}.

Doing it this way, the API would not be broken, the missing convenience QDateTime::addMinutes and QDateTime::addHours functions would be complemented and everything would be nice and consistent, in both directions.","12 Feb '21 11:53;Eddy;ISO 8601 (this may be new in the 2019 revision) has formats for (and distinguishes) [durations|https://en.wikipedia.org/wiki/ISO_8601#Durations] and [intervals|https://en.wikipedia.org/wiki/ISO_8601#Time_intervals] of time; which can serve as an outline for the design of two distinct date-time-related classes, if/when we find the time for this (and a copy of the ISO 8601:2019 specs to base the details on).",,,,,,,,,
Set Popup's objectName on its contentItem,QTBUG-90745,312506,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P4: Low,,mitch_curtis,mitch_curtis,mitch_curtis,29 Jan '21 10:22,29 Jan '21 10:23,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Quick: Controls 2,,,,0,,,,"This makes auto testing easier and saves having to imperatively set an objectName on the contentItem:

https://stackoverflow.com/q/57575785",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0qghb:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Install headers as read-only to prevent accidently modifications,QTBUG-72766,271676,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P4: Low,,releaseteam,aha_1980,aha_1980,26 Dec '18 20:03,13 Jan '21 10:21,18 Feb '21 09:41,,6.0.0,,,,,,,,,,,,,,,,,,,,,Some future release,Packaging & Installer,,,,6,,,,"That is mostly for Windows, but may be useful for Linux too when Qt is installed in a home directory.

Reason is, that is easily possible to modify the Qt headers when e.g. doing Rename Usages from QtCreator.

That has happen more than one time in the past and can be prevented by:
 * installing Qt as privileged user
 * making the (easily changed) header files read-only

Note that this also applies for the MinGW headers that are installed together with Qt.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,Windows,,,,,"0|i0p3qt:9i",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"26 Dec '18 20:05;aha_1980;As reference:
* https://forum.qt.io/topic/97960/my-qt-creator-broke
* QTCREATORBUG-20315","06 Mar '19 10:19;tpyssysa;Gearbox: Evaluated low as it's easy for the developer to change the include folder permissions and we want to concentrate our R&D effort in the design/creation of a new package management -based installer. 

4GearboxHandling flag removed. ","10 Mar '19 14:52;aha_1980;[~tpyssysa]: So you won't fix an existing issue because developing new features is more important?!

I just found two more Creator bugs that could be easily fixed by setting the file attribute to read-only.","11 Mar '19 09:55;bubke;It's a little bit change that it is not a creator bug. We can handle that in creator because we have some knowledge about projects.","12 Mar '19 06:53;tpyssysa;Priority Low != Won't do. We don't implement this change for Installer 3.1. The roadmap after 3.1 depends on the progress on the package manager. Possibly, there is never 3.1.1/3.2, but if there will be, this feature can bee re-considered again.

All linked bugs are related to Creator re-factoring. Why re-factoring should change system headers as well in the first place. Understand that this would be easy to fix in the installer, but I think this is a refactoring bug as well. ","13 Jun '19 06:15;aha_1980;https://forum.qt.io/topic/103848/can-t-call-qobject-setparent is another one. Here it is unclear what happened, but the header was modified.","25 Nov '19 07:02;aha_1980;QTCREATORBUG-15055 is affected too.","01 Jun '20 19:16;aha_1980;Another one: QTCREATORBUG-24119",,,,,,,,,,,,,,
QUdpSocket doesn't report ConnectionRefusedError on port unreachable error,QTBUG-89742,310560,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P4: Low,,cnn,10110111,10110111,30 Dec '20 22:42,06 Jan '21 08:03,18 Feb '21 09:41,,5.13,,,,,,,,,,,,,,,,,,,,,,Network: Sockets,,,,0,,,,"If a program uses {{QUdpSocket}} to {{connectToHost()}}, and then {{write()}} some data, while the destination port is not being listened, it's expected to get {{ConnectionRefusedError (due to ICMP Destination Unreachable (Port Unreachable) message)}}. It's what {{strace}} shows on the (failing) {{write()}} syscall: {{ECONNREFUSED}}. But in practice, the program doesn't get any error at all, because {{QNativeSocketEnginePrivate::nativeWrite()}} ignores {{ECONNREFUSED}}.

In fact, the same happens on Windows, although there the native behavior is a bit different. Namely, when destination port is unreachable, and {{SIO_UDP_CONNRESET}} is enabled (which it is in {{QUdpSocket}}), a call to {{WSARecvFrom}} results in {{WSAECONNRESET}}. This should be checked by {{QUdpSocket}} and reported via the error signal (not forgetting that the ICMP message may come asynchronously from another host, not necessarily immediately).

The attached source contains an example of such a program, which is expected to print an error unless something is listening on UDP port 33333.",,,,,,,,,,,,,,,,,,,"30 Dec '20 22:37;10110111;test.cpp;https://bugreports.qt.io/secure/attachment/103355/test.cpp",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Linux/X11,Windows,,,,,"0|i0q5db:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
64-bit support for QAbstractSlider/QScrollbar,QTBUG-88461,307836,Suggestion,Open,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P4: Low,,qt.team.quick.subscriptions,evan.teran,evan.teran,12 Nov '20 15:42,03 Jan '21 17:42,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Widgets: Widgets and Dialogs,,,,0,Qt7,,,"QScrollbars are limited to 32-bits, and for a lot of reasons, this makes sense. As noted in the documentation:

{quote}
QScrollBar only provides integer ranges. Note that although QScrollBar handles very large numbers, scroll bars on current screens cannot usefully represent ranges above about 100,000 pixels. Beyond that, it becomes difficult for the user to control the slider using either the keyboard or the mouse, and the scroll arrows will have limited use.
{/quote}

I completely agree.

However... there are some edge case reasons where I think it makes sense to expand the range of the widget to a full 64-bits.

My use case is a text editor, and while no one is asking to support exabyte files, I *DO *have users who want to be able to open files in the 2GB-5GB range (think machine generated files). For degenerate cases where there are a lot of short lines, files of this size would exceed the range of Qt's scrollbars.

Also, my application uses 64-bit integers essentially everywhere internally, so in principle, it can handle such files just fine... except for when I want to display them, I end up having to do range checks and casts all over the place just to update things like the scrollbars. 

So because the scrollbars use 32-bit integers, I have essentially forced to only support opening 2GB files and have to use casts in a lot of places.

The ""solution"" I am currently considering is to abandon using QAbstractScrollArea, and basically, custom making my own, with my own custom scrollbars... Not exactly ideal, but I think if I want 64-bit scrollbar range, I essentially have no choice.

Honestly, I'm not sure what the downside to supporting 64-bit ranges is aside from an ABI break (which I certainly hope is addressable, especially when planning a new major release). 

From an API level perspective, it seems that most code should ""just work"" with an expanded range, with the only exception being any code that inherits from QAbstractSlider and family would need to update their overloads, signals, and slots.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0ppqn:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"03 Jan '21 17:42;chehrlic;Can not be done without breaking BC/SC until Qt7.
Also I currently don't see no real reason - you can scale your values and pass them to QScrollBar",,,,,,,,,,,,,,,,,,,,,
Do not show nodes in the installer that are not supported on the current system,QTBUG-89481,309871,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P4: Low,,releaseteam,autoantwort,autoantwort,14 Dec '20 16:27,15 Dec '20 05:07,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Packaging & Installer,,,,0,,,,"I tried to install Qt6, but then this error message appeared:
 !image-2020-12-14-17-24-29-136.png|thumbnail! 
Then I remembered then macOS 10.13 is not supported by Qt6. Maybe it is a good Idea to disable the nodes that can not be installed on the current system with a tooltip that says that the required macOS version is 10.13.",,,,,,,,,,,,,,,,,,,"14 Dec '20 16:24;autoantwort;image-2020-12-14-17-24-29-136.png;https://bugreports.qt.io/secure/attachment/102846/image-2020-12-14-17-24-29-136.png",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,macOS,,,,,,"0|i0q1gf:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add save() method to Image,QTBUG-88272,307536,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P4: Low,,qt.team.quick.subscriptions,ceperez1996,ceperez1996,07 Nov '20 17:37,09 Nov '20 23:58,18 Feb '21 09:41,,5.15.1,,,,,,,,,,,,,,,,,,,,,,Quick: Core Declarative QML ,,,,0,,,,"The title explains clearly the issue. For QML applications, this (which already exists in {{QImage}}) will be very useful, mainly when one wants to save images obtained through network.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0pnxb:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"09 Nov '20 11:26;srutledg;You know about grabToImage? https://doc.qt.io/qt-5/qml-qtquick-item.html#grabToImage-method","09 Nov '20 23:58;ceperez1996;[~srutledg] yes, I know about {{grabToImage()}}. In fact, I was using it, but when handling big images, it's required to have the image in full-size in order to keep (or try to keep) the original quality, which can be costly both in memory and CPU usage.

Another problem that requires some tweaks is that {{grabToImage()}} actually captures everything over the target item (although sometimes this can be what one intended). A workaround can be make them invisible, call {{grabToImage()}} and then make them visible again. But for many cases the user may notice it :(, making the application look buggy.

IMHO this deserves better than a P4, because saving images is a very common feature for many applications.",,,,,,,,,,,,,,,,,,,,
Add support for sharing files on mobile platforms,QTBUG-83045,296070,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P4: Low,,,andysh,andysh,24 Mar '20 11:04,09 Nov '20 09:20,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,QPA,,,,0,Reported_by_support_standard,,,Thanks to the blog series here - https://www.qt.io/blog/2017/12/01/sharing-files-android-ios-qt-app - it is indicated how files can be shared to/from a Qt application on Android and iOS. What would be good is if this could be made available in some form to a Qt application from the library without having to set all this up manually.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Android,iOS/tvOS/watchOS,,,,,"0|i0o9bq:jzwc",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"24 Mar '20 11:58;liaqi;AirDrop is also a feature on macOS, https://en.wikipedia.org/wiki/AirDrop .","24 Mar '20 12:00;liaqi;Nearby sharing on Windows 10, https://support.microsoft.com/en-us/help/4091344/windows-10-share-things-with-nearby-devices .",,,,,,,,,,,,,,,,,,,,
qdoc: Allow \inmodule for a \qmltype,QTBUG-79197,286658,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P4: Low,,docinfrastructure,treinio,treinio,14 Oct '19 10:06,14 Sep '20 12:19,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Build tools: qdoc,,,,0,,,,"A typical mistake is to use \inmodule in place of \inqmlmodule in \qmltype documentation.

Since we already have the context (topic command is \qmltype), why not allow \inmodule to set the QML module information.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0mfbr:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add example for mixing Objective-C and Qt,QTBUG-71664,269464,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P4: Low,,richard,paulwicking,paulwicking,08 Nov '18 09:25,08 Sep '20 11:38,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Examples and Demos,Extras: Mac,,,0,,,,"This issue serves as a reminder :)

As we've discussed, add example ([https://github.com/richardmg/qtdd13_qmlapp]) to {{qtdoc}}.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0jqof:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"What is the glossary definition of ""visual size""",QTBUG-85959,302569,Suggestion,In Progress,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P4: Low,,mitch_curtis,lawrence.emke,lawrence.emke,08 Aug '20 04:04,04 Sep '20 10:29,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Documentation,Quick: Controls 2,,,0,,,,"Here is the documentation from the Qt ScrollBar element:

------------------------------------------------------------------------------------------------------------------------------------------
visualSize : real

This property holds the effective visual size of the scroll bar, which may be limited by the minimum size.

This property was introduced in QtQuick.Controls 2.4 (Qt 5.11).

See also size and minimumSize.

-----------------------------------------------------------------------------------------------------------------------------------------

To me this is an example of a definition of ""x is x'
I still don't know what visual size is.
I looked at both referenced items and I still don't know how
they apply to a scrollbar.  

This is frustrating

I should also mention termsa; implicit Size The word ""implicit"" probably has a 
technical definition but I don't know it. where is the glossary definition?
There are so many of these uses of jargon that the documentation writers
use that go undefined

I will also add that your property definitions include the name and type,
But there is no indication of ""constant"" (I..e. read-only) or setable.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0ow0v:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Style for QToolButton autoRaise on macOS,QTBUG-85843,302345,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P4: Low,,qt.team.quick.subscriptions,danuker,danuker,02 Aug '20 13:26,03 Sep '20 08:11,18 Feb '21 09:41,,5.15.0,,,,,,,,,,,,,,,,,,,,,,GUI: Look'n'Feel,,,,0,,,,"I would love to see autoRaise behavior implemented for macOS QToolButton.

Currently, there is inconsistency between platforms, even [the documentation|https://doc.qt.io/qt-5/qtoolbutton.html#autoRaise-prop] mentioning ""This property is currently ignored on macOS when using QMacStyle"".

A workaround is described [here on StackOverflow|https://stackoverflow.com/a/11852107/235463]: manually styling the button.

I have attached samples of how QToolButton looks compared to QPushButton.",,,,,,,,,,,,,,,,,,,"02 Aug '20 13:25;danuker;push.png;https://bugreports.qt.io/secure/attachment/96868/push.png","02 Aug '20 13:25;danuker;tool.png;https://bugreports.qt.io/secure/attachment/96867/tool.png",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,macOS,,,,,,"0|i0ouqf:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Qt Designer Ignores Layout Alignment,QTBUG-86339,303201,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P4: Low,,,RobertBColton,RobertBColton,22 Aug '20 23:21,31 Aug '20 07:49,18 Feb '21 09:41,,5.15.0,,,,,,,,,,,,,,,,,,,,,,Tools: Designer,,,,0,,,,"The designer does not allow you to set the layout alignment by right clicking on a layout, it can only be set for widgets that way. The only way to set the alignment of layouts directly seems to be through code. If I manually put the alignment property into the UI form, it will show at runtime, but is not respected by the designer or its preview display.
{code:java}
<layout class=""QVBoxLayout"" name=""propertiesLayout"">
 <property name=""alignment"">
  <set>Qt::AlignTop</set>
 </property>{code}
A workaround is to add the layout to a widget and set the alignment of the widget, or make use of spacer items. Neither of these are ideal as they require much bigger diff changes to a layout.

 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0ozov:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add option to QXmlStreamWriter for enclose attribute values with single quote,QTBUG-86054,302875,Suggestion,Open,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P4: Low,,,xakz,xakz,14 Aug '20 13:55,17 Aug '20 14:39,18 Feb '21 09:41,,5.15.0,,,,,,,,,,,,,,,,,,,,,,XML: Stream Reader/Writer,,,,0,,,,"An option to choose between single quoted or double quoted attribute values could be desirable.

With single quote, qDebug() logging facilities do not escape the quoting. Sure we can use qDebug(""%s"", ...); but it's remove advantages of using the qDebug() << ...;

Also, double quoting make the task of copying output of QXmlStreamWriter to paste it in a .cpp file more tedious unless escaped, but if escaped, the logging output become tedious to read.

 

""<?xml version=\""1.0\"" encoding=\""UTF-8\""?><stream:stream xmlns=\""jabber:client\"" xmlns:stream=\""http://etherx.jabber.org/streams\"" id=\""id\"" from=\""ex.com\"" to=\""foo@ex.com\"" version=\""1.0\"" xml:lang=\""en\"">""

vs

""<?xml version='1.0' encoding='UTF-8'?><stream:stream xmlns='jabber:client' xmlns:stream='http://etherx.jabber.org/streams' id='id' from='ex.com' to='foo@ex.com' version='1.0' xml:lang='en'>""

Yeah it's estheticism but I like estheticism ;)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0oxtj:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"14 Aug '20 15:18;thiago;Unlikely to ever be implemented.","15 Aug '20 17:55;xakz;I located what to modify, looks trivial.

If I send a patch, including testing, any chance to be merged ?

If yes, what is the best way to add this option ?
 * setSingleQuoteAttribute(bool) and the corresponding getter
 * another function name ?
 * another way (enum) ?","16 Aug '20 05:12;thiago;I don't know, I will need someone else's opinion since I don't know the class in detail.","17 Aug '20 07:58;mkalinow;We surely can find someone to review a patch.","17 Aug '20 14:39;xakz;Yeah, I'm on IRC, and I will subscribe to mailing lists.

I'm working on something else actually but when I can, I start the ""Contribution Guidelines"" process.

Thanks for your replies :)",,,,,,,,,,,,,,,,,
 Improve PDF preview rendering performance with large PDF documents on Windows,QTBUG-85167,300761,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P4: Low,,qt_webengine_team,irfan.omair@digia.com,irfan.omair@digia.com,22 Jun '20 00:41,03 Aug '20 09:16,18 Feb '21 09:41,,5.15.0,,,,,,,,,,,,,,,,,,,,,,WebEngine,,,,0,Reported_by_support_standard,,,Qt's printme example attached with large document. If you run and hit print short cut it will take more than 8 min to load print preview.,Desktop,,,,,,,,,,,,,,,,,,"22 Jun '20 00:42;irfan.omair@digia.com;400page_a (2).html;https://bugreports.qt.io/secure/attachment/95737/400page_a+%282%29.html","22 Jun '20 00:41;irfan.omair@digia.com;qtbug85167.tar.gz;https://bugreports.qt.io/secure/attachment/95736/qtbug85167.tar.gz",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Windows,,,,,,"0|i0olfz:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"29 Jun '20 14:04;mibrunin;It seems like Chromium and WebEngine have roughly the same rendering times here and it seems to be dependent on the machine as well (i.e. opening the preview of the attached document always takes less than 30 seconds when I tested it). As they both seem to behave roughly the same, I am moving this to a suggestion / feature request. 

Could you please attach the qtdiag output from the machine that took so long to render it?","03 Aug '20 08:46;andysh;https://chromium-review.googlesource.com/c/chromium/src/+/2124367 (when it is merged) might be relevant here.","03 Aug '20 09:16;mibrunin;It probably won't help us for 5.15 unfortunately, as we'd most likely still have to rewrite larger parts of the printing code or re-implement Chromium's print preview.",,,,,,,,,,,,,,,,,,,
Provide QUrl to Qt path conversion utils,QTBUG-84572,299593,Suggestion,Open,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P4: Low,,cnn,micu,micu,29 May '20 14:40,28 Jul '20 19:01,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Core: URL Handling,,,,1,,,,"In QTBUG-63076, it has been already suggested by [~iamsergio] to add a QUrl parameterized constructor to QFile. While I understand the reasons given [~thiago] why they don't want this constructor to be added to QFile, I agree with [~iamsergio] that more dev support would be helpful here. Why not add some conversion helpers to Qt? Sth. along the lines of
{code:c++}
inline QUrl urlFromLocalPath(QString path)
{
    auto scheme = QStringLiteral(""file"");

    if (!path.isEmpty() && path.at(0) == ':')
    {
        path.remove(0, 1);
        scheme = QStringLiteral(""qrc"");
    }

    QUrl url = QUrl::fromLocalFile(path);
    url.setScheme(scheme);

    return url;
}

inline QString localUrlToFilePath(QUrl url)
{
    QString path =
        url.scheme() == QLatin1String(""qrc"") ? url.path() : url.toLocalFile();

    Q_ASSERT_X(url.scheme() == QLatin1String(""qrc"") || url.scheme() == QLatin1String(""file""),
               ""localUrlToFilePath"",
               ""url conversion to paths only makes sense for local file or qrc urls"");

    if (url.scheme() == QLatin1String(""qrc""))
    {
        path.prepend(':');
    }

    return path;
}
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0oek7:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"29 May '20 15:03;thiago;Since I disagree with implementing this, I am removing myself as assignee.

This task is now unmonitored.","28 Jul '20 18:08;thiago;Those functions are acceptable, but they need to be in the context of something that understands ""qrc"". It shouldn't give the impression other applications or even all classes inside Qt will understand it.","28 Jul '20 19:01;micu;That makes sense. What context would that be?",,,,,,,,,,,,,,,,,,,
Support native rendering in WebGL Streaming,QTBUG-78798,285675,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P4: Low,,jefernan,akizawa,akizawa,27 Sep '19 03:08,29 Jun '20 07:34,18 Feb '21 09:41,,5.12,,,,,,,,,,,,,,,,,,,,,,QPA: WebGL,,,,0,Reported_by_support_2H19,reported_by_support_standard,,"Some character is not rendered when QML_DISABLE_DISTANCEFIELD is set 1.

Browser outputs followings on console.
{code:java}
Error: WebGL warning: texSubImage2D: Texture has not been initialized prior to
a partial upload, forcing the browser to clear it. This may be slow.
webqt.js:699:16
Error: WebGL warning: texSubImage2D: Desired upload requires more data than is
available: (8 rows plus 7 pixels needed, 7 rows plus 7 pixels available)
webqt.js:699:16
Error: WebGL warning: texSubImage2D: Desired upload requires more data than is
available: (11 rows plus 9 pixels needed, 9 rows plus 0 pixels available)
webqt.js:699:16
Error: WebGL warning: texSubImage2D: Desired upload requires more data than is
available: (8 rows plus 9 pixels needed, 6 rows plus 9 pixels available) 3
webqt.js:699:16
Error: WebGL warning: texSubImage2D: Desired upload requires more data than is
available: (12 rows plus 9 pixels needed, 9 rows plus 9 pixels available)
webqt.js:699:16
{code}

Please check attached images.",,,,,,,,,,,,,,,,,,,"27 Sep '19 03:08;akizawa;QML_DISABLE_DISTANCEFIELD-0.png;https://bugreports.qt.io/secure/attachment/87690/QML_DISABLE_DISTANCEFIELD-0.png","27 Sep '19 03:08;akizawa;QML_DISABLE_DISTANCEFIELD-1.png;https://bugreports.qt.io/secure/attachment/87689/QML_DISABLE_DISTANCEFIELD-1.png",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0m9l3:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"27 Sep '19 06:31;jefernan;You should not disable the distance fields. It will decrease performance, and it won't work correctly.","27 Sep '19 06:52;akizawa;[~jefernan]: Thank you for comment. Is there way to disable anti-aliasing instead of QML_DISABLE_DISTANCEFIELD by WebGL?","27 Sep '19 07:00;jefernan;AFAIK no :( Because the distance field provides AA. What problems are you facing?","27 Sep '19 07:22;akizawa;[~jefernan]: Needs to render with anti-aliasing on WebGL. Is that no way?","27 Sep '19 07:35;jefernan;Unfortunately, no, it's not possible.","30 Sep '19 08:29;andysh;[~jefernan] is that because of a limitation on the WebGL side?

And if the distance fields should not be disabled then is this really out of scope?","30 Sep '19 08:34;jefernan;> Jesus Fernandez is that because of a limitation on the WebGL side?

The distance field technique is based on scaling a bitmap, so it's not possible to disable it.
Native rendering is buggy in the WebGL streaming it can be considered a limitation, but I didn't have time to research it.","30 Sep '19 08:44;jefernan;> And if the distance fields should not be disabled then is this really out of scope?

Yes, it can be. Or it can be converted into a suggestion to add support for native rendering.","30 Sep '19 08:50;andysh;Ok, I will leave it in your hands as to whether it should be a suggestion or not once you have researched it. ","30 Sep '19 09:07;jefernan;Done.",,,,,,,,,,,,
Support clang-cl on Linux with cmake,QTBUG-76050,279152,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P4: Low,,qtbuildsystem,iamsergio,iamsergio,27 May '19 10:18,26 Jun '20 10:04,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Build System: CMake,,,,0,,,,"""clang --drive-mode=cl"" runs fine on any Linux distro, provided you mount the Windows drive and setup include paths.

But the current win32-clang-msvc mkspec produces ""nmake Makefiles"", which are not suitable for make.

I suppose this can be easier with wip/cmake than hacking qmake ? Any feedback ?


Some reasons why you would want to build on Linux for MSVC:

*     Compiling on Linux is usually faster
*     You can use icecc/distcc
*     clang has more warnings
*     Clang tooling easier to setup
*     Some users want to develop on Linux
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Linux/X11,,,,,,"0|i0l8jr:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"27 May '19 10:21;iamsergio;KDAB (Andy) tried to write a mkspec for it but it was a dead end","29 May '19 07:46;kkohne;I'd rather concentrate on getting this working in the CMake port of Qt ...",,,,,,,,,,,,,,,,,,,,
Add settings for Chromium's dark mode,QTBUG-84484,299436,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P4: Low,,qt_webengine_team,the compiler,the compiler,27 May '20 14:56,25 Jun '20 15:19,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,WebEngine,,,,0,,,,"Since Qt 5.14, the underlying Chromium makes it possible to force ""dark mode"" for websites. Doing so filters websites so that they appear dark, even if the websites themselves don't offer a dark style:

 !image-2020-05-27-16-45-30-543.png|thumbnail! 

This can be set in {{chrome://flags}} in Chromium, or by using one of the following command lines, which also work for QtWebEngine:

{code}
--blink-settings=forceDarkModeEnabled=true  // Current Chromium
--blink-settings=darkModeEnabled=true  // Qt 5.15
--blink-settings=darkMode=4  // Qt 5.14
{code}

However, since those are commandline arguments, changing them (notably, disabling dark mode) requires a restart of the application. It would be amazing if this was settable at runtime instead (at the very least, allowing to enable/disable it at runtime) so that it could e.g. be turned off for websites where it is problematic in some way.

There are various related [Blink settings|https://source.chromium.org/chromium/chromium/src/+/master:third_party/blink/renderer/core/frame/settings.json5;l=882-942;drc=43bbd38f475b9d9663f1ffabf2fef9fb26466af4?originalUrl=https:%2F%2Fcs.chromium.org%2F], some more documentation about them and their impact can be found in my [adoption of them for qutebrowser|https://github.com/qutebrowser/qutebrowser/blob/723c061271987d76f9043735e98c5f8fbb604068/qutebrowser/config/configdata.yml#L2615-L2776]. I guess the question is what to expose - I can see a couple of different approaches:

- Expose all 9 setting individually via {{QWebEngineSettings}}
- Only expose a way to turn it on/off, allowing to set the rest via commandline arguments
- Instead of exposing dark mode specifically, expose a way to set Blink settings as runtime from a key/value mapping of strings. This would be a more generic solution (also allowing to set other Blink settings at runtime), but might be too low-level for an API.
- Expose the ""variants"" Chromium displays in {{chrome://flags}}:

 !image-2020-05-27-16-53-50-286.png|thumbnail! 
",,,,,,,,,,,,,,,,,,,"27 May '20 14:45;the compiler;image-2020-05-27-16-45-30-543.png;https://bugreports.qt.io/secure/attachment/95089/image-2020-05-27-16-45-30-543.png","27 May '20 14:53;the compiler;image-2020-05-27-16-53-50-286.png;https://bugreports.qt.io/secure/attachment/95088/image-2020-05-27-16-53-50-286.png",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0odm7:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"27 May '20 15:09;the compiler;Also, note that there's still a brief white flash between loading websites with dark mode enabled - ideally, there would be a way to get rid of those as well. Before Qt 5.14.2, it was possible to avoid that via {{QWebEnginePage::setBackgroundColor}}, as that didn't actually affect page's colors due to QTBUG-81781, but it *did* avoid the bright flash between loads. With https://codereview.qt-project.org/c/qt/qtwebengine/+/292932 those two now interfere with each other. I guess if there was a setting for dark mode, QtWebEngine could also set the background color to a dark color (so that that gets displayed between page loads), but without actually influencing the appearance of pages (since dark mode takes care of that).","19 Jun '20 20:14;kiburtse;But chromium asks to relauch after changing these settings in chrome://flags, no? And they don't seems to have any influence on web sites rendering until full relaunch. I don't see how some new api like also mentioned here QTBUG-79610 may be specific, since these flags are not part of chromium public conten api and changes constantly.","25 Jun '20 15:19;the compiler;Indeed, because those are passed as flags in Chromium right now, even though they are just blink settings. People are requesting the same for Chromium: https://bugs.chromium.org/p/chromium/issues/detail?id=952419 - however, such a change in Chromium is unlikely to affect QtWebEngine, because {{chrome://flags}} isn't part of QtWebEngine either. In other words, QtWebEngine could make this possible before Chromium does, and Chromium making it possible in its UI is largely independent from that.

On the other hand, it looks like dark mode is being removed from blink settings and moved somewhere else: https://bugs.chromium.org/p/chromium/issues/detail?id=1082339 - I hope it'll still be possible to set it via commandline arguments in QtWebEngine with that move...

As for the API: QTBUG-79610 looks like only a convenience method, but it wouldn't enable any new usage which isn't already possible now by setting {{QTWEBENGINE_CHROMIUM_FLAGS}}. Having an API to set any blink settings at runtime (which I believe should be possible from Chromium's side, but I'm not 100% sure either!) would be something similar, as it's exposing a quite ""low-level""/raw Chromium API, but an usable one. Then again, the main usage would probably be the dark mode, and with it being moved away from Blink settings, that point might be moot and something else might be needed after the move...",,,,,,,,,,,,,,,,,,,
Tool to convert svg to qml,QTBUG-85110,300659,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P4: Low,,qt.team.quick.subscriptions,zccrs,zccrs,18 Jun '20 04:04,19 Jun '20 10:16,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Quick: 2D Renderer,,,,0,,,,"The Qt svg module is base with QPainter, It without hardware acceleration, so it is not suitable for mass application in Qt quick/qml. However, in the GUI programs, need to use svg icons heavily.
    The design of qml and svg have certain similarities. Can we consider a method of converting svg to qml for rendering? If you want to do this, are there any unsolvable technical problems?",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0oktr:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"18 Jun '20 13:32;zccrs;[~lagocs]  [~cameral] [~srutledg] [~fabiankosmale] [~laknoll] [~heimrich] [~esabraha] [~andysh]","18 Jun '20 14:47;srutledg;There could be a tool to convert svg to qml, generating Shapes, Text, Image etc. as necessary.  (Maybe that was even done by now.  I don't think it would be hard: you could use any scripting language that has an XML parser.)  Rendering might not perform better though.  It would result in a lot of objects if the SVG is complex, so it would take more memory.  You'd also need to turn on multisampling to get AA.

Much better would be if we had a way to render polyline strokes and fills with vertex AA or some other technique (Loop-Blinn?), and also to directly populate SG nodes, not needing separate objects for each path inside the SVG.  If we could do that, then we could also consider rendering PDFs that way, and Lottie animations.  But for now, SVG and PDF modules are generating images at whatever resolution you need, according to your Image.sourceSize.  That takes CPU time, but provides good quality.

You could try to use https://github.com/QUItCoding/qnanopainter maybe.","18 Jun '20 15:00;liaqi;[~zccrs] , any contribution will be welcome!","18 Jun '20 15:06;paangele;Interesting suggestion, i'm not aware of any such project although, in principle, it could be probably doable even in QML, lumping together QVariantList/QVariantMap-equivalent model and a recursive delegate-chooser based delegate.
However, since QPainter has been successfully HW-accelerated, would it be possible to use such an HW-accelerated QPainter together with QML in QtSvg?","18 Jun '20 15:31;zccrs;How to enable QPainter HW-acceleration? Is it QGLPainter or QOpenGLPaintDevice?
In addition, QtSvg also has other defects, for example, it only supports the svg tiny standard and does not support full animation","18 Jun '20 21:13;paangele;According to https://doc.qt.io/qt-5/topics-graphics.html, it seems it's QOpenGLPaintDevice. If you try, please report :-)","19 Jun '20 02:47;zccrs;QOpenGLPaintDevice was used a long time ago, and I tried it again on Qt15.5 today, still does not support QPainter::Antialiasing and most of QPainter::CompositionMode, will Qt 6 build a paint engine of QPainter based on RHI to thoroughly solve these problems?

“Much better would be if we had a way to render polyline strokes and fills with vertex AA or some other technique (Loop-Blinn?)”  To solve this problem, can you refer to how webengine renders svg? Can we make a svg control based on the webengine code like the new qtpdf module?

As for the problem that the memory consumption when rendering after converting svg to qml may be relatively high, relative to svg rendered using a browser engine, I believe that it may be better to use QtQuick to render a large number of items. However, as everyone thinks, it is certainly more looking forward to reducing the resource consumption as much as possible. I am more happy to use an independent QuickItem to directly render svg, but this may increase a lot of work.

","19 Jun '20 05:35;srutledg;Yes QtWebEngine should work.  I did that at another company in about 2008 with the Qt 4 version of QtWebkit at the time (4.3 or so maybe), because the application I was working on just needed a couple more small features beyond the ones QtSVG had implemented.  That worked fine, but it has more overhead just to render SVG.

One problem with going beyond SVG Tiny in QtSVG is what reasonable standard can we choose for the next step?  Are there any intermediate-complexity standards published?  The main SVG specification requires implementing a lot of crazy ideas, without regard to complexity.  As if a committee of artists wrote down a wish-list and only asked hypothetical questions about what's possible.  There are still few implementations.  We'd have to slowly add one feature at a time and keep changing docs to explain what we support (say, SVG Tiny plus linear gradients; next some other kind of gradient; SVG Tiny plus gradients and markers at path ends; etc.)  Like with our HTML support in QTextDocument: we get enough criticism about all the HTML features we don't support (and probably never will) that we wish we had never mentioned HTML at all.  (That's one reason I added markdown support: it's such a low bar, like SVG Tiny.  The whole feature set is a good fit for what Qt can already do, and nobody is adding unreasonable features over time, so far.)

PDF in WebEngine is a separable feature, because Google paid for PDFium rather than writing their own, and it's still not very tightly integrated into Chromium.  So we can render PDF pages without creating any actual browser components.  I don't think SVG rendering is like that, but you can research it if you like.

Animation is not a reasonable feature to add in QtSVG itself.  To enable that, SVG would have to be tightly coupled to QtQuick, probably, so that we could reuse the animation framework and JS engine.  We don't have such a plan.  QtSVG hasn't even had a maintainer for many years.  I hope someday we can afford to invest in it again.  From management's perspective, if it's not causing more customers to buy licenses, it won't be prioritized.  But it can be somebody's spare-time project.  Yours even, if you want to spend time on it.
","19 Jun '20 06:00;zccrs;Yes, I totally agree with you. svg is designed specifically for the web, not to become a common standard for various GUI frameworks. I cannot tolerate adding javascript code to svg. However, it must be said that our designers like the svg format very much, and vector icons are widely used in our GUI programs, but QtSvg’s support for svg icons exported from Sketch is very bad, so I have to be in the Qt program Using librsvg (based on libcario) makes me very disgusted.
Now I face several options:
1. Advise the designer to abandon svg and use png instead (in order to support up to 3 times the window zoom, each icon needs to carry three png files of x1 x2 x3 size)
2. Continue to use librsvg (no hardware accelerated rendering, and additional drawing systems are introduced in Qt, which is something I don’t want to do)
3. Develop a svg rendering control based on QtQuick (as discussed above, there are also many problems, especially the unfriendly svg standard)
4. Do you have any better suggestions for me?

We are also faced with such design requirements: after clicking a button, its icon will play an animation (such as a button to unlock the screen, and after clicking it will transition the locked shape to the unlocked shape through animation), the designer also wants to use the svg icon To achieve this goal. If I replace svg with png, I haven't thought of how to achieve such a design elegantly.

Apart from svg, are there any other popular vector icon formats? And it's worth developing QtQuickk for it. ","19 Jun '20 07:51;srutledg;If you didn't want animation, you could tell designers to work with the features supported by SVG Tiny.  Inkscape can do that, and in 2008, Adobe Illustrator had it as an export format too.  Hopefully it still does, and hopefully whatever they export will work with QtSVG?  I think there might have been some trouble with that though.  But you could make the case that it's a bug if Qt and Adobe don't agree about the SVG Tiny specification.  Then you can contact Qt Support.

If your designers like flat monochrome design, you can put all the icons into a custom icon font (made with FontForge or some such; there are enough free tools for that), and render it with Text in QML.  Maybe frames of the animation could be different glyphs in the font?  But Text rendering is also not as cheap as you'd think: the distance-field technique is fast, but text layout is not.  So I would like to add a Glyph element to Qt Quick some day: it could bypass text layout completely and render one character to the scene graph.  But to use it with FontAwesome, we need the ability to look up a glyph's code point by name, because all those icons have names, whereas having to look up the code points is tedious.  And looking up by name depends on FreeType.  If we end up with FreeType on all platforms in Qt 6, maybe it will become possible.  I don't see a point in bothering with Glyph until then; but you can easily write a custom item to render glyphs.

You could try using QtPDF.  It provides an image format plugin, like SVG; except PDF is a multi-page format.  So if you like, you can put each icon on a ""page"" (but design the page to be the right size, in pixels, instead of A4) and then Image { source: ""myIcons.pdf""; currentFrame: 10 } will choose the 10th page in that file.  So unlike SVG, you can bundle all icons into one file.  They can contain scalable vector graphics.  In color.  With AA.  But... it's another paint engine underneath, not QPainter.  So it probably takes less resources than rendering SVG in QtWebEngine, but it's not lightweight either.  You might be able to use AnimatedImage to flip through ""pages"" really fast and do animation that way, but I haven't tried lately.  We have an unsolved problem that each time the plugin needs to render one page, it creates a PDFium instance, opens the PDF file, renders one image to pass back, and throws the PDFium instance away.  It cannot be shared because PDFium is not re-entrant, and because we don't have API to pass extra objects from the application into the image plugin.  (It's on my backlog to solve that one.)  So that wastes about 4ms per page rendered, on a Core i7.  It's affordable compared to the time it takes to render typical PDF pages; but maybe makes it un-affordable for animation.  OTOH, hopefully the rendered frames will be cached.  But PDF hasn't been used for icons much yet, let alone animated icons.

Maybe writing the tool to convert SVG with animation to QML with animation is a good idea.  I don't know much about SVG animation, so not sure if it would be easy to convert that syntax to QML.  But probably OK, especially now that we have timeline animation.

We had MNG support, and I think we still do, but there are so few tools to create MNG, so it isn't used much.  Maybe you are better off with QtLottie?  But it also uses QPainter underneath, it's not GPU-accelerated AFAIK.  But when we shipped QtLottie, I realized there is also a shortage of tools to create that format, and all non-free; so I found synfig.org, made a suggestion that they perhaps should think of adding Lottie as an export format: https://github.com/synfig/synfig/issues/704 and guess what, they have been working on that.  https://github.com/synfig/synfig/milestone/4  So with a free creation tool, it seems like it should have a better future than MNG did.  But your designers probably have commercial options anyway.","19 Jun '20 10:16;zccrs;Unfortunately, our designers only like to use Sketch, QtLottie looks good, it would be better if it could support hardware acceleration!

Will QPainter's hardware acceleration engine be perfectly implemented? It can solve all problems of QOpenGLPaintDevice.",,,,,,,,,,,
"implement the ""Start App on system startup"" feature ",QTBUG-84688,299809,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P4: Low,,vhilshei,philip,philip,04 Jun '20 03:00,05 Jun '20 16:24,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Core: I/O,,,,0,,,,"QFile::moveToTrash() is an adopted feather since Qt 5.15, why not implement the ""Start App on system startup"" feature?",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0oft3:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"05 Jun '20 15:32;thiago;Volker, as the author of the mentioned feature, do you want to look at this one?","05 Jun '20 16:24;vhilshei;I don't think this will happen any time this year, unless this gets a ton of votes. But contributions welcome :)",,,,,,,,,,,,,,,,,,,,
QAbstractSocket::waitForReadyRead() slow because of setError(),QTBUG-84333,299055,Suggestion,Open,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P4: Low,,cnn,amiart,amiart,19 May '20 21:34,20 May '20 09:25,18 Feb '21 09:41,,5.14.2,5.9,,,,,,,,,,,,,,,,,,,,,Network: Sockets,,,,0,Performance,,,"The Valgrind profiler shows that 71% of time in QAbstractSocket::waitForReadyRead()  is spent for QNativeSocketEnginePrivate::setError() in case a timeout occurs.

I think it's quite a lot for a function that only sets the error code and name.

Measured code:
{code:java}
// Code in QThread::run()
QEventLoop eventLoop;
QTcpSocket *socket = new QTcpSocket();
// connect ...
// wait for data ...
while (!socket->waitForReadyRead(10)) {  // wait 10 msecs
   // ...
   while (eventLoop.processEvents(QEventLoop::ExcludeSocketNotifiers)) { }
}
// read data ...


{code}
 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Linux/X11,,,,,,"0|i0obev:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"20 May '20 05:33;amiart;It seems that the load is caused by the call to QNativeSocketEngine::tr () in QNativeSocketEnginePrivate::setError().
Could the function tr () be called in erorrString() instead of setError() ? Or cache the result of tr() somehow ?
This would reduce the load of applications that often call waitForReadyRead().

Thanks.
","20 May '20 06:50;tpochep;If some string operations are the most expensive in this tight loop - well, so be it, 71% of what you do in the loop. What's the real need in such a loop? Why not using read ready signals instead? If you managed to abuse socket in a way that it constantly reports errors and this error reporting is the most expensive operation - probably, reconsider the design of your application.","20 May '20 08:33;amiart;Well, this is actually a source code of the TreeFrog Framework library
[https://www.treefrogframework.org/]

Below is a fragment of TActionThread class:
 [https://github.com/treefrogframework/treefrog-framework/blob/4b6e3ca508b5a5589505c6682a881ded487e8eba/src/tactionthread.cpp#L95]
{code:java}
void TActionThread::run()
{
    // ...
    
    QEventLoop eventLoop;
    _httpSocket = new THttpSocket();

    if (Q_UNLIKELY(!_httpSocket->setSocketDescriptor(TActionContext::socketDesc))) {
       // ...
    }
    // ...

    try {
        for (;;) {
            reqs = readRequest(_httpSocket);
            
            // ...

            for (auto &req : reqs) {
                TActionContext::execute(req, _httpSocket->socketId());
            }

            // Next request
            while (!_httpSocket->waitForReadyRead(5)) {
                if (_httpSocket->state() != QAbstractSocket::ConnectedState) {
                    if (_httpSocket->error() != QAbstractSocket::RemoteHostClosedError) {
                        tSystemWarn(""Error occurred : error:%d  socket:%d"", _httpSocket->error(), _httpSocket->socketId());
                    }
                    goto receive_end;
                }

                if (_httpSocket->idleTime() >= keepAliveTimeout) {
                    tSystemDebug(""KeepAlive timeout : socket:%d"", _httpSocket->socketId());
                    goto receive_end;
                }

                while (eventLoop.processEvents(QEventLoop::ExcludeSocketNotifiers)) { }
            }
        }

    } catch (ClientErrorException &e) {
        // ...
    }

receive_end:
    // ...
}

{code}
Each time a new HTTP request arrives, a new thread (TActionThread class) is started and the socket deascriptor is passed to it. Then in TActionThread::run(), after the request is handled, the waitForReadyRead() loop is executed, which waits for the next request, while checking whether the client disconnected or the Keep-Alive time has expired.

When new HTTP requests do not come, most of the thread time is consumed by the call to waitForReadyRead(), specifically the setLastError () function.

So I tried to convert the code to use a message loop instead of waitForReadyRead(), but this one turned out to be slower, because the thread could handle less HTTP requests:
 [https://github.com/amiart/treefrog-framework/blob/6e693db8603f6198c1308bab57a7ad4492430122/src/tactionthread.cpp#L96]

Here are the results of the siege command:
 siege -b -c 10 -t 5S [http://localhost/blog]

+QTcpSocket::waitForReadyRead() and QEventLoop::processEvents(QEventLoop::ExcludeSocketNotifiers):+

Date & Time, Trans, Elap Time, Data Trans, Resp Time, Trans Rate, Throughput, Concurrent, OKAY, Failed
 2020-05-19 08:18:01, 2459, 4.31, 6, 0.02, 570.53, 1.39, 9.67, 2459, 0
 2020-05-19 08:18:33, 2833, 4.36, 7, 0.02, 649.77, 1.61, 9.89, 2833, 0
 2020-05-19 08:19:05, 3230, 5.00, 8, 0.02, 646.00, 1.60, 9.70, 3230, 0
 2020-05-19 08:19:37, 3119, 4.90, 8, 0.02, 636.53, 1.63, 9.81, 3119, 0
 2020-05-19 08:20:08, 2816, 4.66, 7, 0.02, 604.29, 1.50, 9.85, 2816, 0
 2020-05-19 08:20:37, 2292, 4.05, 5, 0.02, 565.93, 1.23, 9.65, 2292, 0
 2020-05-19 08:21:11, 3239, 4.86, 8, 0.01, 666.46, 1.65, 9.63, 3239, 0
 2020-05-19 08:21:42, 2178, 4.50, 5, 0.02, 484.00, 1.11, 9.64, 2178, 0
 2020-05-19 08:22:14, 2815, 4.40, 7, 0.02, 639.77, 1.59, 9.86, 2815, 0
 2020-05-19 08:22:48, 2835, 4.81, 7, 0.02, 589.40, 1.46, 9.93, 2835, 0

+Use QThread::exec():+

Date & Time, Trans, Elap Time, Data Trans, Resp Time, Trans Rate, Throughput, Concurrent, OKAY, Failed
2020-05-19 15:09:15, 2468, 4.16, 6, 0.02, 593.27, 1.44, 9.94, 2468, 0
 2020-05-19 15:09:50, 2974, 4.77, 7, 0.02, 623.48, 1.47, 9.93, 2974, 0
 2020-05-19 15:10:22, 2417, 4.16, 6, 0.02, 581.01, 1.44, 9.93, 2417, 0
 2020-05-19 15:10:55, 2665, 4.61, 6, 0.02, 578.09, 1.30, 9.93, 2665, 0
 2020-05-19 15:11:32, 2270, 4.11, 5, 0.02, 552.31, 1.22, 9.93, 2270, 0
 2020-05-19 15:12:04, 2785, 4.96, 7, 0.02, 561.49, 1.41, 9.94, 2785, 0
 2020-05-19 15:12:36, 2476, 4.51, 6, 0.02, 549.00, 1.33, 9.93, 2476, 0
 2020-05-19 15:13:11, 2624, 4.40, 6, 0.02, 596.36, 1.36, 9.92, 2624, 0
 2020-05-19 15:13:41, 2404, 4.41, 6, 0.02, 545.12, 1.36, 9.91, 2404, 0
 2020-05-19 15:14:01, 2266, 4.31, 5, 0.02, 525.75, 1.16, 9.93, 2266, 0



 The first version handles ~2781 transactions, the second one ~2534 trans.

 ","20 May '20 08:47;amiart;_If you managed to abuse socket in a way that it constantly reports errors and this error reporting is the most expensive operation - probably, reconsider the design of your application._

There are situations, like in the code above, when the waitForReadyRead() timeout can be considered a normal application behavior, not an error. In this case, calling tr() in setError() is unnecessary, because nobody calls errorString() to get the name of the error.
","20 May '20 09:15;tpochep;Well, then, please consider submitting a patch. Indeed, you can cache those strings in advance mapping an actual error code to its textual (potentially translated) description (which is what errorString() is).",,,,,,,,,,,,,,,,,
QTextOption::WrapMode new options,QTBUG-84083,298544,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P4: Low,,esabraha,tero.pelkonen,tero.pelkonen,08 May '20 10:43,08 May '20 11:12,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,GUI: Text handling,,,,0,reported_by_support_standard,,,"User requested new features for QTextOption::WrapMode.

They would be interested to have:
 # Is it possible to force to put a ""-"" when wrapping a word like
""Anwesenheits-
simulation""
 # Syllable wrapping",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0o8gf:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"08 May '20 11:12;esabraha;Thanks for the suggestion.

Just a note: Soft hyphens are already supported in Qt, so the current way to achieve this is to put soft hyphens between the syllables in your text: https://en.wikipedia.org/wiki/Soft_hyphen

Detecting syllables is a pretty complex task which requires specialized rules and dictionaries for each supported language, and designing and constructing the patterns for this is currently not in scope of Qt. But perhaps we could support some standardized hyphenation pattern file format, such as the one used by TeX, so that users can supply the patterns for the languages they wish to support. 

But as of now, you can already do the hyphenation work in your application and add soft hyphens to your string, and Qt will apply the appropriate line breaks as well as display the hyphens that are used as line breaks.",,,,,,,,,,,,,,,,,,,,,
QPA: Windows: Window needs repaint after DPI changes,QTBUG-83649,297395,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P4: Low,,kleint,wangwenx190,wangwenx190,20 Apr '20 01:25,21 Apr '20 13:52,18 Feb '21 09:41,,5.14,5.15,,,,,,,,,,,,,,,,,,,,,QPA: Windows,,,,1,,,,"If you change DPI from 100% to 300% (for example) or vice versa, the widgets in a window will be in wrong position, but that's because the window is not repainted in time, they are in the correct position actually.

It's easy to reproduce, just change the DPI several times, try 100% to 300% (or vice versa), not 100% to 125%

I have read QPA's source code, it's not enough to call SetWindowPos only in WM_DPICHANGED. After changing the window size, a repaint is needed.",,,,,,,,,,,,,,,QTBUG-77136,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Windows,,,,,,"0|i0o2ev:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"21 Apr '20 13:52;wangwenx190;The RedrawWindow API doesn't work. Maybe QWidget::update() or QWidget::repaint() could help. But I don't know how to trigger these functions in QPA. Maybe we can do this in a cross-platform manner?",,,,,,,,,,,,,,,,,,,,,
Expose text query in QWebEngineFindTextResult,QTBUG-80857,290505,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P4: Low,,qt_webengine_team,emdek,emdek,17 Dec '19 19:26,01 Apr '20 12:32,18 Feb '21 09:41,,5.14.0,,,,,,,,,,,,,,,,,,,,,,WebEngine,,,,0,,,,"Newly added  {{QWebEngineFindTextResult}} contains information about how many occurrences of query were matched but doesn't expose information about text itself.

Adding such property would allow to ensure that we get correct result (for example for find as you type) and would be handy in general.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0n1av:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"01 Apr '20 12:32;kiburtse;Find text result is always invoked for the last submitted 'findText' call. So this info is somewhat known to caller. There is no way to do parallel searches anyway. Why it is needed?",,,,,,,,,,,,,,,,,,,,,
Add a variable that can be used to specify extra files that need to be copied to the ANDROID_PACKAGE_SOURCE_DIR,QTBUG-72715,271597,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P4: Low,,taipan,andysh,andysh,21 Dec '18 07:24,15 Mar '20 06:48,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Build tools: qmake,,,,3,Reported_by_support_standard,,,"Add a variable that can be used to specify extra files that need to be copied to the ANDROID_PACKAGE_SOURCE_DIR. These can include jars, libraries so that it is easier to have them automatically updated if they are changed instead of having to remember to do so in the case of them being used in multiple projects.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Android,,,,,,"0|i0k2tb:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"21 Dec '18 11:55;taipan;Why don't you add these file directly to your android folder?
","21 Dec '18 11:58;andysh;That is what is done, but the same files are used in multiple projects and therefore if they are updated independently then it means you have to remember to copy them again etc. Its just for convienence really.","15 Mar '20 06:48;DanielSt;It would be nice if multiple Java source directories can be added instead of using this workaround: http://imaginativethinking.ca/what-the-heck-how-do-i-share-java-code-between-qt-android-projects/",,,,,,,,,,,,,,,,,,,
"Explicitly add CFBundleSupportedPlatforms, MinimumOSVersion and UIDeviceFamily to the Info.plist",QTBUG-75917,278768,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P4: Low,,qtbuildsystem,andysh,andysh,20 May '19 09:04,06 Mar '20 15:35,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Build tools: qmake,,,,1,Reported_by_support_standard,,,"By adding CFBundleSupportedPlatforms, MinimumOSVersion and UIDeviceFamily to the Info.plist, this will ensure that dynamic frameworks created to be available in the app store are accepted as these are required for iOS. Currently they default to being available for all devices, so making it explicit should suffice here.",,,,,,,,,,,,,,,QTBUG-74872,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,iOS/tvOS/watchOS,,,,,,"0|i0l68n:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"21 May '19 09:20;kkohne;Thanks for the suggestion! I understand that you can however also set them manually for now, so there's a work-around...","06 Mar '20 14:30;bluespider;Yes we love doing things manually - isn't that what computers are for! CFBundleSupportedPlatforms appears to be needed for MacOS deployment as well. I have just hand edited a whole bunch of plist files (including ALL of the Qt ones) and await the next error when trying to upload my archive. Incidentally I was using Xcode 10.3 and upload of archive was just crashing Xcode. I had  11.2.1 installed as well but 10.3 was current. Only when I tried uploading in 11.2.1 did I start to get meaningful errors and then found that I needed to go and modify all of the Qt plist files. AND that was after I found I had to add my own code signing steps as automatic seemed broken. Not wanting to modify my generated Xcode projects and preferring to do everything via qmake makes it a very steep learning curve. Automating the signing was achieved using a whole bunch of defineReplace steps in a qmake .prf file which is not that difficult. To be honest Xcode is by far the biggest counterintuitive nightmare - qmake is good. All round though lack of easily locatable documentation and examples is the biggest issue for both qmake platform specifics and even more so for Xcode itself.   Incidentally that Xcode 10.3 crash appears to be due to the missing CFBundleSupportedPlatforms that I had to add to all my Qt frameworks. Once that was fixed I could upload in either 10.3 and 11.2.1 and while the Xcode crash is obviously a bug in Xcode its interesting that I would not have encountered it had Qt included this by default.",,,,,,,,,,,,,,,,,,,,
Allow Qt Virtual Keyboard to work with hardware keyboard,QTBUG-71791,269705,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P4: Low,,mitch_curtis,michaelliesenberg,michaelliesenberg,14 Nov '18 12:05,06 Mar '20 14:39,18 Feb '21 09:41,,5.9,,,,,,,,,,,,,,,,,,,,,,Virtual Keyboard,,,,0,,,,"I am using Virtualkeyboard with simple chinese and everything works when i type a letter on the virtualkeyboard it gives me options for a word from pying library.

Now if connect an external USB keyboard and want to use the virtualkeyboard on the same time, the pying library or virtualkeyboard dont show the correct options for the words combination.

 

To reproduce the problem use Qt5.9.1 or newer version, use the USB Keyboard from PC open the Qt Quick Virtual Keyboard - basic example project.

Note: You must first enable all languages and recompile the virtualkeyboard qt library so that simple chinese input method is enabled.  

On the example change the input method language to simple chinese(where keyboard is querty). If you type a letter on the virtualkeyboard, on top of the virtualkeyboard will appear word combination in chinese, now type the same letter on the usb keyboard and the word doenst appear or is incorrect.

 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Linux/Other display system,,,,,,"0|i0js5j:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"14 Nov '18 12:53;adoherty;Could you elaborate a little bit more on the problem to help us reproduce the issue. Thanks!","14 Nov '18 13:17;michaelliesenberg;[~adoherty] I have described now how to reproduce the problem:

""To reproduce the problem use Qt5.9.1 or newer version, use the USB Keyboard from PC open the Qt Quick Virtual Keyboard - basic example project.

Note: You must first enable all languages and recompile the virtualkeyboard qt library so that simple chinese input method is enabled.  

On the example change the input method language to simple chinese(where keyboard is querty). If you type a letter on the virtualkeyboard, on top of the virtualkeyboard will appear word combination in chinese, now type the same letter on the usb keyboard and the word doenst appear or is incorrect.""","14 Nov '18 14:05;mitch_curtis;Currently, only input from the virtual keyboard is supported, so this is more like a feature request.","06 Mar '20 14:39;hieunc;I'm total agree with [~mitch_curtis], In my opinion USB Keyboard is out-of-scope of Qt Virtual Keyboard module",,,,,,,,,,,,,,,,,,
The bundled freetype contains the deleted source files compare to the upstream,QTBUG-82480,294395,Suggestion,Open,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P4: Low,,liaqi,timxx,timxx,26 Feb '20 08:00,26 Feb '20 18:35,18 Feb '21 09:41,,5.14.0,,,,,,,,,,,,,,,,,,,,,,Core: Other,,,,0,,,,"The latest freetype bundled under qtbase/src/3rdparty/freetype, contains many deleted files compare to the official package with the same version (2.10.1), src/cff/cf2arrst.c, src/cff/cf2arrst.h for example.

It should be deleted as they no longer used.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0nmgn:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"26 Feb '20 18:34;thiago;We'll get to it when updating next time.","26 Feb '20 18:35;thiago;Liang, you were the last that updated freetype.",,,,,,,,,,,,,,,,,,,,
QML XMLHttpRequest does not support redirect,QTBUG-82183,293550,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P4: Low,,qt.team.quick.subscriptions,reg31,reg31,15 Feb '20 03:01,21 Feb '20 15:46,18 Feb '21 09:41,,5.14.1,,,,,,,,,,,,,,,,,,,,,,Quick: Core Declarative QML ,,,,0,,,,Calling {{the responseURL}} attribute always returns undefined,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Windows,,,,,,"0|i0ni9r:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"21 Feb '20 15:46;ulherman;The absence of the responseURL attribute does not mean we don't support redirects. It just means that we don't support the latest version of the XMLHttpRequest specification. Sure, the property has been around for a while, but expanding the capabilities of XMLHttpRequest in QML is not our focus at the moment. Patches are always welcome, though.",,,,,,,,,,,,,,,,,,,,,
try to use QPainter to render PDFs,QTBUG-77505,282472,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P4: Low,,srutledg,srutledg,srutledg,14 Aug '19 12:53,17 Feb '20 21:39,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,PDF,,,,0,,,,"PDFium uses Skia:  https://pdfium.googlesource.com/pdfium/+/master/core/fxge/skia/

Maybe we could develop a new backend that uses QPainter instead.  This way we could avoid bundling that chunk of code along with QtPDF.

It came as a suggestion in a blog post comment: https://blog.qt.io/blog/2017/01/30/new-qtpdf-qtlabs-module/#comment-1198957",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,QTBUG-77503,9223372036854775807,,,,,,,,,"0|i0ls0v:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add plugin placeholder when ppapi can’t be loaded.,QTBUG-82012,293228,Suggestion,Open,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P4: Low,,ztamas,ztamas,ztamas,10 Feb '20 13:14,10 Feb '20 13:22,18 Feb '21 09:41,,5.15,,,,,,,,,,,,,,,,,,,,,,WebEngine,,,,0,,,,"Blink shows an error message in place of the plugin if error occures. With a plugin placeholder, it would look a little bit nicer and it may show more elaborate information.

For example, if the plugin is not supported:
{code:java}
./simplebrowser --register-pepper-plugins=""/path/to/libppapi_example_paint_manager.so;application/x-ppapi-example-paint_manager"" file:///path/to/ppapi/examples/2d/2d.html
{code}
 *Actual:*

!simplebrowser-plugin-not-supported.png|width=450,height=315!

 

*Expected:*

!chrome-plugin-not-supported.png|width=451,height=314!",,,,,,,,,,,,,,,,,,,"10 Feb '20 13:13;ztamas;chrome-plugin-not-supported.png;https://bugreports.qt.io/secure/attachment/91920/chrome-plugin-not-supported.png","10 Feb '20 13:12;ztamas;simplebrowser-plugin-not-supported.png;https://bugreports.qt.io/secure/attachment/91921/simplebrowser-plugin-not-supported.png",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0ngbr:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add version info to qmake on Windows,QTBUG-81339,291514,Suggestion,Open,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P4: Low,,qtbuildsystem,wangwenx190,wangwenx190,13 Jan '20 12:19,30 Jan '20 09:48,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Build tools: qmake,,,,0,,,,It may be the only one of Qt tool that doesn't have version information on Windows.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Windows,,,,,,"0|i0n72n:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"13 Jan '20 13:48;kkohne;Thanks for the suggestion! This would require extensions to the qmake specific Makefile's ...","30 Jan '20 09:48;jbornema;Also, the version number definition of qmake which is currently defined in option.h must be moved to some location that's accessible from the Makefile(s).",,,,,,,,,,,,,,,,,,,,
gui: add use pkgconfig at libjpeg test,QTBUG-75112,276999,Suggestion,Open,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P4: Low,,vgt,imb,imb,11 Apr '19 11:32,13 Jan '20 14:02,18 Feb '21 09:41,,5.12.2,5.12.6,,,,,,,,,,,,,,,,,,,,,Image formats,,,,0,,,,"I think use pkgconfig at libjpeg test simplify build

{code:sh}diff --git a/src/gui/configure.json b/src/gui/configure.json
index 44140bc7b6..fe200bdaa2 100644
--- a/src/gui/configure.json
+++ b/src/gui/configure.json
@@ -373,6 +373,7 @@
             },
             ""headers"": ""jpeglib.h"",
             ""sources"": [
+                { ""type"": ""pkgConfig"", ""args"": ""libjpeg"" },
                 { ""libs"": ""-llibjpeg"", ""condition"": ""config.msvc"" },
                 ""-ljpeg""
             ]{code}
 ",,,,,,,,,,,,,,,,,,,"13 Jan '20 12:39;imb;0001-src-gui-configure.json-add-use-pkgconfig-at-libjpeg-.patch;https://bugreports.qt.io/secure/attachment/91048/0001-src-gui-configure.json-add-use-pkgconfig-at-libjpeg-.patch",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0kwlb:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"12 Apr '19 06:45;jbornema;What problem does this fix?","12 Apr '19 07:19;vgt;[~jbornema] Not sure, but it seems the reporter is working on cross-compilation, as this came in shortly after: QTBUG-75116 ","13 Jan '20 09:40;imb;Vendor can provide libjpeg or other system libraries with some modifications for use SoC-specific acceleration, so library can can have additional depends.

At this moment I see two ways:
- use pc-file
- pass additional libraries via _-device-option LINKER\_FLAGS=_, this work, but it add link with additional libraries all components

[~jbornema], may be you can advice additional ways?","13 Jan '20 11:42;jbornema;No, I just wanted to know the reason for this as we cannot incorporate a change without any explanation.","13 Jan '20 11:43;jbornema;[~imb] Care to upload the patch to gerrit?","13 Jan '20 12:40;imb;[~jbornema], I attach it, I think I can upload it to gerrit later if this is still need.","13 Jan '20 12:44;imb;unfortunately Qt embedded absolute path to depend if depended library doesn't have soname",,,,,,,,,,,,,,,
Add a QFormLayout-like item,QTBUG-80693,290078,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P4: Low,,yulong.bai,yulong.bai,yulong.bai,11 Dec '19 11:21,11 Dec '19 12:00,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Quick: Layouts,,,,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0myvz:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"11 Dec '19 11:26;mitch_curtis;If I understand this correctly, it would go in QtQuick.Layouts. Although, looking at https://doc.qt.io/qt-5/qformlayout.html, I'm not so sure... it seems to be quite specific to certain types of items.

I think it would be good to distinguish (in this report) how this will differ from GridLayout. The docs for QFormLayout list some things:

{quote}
Traditionally, such two-column form layouts were achieved using QGridLayout. QFormLayout is a higher-level alternative that provides the following advantages:

* *Adherence to the different platform's look and feel guidelines.* For example, the macOS Aqua and KDE guidelines specify that the labels should be right-aligned, whereas Windows and GNOME applications normally use left-alignment.
* *Support for wrapping long rows.* For devices with small displays, QFormLayout can be set to wrap long rows, or even to wrap all rows.
* *Convenient API for creating label--field pairs.* The addRow() overload that takes a QString and a QWidget * creates a QLabel behind the scenes and automatically set up its buddy. We can then write code like this:
{quote}

Although, since I don't see any mention of any concrete widget type besides QLabel (and QWidget), and since QQuickLabel derives from QQuickText, this could very well be in QtQuick.Layouts.

It's also unclear to me how this will provide convenience with regards to ""Convenient API for creating label--field pairs"" - since QML is declarative, this argument doesn't really hold as well here.

I'm linking to QTBUG-44078 just in case it might somehow be relevant.","11 Dec '19 11:27;yulong.bai;Thanks for correction. 

Umm, but my first expression was using grid layout as an implementation detail for long row wrapping. 

My intuition was like a such API

 
{code:java}
FormLayout {
       FormItem {label: someLabel; field: someField}
       ...
}
{code}
Plus some properties to control the alignment and wrapping policies.

 

But strictly following platform-specific guidelines may not as easy as what I thought.

 ","11 Dec '19 11:40;mitch_curtis;Ah, interesting. :)",,,,,,,,,,,,,,,,,,,
qSetMessagePattern no way to get UTC time using {time [format]},QTBUG-78145,284247,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P4: Low,,cnn,mvimercati,mvimercati,09 Sep '19 16:25,28 Nov '19 17:01,18 Feb '21 09:41,,5.13.1,,,,,,,,,,,,,,,,,,,,,,Core: I/O,,,,0,,,,There is no way to get datetime in UTC format in log messages when using a custom message pattern (qSetMessagePattern),,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0m1wn:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"09 Sep '19 18:04;Eddy;This is really a feature request for the logging system; {{QDateTime::currentDateTimeUtc().toString(format)}} will provide the text needed.  You might want to consider contributing a patch that implements what you want.",,,,,,,,,,,,,,,,,,,,,
QDateTimeEdit should have more notifications for member changes,QTBUG-71051,268166,Suggestion,Open,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P4: Low,,Eddy,kshegunov,kshegunov,10 Oct '18 09:23,28 Nov '19 16:58,18 Feb '21 09:41,,5.11.1,,,,,,,,,,,,,,,,,,,,,,Widgets: Widgets and Dialogs,,,,0,,,,"When setting the maximum/minimum date/time/date-time or when the {{Qt::TimeSpec}} is modified the {{QDateTimeEdit}} doesn't emit any signals about the change(s).

It'd be much appreciated if notification signals are added to the control.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0jir3:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
QDateTimeEdit and QTimeEdit range-ends can only cope with LocalTime and UTC,QTBUG-72440,271040,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P4: Low,,qt.team.quick.subscriptions,Eddy,Eddy,10 Dec '18 13:29,28 Nov '19 14:26,18 Feb '21 09:41,,5.11.0,,,,,,,,,,,,,,,,,,,,,,Widgets: Widgets and Dialogs,,,,0,,,,"{{QDateTimeEdit}} and {{QTimeEdit}} have a range of date-times or times within which they work, along with methods to set the range or either of its end-points.  The code to do this (since my fix for QTBUG-71311) propagates the date-time's {{spec}}; however, this is only sufficient when the {{spec}} is UTC or {{LocalTime}}; for {{OffsetFromUTC}} or {{TimeZone}}, the offset or {{QTimeZone}} must also be supplied.  The widgets should also support these cases; this may require further modifications beyond the simple setters and getters for the range and its end-points.",,,,,,,,,,,,,,,QTBUG-71311,QTBUG-71181,QTBUG-71051,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0jze7:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"10 Dec '18 14:28;kshegunov;Perhaps it's also sensible to attach QTBUG-71181 and maybe even QTBUG-71051 as related to this issue?",,,,,,,,,,,,,,,,,,,,,
QQuickWheelEvent and QQuickKeyEvent miss Q_QUICK_PRIVATE_EXPORT,QTBUG-79037,286258,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P4: Low,,srutledg,DanielSt,DanielSt,07 Oct '19 05:48,08 Oct '19 10:26,18 Feb '21 09:41,,5.13.1,5.14.0 Alpha,,,,,,,,,,,,,,,,,,,,,Quick: Mouse Touch and Tablet input,,,,0,,,,"The QQuickWheelEvent and QQuickKeyEvent classes in qquickevents_p_p.h are missing the Q_QUICK_PRIVATE_EXPORT flag:


{code:java}
class QQuickWheelEvent : public QObject
class QQuickKeyEvent: public QObject
{code}
should be
{code:java}
class Q_QUICK_PRIVATE_EXPORT QQuickWheelEvent : public QObject
class Q_QUICK_PRIVATE_EXPORT QQuickKeyEvent: public QObject
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0md1z:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"07 Oct '19 14:16;mitch_curtis;They are not public types, so this is not a bug. If it affects the building of Qt (by e.g. causing a linker error), then it's a different story, but I imagine the CI would have caught something like that.","08 Oct '19 09:37;DanielSt;Then what is the point of including these two classes in the private headers shipped with the Qt installer/marking all other methods in this header with Q_QUICK_PRIVATE_EXPORT except the two classes?

Maybe we can change this to a ""suggestion"" instead of ""bug""?","08 Oct '19 10:24;mitch_curtis;{quote}
Then what is the point of including these two classes in the private headers shipped with the Qt installer
{quote}
I don't know about the packaging side, but private headers are just that: private headers. See the warning at the top of every private header:

{noformat}
//
//  W A R N I N G
//  -------------
//
// This file is not part of the Qt API.  It exists purely as an
// implementation detail.  This header file may change from version to
// version without notice, or even be removed.
//
// We mean it.
{noformat}

{quote}
marking all other methods in this header with Q_QUICK_PRIVATE_EXPORT except the two classes?
{quote}
Presumably because code that is not part of the library needed to use (and hence link to the library of) those classes. That's the only reason we add exports to private classes: so that Qt code can use them if they need to.

{quote}
Maybe we can change this to a ""suggestion"" instead of ""bug""?
{quote}
What is your use case?
",,,,,,,,,,,,,,,,,,,
Add pretty printing for QCOMPARE failures when comparing QVersionNumbers,QTBUG-79032,286249,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P4: Low,,macadder,mitch_curtis,mitch_curtis,06 Oct '19 18:39,06 Oct '19 18:40,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Testing: qtestlib,,,,0,,,,"{noformat}
FAIL!  : tst_App::saveAsAndLoad(TilesetType) Compared values are not the same
   Loc: [/Users/mitch/dev/slate/tests/auto/tst_app.cpp(540)]
{noformat}

Can be worked around with toString(), but would be nice to have.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0mczz:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Be explicit about reference validity for QMap and QHash,QTBUG-77953,283620,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P4: Low,,docteam,spawn,spawn,30 Aug '19 11:14,30 Aug '19 13:35,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Documentation,,,,0,,,,"Hi,

there is some confusion about reference validity in QMap/QHash containers.

While you do say something about iterators, the reference validity after insert remains unclear. In the destructor it is said, that

""References to the values in the map, and all iterators over this map, become invalid."" This does not really help. Please update the documentation (e.g. of the insert-methods) to clarify.

Please note that the stl explicitly guarantees that references in unordered_map remain valid after insert:

""(§23.2.5/13) The insert and emplace members shall not affect the validity of references to container elements, but may invalidate all iterators to the container"".

Thank you (;

See also

[https://stackoverflow.com/questions/16781886/can-we-store-unordered-maptiterator]


[https://stackoverflow.com/questions/45175224/will-pointer-to-an-element-in-qmap-remain-valid-after-inserting-some-more-elemen?noredirect=1&lq=1]


[https://stackoverflow.com/questions/7947082/qmap-qhash-operator-returned-reference-validity]

 

Some code:

QMap <QString, QString> map;

map.insert(""one"", ""one"");
 map.insert(""two"", ""two"");
 map.insert(""three"", ""three"");

QString *pointer = &map[""one""];
 qDebug()<<pointer;

map.insert(""aaa"", ""aaa"");
 map.insert(""bbb"", ""bbb"");
 pointer = &map[""one""];
 qDebug()<<pointer; // same as above guaranteed or not?

 

 

 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0lyc7:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add a feature to re-install a specific component,QTBUG-77325,282015,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P4: Low,,installerteam,assam,assam,05 Aug '19 10:46,05 Aug '19 12:03,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Packaging & Installer,,,,0,,,,"A re-install feature with the installer could be good addition, in case some files or components has been modified so that original versions could be restored easily.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0lpfb:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
QRegularExpression invalid pattern warning should include the pattern in question.,QTBUG-76670,280488,Suggestion,Open,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P4: Low,,peppe,akiva,akiva,26 Jun '19 03:12,26 Jun '19 05:44,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Core: QString and Unicode,,,,0,,,,"I write my QRegularExpressions, and over the course of my program, I start getting warning messages.

I have hundreds of QRegularExpressions, and I can't tell right away which actually has the invalid pattern.

The warning should at least contain the requisite amount of information to locate the object in question, preferably the pattern.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0lghz:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"26 Jun '19 04:20;thiago;Run with {{QT_FATAL_WARNINGS=1}} (or the number of warnings to skip) so the program stops and you can inspect in the debugger to find out what it was.
","26 Jun '19 04:29;akiva;That is what I did, but that was 15, 20 minutes wasted.

Running the debugger on a large program takes a long time, and will be multiplied by how many warnings you need to skip.

 ","26 Jun '19 04:57;peppe;Which API are you referring to that it's emitting the warning? match() itself?
https://code.woboq.org/qt5/qtbase/src/corelib/tools/qregularexpression.cpp.html#1238

I guess the pattern could be added there for ease of debugging. It's not going to tell you where you calling it from, though, so you'd still need a debugger...","26 Jun '19 05:17;akiva;Yeah, it was match()

With the pattern, you can search for it in your program in QtCreator, unless I suppose if it were a dynamically constructed pattern. Still, it would clue you in to where its coming from.

Another benefit is that with a pattern readily provided, you can immediately paste it into regex101.com for debugging.

 ","26 Jun '19 05:43;peppe;I won't be able to submit this this week. If you're in a hurry, this sounds like the perfect case for contributing a small patch to Qt :-)",,,,,,,,,,,,,,,,,
Allow RichText in Controls,QTBUG-76115,279316,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P4: Low,,qt.team.quick.subscriptions,maxwell31,maxwell31,30 May '19 09:23,03 Jun '19 16:17,18 Feb '21 09:41,,5.13.0 Beta4,,,,,,,,,,,,,,,,,,,,,,Quick: Controls 2,,,,0,,,,"Hi,

I would like to use rich text in controls, e.g. having O<sub>2</sub> instead of O2. It is very tedious to always make a custom delegate e.g. for a combobox or a menuitem and ensure it is in style with e.g. the material style.

All which would be necessary is to expose the textFormat property to the top level of the control.

 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0l9jb:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
QLibrary should support searching for dependencies on the same dir as the library being loaded,QTBUG-74001,274298,Suggestion,In Progress,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P4: Low,,thiago,autoantwort,autoantwort,22 Feb '19 11:58,29 Apr '19 22:18,18 Feb '21 09:41,,5.12.1,,,,,,,,,,,,,,,,,,,,,,Core: Other,,,,0,,,,"If you want to load a Library on Windows using an absolute Path and the Library has a dependency to a other Library in the same folder, you will get the error: ""Cannot load library <Path to the Library that I want to load>: The specified module could not be found."" (PS: This error message makes no sense, the file exists and is a Library, but the dependency in is same Folder is not found)
If you know the Library dependency you can load these and you will not getting this error, but you generally do not know the dependent Libraries. 
I do not know the QLibrary implementation, but I assume you are using the LoadLibrary function of the windows API. This function(https://docs.microsoft.com/de-de/windows/desktop/api/libloaderapi/nf-libloaderapi-loadlibraryexa) has the Parameter LOAD_LIBRARY_SEARCH_DLL_LOAD_DIR, if you are using this parameter in conjunction with LOAD_LIBRARY_DEFAULT_DIRS you can fix this issue. Maybe you will make this behavior optional by adding a Flag to QLibrary::LoadHints.",Windows,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Windows,,,,,,"0|i0kipz:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"22 Feb '19 22:06;thiago;Thank you for the suggestion, we can add it to {{LoadHints}}. Just to be clear: it will be a Windows-only flag. On other systems, that will be a no-op and dependencies side-by-side with your target will not load.

Will that help you?","26 Feb '19 20:37;autoantwort;Yes that would be helpful.",,,,,,,,,,,,,,,,,,,,
QSslKey (and related classes) use unsecured memory buffers,QTBUG-75011,276700,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P4: Low,,cnn,kshegunov,kshegunov,06 Apr '19 15:42,07 Apr '19 18:30,18 Feb '21 09:41,,5.13.0 Beta 1,,,,,,,,,,,,,,,,,,,,,,Network: SSL,,,,0,,,,"There's quite a few places in the SSL code (especially relevant in QSslKey) where sensitive data is passed around or manipulated in QByteArray. The memory is freed as usual by the implicit sharing mechanism through the heap manager. However this means sensitive data can (and probably does) linger in the inactive parts of the memory for an unknown amount of time. The buffers should zero-out/randomize the block before freeing it to prevent heartbleed-type vulnerabilities.

Suggestion:
Write and expose a public class for a buffer (byte array) that is suitable for holding sensitive data. As the QSsl* API allows for passing the key (and/or certificates) directly from the user code as a byte array, it is reasonable to expect that the user needs to have such a container available as well. 

Related (palliative) gerrit change here:
https://codereview.qt-project.org/#/c/257992",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0kuyf:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"add a disconnectAll function, to disconnect all signals from a sender, or a receiver",QTBUG-74691,276102,Suggestion,Open,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P4: Low,,,navis-raven,navis-raven,26 Mar '19 00:29,26 Mar '19 19:16,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Core: Object Model,,,,0,,,,"Sometimes we make connections to a receiver and lost the trace of which is connected to a receiver, and we want to disconnect all signals to this receiver before doing some actions. 

So I suggest a new function that disconnect all signals to a receiver slot. It will be like this

QObject::disconnectAllToReceiver(const QObject *rec, const char *met = nullptr)
This function disconnect all signals to the slot ""met"" of the receveiver ""rec"". And if the met=nullptr it will disconnect all signal to all slots to the receiver ""rec"". 


And the same for the sender:
QObject::disconnectAllFromSender(const QObject *sen, const char *met = nullptr)
This function will disconnect all ""met"" signals sent from the sender sen. And if met = nullptr, it will disconnect every signal that are emitted by the sender ""sen"". 


NB: Not to be confused with this function :
bool QObject::disconnect(const QObject *receiver, const char *method = nullptr) which is equivalent to bool QObject::disconnect(this, nullptr, receiver, member);
This function disconnect all signals to the receiver, but only signals from ""this"" pointer",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0krbj:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"26 Mar '19 02:08;thiago;Your {{disconnectAllFromSender}} is already possible with {{disconnect(sen, nullptr, ,nullptr, nullptr)}}. Specifying just the sender and the target method is not possible yet.

Can you give me a valid use-case wher eyou needed this?","26 Mar '19 02:57;navis-raven;I needed this when I have to create a web navigator, with tabs, and qwebengineviews on each tabs. The thing is that the load status of the current view/tab is displayed at the bottom of the navigator in a progress bar. 
 When switching from tab to tab, the current selected tab view load status is connected to the progressbar at the bottom.  But before connecting the current tab view to the progress bar, you have to ensure that all other view (in other tabs) are disconnected. And in this case I needed a QObject::disconnectAllToReceiver(const QObject *rec, const char *met = nullptr) function. ","26 Mar '19 02:59;navis-raven;""{{disconnectAllFromSender}} is already possible with {{disconnect(sen, nullptr, ,nullptr, nullptr)}}."" OK
""Specifying just the sender and the target method is not possible yet."" I didn't talk about that one but it's also a good idea. ","26 Mar '19 05:09;thiago;If you only have one tab connected to the progress bar, why do you need to disconnect all others? Only one is connected and you know which one is (the last one that was active). In fact, you should just disconnect and reconnect upon changing the active tab.

My problem is that searching isn't easy. The way that the connection lists are kept makes it easy to find them if you know the sender, since that's what is needed for signal *emission*. Disconnecting based on receiver is not easy.

After looking at the code, I will not implement searching by receiver name without a receiver object. That cannot be made significantly faster than just doing it from your side, by iterating over the possible receiver list that you must have somewhere. I need a really compelling case for why it needs to be in Qt.","26 Mar '19 05:32;navis-raven;Ok, understood. 

the solution I found is to track the previous tab/view everytime the user change a tab. ","26 Mar '19 05:33;navis-raven;If you think it is so difficult you can close this suggestion","26 Mar '19 19:16;thiago;It's a valid suggestion, but I'll set a low priority.",,,,,,,,,,,,,,,
Add support for std::ifstream and std::ofstream in QFileDevice,QTBUG-73976,274245,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P4: Low,,,markg85,markg85,21 Feb '19 12:02,21 Feb '19 20:16,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Core: I/O,,,,0,,,,"Hi,

Currently it's quite an exercise to use a third party library that uses the std::ifstream/std::ofstream (for respectively reading and writing) as Qt doesn't have any mappings to them from QFileDevice.

Or perhaps even from QIODevice, though that might be a stretch.

An example library that comes to mind is the splendid [nlohmann json library|https://github.com/nlohmann/json]. The library itself is quite easy to use, but hooking it into Qt (for instance in QSettings) is... challenging.

Note: ignore the fact that Qt has it's own JSON parsing classes. That is *not* the point of this request nor the example.

There are [ways|https://stackoverflow.com/questions/5204335/how-to-use-a-qfile-with-stdiostream] to get to an [std::streambuf|https://en.cppreference.com/w/cpp/io/basic_streambuf] object, but that requires quite a bit of boilerplate code.

Having this would just make it one more step easier to use external libraries in Qt.

 

Cheers,
Mark",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0kif3:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"21 Feb '19 20:16;thiago;Disclaimer: I do *not* plan on ever working on this. I can accept it as a contribution from someone else, but I will still be very critical in the implementation. The iostream library is recognised as not the best API that could have been created (it's from the ""let's use virtual functions and multiple inheritance for everything!"" time of C++ history), so I feel no need to accept it into Qt either.

An adaptation class is suggested, possibly using the {{streambuf}} way, like you pointed out.",,,,,,,,,,,,,,,,,,,,,
Serialise type information for all types when using QSettings::IniFormat,QTBUG-73940,274170,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P4: Low,,thiago,mitch_curtis,mitch_curtis,20 Feb '19 12:24,20 Feb '19 15:50,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Core: I/O,,,,0,,,,"Currently, type information is lost when reading settings stored in .ini files; all values will be returned as strings.

https://doc.qt.io/qt-5/qsettings.html#Format-enum shows that type information _is_ stored for types that QVariant can't convert:

{quote}
If you store types that QVariant can't convert to QString (e.g., QPoint, QRect, and QSize), Qt uses an @-based syntax to encode the type. For example:

{code}
pos = @Point(100 100)
{code}

To minimize compatibility issues, any @ that doesn't appear at the first position in the value or that isn't followed by a Qt type (Point, Rect, Size, etc.) is treated as a normal character.
{quote}

So why not do the same for all types?

Being able to use .ini is extremely convenient because you can store settings in one place on all platforms that your application targets. Having to use native formats (just to retain type information) is a pain in this regard.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0khyf:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"20 Feb '19 15:50;thiago;For compatibility with other INI-style file readers and writers.",,,,,,,,,,,,,,,,,,,,,
QSslSocket::setPrivateKey silently succeeds with invalid paths,QTBUG-72016,270190,Suggestion,Open,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P4: Low,,kshegunov,kshegunov,kshegunov,24 Nov '18 07:16,19 Feb '19 22:05,18 Feb '21 09:41,,5.11.2,,,,,,,,,,,,,,,,,,,,,,Network: SSL,,,,0,,,,"The overload of QSslSocket::setPrivateKey taking a file path will succeed silently in all cases (also applicable to setting an invalid key). Having at least one of the following three things as error reporting is not unreasonable to expect:
1) The method returns a success status (bool, probably can be added for Qt6).
2) The method emits a debug warning (qWarning).
3) The socket emits an SSL error.

The offending code is here:
[qtbase/src/network/ssl/qsslsocket.cpp|https://code.woboq.org/qt5/qtbase/src/network/ssl/qsslsocket.cpp.html#_ZN10QSslSocket13setPrivateKeyERK7QStringN4QSsl12KeyAlgorithmENS3_14EncodingFormatERK10QByteArray]

Related to [QTBUG-72015|https://bugreports.qt.io/browse/QTBUG-72015].",,,,,,,,,,,,,,,QTBUG-72015,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0jv3b:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"26 Nov '18 11:11;tpochep;Probably, not a bad idea good for Qt6. Right now, I cannot change the signature.","26 Nov '18 12:02;kshegunov;Yes for 1, but 2 is a bc change and incidentally is a one-liner. As is now the socket just raises SslHandshakeFailed as error without *any* indication as to why!","19 Feb '19 19:17;chehrlic;Assigning to [~kshegunov] since he wants to work on this.",,,,,,,,,,,,,,,,,,,
"Add Modern, Native, Hardware-Accelerated GUI API",QTBUG-71861,269887,Suggestion,Open,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P4: Low,,qt.team.graphics.and.multimedia,d3fault,d3fault,17 Nov '18 00:11,18 Feb '19 11:27,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,GUI: Painting,,,,0,,,,"The key to this entire suggestion is the word ""native"".

I think it would be a welcome addition to Qt if we had a modern, native, hardware-accelerated GUI API.

QWidgets is showing it's age and doesn't cleanly/properly separate backend from frontend. QML is non-native and doesn't cleanly/properly separate backend from frontend either (allows/encourages you to write backend logic in the frontend, via js).

Qt has it's roots in being a native software development framework. That's what attracted me to Qt in the first place, and I think many others came to Qt for that same reason.

Edit: Software-renderer fallback and compile-time syntax/etc verification of the UI definition (whether it's C++ or not) both also seem necessary. I don't recommend a ""Turing complete"" UI definition format, because then strict compile-time verification becomes extremely difficult, if not impossible (like QML today).
Edit #2: By ""Native"" I mean native CODE, ie not interpreted at runtime and not requiring a Virtual Machine to execute. I don't mean ""native STYLE"" relative to the OS/Platform.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0jt9r:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"28 Nov '18 18:09;d3fault;This is not a duplicate. QTBUG-70287 details a low-level API that ""users of"" Qt will probably never use... whereas this suggestion briefs a high-level API that ""users of"" Qt will use directly for creating GUIs. QTBUG-70287 also never mentions anything about Native code... so it's likely that whatever API is based on top of it will be QML-based (ie, not native).

The key to this entire suggestion is the word ""native"".",,,,,,,,,,,,,,,,,,,,,
Q_DECL_OVERRIDEs missing for destructors,QTBUG-73324,272938,Suggestion,Open,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P4: Low,,thiago,gbdivers,gbdivers,28 Jan '19 18:52,28 Jan '19 21:17,18 Feb '21 09:41,,5.12.0,,,,,,,,,,,,,,,,,,,,,,Core: Object Model,,,,0,,,,"When the warning ""-Winconsistent-missing-destructor-override"" is enabled in a project, there is a lot of warning in Qt's code, because there is not ""Q_DECL_OVERRIDE"" or ""override"" in destructors.

For example (Mac, Clang, Qt 5.12):
{noformat}
Qt/5.12.0/clang_64/lib/QtGui.framework/Headers/qimage.h:160: warning: '~QImage' overrides a destructor but is not marked 'override' [-Winconsistent-missing-destructor-override]
~QImage();
^
{noformat}

 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0kae7:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"28 Jan '19 21:17;thiago;This is not something we agree with, since all virtual destructors are by definition overrides. But we may need to add this to our public header checks.",,,,,,,,,,,,,,,,,,,,,
Feature Request: Have an API to convert QRect to QRectF something like toRectF(),QTBUG-73160,272558,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P4: Low,,thiago,shmittal,shmittal,21 Jan '19 08:20,21 Jan '19 08:20,18 Feb '21 09:41,,5.12.0,,,,,,,,,,,,,,,,,,,,,,Core: Other,,,,0,Reported_by_support_standard,,,"As there is a method in QRectF to convert to QRect instance, 
It would be better to have a similar method in QRect too, so that converting it to QRectF instance is easier.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Windows,,,,,,"0|i0k847:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Expose and option to set treatsFilePackagesAsDirectories in QFileDialog,QTBUG-73093,272431,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P4: Low,,qt.team.quick.subscriptions,plafosse,plafosse,17 Jan '19 02:53,18 Jan '19 14:55,18 Feb '21 09:41,,5.12.0,,,,,,,,,,,,,,,,,,,,,,Widgets: Widgets and Dialogs,,,,1,,,,"It seems as though it is not possible to open a QFileDialog on MacOS with the treatsfilepackagesasdirectories options set. This option allows users to open up directories with "".app""

Here is the documentation for the option:

[https://developer.apple.com/documentation/appkit/nssavepanel/1529384-treatsfilepackagesasdirectories?language=objc]

 

Here is someone's workaround for this missing feature.

[https://github.com/NSGod/widgetsOpenFileDialogCocoa]

 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,macOS,,,,,,"0|i0k7c7:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Make QFileSystemMetaData public API,QTBUG-72840,271812,Suggestion,Open,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P4: Low,,,markg85,markg85,03 Jan '19 12:38,03 Jan '19 20:06,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Core: I/O,,,,0,,,,"Hi,

I've just discovered ""QFileSystemMetaData"" and find it very convenient. The usecase i have is having a stat call (to be precise, in KDE's KIO within the File slave). Right now we use QT_STATBUF. But other then that it's plain c stat struct handling. That works fine as long as there are no changes, but now with the ""new"" statx call i want to implement ""birthtime"" and that alone requires a quite thorough partly rewrite + it also has to work without (aka stat64).

With QFileSystemMetaData we could just do a statx call and fill that object using ::fillFromStatxBuf or fallback to ::fillFromStatBuf when statx isn't available. The rest of the implementation would become completely generic (it's not now) when using QFileSystemMetaData! That would be a great benefit.

Using the private API as-is would be a temporary (till it becomes public) solution. Not sure how acceptable that is for the upstream reviewers though. I rather not try this route.

Not using it (we want birthtime support) is also possible, but then our code would have to duplicate quite a bit of logic that Thiago went through in implementing birthtime for QFile (sometime around Qt 5.10).

Best regards,
Mark Gaiser",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0k44v:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"03 Jan '19 19:58;thiago;That API will change completely in the near future.","03 Jan '19 19:59;thiago;Unassigning. I don't plan on making it public. But I do have changes to it, so don't use it even in private code.","03 Jan '19 20:06;markg85;Could you make the API fairly stand-alone then? As it might make sense to copy it over to the KDE side and use it there once you're done with the edits?",,,,,,,,,,,,,,,,,,,
Add LowerCase letters to Qt::Key enumerator.,QTBUG-72361,270862,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P4: Low,,,akiva,akiva,06 Dec '18 22:07,07 Dec '18 06:59,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Core: QString and Unicode,,,,0,,,,"(Sorry for the poor code formatting. Whatever tool this is, it keeps deleting my line breaks, changing text randomly to ""unknown macro"", and placing curly braces in weird places. )

consider the following code:
{code}
const QMetaEnum &keyEnum = QMetaEnum::fromType<Qt::Key>();
QTextStream(stdout) << keyEnum.valueToKey(getchar()) << endl;
{code}
The only thing you do not really see in this code is that getchar() from <stdio.h> no longer waits for a newline before pushing on its integer to me. That being achieved though, I have been able to start building a curses-esque type of library. This means I can do things like 
{code}
switch(ch) { case Key_Escape: endProgram(); }
{code}

As getchar() is accurately interpreted by your enumerator, even on my highly modified layout. What is missing however are the lower case letters, and my request is that they should be added so I can nicely reference them in switch statements, and for debugging purposes using  

QMetaEnum.valueToKey

",,,,,,,,,,,,,,,,,,,"06 Dec '18 22:29;akiva;website bug qt.mp4;https://bugreports.qt.io/secure/attachment/78880/website+bug+qt.mp4",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Linux/X11,,,,,,"0|i0jyqv:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"06 Dec '18 22:43;thiago;Note that this means adding for ALL keys, like:
{code}
        Key_AE = 0x0c6,
        Key_Ccedilla = 0x0c7,
        Key_Egrave = 0x0c8,
{code}

This enum was created for dealing with key caps, not text. See QKeyEvent, both in {{key()}} where this enum is used, alongside the modifiers, and {{text()}} which returns the actual text.","07 Dec '18 06:08;akiva;True. Would adding the Latin1 set introduce issues to that which currently depends upon it?

Tertiary to this,  in QKeyEvent::text(); The class is QT += gui dependent, unless I am omitting an obvious solution, this leads Console Developers from having to import or invent their own solution. ","07 Dec '18 06:59;thiago;Not that I can tell, but it would be quite surprising to have two enums that different only in case. QKeyEvent is GUI because Qt has no console support.

Please give me a GUI-related use-case in order to accept this.",,,,,,,,,,,,,,,,,,,
add QML API for window mask,QTBUG-71951,270055,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P4: Low,,qt.team.quick.subscriptions,srutledg,srutledg,21 Nov '18 12:02,21 Nov '18 12:08,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Quick: Core Declarative QML ,,,,0,,,,"The mask could perhaps be an image (where alpha < threshold makes that part of the window transparent) or a Shape or some sort of rendered layer or maybe just any part of the window that is transparent.

Since most window systems do compositing, it's already been possible to have visually transparent windows since Qt 5.0.  And since  5.11, a MouseArea or a Pointer Handler can avoid handling events outside a masked shape (using Item.containmentMask).  But setting the window mask would allow the mouse and touch events to fall through; and it would also provide visual masking on non-compositing window managers.

This isn't very urgent since it's easy enough to do in C++ already.  But we have a number of open bugs about window masking not working correctly on various platforms and in various situations.  Making the mask available in QML would exacerbate those.",,,,,,,,,,QTBUG-59436,QTBUG-53575,QTBUG-64229,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0ju9r:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Stylesheets: Add pixel support for background-position property,QTBUG-71786,269691,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P4: Low,,qt.team.quick.subscriptions,pekarjal,pekarjal,14 Nov '18 09:45,14 Nov '18 09:46,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Widgets: Style Sheets,,,,1,Reported_by_support_standard,,,"Currently the background-position property in stylesheets only supports ""left | right | top | bottom"" values, but it would be great to have a pixel support for it, like ""background-position: 4px 10px"" ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0js2f:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Emit a signal when a QNetworkReply is actually started,QTBUG-71698,269524,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P4: Low,,cnn,andysh,andysh,09 Nov '18 14:21,10 Nov '18 05:30,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Network,,,,0,Reported_by_support_standard,,,"Currently, QNetworkReply has isRunning() which is always !isFinished, but it is possible that it has not been started yet if it is waiting for other requests to be finished first so that it start a new one. Therefore having a means to know if has started by way of a function and a signal indicating it would enable users to keep track if they have a lot of requests on the go.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0jr1r:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"09 Nov '18 15:02;tpochep;Sorry, I failed to parse what you are asking for here. What's the use of this feature? You don't have to wait before starting a new request.","09 Nov '18 15:59;inmarkus;Cause only 6 requests are send out in parallel, currently you do not know if your request is actually send out. 

 

QNetworkAccessManager Class documentation:

""Note: QNetworkAccessManager queues the requests it receives. The number of requests executed in parallel is dependent on the protocol. Currently, for the HTTP protocol on desktop platforms, 6 requests are executed in parallel for one host/port combination.""

 

QNetworkReply is a black box. You just know when it was created and when it finishes but you do not know in which state it is. 

 

Therefore currently it is very difficult to e.g. measure how long a request actually needs to be answered by the server. This feature would allow to answer the questions when is a request actually send out and how long does the server needs to answer?

 

 

 ",,,,,,,,,,,,,,,,,,,,
"It would be nice if feature like ""google translate"" is available with QtWebEngine",QTBUG-71594,269336,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P4: Low,,qt_webengine_team,irfan.omair@digia.com,irfan.omair@digia.com,06 Nov '18 00:19,06 Nov '18 00:29,18 Feb '21 09:41,,5.11.0,,,,,,,,,,,,,,,,,,,,,,WebEngine,,,,0,,,,"It would be nice if QtWebengine has some way to have feature like ""Google translate"" like google chrome browser shows if the web page is in other language.  ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0jpwn:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[Enhancement?] icon theme reload,QTBUG-71040,268141,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P4: Low,,qt.team.quick.subscriptions,damianatorrpm,damianatorrpm,09 Oct '18 15:55,11 Oct '18 08:31,18 Feb '21 09:41,,5.12.0 Beta 1,,,,,,,,,,,,,,,,,,,,,,Quick: Controls 2,,,,0,,,,"{code:java}
    MenuItem {
        text: ""Test""
        icon.name : ""media-removable-symbolic""
       //above changes to corresponding theme after app restart
      //is it possible to do so during run-time?
     //is a workaround to achieve  such behavior available?
    }
{code}
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Linux/Other display system,Linux/Wayland,Linux/X11,,,,"0|i0jilj:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"11 Oct '18 07:29;damianatorrpm;That is not a duplicate.","11 Oct '18 07:33;mitch_curtis;What's the use case?","11 Oct '18 07:55;damianatorrpm;Change system icon theme. App shows current system icon theme. Like GNOME","11 Oct '18 07:59;mitch_curtis;No I mean what is the use case that necessitates being able to ""reload"" themes at runtime?

Are you saying that the user changes the system theme through the OS while the app is running and you want the theme in a Qt Quick application to be reloaded when that happens?","11 Oct '18 08:18;damianatorrpm;Exactly","11 Oct '18 08:31;mitch_curtis;Unfortunately I have no idea what would be involved in making that happen, nor do I know of any workarounds.",,,,,,,,,,,,,,,,
Fall back to width/height if the child in a Pane has 0 for implicitWidth/implicitHeight,QTBUG-71026,268109,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P4: Low,,qt.team.quick.subscriptions,andysh,andysh,09 Oct '18 09:03,10 Oct '18 07:22,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Quick: Controls 2,,,,1,Reported_by_support_standard,,,Fall back to width/height if the child in a Pane has 0 for implicitWidth/implicitHeight to save having to ensure that it is always specified for items that have no default implicitWidth/implicitHeight value.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0jief:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"09 Oct '18 09:08;pingu;If you want a pane with a rectangle inside of it you have to define the implicit sizes explicitly. That does not look like a sane API design decision at first sight.","09 Oct '18 11:28;mitch_curtis;As I understand it, calculating implicit size from explicit size is a bad idea.

Having to specify implicit sizes is quite common with Qt Quick Controls 2, so I would lean towards issuing a warning rather than changing the behaviour, especially if it means *all* controls would have to be changed to behave this way.","09 Oct '18 11:31;mitch_curtis;You can also set contentWidth/contentHeight if it's for some reason not possible to set implicitWidth/Height.","09 Oct '18 11:39;pingu;My point is not that it is not possible to explicit specify the implicit size. It is a wired API design decision, you have to specify the implicit size explicitly :(. I thought that Items have implicit sizes if they can calculate their size automatically (like Text) and explicit sizes if there is no need to specify them. And yes I think this applies to all controls.","10 Oct '18 07:17;mitch_curtis;Typed this out yesterday but forgot to post it.

{quote}
My point is not that it is not possible to explicit specify the implicit size.
{quote}
I understand - I only mentioned the contentWidth/contentHeight for completeness.

{quote}
It is a wired API design decision, you have to specify the implicit size explicitly.
{quote}
I'm not the best person to explain the reasons for this, but I know that there is a reason for it. 

However, personally I don't think there's really an issue: instead of specifying width and height, you specify implicitWidth and implicitHeight. implicitWidth and implicitHeight are the natural, default size of the item, and width and height are often manipulated and overwritten as the user interacts with the application (especially by resizing the window when using layouts). That's why we can't let users set the width and height of items managed by a layout: because those properties are overwritten by the layout engine every time it lays out items, so you have to use implicitWidth/Height or Layout.preferredWidth/Height. The same paradigm will be used in the upcoming SplitView, which does its own layouting.","10 Oct '18 07:19;mitch_curtis;{quote}
However, personally I don't think there's really an issue
{quote}
Having said that, I understand that people new to the API will have a different perspective. We might be able to add a warning to make it more obvious.","10 Oct '18 07:22;pingu;Thanks for your quick explanation!",,,,,,,,,,,,,,,
Code specification,QTBUG-88631,308166,Suggestion,Open,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P5: Not important,,,bulongwei,bulongwei,19 Nov '20 06:38,03 Jan '21 17:37,18 Feb '21 09:41,,5.15.0 RC2,,,,,,,,,,,,,,,,,,,,,,SVG Support,,,,0,,,," in line 318 of the  qt-everywhere-src-5.15.1/qtsvg/examples/embedded/weatherinfo/weatherinfo.cpp

The code format is not standardized。

Because there are no spaces in) and {。

 ",,,,,,,,,,,,,,,,,,,"19 Nov '20 06:38;bulongwei;202011191438.png;https://bugreports.qt.io/secure/attachment/100299/202011191438.png",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0prlj:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"03 Jan '21 17:37;chehrlic;Feel free to provide a patch.",,,,,,,,,,,,,,,,,,,,,
It would be nice if Qt can get some event when Mac native menu items are clicked,QTBUG-82594,294588,Suggestion,Open,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P5: Not important,,qt.team.quick.subscriptions,irfan.omair@digia.com,irfan.omair@digia.com,28 Feb '20 19:23,18 May '20 16:35,18 Feb '21 09:41,,5.14.0,,,,,,,,,,,,,,,,,,,,,,QPA,Widgets: Main Window,,,1,Reported_by_support_standard,,,"In Mac if Qt application has menu item named ""View"" OSX adds its own menu item like ""Show Tab Bar"" , ""Enter Full Screen""

There is no way at the moment for user to handle these menu item clicks to do something. Even nativeEventFilter() does not give anything.

 

It would be nice if Qt can provide some event/signal for this.",Desktop,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,macOS,,,,,,"0|i0nnlr:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"18 May '20 16:02;vestbo;The enter full screen menu item should result in a window state change event.","18 May '20 16:35;kflow;A notification when the user selected show tab bar is necessary plus support for ""+"" to add an other window tab.",,,,,,,,,,,,,,,,,,,,
ensureCursorVisible() should flash the cursor,QTBUG-83147,296269,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P5: Not important,,esabraha,bhaller,bhaller,27 Mar '20 15:26,30 Mar '20 10:32,18 Feb '21 09:41,,5.9.8,,,,,,,,,,,,,,,,,,,,,,GUI: Text handling,,,,0,,,,"After a call to ensureCursorVisible(), it can be hard to find where the cursor actually is, especially if it's an insertion point.  It would be helpful to visually flash the cursor so it's more visible. Note that macOS does this when you do Jump To Selection in, e.g., TextEdit, but Qt does not; so doing this on macOS, at least, would be a matter of conformance to the platform standard.  Maybe it would be nice to do it on all platforms, but it should at least happen on macOS.

This bug was split out from QTBUG-83105, by request.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,macOS,,,,,,"0|i0nvpz:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add hook to override QPlatformTheme::SystemIconThemeName for app,QTBUG-83000,295951,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P5: Not important,,,autiarth,autiarth,22 Mar '20 12:22,24 Mar '20 12:02,18 Feb '21 09:41,,5.14.1,,,,,,,,,,,,,,,,,,,,,,GUI: Look'n'Feel,QPA,Quick: Controls 2,,0,,,,"I would love to see an option making Qt able to change
{noformat}
QPlatformTheme::SystemIconThemeName{noformat}
on its own, without having to build Qt with Glib/GTK support.

 

Such an implementation could be done for QtQuickControls directly inside the *_qtquickcontrols2.conf_* file, with something like

 
{noformat}
[Controls]
Style=Material
 
[Material]
Theme=Light
Accent=Teal
Palette\Window=#000
Icon\ThemeName=Breeze
{noformat}
 

Then the application would look inside *_$XDG_DATA_DIRS/icons_* or *_$QT_QUICK_CONTROLS_ICON_PATH_* to find the right icon theme.","OS : ArchLinux

DE : Gnome",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,santtuahonen,Linux/Wayland,Linux/X11,,,,,"0|i0nttz:",9223372036854775807,9223372036854775807,,,,vestbo,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add functions to convert to and from Windows  style paths to QDir,QTBUG-79737,287847,Suggestion,Open,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P5: Not important,,,poikelin,poikelin,04 Nov '19 11:33,04 Nov '19 17:12,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Core: I/O,,,,0,,,,"Sometimes it is necessary to handle Windows style paths on UNIX like systems. QDir has toNativeSeparators(), fromNativeSeparators() and cleanPath() functions that do this kind of conversions compatible with the current platform. However, sometimes these same conversion could be needed to convert Windows style paths elsewhere, so there could be new functions to convert Windows style paths to native paths (fromWindowsToNativeSeparators()/fromNativeToWindowsSeparators() for example).",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0mlrz:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"04 Nov '19 16:39;buddenha;this is a fairly relevant use case for qt creator's remote debugging functionality, in particular when it comes to qprocess. however, i've so far considered this a niche use case and refrained from suggesting to upstream it. would you mind elaborating on ""sometimes""?","04 Nov '19 17:12;thiago;I'm also interested. I don't understand how this can be useful, if the application is not running *on* the system affected.

The applications on the remote system (Windows) should always interact with other applications using full URLs or using native paths. The internal representation should not appear.

And if it's just pure slash replacement, then {{QStirng::replace}} already exists.",,,,,,,,,,,,,,,,,,,,
SetSocketKeepAlive for QAbstractSocket,QTBUG-74118,274812,Suggestion,Open,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P5: Not important,,cnn,lachrymology,lachrymology,28 Feb '19 09:38,07 Mar '19 09:17,18 Feb '21 09:41,,5.11,5.12.0,5.13.0 Alpha 1,,,,,,,,,,,,,,,,,,,,Network: Sockets,,,,0,,,,"Hi all,

currently there is a little problem with QAbstractSocket which should be eliminated in the near future for a better stability.

See: [https://stackoverflow.com/questions/10445122/qtcpsocket-state-always-connected-even-unplugging-ethernet-wire]

In short: A opened socket will not detect, if a connection is unreachable / closed / disconnected. Afaik the OS (Windows) will do this after 2h. This duration is inacceptable.

The sockets within the chromium engine have such an automatic detection.

See: SetTCPKeepAlive within qtwebengine\src\3rdparty\chromium\net\socket\tcp_socket_win.cc

and see: SetTCPKeepAlive within Qt\5.11.2\qtwebengine\src\3rdparty\chromium\net\socket\tcp_socket_posix.cc

 

A Qt based implementation would look like this:
{code:java}
// Includes for SetSocketKeepAlive
#if defined _WINDOWS
 #include <winsock2.h>
 #include <Mstcpip.h>
#else
 #include <sys/socket.h>
 #include <netinet/tcp.h>
#endif


/*!
 * \brief SetSocketKeepAlive
 * KeepAlive mechanism for sockets
 *
 * \param socket
 * \param enable
 * \param idletime
 * \param interval
 *
 * \return bool
 */
bool GlobalServiceData::SetSocketKeepAlive(QAbstractSocket * socket, bool enable /*= true*/, unsigned idletime /*= 5*/, unsigned interval /*= 1*/)
{
 int fd = socket->socketDescriptor();
#if defined _WINDOWS
 // Adopted from: Qt\5.11.2\qtwebengine\src\3rdparty\chromium\net\socket\tcp_socket_win.cc 

 tcp_keepalive keepalive_vals = {
  enable ? 1u : 0u,  // TCP keep-alive on.
  idletime * 1000,  // Delay time before sending first TCP keep-alive packet.
  interval * 1000,  // Delay time between sending TCP keep-alive packets.
 };
 DWORD bytes_returned = 0xABAB;
 int rv = WSAIoctl(fd, SIO_KEEPALIVE_VALS, &keepalive_vals, sizeof(keepalive_vals), NULL, 0, &bytes_returned, NULL, NULL);

 // Disregard any failure in disabling nagle or enabling TCP Keep-Alive.
 return rv == 0;

#else

 // Adopted from: Qt\5.11.2\qtwebengine\src\3rdparty\chromium\net\socket\tcp_socket_posix.cc

 // Enabling TCP keepalives is the same on all platforms.
 int on = enable ? 1 : 0;
 if (setsockopt(fd, SOL_SOCKET, SO_KEEPALIVE, &on, sizeof(on))) { return false; }

 // If we disabled TCP keep alive, our work is done here.
 if (!enable) return true;

 // The following part only applies to OS_LINUX and OS_ANDROID
 // Setting the keepalive interval varies by platform.
 // Set seconds until first TCP keep alive.
 if (setsockopt(fd, SOL_TCP, TCP_KEEPIDLE, &idletime, sizeof(idletime))) { return false; }

 // Set seconds between TCP keep alives.
 if (setsockopt(fd, SOL_TCP, TCP_KEEPINTVL, &interval, sizeof(interval))) { return false; }

 return true;
#endif
}
{code}
Would be nice to see this feature in an upcoming release of Qt implemented.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,Windows,,,,,,"0|i0kklr:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"07 Mar '19 08:52;lachrymology;How can such a ticket get the priority ""Not important""?

Such an option is available on many operating systems, therefore it can't be that unimportant.","07 Mar '19 09:15;vhilshei;Hi [~lachrymology], priorities are to some degree relative, and we think that other things on the backlog are more important than adding this feature. Since there is a fairly straight-foward way to implement this behaviour using native APIs (as per the code in the description), it's not very high on the list for things we want to focus on for Qt.

Of course, feel free to grab this ticket and contribute an API and implementation through our contribution process on gerrit (codereview.qt-project.org).","07 Mar '19 09:17;lachrymology;Hi [~vhilshei]

thanks for the explanation and the hints.",,,,,,,,,,,,,,,,,,,
QSslSocket::setLocalCertificate silently succeeds with invalid paths,QTBUG-72015,270189,Suggestion,Open,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P5: Not important,,kshegunov,kshegunov,kshegunov,24 Nov '18 07:12,19 Feb '19 20:09,18 Feb '21 09:41,,5.11.2,,,,,,,,,,,,,,,,,,,,,Some future release,Network: SSL,,,,1,,,,"The overload of QSslSocket::setLocalCertificate taking a file path will succeed silently in all cases (also applicable to setting a null certificate). Having at least one of the following three things as error reporting is not unreasonable to expect:
 1) The method returns a success status (bool, probably can be added for Qt6).
 2) The method emits a debug warning (qWarning).
 3) The socket emits an SSL error.

The offending code is here:
[qtbase/src/network/ssl/qsslsocket.cpp|https://code.woboq.org/qt5/qtbase/src/network/ssl/qsslsocket.cpp.html#_ZN10QSslSocket19setLocalCertificateERK7QStringN4QSsl14EncodingFormatE]",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,All,,,,,,"0|i0jv33:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"26 Nov '18 11:17;tpochep;None of setters in QSslSocket at the moment does any validation. Ideally, we can, probably, set an error code to QAbstractSocket::SslInvalidUserData and provide a textual description (and then maybe emit QAbstractsSocket::error()). However, this is a change that probably makes sense in Qt 6 and a bit late for Qt 5. Also, normally QSslSocket created, configured, that an application calls connectToHostEncrypted, then connects signals/slots - so the configuration phase is considered to be always success, even if it's not. Anyway, having invalid key (isNull() will not allow you to start a handshake on the server side, so you'll have some diagnostic anyway, not setting certificate chain when it's needed - would also prevent you from making a handshake).","26 Nov '18 12:16;kshegunov;This one and its sister bugreport's method both do, they just provide no indication for why the failure. Even in this case I get the QAbstractsSocket::error signal with SslHandshakeFailed, the problem is I didn't know why so I wasted my time tracking it down.

> Also, normally QSslSocket created, configured, that an application calls connectToHostEncrypted, then connects signals/slots - so the configuration phase is considered to be always success, even if it's not.

That's deep. If you assume that, why do you provide delayed handshake capabilities then? How should I know if the key was bogus, or the certificate was bad? I'm not asking miracles here, but a simple debug warning so I know there's something wrong while I work. I wasted  a day for simple letter just missing.","26 Nov '18 14:44;VRonin;Can I ask how this can be ""out of scope""?
Please reopen the ticket in case someone wants to fix the problem, if you'd prefer it going into Qt6 that's totally fine, just set the fix version to it, no need to shut a reasonable request down","19 Feb '19 19:17;chehrlic;Assigning to [~kshegunov] since he wants to work on this.",,,,,,,,,,,,,,,,,,
Implement the International Fixed Calendar and use it,QTBUG-72882,271892,Suggestion,Reported,QTBUG,Qt,software,laknoll,"SCM can be found at the Git repository through http://code.qt.io/cgit/.
News on Qt development and releases can be found at http://www.qt.io",https://www.qt.io/qt-framework/,P5: Not important,,Eddy,markg85,markg85,07 Jan '19 10:24,07 Jan '19 16:16,18 Feb '21 09:41,,,,,,,,,,,,,,,,,,,,,,,,Core: Date/Time,,,,0,,,,"Hi,

Well, this is probably wishful thinking but i wanted to throw it out there to let you folks know.

It's already *well* over 100 years ago that far superior calendar proposals have been made to replace the defunct Gregorian calendar. There seem to be 2 leading contenders [1, 2] where [2] very nearly made it to the new calendar sometime after world war 2! Just to show that this stuff isn't nonsense. It will change sooner or later as the Gregorian calendar is just terrible inconvenient.

For instance, in [1] i can say ""make an appointment on the 5th next month"" and i will easily remember that the 5th is a Thursday as every 5th is.

Both calendar proposals are compatible in years with Gregorian as both use the same leap year rules. Personally, i find that to be a flaw but i can see why that inconvenience would be preferred to keep to stay backwards compatible with Gregorian.

Right now, QDate is internally implemented in Gregorian. That can change to the [1] where you have 13 months and each month is exactly 28 days. That eases calculations. See [1] for the rules on leap year days and world day. 

My suggestion is to implement QDate internals as [1].
To go from [1] to Gregorian would merely be executing a conversion formula.

Funny perk. Every month would get a Friday 13th :)

Eventually there should be classes to expose calendar specifics, like world day. But right now it is sufficient to merely have the back end work with either 1 or 2 and to the public expose QDate as-is which internally would convert the given date.

[1] https://en.wikipedia.org/wiki/International_Fixed_Calendar
[2] https://en.wikipedia.org/wiki/World_Calendar",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,9223372036854775807,,,,,,,,,"0|i0k4mn:",9223372036854775807,9223372036854775807,,,,,,,,,,,,,,"07 Jan '19 16:16;Eddy;bq. Right now, QDate is internally implemented in Gregorian.

In fact {{QDate}} is implemented as a simple ""Julian Day number"", counting days since a start-point somewhat before the start of written history.  Its APIs map this to a Gregorian date.

We have an [in-bound contribution|https://codereview.qt-project.org/182341] of support for other calendars.
It should then be possible to implement whatever calendar you like on top of it (if it isn't, please comment on the review there explaining the problem); you'll be able to do so as a plug-in or we might be willing to take an implementation in as a standardly-supported calendar.
",,,,,,,,,,,,,,,,,,,,,
